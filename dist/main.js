/*! For license information please see main.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.QuillToWord=t():e.QuillToWord=t()}(self,(function(){return e={50:function(e){var t;"undefined"!=typeof self&&self,t=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=138)}([function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(139)),n(r(140)),n(r(52)),n(r(141)),n(r(157)),n(r(158)),n(r(24))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(50)),n(r(215)),n(r(21)),n(r(3)),n(r(36)),n(r(230))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(88)),n(r(89)),n(r(90)),n(r(91)),n(r(92)),n(r(238)),n(r(93))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(17)),n(r(9)),n(r(161)),n(r(162)),n(r(164)),n(r(33)),n(r(212)),n(r(19)),n(r(32)),n(r(214))},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=r(15),s=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(14);o.inherits=r(7);var i=r(56),a=r(28);o.inherits(h,i);for(var u=s(a.prototype),c=0;c<u.length;c++){var l=u[c];h.prototype[l]||(h.prototype[l]=a.prototype[l])}function h(e){if(!(this instanceof h))return new h(e);i.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",p)}function p(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";(function(e){var n=r(143),s=r(144),o=r(54);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n),u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t),e}(e,t,r,n):"string"==typeof t?function(e,t,r){if("string"==typeof r&&""!==r||(r="utf8"),!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|f(t,r),s=(e=a(e,n)).write(t,r);return s!==n&&(e=e.slice(0,s)),e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=a(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?a(e,0):p(e,t);if("Buffer"===t.type&&o(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|d(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function f(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return X(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(e).length;default:if(n)return X(e).length;t=(""+t).toLowerCase(),n=!0}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return S(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return C(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function w(e,t,r,n,s){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=s?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:y(e,t,r,n,s);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,n,s);throw new TypeError("val must be string, number or Buffer")}function y(e,t,r,n,s){var o,i=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,r/=2}function c(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(s){var l=-1;for(o=r;o<a;o++)if(c(e,o)===c(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*i}else-1!==l&&(o-=o-l),l=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(c(e,o+p)!==c(t,p)){h=!1;break}if(h)return o}return-1}function b(e,t,r,n){r=Number(r)||0;var s=e.length-r;n?(n=Number(n))>s&&(n=s):n=s;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var i=0;i<n;++i){var a=parseInt(t.substr(2*i,2),16);if(isNaN(a))return i;e[r+i]=a}return i}function _(e,t,r,n){return z(X(t,e.length-r),e,r,n)}function v(e,t,r,n){return z(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return v(e,t,r,n)}function T(e,t,r,n){return z(U(t),e,r,n)}function E(e,t,r,n){return z(function(e,t){for(var r,n,s,o=[],i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,s=r%256,o.push(s),o.push(n);return o}(t,e.length-r),e,r,n)}function C(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);for(var n=[],s=t;s<r;){var o,i,a,u,c=e[s],l=null,h=c>239?4:c>223?3:c>191?2:1;if(s+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(o=e[s+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=e[s+1],i=e[s+2],128==(192&o)&&128==(192&i)&&(u=(15&c)<<12|(63&o)<<6|63&i)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=e[s+1],i=e[s+2],a=e[s+3],128==(192&o)&&128==(192&i)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&i)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),s+=h}return function(e){var t=e.length;if(t<=P)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=P));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,s=0,o=Math.min(r,n);s<o;++s)if(e[s]!==t[s]){r=e[s],n=t[s];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),s=0;for(r=0;r<e.length;++r){var i=e[r];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,s),s+=i.length}return n},u.byteLength=f,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,s){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),t<0||r>e.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&t>=r)return 0;if(n>=s)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(s>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),a=Math.min(o,i),c=this.slice(n,s),l=e.slice(t,r),h=0;h<a;++h)if(c[h]!==l[h]){o=c[h],i=l[h];break}return o<i?-1:i<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return w(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return w(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var s=this.length-t;if((void 0===r||r>s)&&(r=s),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return v(this,e,t,r);case"latin1":case"binary":return x(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function S(e,t,r){var n="";r=Math.min(e.length,r);for(var s=t;s<r;++s)n+=String.fromCharCode(127&e[s]);return n}function O(e,t,r){var n="";r=Math.min(e.length,r);for(var s=t;s<r;++s)n+=String.fromCharCode(e[s]);return n}function R(e,t,r){var n,s=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>s)&&(r=s);for(var o="",i=t;i<r;++i)o+=(n=e[i])<16?"0"+n.toString(16):n.toString(16);return o}function k(e,t,r){for(var n=e.slice(t,r),s="",o=0;o<n.length;o+=2)s+=String.fromCharCode(n[o]+256*n[o+1]);return s}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,r,n,s,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n){t<0&&(t=65535+t+1);for(var s=0,o=Math.min(e.length-r,2);s<o;++s)e[r+s]=(t&255<<8*(n?s:1-s))>>>8*(n?s:1-s)}function D(e,t,r,n){t<0&&(t=4294967295+t+1);for(var s=0,o=Math.min(e.length-r,4);s<o;++s)e[r+s]=t>>>8*(n?s:3-s)&255}function F(e,t,r,n,s,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,o){return o||F(e,0,r,4),s.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,o){return o||F(e,0,r,8),s.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var s=t-e;r=new u(s,void 0);for(var o=0;o<s;++o)r[o]=this[o+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],s=1;t>0&&(s*=256);)n+=this[e+--t]*s;return n},u.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return n>=(s*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,s=1,o=this[e+--n];n>0&&(s*=256);)o+=this[e+--n]*s;return o>=(s*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),s.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),s.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),s.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),s.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t|=0,r|=0,n||M(this,e,t,r,Math.pow(2,8*r)-1,0);var s=1,o=0;for(this[t]=255&e;++o<r&&(s*=256);)this[t+o]=e/s&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t|=0,r|=0,n||M(this,e,t,r,Math.pow(2,8*r)-1,0);var s=r-1,o=1;for(this[t+s]=255&e;--s>=0&&(o*=256);)this[t+s]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):D(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var s=Math.pow(2,8*r-1);M(this,e,t,r,s-1,-s)}var o=0,i=1,a=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var s=Math.pow(2,8*r-1);M(this,e,t,r,s-1,-s)}var o=r-1,i=1,a=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):D(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var s,o=n-r;if(this===e&&r<t&&t<n)for(s=o-1;s>=0;--s)e[s+t]=this[s+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<o;++s)e[s+t]=this[s+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var s=e.charCodeAt(0);s<256&&(e=s)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var i=u.isBuffer(e)?e:X(new u(e,n).toString()),a=i.length;for(o=0;o<r-t;++o)this[o+t]=i[o%a]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function X(e,t){var r;t=t||1/0;for(var n=e.length,s=null,o=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!s){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&o.push(239,191,189);continue}s=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(t-=3)>-1&&o.push(239,191,189);if(s=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(L,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,r,n){for(var s=0;s<n&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}}).call(t,r(4))},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),(n=t.SpaceType||(t.SpaceType={})).DEFAULT="default",n.PRESERVE="preserve"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(32),o=r(67),i=r(33),a=r(68),u=r(69),c=r(19);class l extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:rPr"),!e)return;e.bold&&this.push(new o.Bold),(void 0===e.boldComplexScript&&e.bold||e.boldComplexScript)&&this.push(new o.BoldComplexScript),e.italics&&this.push(new o.Italics),(void 0===e.italicsComplexScript&&e.italics||e.italicsComplexScript)&&this.push(new o.ItalicsComplexScript),e.underline&&this.push(new c.Underline(e.underline.type,e.underline.color)),e.emphasisMark&&this.push(new s.EmphasisMark(e.emphasisMark.type)),e.color&&this.push(new o.Color(e.color)),e.size&&this.push(new o.Size(e.size));const t=void 0===e.sizeComplexScript||!0===e.sizeComplexScript?e.size:e.sizeComplexScript;t&&this.push(new o.SizeComplexScript(t)),e.rightToLeft&&this.push(new o.RightToLeft),e.smallCaps&&this.push(new o.SmallCaps),e.allCaps&&this.push(new o.Caps),e.strike&&this.push(new o.Strike),e.doubleStrike&&this.push(new o.DoubleStrike),e.subScript&&this.push(new a.SubScript),e.superScript&&this.push(new a.SuperScript),e.style&&this.push(new u.Style(e.style)),e.font&&("string"==typeof e.font?this.push(new i.RunFonts(e.font)):"name"in e.font?this.push(new i.RunFonts(e.font.name,e.font.hint)):this.push(new i.RunFonts(e.font))),e.highlight&&this.push(new o.Highlight(e.highlight));const r=void 0===e.highlightComplexScript||!0===e.highlightComplexScript?e.highlight:e.highlightComplexScript;r&&this.push(new o.HighlightComplexScript(r)),e.characterSpacing&&this.push(new o.CharacterSpacing(e.characterSpacing));const n=e.shading||e.shadow;n&&this.push(new o.Shading(n.type,n.fill,n.color));const l=void 0===e.shadingComplexScript||!0===e.shadingComplexScript?n:e.shadingComplexScript;l&&this.push(new o.ShadowComplexScript(l.type,l.fill,l.color))}push(e){this.root.push(e)}}t.RunProperties=l},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(264)),n(r(37))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"}}}t.DocumentAttributes=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(1)),n(r(261)),n(r(279)),n(r(338)),n(r(132)),n(r(48)),n(r(71)),n(r(113)),n(r(23)),n(r(339)),n(r(0)),n(r(47)),n(r(44)),n(r(131)),n(r(130)),n(r(346))},function(e,t){var r,n,s=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],l=!1,h=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var e=a(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new f(e,t)),1!==c.length||l||a(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(t,r(6).Buffer)},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,s){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,i,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,n)}));case 4:return t.nextTick((function(){e.call(null,r,n,s)}));default:for(o=new Array(a-1),i=0;i<o.length;)o[i++]=arguments[i];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(t,r(13))},function(e,t,r){var n=r(6),s=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return s(e,t,r)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=i),o(s,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=s(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(66),o=r(18),i=r(160),a=r(9),u=r(70);var c;!function(e){e.CURRENT="CURRENT",e.TOTAL_PAGES="TOTAL_PAGES",e.TOTAL_PAGES_IN_SECTION="TOTAL_PAGES_IN_SECTION"}(c=t.PageNumber||(t.PageNumber={}));class l extends n.XmlComponent{constructor(e){if(super("w:r"),this.properties=new a.RunProperties(e),this.root.push(this.properties),e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case c.CURRENT:this.root.push(new o.Begin),this.root.push(new i.Page),this.root.push(new o.Separate),this.root.push(new o.End);break;case c.TOTAL_PAGES:this.root.push(new o.Begin),this.root.push(new i.NumberOfPages),this.root.push(new o.Separate),this.root.push(new o.End);break;case c.TOTAL_PAGES_IN_SECTION:this.root.push(new o.Begin),this.root.push(new i.NumberOfPagesSection),this.root.push(new o.Separate),this.root.push(new o.End);break;default:this.root.push(new u.Text(t))}else e.text&&this.root.push(new u.Text(e.text))}break(){return this.root.splice(1,0,new s.Break),this}}t.Run=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.BEGIN="begin",e.END="end",e.SEPARATE="separate"}(s||(s={}));class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:fldCharType",dirty:"w:dirty"}}}class i extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.BEGIN,dirty:e}))}}t.Begin=i;class a extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.SEPARATE,dirty:e}))}}t.Separate=a;class u extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.END,dirty:e}))}}t.End=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.SINGLE="single",e.WORDS="words",e.DOUBLE="double",e.THICK="thick",e.DOTTED="dotted",e.DOTTEDHEAVY="dottedHeavy",e.DASH="dash",e.DASHEDHEAVY="dashedHeavy",e.DASHLONG="dashLong",e.DASHLONGHEAVY="dashLongHeavy",e.DOTDASH="dotDash",e.DASHDOTHEAVY="dashDotHeavy",e.DOTDOTDASH="dotDotDash",e.DASHDOTDOTHEAVY="dashDotDotHeavy",e.WAVE="wave",e.WAVYHEAVY="wavyHeavy",e.WAVYDOUBLE="wavyDouble"}(s=t.UnderlineType||(t.UnderlineType={}));class o extends n.XmlComponent{constructor(e,t){super("w:u"),this.root.push(new n.Attributes({val:e,color:t}))}}t.BaseUnderline=o,t.Underline=class extends o{constructor(e=s.SINGLE,t){super(e,t)}},t.DashUnderline=class extends o{constructor(){super("dash")}},t.DashDotDotHeavyUnderline=class extends o{constructor(){super("dashDotDotHeavy")}},t.DashDotHeavyUnderline=class extends o{constructor(){super("dashDotHeavy")}},t.DashLongUnderline=class extends o{constructor(){super("dashLong")}},t.DashLongHeavyUnderline=class extends o{constructor(){super("dashLongHeavy")}},t.DotDashUnderline=class extends o{constructor(){super("dotDash")}},t.DotDotDashUnderline=class extends o{constructor(){super("dotDotDash")}},t.DottedUnderline=class extends o{constructor(){super("dotted")}},t.DottedHeavyUnderline=class extends o{constructor(){super("dottedHeavy")}},t.DoubleUnderline=class extends o{constructor(){super("double")}},t.SingleUnderline=class extends o{constructor(){super("single")}},t.ThickUnderline=class extends o{constructor(){super("thick")}},t.WaveUnderline=class extends o{constructor(){super("wave")}},t.WavyDoubleUnderline=class extends o{constructor(){super("wavyDouble")}},t.WavyHeavyUnderline=class extends o{constructor(){super("wavyHeavy")}},t.WordsUnderline=class extends o{constructor(){super("words")}}},function(e,t,r){"use strict";var n,s,o,i=r(220),a="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";function u(){o=!1}function c(e){if(e){if(e!==n){if(e.length!==a.length)throw new Error("Custom alphabet for shortid must be "+a.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter((function(e,t,r){return t!==r.lastIndexOf(e)}));if(t.length)throw new Error("Custom alphabet for shortid must be "+a.length+" unique characters. These characters were not unique: "+t.join(", "));n=e,u()}}else n!==a&&(n=a,u())}function l(){return o||(o=function(){n||c(a);for(var e,t=n.split(""),r=[],s=i.nextValue();t.length>0;)s=i.nextValue(),e=Math.floor(s*t.length),r.push(t.splice(e,1)[0]);return r.join("")}())}e.exports={get:function(){return n||a},characters:function(e){return c(e),n},seed:function(e){i.seed(e),s!==e&&(u(),s=e)},lookup:function(e){return l()[e]},shuffled:l}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(51),o=r(229),i=r(62),a=r(63),u=r(64),c=r(65),l=r(81),h=r(82),p=r(83),d=r(84),f=r(36),m=r(67);class g extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:pPr"),e){if(e.border&&this.push(new i.Border(e.border)),e.spacing&&this.push(new l.Spacing(e.spacing)),void 0!==e.outlineLevel&&this.push(new f.OutlineLevel(e.outlineLevel)),e.alignment&&this.push(new s.Alignment(e.alignment)),e.heading&&this.push(new h.Style(e.heading)),e.bidirectional&&this.push(new o.Bidirectional),e.thematicBreak&&this.push(new i.ThematicBreak),e.pageBreakBefore&&this.push(new c.PageBreakBefore),e.contextualSpacing&&this.push(new l.ContextualSpacing(e.contextualSpacing)),e.indent&&this.push(new a.Indent(e.indent)),e.keepLines&&this.push(new u.KeepLines),e.keepNext&&this.push(new u.KeepNext),e.tabStops)for(const t of e.tabStops)this.push(new p.TabStop(t.type,t.position,t.leader));e.style&&this.push(new h.Style(e.style)),e.bullet&&(this.push(new h.Style("ListParagraph")),this.push(new d.NumberProperties(1,e.bullet.level))),e.numbering&&(e.numbering.custom||this.push(new h.Style("ListParagraph")),this.push(new d.NumberProperties(e.numbering.reference,e.numbering.level))),e.rightTabStop&&this.push(new p.TabStop(p.TabStopType.RIGHT,e.rightTabStop)),e.leftTabStop&&this.push(new p.TabStop(p.TabStopType.LEFT,e.leftTabStop)),e.shading&&this.push(new m.Shading(e.shading.type,e.shading.fill,e.shading.color))}}push(e){this.root.push(e)}}t.ParagraphProperties=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(256),o=r(257);class i extends n.XmlComponent{constructor(e){super("m:dPr"),e&&(this.root.push(new s.MathBeginningCharacter(e.beginningCharacter)),this.root.push(new o.MathEndingCharacter(e.endingCharacter)))}}t.MathBracketProperties=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(270)),n(r(42)),n(r(41)),n(r(105))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseXmlComponent=class{constructor(e){this.deleted=!1,this.rootKey=e}get IsDeleted(){return this.deleted}}},function(e,t,r){var n=r(53),s=r(155),o=r(61),i=r(156);e.exports={xml2js:n,xml2json:s,js2xml:o,json2xml:i}},function(e,t,r){"use strict";var n,s="object"==typeof Reflect?Reflect:null,o=s&&"function"==typeof s.apply?s.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function l(e,t,r,n){var s,o,i,a;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),i=o[t]),void 0===i)i=o[t]=r,++e._eventsCount;else if("function"==typeof i?i=o[t]=n?[r,i]:[i,r]:n?i.unshift(r):i.push(r),(s=c(e))>0&&i.length>s&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,a=u,console&&console.warn&&console.warn(a)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}function p(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=h.bind(n);return s.listener=r,n.wrapFn=s,s}function d(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):m(s,s.length)}function f(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function m(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var c=u.length,l=m(u,c);for(r=0;r<c;++r)o(l[r],this,t)}return!0},a.prototype.addListener=function(e,t){return l(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return l(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var r,n,s,o,i;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){i=r[o].listener,s=o;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(s=o[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){(t=e.exports=r(56)).Stream=t,t.Readable=t,t.Writable=r(28),t.Duplex=r(5),t.Transform=r(60),t.PassThrough=r(150)},function(e,t,r){"use strict";(function(t,n,s){var o=r(15);function i(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var s=n.callback;t.pendingcb--,s(undefined),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=y;var a,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;y.WritableState=w;var c=r(14);c.inherits=r(7);var l,h={deprecate:r(149)},p=r(57),d=r(16).Buffer,f=s.Uint8Array||function(){},m=r(58);function g(){}function w(e,t){a=a||r(5),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var s=e.highWaterMark,c=e.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:n&&(c||0===c)?c:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,s=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,s){--t.pendingcb,r?(o.nextTick(s,n),o.nextTick(E,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(s(n),e._writableState.errorEmitted=!0,e.emit("error",n),E(e,t))}(e,r,n,t,s);else{var i=x(r);i||r.corked||r.bufferProcessing||!r.bufferedRequest||v(e,r),n?u(_,e,r,i,s):_(e,r,i,s)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function y(e){if(a=a||r(5),!(l.call(y,this)||this instanceof a))return new y(e);this._writableState=new w(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),p.call(this)}function b(e,t,r,n,s,o,i){t.writelen=n,t.writecb=i,t.writing=!0,t.sync=!0,r?e._writev(s,t.onwrite):e._write(s,o,t.onwrite),t.sync=!1}function _(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),E(e,t)}function v(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,s=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var a=0,u=!0;r;)s[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;s.allBuffers=u,b(e,t,!0,t.length,s,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new i(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,h=r.callback;if(b(e,t,!1,t.objectMode?1:c.length,c,l,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function x(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function T(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),E(e,t)}))}function E(e,t){var r=x(t);return r&&(function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(T,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(y,p),w.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(w.prototype,"buffer",{get:h.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(l=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(e){return!!l.call(this,e)||this===y&&e&&e._writableState instanceof w}})):l=function(e){return e instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(e,t,r){var n,s=this._writableState,i=!1,a=!s.objectMode&&(n=e,d.isBuffer(n)||n instanceof f);return a&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=s.defaultEncoding),"function"!=typeof r&&(r=g),s.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var s=!0,i=!1;return null===r?i=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(i=new TypeError("Invalid non-string/buffer chunk")),i&&(e.emit("error",i),o.nextTick(n,i),s=!1),s}(this,s,e,r))&&(s.pendingcb++,i=function(e,t,r,n,s,o){if(!r){var i=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r)),t}(t,n,s);n!==i&&(r=!0,s="buffer",n=i)}var a=t.objectMode?1:n.length;t.length+=a;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:s,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else b(e,t,!1,a,n,s,o);return u}(this,s,a,e,t,r)),i},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||v(this,e))},y.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,E(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),y.prototype.destroy=m.destroy,y.prototype._undestroy=m.undestroy,y.prototype._destroy=function(e,t){this.end(),t(e)}}).call(t,r(13),r(59).setImmediate,r(4))},function(e,t,r){"use strict";var n=r(16).Buffer,s=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===s||!s(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=c,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=l,this.end=h,t=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function i(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function l(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function p(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var s=i(t[n]);return s>=0?(s>0&&(e.lastNeed=s-1),s):--n<r||-2===s?0:(s=i(t[n]))>=0?(s>0&&(e.lastNeed=s-2),s):--n<r||-2===s?0:(s=i(t[n]))>=0?(s>0&&(2===s?s=0:e.lastNeed=s-3),s):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){var n=r(31).isArray;e.exports={copyOptions:function(e){var t,r={};for(t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r},ensureFlagExists:function(e,t){e in t&&"boolean"==typeof t[e]||(t[e]=!1)},ensureSpacesExists:function(e){(!("spaces"in e)||"number"!=typeof e.spaces&&"string"!=typeof e.spaces)&&(e.spaces=0)},ensureAlwaysArrayExists:function(e){"alwaysArray"in e&&("boolean"==typeof e.alwaysArray||n(e.alwaysArray))||(e.alwaysArray=!1)},ensureKeyExists:function(e,t){e+"Key"in t&&"string"==typeof t[e+"Key"]||(t[e+"Key"]=t.compact?"_"+e:e)},checkFnExists:function(e,t){return e+"Fn"in t}}},function(e,t){e.exports={isArray:function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.DOT="dot"}(s=t.EmphasisMarkType||(t.EmphasisMarkType={}));class o extends n.XmlComponent{constructor(e){super("w:em"),this.root.push(new n.Attributes({val:e}))}}t.BaseEmphasisMark=o,t.EmphasisMark=class extends o{constructor(e=s.DOT){super(e)}},t.DotEmphasisMark=class extends o{constructor(){super(s.DOT)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ascii:"w:ascii",cs:"w:cs",eastAsia:"w:eastAsia",hAnsi:"w:hAnsi",hint:"w:hint"}}}class o extends n.XmlComponent{constructor(e,t){if(super("w:rFonts"),"string"==typeof e){const r=e;this.root.push(new s({ascii:r,cs:r,eastAsia:r,hAnsi:r,hint:t}))}else{const t=e;this.root.push(new s(t))}}}t.RunFonts=o},function(e,t,r){"use strict";var n,s,o,i;Object.defineProperty(t,"__esModule",{value:!0}),(i=t.HorizontalPositionRelativeFrom||(t.HorizontalPositionRelativeFrom={})).CHARACTER="character",i.COLUMN="column",i.INSIDE_MARGIN="insideMargin",i.LEFT_MARGIN="leftMargin",i.MARGIN="margin",i.OUTSIDE_MARGIN="outsideMargin",i.PAGE="page",i.RIGHT_MARGIN="rightMargin",(o=t.VerticalPositionRelativeFrom||(t.VerticalPositionRelativeFrom={})).BOTTOM_MARGIN="bottomMargin",o.INSIDE_MARGIN="insideMargin",o.LINE="line",o.MARGIN="margin",o.OUTSIDE_MARGIN="outsideMargin",o.PAGE="page",o.PARAGRAPH="paragraph",o.TOP_MARGIN="topMargin",(s=t.HorizontalPositionAlign||(t.HorizontalPositionAlign={})).CENTER="center",s.INSIDE="inside",s.LEFT="left",s.OUTSIDE="outside",s.RIGHT="right",(n=t.VerticalPositionAlign||(t.VerticalPositionAlign={})).BOTTOM="bottom",n.CENTER="center",n.INSIDE="inside",n.OUTSIDE="outside",n.TOP="top"},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(199)),n(r(200)),n(r(201)),n(r(202)),n(r(203))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(216)),n(r(218)),n(r(228))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={style:"w:val",size:"w:sz",color:"w:color"}}}class o extends n.XmlComponent{setProperties(e,t,r){const n=new s({style:e,size:t,color:r});return this.root.push(n),this}}class i extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tcBorders")}addTopBorder(e,t,r){const n=new o("w:top");return n.setProperties(e,t,r),this.root.push(n),this}addStartBorder(e,t,r){const n=new o("w:start");return n.setProperties(e,t,r),this.root.push(n),this}addBottomBorder(e,t,r){const n=new o("w:bottom");return n.setProperties(e,t,r),this.root.push(n),this}addEndBorder(e,t,r){const n=new o("w:end");return n.setProperties(e,t,r),this.root.push(n),this}addLeftBorder(e,t,r){const n=new o("w:left");return n.setProperties(e,t,r),this.root.push(n),this}addRightBorder(e,t,r){const n=new o("w:right");return n.setProperties(e,t,r),this.root.push(n),this}}t.TableCellBorders=i;class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class u extends n.XmlComponent{constructor(e){super("w:gridSpan"),this.root.push(new a({val:e}))}}var c,l,h,p;t.GridSpan=u,(c=t.VerticalMergeType||(t.VerticalMergeType={})).CONTINUE="continue",c.RESTART="restart";class d extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class f extends n.XmlComponent{constructor(e){super("w:vMerge"),this.root.push(new d({val:e}))}}t.VerticalMerge=f,(l=t.VerticalAlign||(t.VerticalAlign={})).BOTTOM="bottom",l.CENTER="center",l.TOP="top";class m extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class g extends n.XmlComponent{constructor(e){super("w:vAlign"),this.root.push(new m({val:e}))}}t.VAlign=g,(h=t.TextDirection||(t.TextDirection={})).BOTTOM_TO_TOP_LEFT_TO_RIGHT="btLr",h.LEFT_TO_RIGHT_TOP_TO_BOTTOM="lrTb",h.TOP_TO_BOTTOM_RIGHT_TO_LEFT="tbRl";class w extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class y extends n.XmlComponent{constructor(e){super("w:textDirection"),this.root.push(new w({val:e}))}}t.TDirection=y,(p=t.WidthType||(t.WidthType={})).AUTO="auto",p.DXA="dxa",p.NIL="nil",p.PERCENTAGE="pct";class b extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",type:"w:type"}}}class _ extends n.XmlComponent{constructor(e,t){super("w:tcW"),this.root.push(new b({width:e,type:t}))}}t.TableCellWidth=_},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(266))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(40);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",styleId:"w:styleId",default:"w:default",customStyle:"w:customStyle"}}}class i extends n.XmlComponent{constructor(e,t){super("w:style"),this.root.push(new o(e)),t&&this.root.push(new s.Name(t))}}t.Style=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:name"),this.root.push(new s({val:e}))}}t.Name=o;class i extends n.XmlComponent{constructor(e){super("w:basedOn"),this.root.push(new s({val:e}))}}t.BasedOn=i;class a extends n.XmlComponent{constructor(e){super("w:next"),this.root.push(new s({val:e}))}}t.Next=a;class u extends n.XmlComponent{constructor(e){super("w:link"),this.root.push(new s({val:e}))}}t.Link=u;class c extends n.XmlComponent{constructor(e){super("w:uiPriority"),this.root.push(new s({val:e}))}}t.UiPriority=c;class l extends n.XmlComponent{constructor(){super("w:unhideWhenUsed")}}t.UnhideWhenUsed=l;class h extends n.XmlComponent{constructor(){super("w:qFormat")}}t.QuickFormat=h;class p extends n.XmlComponent{}t.TableProperties=p;class d extends n.XmlComponent{}t.RsId=d;class f extends n.XmlComponent{constructor(){super("w:semiHidden")}}t.SemiHidden=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(9),o=r(40),i=r(39);class a extends i.Style{constructor(e){super({type:"paragraph",styleId:e.id},e.name),this.paragraphProperties=new n.ParagraphProperties(e.paragraph),this.runProperties=new s.RunProperties(e.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),e.basedOn&&this.root.push(new o.BasedOn(e.basedOn)),e.next&&this.root.push(new o.Next(e.next)),e.quickFormat&&this.root.push(new o.QuickFormat),e.link&&this.root.push(new o.Link(e.link)),e.semiHidden&&this.root.push(new o.SemiHidden),e.uiPriority&&this.root.push(new o.UiPriority(e.uiPriority)),e.unhideWhenUsed&&this.root.push(new o.UnhideWhenUsed)}}t.StyleForParagraph=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(9),s=r(40),o=r(39);class i extends o.Style{constructor(e){super({type:"character",styleId:e.id},e.name),this.runProperties=new n.RunProperties(e.run),this.root.push(this.runProperties),this.root.push(new s.UiPriority(99)),this.root.push(new s.UnhideWhenUsed),e.basedOn&&this.root.push(new s.BasedOn(e.basedOn)),e.link&&this.root.push(new s.Link(e.link)),e.semiHidden&&this.root.push(new s.SemiHidden)}}t.StyleForCharacter=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.PageOrientation||(t.PageOrientation={})).PORTRAIT="portrait",s.LANDSCAPE="landscape";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",height:"w:h",orientation:"w:orient"}}}t.PageSizeAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(307),s=r(45);t.FooterWrapper=class{constructor(e,t,r){this.media=e,this.footer=new n.Footer(t,r),this.relationships=new s.Relationships}add(e){this.footer.add(e)}addChildElement(e){this.footer.addChildElement(e)}get Footer(){return this.footer}get Relationships(){return this.relationships}get Media(){return this.media}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(309))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(311);(t.TargetModeType||(t.TargetModeType={})).EXTERNAL="External";class o extends n.XmlComponent{constructor(e,t,r,n){super("Relationship"),this.root.push(new s.RelationshipAttributes({id:e,type:t,target:r,targetMode:n}))}}t.Relationship=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(325),s=r(45);t.HeaderWrapper=class{constructor(e,t,r){this.media=e,this.header=new n.Header(t,r),this.relationships=new s.Relationships}add(e){return this.header.add(e),this}addChildElement(e){this.header.addChildElement(e)}get Header(){return this.header}get Relationships(){return this.relationships}get Media(){return this.media}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(327)),n(r(328))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(50),o=r(21),i=r(9);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl",tentative:"w15:tentative"}}}class u extends n.XmlComponent{constructor(e){super("w:start"),this.root.push(new n.Attributes({val:e}))}}class c extends n.XmlComponent{constructor(e){super("w:numFmt"),this.root.push(new n.Attributes({val:e}))}}class l extends n.XmlComponent{constructor(e){super("w:lvlText"),this.root.push(new n.Attributes({val:e}))}}class h extends n.XmlComponent{constructor(e){super("w:lvlJc"),this.root.push(new n.Attributes({val:e}))}}var p;(p=t.LevelSuffix||(t.LevelSuffix={})).NOTHING="nothing",p.SPACE="space",p.TAB="tab";class d extends n.XmlComponent{constructor(e){super("w:suff"),this.root.push(new n.Attributes({val:e}))}}class f extends n.XmlComponent{constructor({level:e,format:t,text:r,alignment:n=s.AlignmentType.START,start:p=1,style:f,suffix:m}){super("w:lvl"),this.root.push(new a({ilvl:e,tentative:1})),this.root.push(new u(p)),this.root.push(new h(n)),t&&this.root.push(new c(t)),r&&this.root.push(new l(r)),this.paragraphProperties=new o.ParagraphProperties(f&&f.paragraph),this.runProperties=new i.RunProperties(f&&f.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),m&&this.root.push(new d(m))}}t.LevelBase=f,t.Level=class extends f{constructor(e){super(e)}},t.LevelForOverride=class extends f{}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(51)),n(r(62)),n(r(63)),n(r(64)),n(r(65)),n(r(81)),n(r(82)),n(r(83)),n(r(84))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.AlignmentType||(t.AlignmentType={})).START="start",s.END="end",s.CENTER="center",s.BOTH="both",s.JUSTIFIED="both",s.DISTRIBUTE="distribute",s.LEFT="left",s.RIGHT="right";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}t.AlignmentAttributes=o;class i extends n.XmlComponent{constructor(e){super("w:jc"),this.root.push(new o({val:e}))}}t.Alignment=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(24);class s extends n.BaseXmlComponent{constructor(e){super("_attr"),this.root=e}prepForXml(){const e={};return Object.keys(this.root).forEach((t=>{const r=this.root[t];if(void 0!==r){const n=this.xmlKeys&&this.xmlKeys[t]||t;e[n]=r}})),{_attr:e}}set(e){this.root=e}}t.XmlAttributeComponent=s},function(e,t,r){var n,s,o=r(142),i=r(30),a=r(31).isArray;function u(e){var t=Number(e);if(!isNaN(t))return t;var r=e.toLowerCase();return"true"===r||"false"!==r&&e}function c(e,t){var r;if(n.compact){if(!s[n[e+"Key"]]&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(n[e+"Key"]):n.alwaysArray)&&(s[n[e+"Key"]]=[]),s[n[e+"Key"]]&&!a(s[n[e+"Key"]])&&(s[n[e+"Key"]]=[s[n[e+"Key"]]]),e+"Fn"in n&&"string"==typeof t&&(t=n[e+"Fn"](t,s)),"instruction"===e&&("instructionFn"in n||"instructionNameFn"in n))for(r in t)if(t.hasOwnProperty(r))if("instructionFn"in n)t[r]=n.instructionFn(t[r],r,s);else{var o=t[r];delete t[r],t[n.instructionNameFn(r,o,s)]=o}a(s[n[e+"Key"]])?s[n[e+"Key"]].push(t):s[n[e+"Key"]]=t}else{s[n.elementsKey]||(s[n.elementsKey]=[]);var i={};if(i[n.typeKey]=e,"instruction"===e){for(r in t)if(t.hasOwnProperty(r))break;i[n.nameKey]="instructionNameFn"in n?n.instructionNameFn(r,t,s):r,n.instructionHasAttributes?(i[n.attributesKey]=t[r][n.attributesKey],"instructionFn"in n&&(i[n.attributesKey]=n.instructionFn(i[n.attributesKey],r,s))):("instructionFn"in n&&(t[r]=n.instructionFn(t[r],r,s)),i[n.instructionKey]=t[r])}else e+"Fn"in n&&(t=n[e+"Fn"](t,s)),i[n[e+"Key"]]=t;n.addParent&&(i[n.parentKey]=s),s[n.elementsKey].push(i)}}function l(e){var t;if("attributesFn"in n&&e&&(e=n.attributesFn(e,s)),(n.trim||"attributeValueFn"in n||"attributeNameFn"in n||n.nativeTypeAttributes)&&e)for(t in e)if(e.hasOwnProperty(t)&&(n.trim&&(e[t]=e[t].trim()),n.nativeTypeAttributes&&(e[t]=u(e[t])),"attributeValueFn"in n&&(e[t]=n.attributeValueFn(e[t],t,s)),"attributeNameFn"in n)){var r=e[t];delete e[t],e[n.attributeNameFn(t,e[t],s)]=r}return e}function h(e){var t={};if(e.body&&("xml"===e.name.toLowerCase()||n.instructionHasAttributes)){for(var r,o=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(r=o.exec(e.body));)t[r[1]]=r[2]||r[3]||r[4];t=l(t)}if("xml"===e.name.toLowerCase()){if(n.ignoreDeclaration)return;s[n.declarationKey]={},Object.keys(t).length&&(s[n.declarationKey][n.attributesKey]=t),n.addParent&&(s[n.declarationKey][n.parentKey]=s)}else{if(n.ignoreInstruction)return;n.trim&&(e.body=e.body.trim());var i={};n.instructionHasAttributes&&Object.keys(t).length?(i[e.name]={},i[e.name][n.attributesKey]=t):i[e.name]=e.body,c("instruction",i)}}function p(e,t){var r;if("object"==typeof e&&(t=e.attributes,e=e.name),t=l(t),"elementNameFn"in n&&(e=n.elementNameFn(e,s)),n.compact){var o;if(r={},!n.ignoreAttributes&&t&&Object.keys(t).length)for(o in r[n.attributesKey]={},t)t.hasOwnProperty(o)&&(r[n.attributesKey][o]=t[o]);!(e in s)&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(e):n.alwaysArray)&&(s[e]=[]),s[e]&&!a(s[e])&&(s[e]=[s[e]]),a(s[e])?s[e].push(r):s[e]=r}else s[n.elementsKey]||(s[n.elementsKey]=[]),(r={})[n.typeKey]="element",r[n.nameKey]=e,!n.ignoreAttributes&&t&&Object.keys(t).length&&(r[n.attributesKey]=t),n.alwaysChildren&&(r[n.elementsKey]=[]),s[n.elementsKey].push(r);r[n.parentKey]=s,s=r}function d(e){n.ignoreText||(e.trim()||n.captureSpacesBetweenElements)&&(n.trim&&(e=e.trim()),n.nativeType&&(e=u(e)),n.sanitize&&(e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),c("text",e))}function f(e){n.ignoreComment||(n.trim&&(e=e.trim()),c("comment",e))}function m(e){var t=s[n.parentKey];n.addParent||delete s[n.parentKey],s=t}function g(e){n.ignoreCdata||(n.trim&&(e=e.trim()),c("cdata",e))}function w(e){n.ignoreDoctype||(e=e.replace(/^ /,""),n.trim&&(e=e.trim()),c("doctype",e))}function y(e){e.note=e}e.exports=function(e,t){var r=o.parser(!0,{}),a={};if(s=a,n=function(e){return n=i.copyOptions(e),i.ensureFlagExists("ignoreDeclaration",n),i.ensureFlagExists("ignoreInstruction",n),i.ensureFlagExists("ignoreAttributes",n),i.ensureFlagExists("ignoreText",n),i.ensureFlagExists("ignoreComment",n),i.ensureFlagExists("ignoreCdata",n),i.ensureFlagExists("ignoreDoctype",n),i.ensureFlagExists("compact",n),i.ensureFlagExists("alwaysChildren",n),i.ensureFlagExists("addParent",n),i.ensureFlagExists("trim",n),i.ensureFlagExists("nativeType",n),i.ensureFlagExists("nativeTypeAttributes",n),i.ensureFlagExists("sanitize",n),i.ensureFlagExists("instructionHasAttributes",n),i.ensureFlagExists("captureSpacesBetweenElements",n),i.ensureAlwaysArrayExists(n),i.ensureKeyExists("declaration",n),i.ensureKeyExists("instruction",n),i.ensureKeyExists("attributes",n),i.ensureKeyExists("text",n),i.ensureKeyExists("comment",n),i.ensureKeyExists("cdata",n),i.ensureKeyExists("doctype",n),i.ensureKeyExists("type",n),i.ensureKeyExists("name",n),i.ensureKeyExists("elements",n),i.ensureKeyExists("parent",n),i.checkFnExists("doctype",n),i.checkFnExists("instruction",n),i.checkFnExists("cdata",n),i.checkFnExists("comment",n),i.checkFnExists("text",n),i.checkFnExists("instructionName",n),i.checkFnExists("elementName",n),i.checkFnExists("attributeName",n),i.checkFnExists("attributeValue",n),i.checkFnExists("attributes",n),n}(t),r.opt={strictEntities:!0},r.onopentag=p,r.ontext=d,r.oncomment=f,r.onclosetag=m,r.onerror=y,r.oncdata=g,r.ondoctype=w,r.onprocessinginstruction=h,r.write(e).close(),a[n.elementsKey]){var u=a[n.elementsKey];delete a[n.elementsKey],a[n.elementsKey]=u,delete a.text}return a}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){e.exports=s;var n=r(26).EventEmitter;function s(){n.call(this)}r(7)(s,n),s.Readable=r(27),s.Writable=r(151),s.Duplex=r(152),s.Transform=r(153),s.PassThrough=r(154),s.Stream=s,s.prototype.pipe=function(e,t){var r=this;function s(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",s),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",u));var i=!1;function a(){i||(i=!0,e.end())}function u(){i||(i=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(l(),0===n.listenerCount(this,"error"))throw e}function l(){r.removeListener("data",s),e.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",l),r.removeListener("close",l),e.removeListener("close",l)}return r.on("error",c),e.on("error",c),r.on("end",l),r.on("close",l),e.on("close",l),e.emit("pipe",r),e}},function(e,t,r){"use strict";(function(t,n){var s=r(15);e.exports=b;var o,i=r(54);b.ReadableState=y,r(26).EventEmitter;var a=function(e,t){return e.listeners(t).length},u=r(57),c=r(16).Buffer,l=t.Uint8Array||function(){},h=r(14);h.inherits=r(7);var p=r(145),d=void 0;d=p&&p.debuglog?p.debuglog("stream"):function(){};var f,m=r(146),g=r(58);h.inherits(b,u);var w=["error","close","destroy","pause","resume"];function y(e,t){e=e||{};var n=t instanceof(o=o||r(5));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var s=e.highWaterMark,i=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:n&&(i||0===i)?i:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(f||(f=r(29).StringDecoder),this.decoder=new f(e.encoding),this.encoding=e.encoding)}function b(e){if(o=o||r(5),!(this instanceof b))return new b(e);this._readableState=new y(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function _(e,t,r,n,s){var o,i=e._readableState;return null===t?(i.reading=!1,function(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,E(e)}}(e,i)):(s||(o=function(e,t){var r,n;return n=t,c.isBuffer(n)||n instanceof l||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(i,t)),o?e.emit("error",o):i.objectMode||t&&t.length>0?("string"==typeof t||i.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n?i.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):v(e,i,t,!0):i.ended?e.emit("error",new Error("stream.push() after EOF")):(i.reading=!1,i.decoder&&!r?(t=i.decoder.write(t),i.objectMode||0!==t.length?v(e,i,t,!1):A(e,i)):v(e,i,t,!1))):n||(i.reading=!1)),function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(i)}function v(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&E(e)),A(e,t)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(e,t){this.push(null),t(e)},b.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},b.prototype.unshift=function(e){return _(this,e,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(e){return f||(f=r(29).StringDecoder),this._readableState.decoder=new f(e),this._readableState.encoding=e,this};var x=8388608;function T(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=x?e=x:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function E(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?s.nextTick(C,e):C(e))}function C(e){d("emit readable"),e.emit("readable"),R(e)}function A(e,t){t.readingMore||(t.readingMore=!0,s.nextTick(P,e,t))}function P(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function S(e){d("readable nexttick read 0"),e.read(0)}function O(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),R(e),t.flowing&&!t.reading&&e.read(0)}function R(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function k(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,s=r.data;for(e-=s.length;r=r.next;){var o=r.data,i=e>o.length?o.length:e;if(i===o.length?s+=o:s+=o.slice(0,e),0==(e-=i)){i===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(i));break}++n}return t.length-=n,s}(e,t):function(e,t){var r=c.allocUnsafe(e),n=t.head,s=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var o=n.data,i=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,i),0==(e-=i)){i===o.length?(++s,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(i));break}++s}return t.length-=s,r}(e,t),n}(e,t.buffer,t.decoder),r);var r}function I(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,s.nextTick(M,t,e))}function M(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function N(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}b.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?I(this):E(this),null;if(0===(e=T(e,t))&&t.ended)return 0===t.length&&I(this),null;var n,s=t.needReadable;return d("need readable",s),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",s=!0),t.ended||t.reading?d("reading or ended",s=!1):s&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=T(r,t))),null===(n=e>0?k(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&I(this)),null!==n&&this.emit("data",n),n},b.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=t&&!1===t.end||e===n.stdout||e===n.stderr?y:c;function c(){d("onend"),e.end()}o.endEmitted?s.nextTick(u):r.once("end",u),e.on("unpipe",(function t(n,s){d("onunpipe"),n===r&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,d("cleanup"),e.removeListener("close",g),e.removeListener("finish",w),e.removeListener("drain",l),e.removeListener("error",m),e.removeListener("unpipe",t),r.removeListener("end",c),r.removeListener("end",y),r.removeListener("data",f),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}));var l=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,R(e))}}(r);e.on("drain",l);var h=!1,p=!1;function f(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==N(o.pipes,e))&&!h&&(d("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function m(t){d("onerror",t),y(),e.removeListener("error",m),0===a(e,"error")&&e.emit("error",t)}function g(){e.removeListener("finish",w),y()}function w(){d("onfinish"),e.removeListener("close",g),y()}function y(){d("unpipe"),r.unpipe(e)}return r.on("data",f),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events.error?i(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on(t,r)}(e,"error",m),e.once("close",g),e.once("finish",w),e.emit("pipe",r),o.flowing||(d("pipe resume"),r.resume()),e},b.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,s=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<s;o++)n[o].emit("unpipe",this,r);return this}var i=N(t.pipes,e);return-1===i||(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},b.prototype.on=function(e,t){var r=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&E(this):s.nextTick(S,this))}return r},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,s.nextTick(O,e,t))}(this,e)),this},b.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var s in e.on("end",(function(){if(d("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(s){d("wrapped data"),r.decoder&&(s=r.decoder.write(s)),r.objectMode&&null==s||(r.objectMode||s&&s.length)&&(t.push(s)||(n=!0,e.pause()))})),e)void 0===this[s]&&"function"==typeof e[s]&&(this[s]=function(t){return function(){return e[t].apply(e,arguments)}}(s));for(var o=0;o<w.length;o++)e.on(w[o],this.emit.bind(this,w[o]));return this._read=function(t){d("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=k}).call(t,r(4),r(13))},function(e,t,r){e.exports=r(26).EventEmitter},function(e,t,r){"use strict";var n=r(15);function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,i=this._writableState&&this._writableState.destroyed;return o||i?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(s,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(s,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,s=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(s.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(s.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(148),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(t,r(4))},function(e,t,r){"use strict";e.exports=i;var n=r(5),s=r(14);function o(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var s=this._readableState;s.reading=!1,(s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}function i(e){if(!(this instanceof i))return new i(e);n.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){u(e,t,r)})):u(this,null,null)}function u(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}s.inherits=r(7),s.inherits(i,n),i.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},i.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},i.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var s=this._readableState;(n.needTransform||s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}},i.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},i.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){var n,s,o=r(30),i=r(31).isArray;function a(e,t,r){return(!r&&e.spaces?"\n":"")+Array(t+1).join(e.spaces)}function u(e,t,r){if(t.ignoreAttributes)return"";"attributesFn"in t&&(e=t.attributesFn(e,s,n));var o,i,u,c,l=[];for(o in e)e.hasOwnProperty(o)&&null!==e[o]&&void 0!==e[o]&&(c=t.noQuotesForNativeAttributes&&"string"!=typeof e[o]?"":'"',i=(i=""+e[o]).replace(/"/g,"&quot;"),u="attributeNameFn"in t?t.attributeNameFn(o,i,s,n):o,l.push(t.spaces&&t.indentAttributes?a(t,r+1,!1):" "),l.push(u+"="+c+("attributeValueFn"in t?t.attributeValueFn(i,o,s,n):i)+c));return e&&Object.keys(e).length&&t.spaces&&t.indentAttributes&&l.push(a(t,r,!1)),l.join("")}function c(e,t,r){return n=e,s="xml",t.ignoreDeclaration?"":"<?xml"+u(e[t.attributesKey],t,r)+"?>"}function l(e,t,r){if(t.ignoreInstruction)return"";var o;for(o in e)if(e.hasOwnProperty(o))break;var i="instructionNameFn"in t?t.instructionNameFn(o,e[o],s,n):o;if("object"==typeof e[o])return n=e,s=i,"<?"+i+u(e[o][t.attributesKey],t,r)+"?>";var a=e[o]?e[o]:"";return"instructionFn"in t&&(a=t.instructionFn(a,o,s,n)),"<?"+i+(a?" "+a:"")+"?>"}function h(e,t){return t.ignoreComment?"":"\x3c!--"+("commentFn"in t?t.commentFn(e,s,n):e)+"--\x3e"}function p(e,t){return t.ignoreCdata?"":"<![CDATA["+("cdataFn"in t?t.cdataFn(e,s,n):e.replace("]]>","]]]]><![CDATA[>"))+"]]>"}function d(e,t){return t.ignoreDoctype?"":"<!DOCTYPE "+("doctypeFn"in t?t.doctypeFn(e,s,n):e)+">"}function f(e,t){return t.ignoreText?"":(e=(e=(e=""+e).replace(/&amp;/g,"&")).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"textFn"in t?t.textFn(e,s,n):e)}function m(e,t,r,o){return e.reduce((function(e,i){var c=a(t,r,o&&!e);switch(i.type){case"element":return e+c+function(e,t,r){n=e,s=e.name;var o=[],i="elementNameFn"in t?t.elementNameFn(e.name,e):e.name;o.push("<"+i),e[t.attributesKey]&&o.push(u(e[t.attributesKey],t,r));var a=e[t.elementsKey]&&e[t.elementsKey].length||e[t.attributesKey]&&"preserve"===e[t.attributesKey]["xml:space"];return a||(a="fullTagEmptyElementFn"in t?t.fullTagEmptyElementFn(e.name,e):t.fullTagEmptyElement),a?(o.push(">"),e[t.elementsKey]&&e[t.elementsKey].length&&(o.push(m(e[t.elementsKey],t,r+1)),n=e,s=e.name),o.push(t.spaces&&function(e,t){var r;if(e.elements&&e.elements.length)for(r=0;r<e.elements.length;++r)switch(e.elements[r][t.typeKey]){case"text":if(t.indentText)return!0;break;case"cdata":if(t.indentCdata)return!0;break;case"instruction":if(t.indentInstruction)return!0;break;case"doctype":case"comment":case"element":default:return!0}return!1}(e,t)?"\n"+Array(r+1).join(t.spaces):""),o.push("</"+i+">")):o.push("/>"),o.join("")}(i,t,r);case"comment":return e+c+h(i[t.commentKey],t);case"doctype":return e+c+d(i[t.doctypeKey],t);case"cdata":return e+(t.indentCdata?c:"")+p(i[t.cdataKey],t);case"text":return e+(t.indentText?c:"")+f(i[t.textKey],t);case"instruction":var g={};return g[i[t.nameKey]]=i[t.attributesKey]?i:i[t.instructionKey],e+(t.indentInstruction?c:"")+l(g,t,r)}}),"")}function g(e,t,r){var n;for(n in e)if(e.hasOwnProperty(n))switch(n){case t.parentKey:case t.attributesKey:break;case t.textKey:if(t.indentText||r)return!0;break;case t.cdataKey:if(t.indentCdata||r)return!0;break;case t.instructionKey:if(t.indentInstruction||r)return!0;break;case t.doctypeKey:case t.commentKey:default:return!0}return!1}function w(e,t,r,o,i){n=e,s=t;var c="elementNameFn"in r?r.elementNameFn(t,e):t;if(null==e||""===e)return"fullTagEmptyElementFn"in r&&r.fullTagEmptyElementFn(t,e)||r.fullTagEmptyElement?"<"+c+"></"+c+">":"<"+c+"/>";var l=[];if(t){if(l.push("<"+c),"object"!=typeof e)return l.push(">"+f(e,r)+"</"+c+">"),l.join("");e[r.attributesKey]&&l.push(u(e[r.attributesKey],r,o));var h=g(e,r,!0)||e[r.attributesKey]&&"preserve"===e[r.attributesKey]["xml:space"];if(h||(h="fullTagEmptyElementFn"in r?r.fullTagEmptyElementFn(t,e):r.fullTagEmptyElement),!h)return l.push("/>"),l.join("");l.push(">")}return l.push(y(e,r,o+1,!1)),n=e,s=t,t&&l.push((i?a(r,o,!1):"")+"</"+c+">"),l.join("")}function y(e,t,r,n){var s,o,u,m=[];for(o in e)if(e.hasOwnProperty(o))for(u=i(e[o])?e[o]:[e[o]],s=0;s<u.length;++s){switch(o){case t.declarationKey:m.push(c(u[s],t,r));break;case t.instructionKey:m.push((t.indentInstruction?a(t,r,n):"")+l(u[s],t,r));break;case t.attributesKey:case t.parentKey:break;case t.textKey:m.push((t.indentText?a(t,r,n):"")+f(u[s],t));break;case t.cdataKey:m.push((t.indentCdata?a(t,r,n):"")+p(u[s],t));break;case t.doctypeKey:m.push(a(t,r,n)+d(u[s],t));break;case t.commentKey:m.push(a(t,r,n)+h(u[s],t));break;default:m.push(a(t,r,n)+w(u[s],o,t,r,g(u[s],t)))}n=n&&!m.length}return m.join("")}e.exports=function(e,t){t=function(e){var t=o.copyOptions(e);return o.ensureFlagExists("ignoreDeclaration",t),o.ensureFlagExists("ignoreInstruction",t),o.ensureFlagExists("ignoreAttributes",t),o.ensureFlagExists("ignoreText",t),o.ensureFlagExists("ignoreComment",t),o.ensureFlagExists("ignoreCdata",t),o.ensureFlagExists("ignoreDoctype",t),o.ensureFlagExists("compact",t),o.ensureFlagExists("indentText",t),o.ensureFlagExists("indentCdata",t),o.ensureFlagExists("indentAttributes",t),o.ensureFlagExists("indentInstruction",t),o.ensureFlagExists("fullTagEmptyElement",t),o.ensureFlagExists("noQuotesForNativeAttributes",t),o.ensureSpacesExists(t),"number"==typeof t.spaces&&(t.spaces=Array(t.spaces+1).join(" ")),o.ensureKeyExists("declaration",t),o.ensureKeyExists("instruction",t),o.ensureKeyExists("attributes",t),o.ensureKeyExists("text",t),o.ensureKeyExists("comment",t),o.ensureKeyExists("cdata",t),o.ensureKeyExists("doctype",t),o.ensureKeyExists("type",t),o.ensureKeyExists("name",t),o.ensureKeyExists("elements",t),o.checkFnExists("doctype",t),o.checkFnExists("instruction",t),o.checkFnExists("cdata",t),o.checkFnExists("comment",t),o.checkFnExists("text",t),o.checkFnExists("instructionName",t),o.checkFnExists("elementName",t),o.checkFnExists("attributeName",t),o.checkFnExists("attributeValue",t),o.checkFnExists("attributes",t),o.checkFnExists("fullTagEmptyElement",t),t}(t);var r=[];return n=e,s="_root_",t.compact?r.push(y(e,t,0,!0)):(e[t.declarationKey]&&r.push(c(e[t.declarationKey],t,0)),e[t.elementsKey]&&e[t.elementsKey].length&&r.push(m(e[t.elementsKey],t,0,!r.length))),r.join("")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(159);class o extends n.XmlComponent{constructor(e,t={color:"auto",space:1,value:"single",size:6}){super(e);const r=new s.BorderAttributes({color:t.color,space:t.space,val:t.value,sz:t.size});this.root.push(r)}}class i extends n.XmlComponent{constructor(e){if(super("w:pBdr"),void 0!==e.top){const t=new o("w:top",e.top);this.root.push(t)}if(void 0!==e.bottom){const t=new o("w:bottom",e.bottom);this.root.push(t)}if(void 0!==e.left){const t=new o("w:left",e.left);this.root.push(t)}if(void 0!==e.right){const t=new o("w:right",e.right);this.root.push(t)}}}t.Border=i;class a extends n.XmlComponent{constructor(){super("w:pBdr");const e=new o("w:bottom",{color:"auto",space:1,value:"single",size:6});this.root.push(e)}}t.ThematicBreak=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={left:"w:left",hanging:"w:hanging",firstLine:"w:firstLine",start:"w:start",end:"w:end",right:"w:end"}}}class o extends n.XmlComponent{constructor(e){super("w:ind"),this.root.push(new s(e))}}t.Indent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:keepLines")}}t.KeepLines=s;class o extends n.XmlComponent{constructor(){super("w:keepNext")}}t.KeepNext=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(3);class o extends n.XmlComponent{constructor(){super("w:br"),this.root.push(new n.Attributes({type:"page"}))}}class i extends s.Run{constructor(){super({}),this.root.push(new o)}}t.PageBreak=i;class a extends n.XmlComponent{constructor(){super("w:pageBreakBefore")}}t.PageBreakBefore=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:br")}}t.Break=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s=r(19);t.Underline=s.Underline;var o=r(32);t.EmphasisMark=o.EmphasisMark;var i=r(68);t.SubScript=i.SubScript,t.SuperScript=i.SuperScript;var a=r(33);t.RunFonts=a.RunFonts;class u extends n.XmlComponent{constructor(){super("w:b"),this.root.push(new n.Attributes({val:!0}))}}t.Bold=u;class c extends n.XmlComponent{constructor(){super("w:bCs"),this.root.push(new n.Attributes({val:!0}))}}t.BoldComplexScript=c;class l extends n.XmlComponent{constructor(e){super("w:spacing"),this.root.push(new n.Attributes({val:e}))}}t.CharacterSpacing=l;class h extends n.XmlComponent{constructor(){super("w:i"),this.root.push(new n.Attributes({val:!0}))}}t.Italics=h;class p extends n.XmlComponent{constructor(){super("w:iCs"),this.root.push(new n.Attributes({val:!0}))}}t.ItalicsComplexScript=p;class d extends n.XmlComponent{constructor(){super("w:caps"),this.root.push(new n.Attributes({val:!0}))}}t.Caps=d;class f extends n.XmlComponent{constructor(e){super("w:color"),this.root.push(new n.Attributes({val:e}))}}t.Color=f;class m extends n.XmlComponent{constructor(){super("w:dstrike"),this.root.push(new n.Attributes({val:!0}))}}t.DoubleStrike=m;class g extends n.XmlComponent{constructor(){super("w:emboss"),this.root.push(new n.Attributes({val:!0}))}}t.Emboss=g;class w extends n.XmlComponent{constructor(){super("w:imprint"),this.root.push(new n.Attributes({val:!0}))}}t.Imprint=w;class y extends n.XmlComponent{constructor(){super("w:smallCaps"),this.root.push(new n.Attributes({val:!0}))}}t.SmallCaps=y;class b extends n.XmlComponent{constructor(){super("w:strike"),this.root.push(new n.Attributes({val:!0}))}}t.Strike=b;class _ extends n.XmlComponent{constructor(e){super("w:sz"),this.root.push(new n.Attributes({val:e}))}}t.Size=_;class v extends n.XmlComponent{constructor(e){super("w:szCs"),this.root.push(new n.Attributes({val:e}))}}t.SizeComplexScript=v;class x extends n.XmlComponent{constructor(){super("w:rtl"),this.root.push(new n.Attributes({val:!0}))}}t.RightToLeft=x;class T extends n.XmlComponent{constructor(e){super("w:highlight"),this.root.push(new n.Attributes({val:e}))}}t.Highlight=T;class E extends n.XmlComponent{constructor(e){super("w:highlightCs"),this.root.push(new n.Attributes({val:e}))}}t.HighlightComplexScript=E;class C extends n.XmlComponent{constructor(e,t,r){super("w:shd"),this.root.push(new n.Attributes({val:e,fill:t,color:r}))}}t.Shading=C;class A extends n.XmlComponent{constructor(e,t,r){super("w:shdCs"),this.root.push(new n.Attributes({val:e,fill:t,color:r}))}}t.ShadowComplexScript=A},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:vertAlign"),this.root.push(new n.Attributes({val:e}))}}t.VerticalAlign=s,t.SuperScript=class extends s{constructor(){super("superscript")}},t.SubScript=class extends s{constructor(){super("subscript")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:rStyle"),this.root.push(new s({val:e}))}}t.Style=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:t"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(e)}}t.Text=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(165)),n(r(35)),n(r(72))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(34)),n(r(168)),n(r(169)),n(r(170))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("wp:align"),this.root.push(e)}}t.Align=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("wp:posOffset"),this.root.push(e.toString())}}t.PositionOffset=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(171))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(204);class o extends n.XmlComponent{constructor(){super("wp:docPr"),this.root.push(new s.DocPropertiesAttributes({id:0,name:"",descr:""}))}}t.DocProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(205);class o extends n.XmlComponent{constructor(){super("wp:effectExtent"),this.root.push(new s.EffectExtentAttributes({b:0,l:0,r:0,t:0}))}}t.EffectExtent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(206);class o extends n.XmlComponent{constructor(e,t){super("wp:extent"),this.attributes=new s.ExtentAttributes({cx:e,cy:t}),this.root.push(this.attributes)}setXY(e,t){this.attributes.set({cx:e,cy:t})}}t.Extent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(207);class o extends n.XmlComponent{constructor(){super("wp:cNvGraphicFramePr"),this.root.push(new s.GraphicFrameLocks)}}t.GraphicFrameProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",allowOverlap:"allowOverlap",behindDoc:"behindDoc",layoutInCell:"layoutInCell",locked:"locked",relativeHeight:"relativeHeight",simplePos:"simplePos"}}}t.AnchorAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={after:"w:after",before:"w:before",line:"w:line",lineRule:"w:lineRule"}}}class o extends n.XmlComponent{constructor(e){super("w:spacing"),this.root.push(new s(e))}}t.Spacing=o;class i extends n.XmlComponent{constructor(e){super("w:contextualSpacing"),this.root.push(new n.Attributes({val:!1===e?0:1}))}}t.ContextualSpacing=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeadingLevel||(t.HeadingLevel={})).HEADING_1="Heading1",s.HEADING_2="Heading2",s.HEADING_3="Heading3",s.HEADING_4="Heading4",s.HEADING_5="Heading5",s.HEADING_6="Heading6",s.TITLE="Title";class o extends n.XmlComponent{constructor(e){super("w:pStyle"),this.root.push(new n.Attributes({val:e}))}}t.Style=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t,r){super("w:tabs"),this.root.push(new c(e,t,r))}}var o,i,a;t.TabStop=s,(a=t.TabStopType||(t.TabStopType={})).LEFT="left",a.RIGHT="right",a.CENTER="center",a.BAR="bar",a.CLEAR="clear",a.DECIMAL="decimal",a.END="end",a.NUM="num",a.START="start",(i=t.LeaderType||(t.LeaderType={})).DOT="dot",i.HYPHEN="hyphen",i.MIDDLE_DOT="middleDot",i.NONE="none",i.UNDERSCORE="underscore",(o=t.TabStopPosition||(t.TabStopPosition={}))[o.MAX=9026]="MAX";class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",pos:"w:pos",leader:"w:leader"}}}t.TabAttributes=u;class c extends n.XmlComponent{constructor(e,t,r){super("w:tab"),this.root.push(new u({val:e,pos:t,leader:r}))}}t.TabStopItem=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t){super("w:numPr"),this.root.push(new o(t)),this.root.push(new i(e))}}t.NumberProperties=s;class o extends n.XmlComponent{constructor(e){super("w:ilvl"),this.root.push(new n.Attributes({val:e}))}}class i extends n.XmlComponent{constructor(e){super("w:numId"),this.root.push(new n.Attributes({val:"string"==typeof e?`{${e}}`:e}))}}},function(e,t,r){"use strict";e.exports=r(219)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:den");for(const t of e)this.root.push(t)}}t.MathDenominator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:num");for(const t of e)this.root.push(t)}}t.MathNumerator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={accent:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:chr"),this.root.push(new s({accent:e}))}}t.MathAccentCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:e");for(const t of e)this.root.push(t)}}t.MathBase=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:limLoc"),this.root.push(new s({value:"undOvr"}))}}t.MathLimitLocation=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(88),o=r(90),i=r(236),a=r(237);class u extends n.XmlComponent{constructor(e,t,r){super("m:naryPr"),this.root.push(new s.MathAccentCharacter(e)),this.root.push(new o.MathLimitLocation),t||this.root.push(new a.MathSuperScriptHide),r||this.root.push(new i.MathSubScriptHide)}}t.MathNArayProperties=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:sub");for(const t of e)this.root.push(t)}}t.MathSubScriptElement=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:sup");for(const t of e)this.root.push(t)}}t.MathSuperScriptElement=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSupPr")}}t.MathSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSubPr")}}t.MathSubScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSubSupPr")}}t.MathSubSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sPrePr")}}t.MathPreSubSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){if(super("m:deg"),e)for(const t of e)this.root.push(t)}}t.MathDegree=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(251);class o extends n.XmlComponent{constructor(e){super("m:radPr"),e||this.root.push(new s.MathDegreeHide)}}t.MathRadicalProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:fName");for(const t of e)this.root.push(t)}}t.MathFunctionName=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:funcPr")}}t.MathFunctionProperties=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(269)),n(r(108)),n(r(110)),n(r(103)),n(r(109))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(23),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:tblBorders"),e.top?this.root.push(new i("w:top",e.top.style,e.top.size,0,e.top.color)):this.root.push(new i("w:top",n.BorderStyle.SINGLE,4,0,"auto")),e.left?this.root.push(new i("w:left",e.left.style,e.left.size,0,e.left.color)):this.root.push(new i("w:left",n.BorderStyle.SINGLE,4,0,"auto")),e.bottom?this.root.push(new i("w:bottom",e.bottom.style,e.bottom.size,0,e.bottom.color)):this.root.push(new i("w:bottom",n.BorderStyle.SINGLE,4,0,"auto")),e.right?this.root.push(new i("w:right",e.right.style,e.right.size,0,e.right.color)):this.root.push(new i("w:right",n.BorderStyle.SINGLE,4,0,"auto")),e.insideHorizontal?this.root.push(new i("w:insideH",e.insideHorizontal.style,e.insideHorizontal.size,0,e.insideHorizontal.color)):this.root.push(new i("w:insideH",n.BorderStyle.SINGLE,4,0,"auto")),e.insideVertical?this.root.push(new i("w:insideV",e.insideVertical.style,e.insideVertical.size,0,e.insideVertical.color)):this.root.push(new i("w:insideV",n.BorderStyle.SINGLE,4,0,"auto"))}}t.TableBorders=o;class i extends s.XmlComponent{constructor(e,t,r,n,s){super(e),this.root.push(new a({value:t,size:r,space:n,color:s}))}}class a extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:val",size:"w:sz",space:"w:space",color:"w:color"}}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(39)),n(r(41)),n(r(42)),n(r(271))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(106)),n(r(107)),n(r(274))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(21),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:pPrDefault"),this.root.push(new n.ParagraphProperties(e))}}t.ParagraphPropertiesDefaults=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(9),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:rPrDefault"),this.properties=new n.RunProperties(e),this.root.push(this.properties)}}t.RunPropertiesDefaults=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(109);var o,i,a;(a=t.TableAnchorType||(t.TableAnchorType={})).MARGIN="margin",a.PAGE="page",a.TEXT="text",(i=t.RelativeHorizontalPosition||(t.RelativeHorizontalPosition={})).CENTER="center",i.INSIDE="inside",i.LEFT="left",i.OUTSIDE="outside",i.RIGHT="right",(o=t.RelativeVerticalPosition||(t.RelativeVerticalPosition={})).CENTER="center",o.INSIDE="inside",o.BOTTOM="bottom",o.OUTSIDE="outside",o.INLINE="inline",o.TOP="top";class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={horizontalAnchor:"w:horzAnchor",verticalAnchor:"w:vertAnchor",absoluteHorizontalPosition:"w:tblpX",relativeHorizontalPosition:"w:tblpXSpec",absoluteVerticalPosition:"w:tblpY",relativeVerticalPosition:"w:tblpYSpec",bottomFromText:"w:bottomFromText",topFromText:"w:topFromText",leftFromText:"w:leftFromText",rightFromText:"w:rightFromText"}}}t.TableFloatOptionsAttributes=u;class c extends n.XmlComponent{constructor(e){super("w:tblpPr"),this.root.push(new u(e)),e.overlap&&this.root.push(new s.TableOverlap(e.overlap))}}t.TableFloatProperties=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.OverlapType||(t.OverlapType={})).NEVER="never",s.OVERLAP="overlap";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class i extends n.XmlComponent{constructor(e){super("w:tblOverlap"),this.root.push(new o({val:e}))}}t.TableOverlap=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.TableLayoutType||(t.TableLayoutType={})).AUTOFIT="autofit",s.FIXED="fixed";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type"}}}class i extends n.XmlComponent{constructor(e){super("w:tblLayout"),this.root.push(new o({type:e}))}}t.TableLayout=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(112);class o extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:trPr")}setCantSplit(){return this.root.push(new a),this}setTableHeader(){return this.root.push(new c),this}setHeight(e,t){return this.root.push(new s.TableRowHeight(e,t)),this}}t.TableRowProperties=o;class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class a extends n.XmlComponent{constructor(){super("w:cantSplit"),this.root.push(new i({val:!0}))}}t.CantSplit=a;class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class c extends n.XmlComponent{constructor(){super("w:tblHeader"),this.root.push(new u({val:!0}))}}t.TableHeader=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeightRule||(t.HeightRule={})).AUTO="auto",s.ATLEAST="atLeast",s.EXACT="exact";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={height:"w:val",rule:"w:hRule"}}}t.TableRowHeightAttributes=o;class i extends n.XmlComponent{constructor(e,t){super("w:trHeight"),this.root.push(new o({height:e,rule:t}))}}t.TableRowHeight=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(291)),n(r(11)),n(r(114)),n(r(129))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(292)),n(r(128))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(293),o=r(295),i=r(116),a=r(117),u=r(119),c=r(120),l=r(122),h=r(123),p=r(299),d=r(124),f=r(125),m=r(43),g=r(302),w=r(126);class y extends n.XmlComponent{constructor(e={column:{}}){super("w:sectPr");const{width:t=11906,height:r=16838,top:n=1440,right:i=1440,bottom:a=1440,left:u=1440,header:c=708,footer:y=708,gutter:b=0,mirror:_=!1,column:v={},linePitch:x=360,orientation:T=m.PageOrientation.PORTRAIT,headers:E,footers:C,pageNumberFormatType:A,pageNumberStart:P,lineNumberCountBy:S,lineNumberStart:O,lineNumberRestart:R,lineNumberDistance:k,pageBorders:I,pageBorderTop:M,pageBorderRight:N,pageBorderBottom:D,pageBorderLeft:F,titlePage:j=!1,verticalAlign:B}=e;this.options=e,this.root.push(new f.PageSize(t,r,T)),this.root.push(new p.PageMargin(n,i,a,u,c,y,b,_)),this.root.push(new s.Columns(v.space?v.space:708,v.count?v.count:1)),this.root.push(new o.DocumentGrid(x)),this.addHeaders(E),this.addFooters(C),(P||A)&&this.root.push(new d.PageNumberType(P,A)),(S||O||R||k)&&this.root.push(new l.LineNumberType(S,O,R,k)),(I||M||N||D||F)&&this.root.push(new h.PageBorders({pageBorders:I,pageBorderTop:M,pageBorderRight:N,pageBorderBottom:D,pageBorderLeft:F})),j&&this.root.push(new g.TitlePage),B&&this.root.push(new w.SectionVerticalAlign(B))}addHeaders(e){e&&(e.default&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.DEFAULT,headerId:e.default.Header.ReferenceId})),e.first&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.FIRST,headerId:e.first.Header.ReferenceId})),e.even&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.EVEN,headerId:e.even.Header.ReferenceId})))}addFooters(e){e&&(e.default&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.DEFAULT,footerId:e.default.Footer.ReferenceId})),e.first&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.FIRST,footerId:e.first.Footer.ReferenceId})),e.even&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.EVEN,footerId:e.even.Footer.ReferenceId})))}get Options(){return this.options}}t.SectionProperties=y},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(117)),n(r(118))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(118);class o extends n.XmlComponent{constructor(e){super("w:footerReference"),this.root.push(new s.FooterReferenceAttributes({type:e.footerType||s.FooterReferenceType.DEFAULT,id:`rId${e.footerId}`}))}}t.FooterReference=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.FooterReferenceType||(t.FooterReferenceType={})).DEFAULT="default",s.FIRST="first",s.EVEN="even";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"r:id"}}}t.FooterReferenceAttributes=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(120)),n(r(121))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(121);class o extends n.XmlComponent{constructor(e){super("w:headerReference"),this.root.push(new s.HeaderReferenceAttributes({type:e.headerType||s.HeaderReferenceType.DEFAULT,id:`rId${e.headerId}`}))}}t.HeaderReference=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeaderReferenceType||(t.HeaderReferenceType={})).DEFAULT="default",s.FIRST="first",s.EVEN="even";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"r:id"}}}t.HeaderReferenceAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(297))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(298))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(301))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(43);class o extends n.XmlComponent{constructor(e,t,r){super("w:pgSz");const n=r===s.PageOrientation.LANDSCAPE;this.root.push(new s.PageSizeAttributes({width:n?t:e,height:n?e:t,orientation:r}))}}t.PageSize=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(304)),n(r(127))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={verticalAlign:"w:val"}}}t.SectionVerticalAlignAttributes=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(115)),n(r(116)),n(r(119)),n(r(305)),n(r(124)),n(r(123)),n(r(122)),n(r(126))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(306))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(312)),n(r(322))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Header=class{constructor(e={children:[]}){this.options=e}},t.Footer=class{constructor(e={children:[]}){this.options=e}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(329)),n(r(133)),n(r(49)),n(r(134))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(49),o=r(330);class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={abstractNumId:"w:abstractNumId",restartNumberingAfterBreak:"w15:restartNumberingAfterBreak"}}}class a extends n.XmlComponent{constructor(e,t){super("w:abstractNum"),this.root.push(new i({abstractNumId:e,restartNumberingAfterBreak:0})),this.root.push(new o.MultiLevelType("hybridMultilevel")),this.id=e;for(const e of t)this.root.push(new s.Level(e))}}t.AbstractNumbering=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(49);class o extends n.XmlComponent{constructor(e){super("w:abstractNumId"),this.root.push(new n.Attributes({val:e}))}}class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={numId:"w:numId"}}}class a extends n.XmlComponent{constructor(e,t,r){super("w:num"),this.reference=r,this.root.push(new i({numId:e})),this.root.push(new o(t)),this.id=e}overrideLevel(e,t){const r=new c(e,t);return this.root.push(r),r}}t.ConcreteNumbering=a;class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl"}}}class c extends n.XmlComponent{constructor(e,t){super("w:lvlOverride"),this.levelNum=e,this.root.push(new u({ilvl:e})),void 0!==t&&this.root.push(new h(t)),this.lvl=new s.LevelForOverride({level:this.levelNum}),this.root.push(this.lvl)}get Level(){return this.lvl}}t.LevelOverride=c;class l extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class h extends n.XmlComponent{constructor(e){super("w:startOverride"),this.root.push(new l({val:e}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={enabled:"w:val"}}}t.UpdateFieldsAttributes=s;class o extends n.XmlComponent{constructor(e=!0){super("w:updateFields"),this.root.push(new s({enabled:e}))}}t.UpdateFields=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id",author:"w:author",date:"w:date"}}}t.ChangeAttributes=s},function(e,t,r){(function(t,r,n){e.exports=function e(t,r,n){function s(i,a){if(!r[i]){if(!t[i]){if(o)return o(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[i]={exports:{}};t[i][0].call(c.exports,(function(e){return s(t[i][1][e]||e)}),c,c.exports,e,t,r,n)}return r[i].exports}for(var o=!1,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,t,r){"use strict";var n=e("./utils"),s=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,s,i,a,u,c,l=[],h=0,p=e.length,d=p,f="string"!==n.getTypeOf(e);h<e.length;)d=p-h,s=f?(t=e[h++],r=h<p?e[h++]:0,h<p?e[h++]:0):(t=e.charCodeAt(h++),r=h<p?e.charCodeAt(h++):0,h<p?e.charCodeAt(h++):0),i=t>>2,a=(3&t)<<4|r>>4,u=1<d?(15&r)<<2|s>>6:64,c=2<d?63&s:64,l.push(o.charAt(i)+o.charAt(a)+o.charAt(u)+o.charAt(c));return l.join("")},r.decode=function(e){var t,r,n,i,a,u,c=0,l=0,h="data:";if(e.substr(0,h.length)===h)throw new Error("Invalid base64 input, it looks like a data url.");var p,d=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&d--,e.charAt(e.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(p=s.uint8array?new Uint8Array(0|d):new Array(0|d);c<e.length;)t=o.indexOf(e.charAt(c++))<<2|(i=o.indexOf(e.charAt(c++)))>>4,r=(15&i)<<4|(a=o.indexOf(e.charAt(c++)))>>2,n=(3&a)<<6|(u=o.indexOf(e.charAt(c++))),p[l++]=t,64!==a&&(p[l++]=r),64!==u&&(p[l++]=n);return p}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),s=e("./stream/DataWorker"),o=e("./stream/DataLengthProbe"),i=e("./stream/Crc32Probe");function a(e,t,r,n,s){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=s}o=e("./stream/DataLengthProbe"),a.prototype={getContentWorker:function(){var e=new s(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new s(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,r){return e.pipe(new i).pipe(new o("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(e){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),s=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var o=s,i=0+r;e^=-1;for(var a=0;a<i;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}(0|t,e,e.length):function(e,t,r,n){var o=s,i=0+r;e^=-1;for(var a=0;a<i;a++)e=e>>>8^o[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,s=e("pako"),o=e("./utils"),i=e("./stream/GenericWorker"),a=n?"uint8array":"array";function u(e,t){i.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",o.inherits(u,i),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(a,e.data),!1)},u.prototype.flush=function(){i.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new s[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new u("Deflate",e)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function s(e,t,r,s,i,l){var h,p,d=e.file,f=e.compression,m=l!==a.utf8encode,g=o.transformTo("string",l(d.name)),w=o.transformTo("string",a.utf8encode(d.name)),y=d.comment,b=o.transformTo("string",l(y)),_=o.transformTo("string",a.utf8encode(y)),v=w.length!==d.name.length,x=_.length!==y.length,T="",E="",C="",A=d.dir,P=d.date,S={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(S.crc32=e.crc32,S.compressedSize=e.compressedSize,S.uncompressedSize=e.uncompressedSize);var O=0;t&&(O|=8),m||!v&&!x||(O|=2048);var R=0,k=0;A&&(R|=16),"UNIX"===i?(k=798,R|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(d.unixPermissions,A)):(k=20,R|=function(e){return 63&(e||0)}(d.dosPermissions)),h=P.getUTCHours(),h<<=6,h|=P.getUTCMinutes(),h<<=5,h|=P.getUTCSeconds()/2,p=P.getUTCFullYear()-1980,p<<=4,p|=P.getUTCMonth()+1,p<<=5,p|=P.getUTCDate(),v&&(E=n(1,1)+n(u(g),4)+w,T+="up"+n(E.length,2)+E),x&&(C=n(1,1)+n(u(b),4)+_,T+="uc"+n(C.length,2)+C);var I="";return I+="\n\0",I+=n(O,2),I+=f.magic,I+=n(h,2),I+=n(p,2),I+=n(S.crc32,4),I+=n(S.compressedSize,4),I+=n(S.uncompressedSize,4),I+=n(g.length,2),I+=n(T.length,2),{fileRecord:c.LOCAL_FILE_HEADER+I+g+T,dirRecord:c.CENTRAL_FILE_HEADER+n(k,2)+I+n(b.length,2)+"\0\0\0\0"+n(R,4)+n(s,4)+g+T+b}}var o=e("../utils"),i=e("../stream/GenericWorker"),a=e("../utf8"),u=e("../crc32"),c=e("../signature");function l(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(l,i),l.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},l.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=s(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},l.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=s(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return c.DATA_DESCRIPTOR+n(e.crc32,4)+n(e.compressedSize,4)+n(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},l.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,s=function(e,t,r,s,i){var a=o.transformTo("string",i(s));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(e,2)+n(e,2)+n(t,4)+n(r,4)+n(a.length,2)+a}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:s,meta:{percent:100}})},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},l.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},l.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},l.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=l},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),s=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var o=new s(t.streamFiles,r,t.platform,t.encodeFileName),i=0;try{e.forEach((function(e,r){i++;var s=function(e,t){var r=e||t,s=n[r];if(!s)throw new Error(r+" is not a valid compression method !");return s}(r.options.compression,t.compression),a=r.options.compressionOptions||t.compressionOptions||{},u=r.dir,c=r.date;r._compressWorker(s,a).withStreamInfo("file",{name:e,dir:u,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(o)})),o.entriesCount=i}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.5.0",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),s=e("./external"),o=e("./utf8"),i=(n=e("./utils"),e("./zipEntries")),a=e("./stream/Crc32Probe"),u=e("./nodejsUtils");function c(e){return new s.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new a);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(e)?s.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new i(t);return r.load(e),r})).then((function(e){var r=[s.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var o=0;o<n.length;o++)r.push(c(n[o]));return s.Promise.all(r)})).then((function(e){for(var n=e.shift(),s=n.files,o=0;o<s.length;o++){var i=s[o];r.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:t.createFolders})}return n.zipComment.length&&(r.comment=n.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),s=e("../stream/GenericWorker");function o(e,t){s.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(o,s),o.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},o.prototype.pause=function(){return!!s.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function s(e,t,r){n.call(this,t),this._helper=e;var s=this;e.on("data",(function(e,t){s.push(e)||s._helper.pause(),r&&r(t)})).on("error",(function(e){s.emit("error",e)})).on("end",(function(){s.push(null)}))}e("../utils").inherits(s,n),s.prototype._read=function(){this._helper.resume()},t.exports=s},{"../utils":32,"readable-stream":16}],14:[function(e,r,n){"use strict";r.exports={isNode:void 0!==t,newBufferFrom:function(e,r){if(t.from&&t.from!==Uint8Array.from)return t.from(e,r);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new t(e,r)},allocBuffer:function(e){if(t.alloc)return t.alloc(e);var r=new t(e);return r.fill(0),r},isBuffer:function(e){return t.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function n(e,t,r){var n,s=o.getTypeOf(t),a=o.extend(r||{},u);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(e=m(e)),a.createFolders&&(n=f(e))&&g.call(this,n,!0);var h="string"===s&&!1===a.binary&&!1===a.base64;r&&void 0!==r.binary||(a.binary=!h),(t instanceof c&&0===t.uncompressedSize||a.dir||!t||0===t.length)&&(a.base64=!1,a.binary=!0,t="",a.compression="STORE",s="string");var w;w=t instanceof c||t instanceof i?t:p.isNode&&p.isStream(t)?new d(e,t):o.prepareContent(e,t,a.binary,a.optimizedBinaryString,a.base64);var y=new l(e,w,a);this.files[e]=y}var s=e("./utf8"),o=e("./utils"),i=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),u=e("./defaults"),c=e("./compressedObject"),l=e("./zipObject"),h=e("./generate"),p=e("./nodejsUtils"),d=e("./nodejs/NodejsStreamInputAdapter"),f=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:u.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function w(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n))},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(w(e)){var s=e;return this.filter((function(e,t){return!t.dir&&s.test(e)}))}var o=this.files[this.root+e];return o&&!o.dir?o:null},folder:function(e){if(!e)return this;if(w(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=g.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=o.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:s.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");o.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=h.generateWorker(this,r,n)}catch(e){(t=new i("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function s(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(s,n),s.prototype.byteAt=function(e){return this.data[this.zero+e]},s.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),s=e.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===t&&this.data[o+1]===r&&this.data[o+2]===n&&this.data[o+3]===s)return o-this.zero;return-1},s.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),s=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&r===o[1]&&n===o[2]&&s===o[3]},s.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function s(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}s.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=s},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},s.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},s.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},s.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),s=e("../support"),o=e("./ArrayReader"),i=e("./StringReader"),a=e("./NodeBufferReader"),u=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||s.uint8array?"nodebuffer"===t?new a(e):s.uint8array?new u(n.transformTo("uint8array",e)):new o(n.transformTo("array",e)):new i(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),s=e("../utils");function o(e){n.call(this,"ConvertWorker to "+e),this.destType=e}s.inherits(o,n),o.prototype.processChunk=function(e){this.push({data:s.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),s=e("../crc32");function o(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,n),o.prototype.processChunk=function(e){this.streamInfo.crc32=s(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),s=e("./GenericWorker");function o(e){s.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(o,s),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}s.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),s=e("./GenericWorker");function o(e){s.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(o,s),o.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,r,n){"use strict";var s=e("../utils"),o=e("./ConvertWorker"),i=e("./GenericWorker"),a=e("../base64"),u=e("../support"),c=e("../external"),l=null;if(u.nodestream)try{l=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function h(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=t,this._mimeType=r,s.checkSupport(n),this._worker=e.pipe(new o(n)),e.lock()}catch(e){this._worker=new i("error"),this._worker.error(e)}}h.prototype={accumulate:function(e){return function(e,r){return new c.Promise((function(n,o){var i=[],u=e._internalType,c=e._outputType,l=e._mimeType;e.on("data",(function(e,t){i.push(e),r&&r(t)})).on("error",(function(e){i=[],o(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return s.newBlob(s.transformTo("arraybuffer",t),r);case"base64":return a.encode(t);default:return s.transformTo(e,t)}}(c,function(e,r){var n,s=0,o=null,i=0;for(n=0;n<r.length;n++)i+=r[n].length;switch(e){case"string":return r.join("");case"array":return Array.prototype.concat.apply([],r);case"uint8array":for(o=new Uint8Array(i),n=0;n<r.length;n++)o.set(r[n],s),s+=r[n].length;return o;case"nodebuffer":return t.concat(r);default:throw new Error("concat : unsupported type '"+e+"'")}}(u,i),l);n(e)}catch(e){o(e)}i=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){s.delay(t,arguments,r)})),this},resume:function(){return s.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(s.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:"nodebuffer"!==this._outputType},e)}},r.exports=h},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,r,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer=void 0!==t,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var s=new ArrayBuffer(0);try{n.blob=0===new Blob([s],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(s),n.blob=0===o.getBlob("application/zip").size}catch(e){n.blob=!1}}}try{n.nodestream=!!e("readable-stream").Readable}catch(e){n.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),s=e("./support"),o=e("./nodejsUtils"),i=e("./stream/GenericWorker"),a=new Array(256),u=0;u<256;u++)a[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){i.call(this,"utf-8 decode"),this.leftOver=null}function l(){i.call(this,"utf-8 encode")}a[254]=a[254]=1,r.utf8encode=function(e){return s.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,r,n,o,i,a=e.length,u=0;for(o=0;o<a;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=s.uint8array?new Uint8Array(u):new Array(u),o=i=0;i<u;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),r<128?t[i++]=r:(r<2048?t[i++]=192|r>>>6:(r<65536?t[i++]=224|r>>>12:(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63),t[i++]=128|r>>>6&63),t[i++]=128|63&r);return t}(e)},r.utf8decode=function(e){return s.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,s,o,i=e.length,u=new Array(2*i);for(t=r=0;t<i;)if((s=e[t++])<128)u[r++]=s;else if(4<(o=a[s]))u[r++]=65533,t+=o-1;else{for(s&=2===o?31:3===o?15:7;1<o&&t<i;)s=s<<6|63&e[t++],o--;1<o?u[r++]=65533:s<65536?u[r++]=s:(s-=65536,u[r++]=55296|s>>10&1023,u[r++]=56320|1023&s)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)}(e=n.transformTo(s.uint8array?"uint8array":"array",e))},n.inherits(c,i),c.prototype.processChunk=function(e){var t=n.transformTo(s.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(s.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var i=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}(t),u=t;i!==t.length&&(s.uint8array?(u=t.subarray(0,i),this.leftOver=t.subarray(i,t.length)):(u=t.slice(0,i),this.leftOver=t.slice(i,t.length))),this.push({data:r.utf8decode(u),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(l,i),l.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),s=e("./base64"),o=e("./nodejsUtils"),i=e("set-immediate-shim"),a=e("./external");function u(e){return e}function c(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(e,t,r){var n=[],s=0,o=e.length;if(o<=r)return String.fromCharCode.apply(null,e);for(;s<o;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(s,Math.min(s+r,o)))):n.push(String.fromCharCode.apply(null,e.subarray(s,Math.min(s+r,o)))),s+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(e){return!1}}()}};function h(e){var t=65536,n=r.getTypeOf(e),s=!0;if("uint8array"===n?s=l.applyCanBeUsed.uint8array:"nodebuffer"===n&&(s=l.applyCanBeUsed.nodebuffer),s)for(;1<t;)try{return l.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return l.stringifyByChar(e)}function p(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=h;var d={};d.string={string:u,array:function(e){return c(e,new Array(e.length))},arraybuffer:function(e){return d.string.uint8array(e).buffer},uint8array:function(e){return c(e,new Uint8Array(e.length))},nodebuffer:function(e){return c(e,o.allocBuffer(e.length))}},d.array={string:h,array:u,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(e)}},d.arraybuffer={string:function(e){return h(new Uint8Array(e))},array:function(e){return p(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:u,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(new Uint8Array(e))}},d.uint8array={string:h,array:function(e){return p(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:u,nodebuffer:function(e){return o.newBufferFrom(e)}},d.nodebuffer={string:h,array:function(e){return p(e,new Array(e.length))},arraybuffer:function(e){return d.nodebuffer.uint8array(e).buffer},uint8array:function(e){return p(e,new Uint8Array(e.length))},nodebuffer:u},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return d[n][e](t)},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&o.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){i((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,o,i,u){return a.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var l=r.getTypeOf(t);return l?("arraybuffer"===l?t=r.transformTo("uint8array",t):"string"===l&&(u?t=s.decode(t):o&&!0!==i&&(t=function(e){return c(e,n.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),o=e("./signature"),i=e("./zipEntry"),a=(e("./utf8"),e("./support"));function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+s.pretty(t)+", expected "+s.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",r=s.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new i({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===s.MAX_VALUE_16BITS||this.diskWithCentralDirStart===s.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===s.MAX_VALUE_16BITS||this.centralDirRecords===s.MAX_VALUE_16BITS||this.centralDirSize===s.MAX_VALUE_32BITS||this.centralDirOffset===s.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),o=e("./compressedObject"),i=e("./crc32"),a=e("./utf8"),u=e("./compressions"),c=e("./support");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,s=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<s;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(s)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var o=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||i(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||i(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e("./stream/StreamHelper"),o=e("./stream/DataWorker"),i=e("./utf8"),a=e("./compressedObject"),u=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var o=!this._dataBinary;o&&!n&&(t=t.pipe(new i.Utf8EncodeWorker)),!o&&n&&(t=t.pipe(new i.Utf8DecodeWorker))}catch(e){(t=new u("error")).error(e)}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new i.Utf8EncodeWorker)),a.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof u?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<c.length;h++)n.prototype[c[h]]=l;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,n){(function(e){"use strict";var r,n,s=e.MutationObserver||e.WebKitMutationObserver;if(s){var o=0,i=new s(l),a=e.document.createTextNode("");i.observe(a,{characterData:!0}),r=function(){a.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var u=new e.MessageChannel;u.port1.onmessage=l,r=function(){u.port2.postMessage(0)}}var c=[];function l(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}t.exports=function(e){1!==c.push(e)||n||r()}}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function s(){}var o={},i=["REJECTED"],a=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==s&&d(this,e)}function l(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function h(e,t,r){n((function(){var n;try{n=t(r)}catch(n){return o.reject(e,n)}n===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,n)}))}function p(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function d(e,t){var r=!1;function n(t){r||(r=!0,o.reject(e,t))}function s(t){r||(r=!0,o.resolve(e,t))}var i=f((function(){t(s,n)}));"error"===i.status&&n(i.value)}function f(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===i)return this;var r=new this.constructor(s);return this.state!==u?h(r,this.state===a?e:t,this.outcome):this.queue.push(new l(r,e,t)),r},l.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){o.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},o.resolve=function(e,t){var r=f(p,t);if("error"===r.status)return o.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var s=-1,i=e.queue.length;++s<i;)e.queue[s].callFulfilled(t)}return e},o.reject=function(e,t){e.state=i,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:o.resolve(new this(s),e)},c.reject=function(e){var t=new this(s);return o.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var i=new Array(r),a=0,u=-1,c=new this(s);++u<r;)l(e[u],u);return c;function l(e,s){t.resolve(e).then((function(e){i[s]=e,++a!==r||n||(n=!0,o.resolve(c,i))}),(function(e){n||(n=!0,o.reject(c,e))}))}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,a=new this(s);++i<t;)n=e[i],this.resolve(n).then((function(e){r||(r=!0,o.resolve(a,e))}),(function(e){r||(r=!0,o.reject(a,e))}));return a}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),s=e("./utils/common"),o=e("./utils/strings"),i=e("./zlib/messages"),a=e("./zlib/zstream"),u=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=s.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==r)throw new Error(i[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var l;if(l="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(i[r]);this._dict_set=!0}}function l(e,t){var r=new c(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}c.prototype.push=function(e,t){var r,i,a=this.strm,c=this.options.chunkSize;if(this.ended)return!1;i=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=o.string2buf(e):"[object ArrayBuffer]"===u.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new s.Buf8(c),a.next_out=0,a.avail_out=c),1!==(r=n.deflate(a,i))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(o.buf2binstring(s.shrinkBuf(a.output,a.next_out))):this.onData(s.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&1!==r);return 4===i?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==i||(this.onEnd(0),!(a.avail_out=0))},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=c,r.deflate=l,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,l(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,l(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),s=e("./utils/common"),o=e("./utils/strings"),i=e("./zlib/constants"),a=e("./zlib/messages"),u=e("./zlib/zstream"),c=e("./zlib/gzheader"),l=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=s.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==i.Z_OK)throw new Error(a[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function p(e,t){var r=new h(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}h.prototype.push=function(e,t){var r,a,u,c,h,p,d=this.strm,f=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?i.Z_FINISH:i.Z_NO_FLUSH,"string"==typeof e?d.input=o.binstring2buf(e):"[object ArrayBuffer]"===l.call(e)?d.input=new Uint8Array(e):d.input=e,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new s.Buf8(f),d.next_out=0,d.avail_out=f),(r=n.inflate(d,i.Z_NO_FLUSH))===i.Z_NEED_DICT&&m&&(p="string"==typeof m?o.string2buf(m):"[object ArrayBuffer]"===l.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,p)),r===i.Z_BUF_ERROR&&!0===g&&(r=i.Z_OK,g=!1),r!==i.Z_STREAM_END&&r!==i.Z_OK)return this.onEnd(r),!(this.ended=!0);d.next_out&&(0!==d.avail_out&&r!==i.Z_STREAM_END&&(0!==d.avail_in||a!==i.Z_FINISH&&a!==i.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(d.output,d.next_out),c=d.next_out-u,h=o.buf2string(d.output,u),d.next_out=c,d.avail_out=f-c,c&&s.arraySet(d.output,d.output,u,c,0),this.onData(h)):this.onData(s.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(g=!0)}while((0<d.avail_in||0===d.avail_out)&&r!==i.Z_STREAM_END);return r===i.Z_STREAM_END&&(a=i.Z_FINISH),a===i.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===i.Z_OK):a!==i.Z_SYNC_FLUSH||(this.onEnd(i.Z_OK),!(d.avail_out=0))},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===i.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=h,r.inflate=p,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},r.ungzip=p},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var s={arraySet:function(e,t,r,n,s){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),s);else for(var o=0;o<n;o++)e[s+o]=t[r+o]},flattenChunks:function(e){var t,r,n,s,o,i;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(i=new Uint8Array(n),t=s=0,r=e.length;t<r;t++)o=e[t],i.set(o,s),s+=o.length;return i}},o={arraySet:function(e,t,r,n,s){for(var o=0;o<n;o++)e[s+o]=t[r+o]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,s)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,o))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),s=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){s=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var i=new n.Buf8(256),a=0;a<256;a++)i[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function u(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&s))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",i=0;i<t;i++)r+=String.fromCharCode(e[i]);return r}i[254]=i[254]=1,r.string2buf=function(e){var t,r,s,o,i,a=e.length,u=0;for(o=0;o<a;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(s=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(s-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(u),o=i=0;i<u;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(s=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(s-56320),o++),r<128?t[i++]=r:(r<2048?t[i++]=192|r>>>6:(r<65536?t[i++]=224|r>>>12:(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63),t[i++]=128|r>>>6&63),t[i++]=128|63&r);return t},r.buf2binstring=function(e){return u(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,s=t.length;r<s;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,s,o,a=t||e.length,c=new Array(2*a);for(r=n=0;r<a;)if((s=e[r++])<128)c[n++]=s;else if(4<(o=i[s]))c[n++]=65533,r+=o-1;else{for(s&=2===o?31:3===o?15:7;1<o&&r<a;)s=s<<6|63&e[r++],o--;1<o?c[n++]=65533:s<65536?c[n++]=s:(s-=65536,c[n++]=55296|s>>10&1023,c[n++]=56320|1023&s)}return u(c,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+i[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var s=65535&e|0,o=e>>>16&65535|0,i=0;0!==r;){for(r-=i=2e3<r?2e3:r;o=o+(s=s+t[n++]|0)|0,--i;);s%=65521,o%=65521}return s|o<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,s){var o=n,i=s+r;e^=-1;for(var a=s;a<i;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){"use strict";var n,s=e("../utils/common"),o=e("./trees"),i=e("./adler32"),a=e("./crc32"),u=e("./messages"),c=-2,l=258,h=262,p=113;function d(e,t){return e.msg=u[t],t}function f(e){return(e<<1)-(4<e?9:0)}function m(e){for(var t=e.length;0<=--t;)e[t]=0}function g(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(s.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function w(e,t){o._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,g(e.strm)}function y(e,t){e.pending_buf[e.pending++]=t}function b(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function _(e,t){var r,n,s=e.max_chain_length,o=e.strstart,i=e.prev_length,a=e.nice_match,u=e.strstart>e.w_size-h?e.strstart-(e.w_size-h):0,c=e.window,p=e.w_mask,d=e.prev,f=e.strstart+l,m=c[o+i-1],g=c[o+i];e.prev_length>=e.good_match&&(s>>=2),a>e.lookahead&&(a=e.lookahead);do{if(c[(r=t)+i]===g&&c[r+i-1]===m&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<f);if(n=l-(f-o),o=f-l,i<n){if(e.match_start=t,a<=(i=n))break;m=c[o+i-1],g=c[o+i]}}}while((t=d[t&p])>u&&0!=--s);return i<=e.lookahead?i:e.lookahead}function v(e){var t,r,n,o,u,c,l,p,d,f,m=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-h)){for(s.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=r=e.hash_size;n=e.head[--t],e.head[t]=m<=n?n-m:0,--r;);for(t=r=m;n=e.prev[--t],e.prev[t]=m<=n?n-m:0,--r;);o+=m}if(0===e.strm.avail_in)break;if(c=e.strm,l=e.window,p=e.strstart+e.lookahead,f=void 0,(d=o)<(f=c.avail_in)&&(f=d),r=0===f?0:(c.avail_in-=f,s.arraySet(l,c.input,c.next_in,f,p),1===c.state.wrap?c.adler=i(c.adler,l,f,p):2===c.state.wrap&&(c.adler=a(c.adler,l,f,p)),c.next_in+=f,c.total_in+=f,f),e.lookahead+=r,e.lookahead+e.insert>=3)for(u=e.strstart-e.insert,e.ins_h=e.window[u],e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+3-1])&e.hash_mask,e.prev[u&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=u,u++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<h&&0!==e.strm.avail_in)}function x(e,t){for(var r,n;;){if(e.lookahead<h){if(v(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-h&&(e.match_length=_(e,r)),e.match_length>=3)if(n=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}function T(e,t){for(var r,n,s;;){if(e.lookahead<h){if(v(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-h&&(e.match_length=_(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(s=e.strstart+e.lookahead-3,n=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=s&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(w(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=o._tr_tally(e,0,e.window[e.strstart-1]))&&w(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}function E(e,t,r,n,s){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=s}function C(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new s.Buf16(1146),this.dyn_dtree=new s.Buf16(122),this.bl_tree=new s.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new s.Buf16(16),this.heap=new s.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new s.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function A(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:p,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):d(e,c)}function P(e){var t=A(e);return 0===t&&function(e){e.window_size=2*e.w_size,m(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function S(e,t,r,n,o,i){if(!e)return c;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),o<1||9<o||8!==r||n<8||15<n||t<0||9<t||i<0||4<i)return d(e,c);8===n&&(n=9);var u=new C;return(e.state=u).strm=e,u.wrap=a,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new s.Buf8(2*u.w_size),u.head=new s.Buf16(u.hash_size),u.prev=new s.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new s.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=i,u.method=r,P(e)}n=[new E(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(v(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,w(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-h&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(w(e,!1),e.strm.avail_out),1)})),new E(4,4,8,4,x),new E(4,5,16,8,x),new E(4,6,32,32,x),new E(4,4,16,16,T),new E(8,16,32,32,T),new E(8,16,128,128,T),new E(8,32,128,256,T),new E(32,128,258,1024,T),new E(32,258,258,4096,T)],r.deflateInit=function(e,t){return S(e,t,8,15,8,0)},r.deflateInit2=S,r.deflateReset=P,r.deflateResetKeep=A,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},r.deflate=function(e,t){var r,s,i,u;if(!e||!e.state||5<t||t<0)return e?d(e,c):c;if(s=e.state,!e.output||!e.input&&0!==e.avail_in||666===s.status&&4!==t)return d(e,0===e.avail_out?-5:c);if(s.strm=e,r=s.last_flush,s.last_flush=t,42===s.status)if(2===s.wrap)e.adler=0,y(s,31),y(s,139),y(s,8),s.gzhead?(y(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(s.gzhead.extra?4:0)+(s.gzhead.name?8:0)+(s.gzhead.comment?16:0)),y(s,255&s.gzhead.time),y(s,s.gzhead.time>>8&255),y(s,s.gzhead.time>>16&255),y(s,s.gzhead.time>>24&255),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,255&s.gzhead.os),s.gzhead.extra&&s.gzhead.extra.length&&(y(s,255&s.gzhead.extra.length),y(s,s.gzhead.extra.length>>8&255)),s.gzhead.hcrc&&(e.adler=a(e.adler,s.pending_buf,s.pending,0)),s.gzindex=0,s.status=69):(y(s,0),y(s,0),y(s,0),y(s,0),y(s,0),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,3),s.status=p);else{var h=8+(s.w_bits-8<<4)<<8;h|=(2<=s.strategy||s.level<2?0:s.level<6?1:6===s.level?2:3)<<6,0!==s.strstart&&(h|=32),h+=31-h%31,s.status=p,b(s,h),0!==s.strstart&&(b(s,e.adler>>>16),b(s,65535&e.adler)),e.adler=1}if(69===s.status)if(s.gzhead.extra){for(i=s.pending;s.gzindex<(65535&s.gzhead.extra.length)&&(s.pending!==s.pending_buf_size||(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending!==s.pending_buf_size));)y(s,255&s.gzhead.extra[s.gzindex]),s.gzindex++;s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),s.gzindex===s.gzhead.extra.length&&(s.gzindex=0,s.status=73)}else s.status=73;if(73===s.status)if(s.gzhead.name){i=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending===s.pending_buf_size)){u=1;break}u=s.gzindex<s.gzhead.name.length?255&s.gzhead.name.charCodeAt(s.gzindex++):0,y(s,u)}while(0!==u);s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),0===u&&(s.gzindex=0,s.status=91)}else s.status=91;if(91===s.status)if(s.gzhead.comment){i=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending===s.pending_buf_size)){u=1;break}u=s.gzindex<s.gzhead.comment.length?255&s.gzhead.comment.charCodeAt(s.gzindex++):0,y(s,u)}while(0!==u);s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),0===u&&(s.status=103)}else s.status=103;if(103===s.status&&(s.gzhead.hcrc?(s.pending+2>s.pending_buf_size&&g(e),s.pending+2<=s.pending_buf_size&&(y(s,255&e.adler),y(s,e.adler>>8&255),e.adler=0,s.status=p)):s.status=p),0!==s.pending){if(g(e),0===e.avail_out)return s.last_flush=-1,0}else if(0===e.avail_in&&f(t)<=f(r)&&4!==t)return d(e,-5);if(666===s.status&&0!==e.avail_in)return d(e,-5);if(0!==e.avail_in||0!==s.lookahead||0!==t&&666!==s.status){var _=2===s.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(v(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}(s,t):3===s.strategy?function(e,t){for(var r,n,s,i,a=e.window;;){if(e.lookahead<=l){if(v(e),e.lookahead<=l&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(n=a[s=e.strstart-1])===a[++s]&&n===a[++s]&&n===a[++s]){i=e.strstart+l;do{}while(n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&s<i);e.match_length=l-(i-s),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}(s,t):n[s.level].func(s,t);if(3!==_&&4!==_||(s.status=666),1===_||3===_)return 0===e.avail_out&&(s.last_flush=-1),0;if(2===_&&(1===t?o._tr_align(s):5!==t&&(o._tr_stored_block(s,0,0,!1),3===t&&(m(s.head),0===s.lookahead&&(s.strstart=0,s.block_start=0,s.insert=0))),g(e),0===e.avail_out))return s.last_flush=-1,0}return 4!==t?0:s.wrap<=0?1:(2===s.wrap?(y(s,255&e.adler),y(s,e.adler>>8&255),y(s,e.adler>>16&255),y(s,e.adler>>24&255),y(s,255&e.total_in),y(s,e.total_in>>8&255),y(s,e.total_in>>16&255),y(s,e.total_in>>24&255)):(b(s,e.adler>>>16),b(s,65535&e.adler)),g(e),0<s.wrap&&(s.wrap=-s.wrap),0!==s.pending?0:1)},r.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==p&&666!==t?d(e,c):(e.state=null,t===p?d(e,-3):0):c},r.deflateSetDictionary=function(e,t){var r,n,o,a,u,l,h,p,d=t.length;if(!e||!e.state)return c;if(2===(a=(r=e.state).wrap)||1===a&&42!==r.status||r.lookahead)return c;for(1===a&&(e.adler=i(e.adler,t,d,0)),r.wrap=0,d>=r.w_size&&(0===a&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new s.Buf8(r.w_size),s.arraySet(p,t,d-r.w_size,r.w_size,0),t=p,d=r.w_size),u=e.avail_in,l=e.next_in,h=e.input,e.avail_in=d,e.next_in=0,e.input=t,v(r);r.lookahead>=3;){for(n=r.strstart,o=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--o;);r.strstart=n,r.lookahead=2,v(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=l,e.input=h,e.avail_in=u,r.wrap=a,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,s,o,i,a,u,c,l,h,p,d,f,m,g,w,y,b,_,v,x,T,E,C,A;r=e.state,n=e.next_in,C=e.input,s=n+(e.avail_in-5),o=e.next_out,A=e.output,i=o-(t-e.avail_out),a=o+(e.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,h=r.wnext,p=r.window,d=r.hold,f=r.bits,m=r.lencode,g=r.distcode,w=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{f<15&&(d+=C[n++]<<f,f+=8,d+=C[n++]<<f,f+=8),b=m[d&w];t:for(;;){if(d>>>=_=b>>>24,f-=_,0==(_=b>>>16&255))A[o++]=65535&b;else{if(!(16&_)){if(0==(64&_)){b=m[(65535&b)+(d&(1<<_)-1)];continue t}if(32&_){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}v=65535&b,(_&=15)&&(f<_&&(d+=C[n++]<<f,f+=8),v+=d&(1<<_)-1,d>>>=_,f-=_),f<15&&(d+=C[n++]<<f,f+=8,d+=C[n++]<<f,f+=8),b=g[d&y];r:for(;;){if(d>>>=_=b>>>24,f-=_,!(16&(_=b>>>16&255))){if(0==(64&_)){b=g[(65535&b)+(d&(1<<_)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(x=65535&b,f<(_&=15)&&(d+=C[n++]<<f,(f+=8)<_&&(d+=C[n++]<<f,f+=8)),u<(x+=d&(1<<_)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=_,f-=_,(_=o-i)<x){if(l<(_=x-_)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(E=p,(T=0)===h){if(T+=c-_,_<v){for(v-=_;A[o++]=p[T++],--_;);T=o-x,E=A}}else if(h<_){if(T+=c+h-_,(_-=h)<v){for(v-=_;A[o++]=p[T++],--_;);if(T=0,h<v){for(v-=_=h;A[o++]=p[T++],--_;);T=o-x,E=A}}}else if(T+=h-_,_<v){for(v-=_;A[o++]=p[T++],--_;);T=o-x,E=A}for(;2<v;)A[o++]=E[T++],A[o++]=E[T++],A[o++]=E[T++],v-=3;v&&(A[o++]=E[T++],1<v&&(A[o++]=E[T++]))}else{for(T=o-x;A[o++]=A[T++],A[o++]=A[T++],A[o++]=A[T++],2<(v-=3););v&&(A[o++]=A[T++],1<v&&(A[o++]=A[T++]))}break}}break}}while(n<s&&o<a);n-=v=f>>3,d&=(1<<(f-=v<<3))-1,e.next_in=n,e.next_out=o,e.avail_in=n<s?s-n+5:5-(n-s),e.avail_out=o<a?a-o+257:257-(o-a),r.hold=d,r.bits=f}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),s=e("./adler32"),o=e("./crc32"),i=e("./inffast"),a=e("./inftrees"),u=-2;function c(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function h(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(852),t.distcode=t.distdyn=new n.Buf32(592),t.sane=1,t.back=-1,0):u}function p(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,h(e)):u}function d(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?u:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,p(e))):u}function f(e,t){var r,n;return e?(n=new l,(e.state=n).window=null,0!==(r=d(e,t))&&(e.state=null),r):u}var m,g,w=!0;function y(e){if(w){var t;for(m=new n.Buf32(512),g=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,m,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,g,0,e.work,{bits:5}),w=!1}e.lencode=m,e.lenbits=9,e.distcode=g,e.distbits=5}function b(e,t,r,s){var o,i=e.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new n.Buf8(i.wsize)),s>=i.wsize?(n.arraySet(i.window,t,r-i.wsize,i.wsize,0),i.wnext=0,i.whave=i.wsize):(s<(o=i.wsize-i.wnext)&&(o=s),n.arraySet(i.window,t,r-s,o,i.wnext),(s-=o)?(n.arraySet(i.window,t,r-s,s,0),i.wnext=s,i.whave=i.wsize):(i.wnext+=o,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=o))),0}r.inflateReset=p,r.inflateReset2=d,r.inflateResetKeep=h,r.inflateInit=function(e){return f(e,15)},r.inflateInit2=f,r.inflate=function(e,t){var r,l,h,p,d,f,m,g,w,_,v,x,T,E,C,A,P,S,O,R,k,I,M,N,D=0,F=new n.Buf8(4),j=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return u;12===(r=e.state).mode&&(r.mode=13),d=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,f=e.avail_in,g=r.hold,w=r.bits,_=f,v=m,I=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(2&r.wrap&&35615===g){F[r.check=0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0),w=g=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&g)<<8)+(g>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&g)){e.msg="unknown compression method",r.mode=30;break}if(w-=4,k=8+(15&(g>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&g?10:12,w=g=0;break;case 2:for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(r.flags=g,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=g>>8&1),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0,r.mode=3;case 3:for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.head&&(r.head.time=g),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,F[2]=g>>>16&255,F[3]=g>>>24&255,r.check=o(r.check,F,4,0)),w=g=0,r.mode=4;case 4:for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.head&&(r.head.xflags=255&g,r.head.os=g>>8),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0,r.mode=5;case 5:if(1024&r.flags){for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.length=g,r.head&&(r.head.extra_len=g),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(f<(x=r.length)&&(x=f),x&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,p,x,k)),512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,r.length-=x),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===f)break e;for(x=0;k=l[p+x++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&x<f;);if(512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===f)break e;for(x=0;k=l[p+x++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&x<f;);if(512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}w=g=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}e.adler=r.check=c(g),w=g=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){g>>>=7&w,w-=7&w,r.mode=27;break}for(;w<3;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}switch(r.last=1&g,w-=1,3&(g>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==t)break;g>>>=2,w-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}g>>>=2,w-=2;break;case 14:for(g>>>=7&w,w-=7&w;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if((65535&g)!=(g>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&g,w=g=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(x=r.length){if(f<x&&(x=f),m<x&&(x=m),0===x)break e;n.arraySet(h,l,p,x,d),f-=x,p+=x,m-=x,d+=x,r.length-=x;break}r.mode=12;break;case 17:for(;w<14;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(r.nlen=257+(31&g),g>>>=5,w-=5,r.ndist=1+(31&g),g>>>=5,w-=5,r.ncode=4+(15&g),g>>>=4,w-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;w<3;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.lens[j[r.have++]]=7&g,g>>>=3,w-=3}for(;r.have<19;)r.lens[j[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,M={bits:r.lenbits},I=a(0,r.lens,0,19,r.lencode,0,r.work,M),r.lenbits=M.bits,I){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=(D=r.lencode[g&(1<<r.lenbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(P<16)g>>>=C,w-=C,r.lens[r.have++]=P;else{if(16===P){for(N=C+2;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g>>>=C,w-=C,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],x=3+(3&g),g>>>=2,w-=2}else if(17===P){for(N=C+3;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}w-=C,k=0,x=3+(7&(g>>>=C)),g>>>=3,w-=3}else{for(N=C+7;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}w-=C,k=0,x=11+(127&(g>>>=C)),g>>>=7,w-=7}if(r.have+x>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;x--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,M={bits:r.lenbits},I=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,M),r.lenbits=M.bits,I){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,M={bits:r.distbits},I=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,M),r.distbits=M.bits,I){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=f&&258<=m){e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,i(e,v),d=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,f=e.avail_in,g=r.hold,w=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;A=(D=r.lencode[g&(1<<r.lenbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(A&&0==(240&A)){for(S=C,O=A,R=P;A=(D=r.lencode[R+((g&(1<<S+O)-1)>>S)])>>>16&255,P=65535&D,!(S+(C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}g>>>=S,w-=S,r.back+=S}if(g>>>=C,w-=C,r.back+=C,r.length=P,0===A){r.mode=26;break}if(32&A){r.back=-1,r.mode=12;break}if(64&A){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&A,r.mode=22;case 22:if(r.extra){for(N=r.extra;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.length+=g&(1<<r.extra)-1,g>>>=r.extra,w-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=(D=r.distcode[g&(1<<r.distbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(0==(240&A)){for(S=C,O=A,R=P;A=(D=r.distcode[R+((g&(1<<S+O)-1)>>S)])>>>16&255,P=65535&D,!(S+(C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}g>>>=S,w-=S,r.back+=S}if(g>>>=C,w-=C,r.back+=C,64&A){e.msg="invalid distance code",r.mode=30;break}r.offset=P,r.extra=15&A,r.mode=24;case 24:if(r.extra){for(N=r.extra;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.offset+=g&(1<<r.extra)-1,g>>>=r.extra,w-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===m)break e;if(x=v-m,r.offset>x){if((x=r.offset-x)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}T=x>r.wnext?(x-=r.wnext,r.wsize-x):r.wnext-x,x>r.length&&(x=r.length),E=r.window}else E=h,T=d-r.offset,x=r.length;for(m<x&&(x=m),m-=x,r.length-=x;h[d++]=E[T++],--x;);0===r.length&&(r.mode=21);break;case 26:if(0===m)break e;h[d++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;w<32;){if(0===f)break e;f--,g|=l[p++]<<w,w+=8}if(v-=m,e.total_out+=v,r.total+=v,v&&(e.adler=r.check=r.flags?o(r.check,h,v,d-v):s(r.check,h,v,d-v)),v=m,(r.flags?g:c(g))!==r.check){e.msg="incorrect data check",r.mode=30;break}w=g=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}w=g=0}r.mode=29;case 29:I=1;break e;case 30:I=-3;break e;case 31:return-4;case 32:default:return u}return e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,(r.wsize||v!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&b(e,e.output,e.next_out,v-e.avail_out)?(r.mode=31,-4):(_-=e.avail_in,v-=e.avail_out,e.total_in+=_,e.total_out+=v,r.total+=v,r.wrap&&v&&(e.adler=r.check=r.flags?o(r.check,h,v,e.next_out-v):s(r.check,h,v,e.next_out-v)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==_&&0===v||4===t)&&0===I&&(I=-5),I)},r.inflateEnd=function(e){if(!e||!e.state)return u;var t=e.state;return t.window&&(t.window=null),e.state=null,0},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?u:((r.head=t).done=!1,0):u},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?u:11===r.mode&&s(1,t,n,0)!==r.check?-3:b(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),s=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],i=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,u,c,l,h,p){var d,f,m,g,w,y,b,_,v,x=p.bits,T=0,E=0,C=0,A=0,P=0,S=0,O=0,R=0,k=0,I=0,M=null,N=0,D=new n.Buf16(16),F=new n.Buf16(16),j=null,B=0;for(T=0;T<=15;T++)D[T]=0;for(E=0;E<u;E++)D[t[r+E]]++;for(P=x,A=15;1<=A&&0===D[A];A--);if(A<P&&(P=A),0===A)return c[l++]=20971520,c[l++]=20971520,p.bits=1,0;for(C=1;C<A&&0===D[C];C++);for(P<C&&(P=C),T=R=1;T<=15;T++)if(R<<=1,(R-=D[T])<0)return-1;if(0<R&&(0===e||1!==A))return-1;for(F[1]=0,T=1;T<15;T++)F[T+1]=F[T]+D[T];for(E=0;E<u;E++)0!==t[r+E]&&(h[F[t[r+E]]++]=E);if(y=0===e?(M=j=h,19):1===e?(M=s,N-=257,j=o,B-=257,256):(M=i,j=a,-1),T=C,w=l,O=E=I=0,m=-1,g=(k=1<<(S=P))-1,1===e&&852<k||2===e&&592<k)return 1;for(;;){for(b=T-O,v=h[E]<y?(_=0,h[E]):h[E]>y?(_=j[B+h[E]],M[N+h[E]]):(_=96,0),d=1<<T-O,C=f=1<<S;c[w+(I>>O)+(f-=d)]=b<<24|_<<16|v|0,0!==f;);for(d=1<<T-1;I&d;)d>>=1;if(0!==d?(I&=d-1,I+=d):I=0,E++,0==--D[T]){if(T===A)break;T=t[r+h[E]]}if(P<T&&(I&g)!==m){for(0===O&&(O=P),w+=C,R=1<<(S=T-O);S+O<A&&!((R-=D[S+O])<=0);)S++,R<<=1;if(k+=1<<S,1===e&&852<k||2===e&&592<k)return 1;c[m=I&g]=P<<24|S<<16|w-l|0}}return 0!==I&&(c[w+I]=T-O<<24|64<<16|0),p.bits=P,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common");function s(e){for(var t=e.length;0<=--t;)e[t]=0}var o=256,i=286,a=30,u=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);s(d);var f=new Array(60);s(f);var m=new Array(512);s(m);var g=new Array(256);s(g);var w=new Array(29);s(w);var y,b,_,v=new Array(a);function x(e,t,r,n,s){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=s,this.has_stree=e&&e.length}function T(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function E(e){return e<256?m[e]:m[256+(e>>>7)]}function C(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function A(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,C(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function P(e,t,r){A(e,r[2*t],r[2*t+1])}function S(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function O(e,t,r){var n,s,o=new Array(16),i=0;for(n=1;n<=u;n++)o[n]=i=i+r[n-1]<<1;for(s=0;s<=t;s++){var a=e[2*s+1];0!==a&&(e[2*s]=S(o[a]++,a))}}function R(e){var t;for(t=0;t<i;t++)e.dyn_ltree[2*t]=0;for(t=0;t<a;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function k(e){8<e.bi_valid?C(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function I(e,t,r,n){var s=2*t,o=2*r;return e[s]<e[o]||e[s]===e[o]&&n[t]<=n[r]}function M(e,t,r){for(var n=e.heap[r],s=r<<1;s<=e.heap_len&&(s<e.heap_len&&I(t,e.heap[s+1],e.heap[s],e.depth)&&s++,!I(t,n,e.heap[s],e.depth));)e.heap[r]=e.heap[s],r=s,s<<=1;e.heap[r]=n}function N(e,t,r){var n,s,i,a,u=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*u]<<8|e.pending_buf[e.d_buf+2*u+1],s=e.pending_buf[e.l_buf+u],u++,0===n?P(e,s,t):(P(e,(i=g[s])+o+1,t),0!==(a=c[i])&&A(e,s-=w[i],a),P(e,i=E(--n),r),0!==(a=l[i])&&A(e,n-=v[i],a)),u<e.last_lit;);P(e,256,t)}function D(e,t){var r,n,s,o=t.dyn_tree,i=t.stat_desc.static_tree,a=t.stat_desc.has_stree,c=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<c;r++)0!==o[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):o[2*r+1]=0;for(;e.heap_len<2;)o[2*(s=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[s]=0,e.opt_len--,a&&(e.static_len-=i[2*s+1]);for(t.max_code=l,r=e.heap_len>>1;1<=r;r--)M(e,o,r);for(s=c;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],M(e,o,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,o[2*s]=o[2*r]+o[2*n],e.depth[s]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,o[2*r+1]=o[2*n+1]=s,e.heap[1]=s++,M(e,o,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,s,o,i,a,c=t.dyn_tree,l=t.max_code,h=t.stat_desc.static_tree,p=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,f=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(o=0;o<=u;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(o=c[2*c[2*(n=e.heap[r])+1]+1]+1)&&(o=m,g++),c[2*n+1]=o,l<n||(e.bl_count[o]++,i=0,f<=n&&(i=d[n-f]),a=c[2*n],e.opt_len+=a*(o+i),p&&(e.static_len+=a*(h[2*n+1]+i)));if(0!==g){do{for(o=m-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[m]--,g-=2}while(0<g);for(o=m;0!==o;o--)for(n=e.bl_count[o];0!==n;)l<(s=e.heap[--r])||(c[2*s+1]!==o&&(e.opt_len+=(o-c[2*s+1])*c[2*s],c[2*s+1]=o),n--)}}(e,t),O(o,l,e.bl_count)}function F(e,t,r){var n,s,o=-1,i=t[1],a=0,u=7,c=4;for(0===i&&(u=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)s=i,i=t[2*(n+1)+1],++a<u&&s===i||(a<c?e.bl_tree[2*s]+=a:0!==s?(s!==o&&e.bl_tree[2*s]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=s,c=(a=0)===i?(u=138,3):s===i?(u=6,3):(u=7,4))}function j(e,t,r){var n,s,o=-1,i=t[1],a=0,u=7,c=4;for(0===i&&(u=138,c=3),n=0;n<=r;n++)if(s=i,i=t[2*(n+1)+1],!(++a<u&&s===i)){if(a<c)for(;P(e,s,e.bl_tree),0!=--a;);else 0!==s?(s!==o&&(P(e,s,e.bl_tree),a--),P(e,16,e.bl_tree),A(e,a-3,2)):a<=10?(P(e,17,e.bl_tree),A(e,a-3,3)):(P(e,18,e.bl_tree),A(e,a-11,7));o=s,c=(a=0)===i?(u=138,3):s===i?(u=6,3):(u=7,4)}}s(v);var B=!1;function L(e,t,r,s){A(e,0+(s?1:0),3),function(e,t,r,s){k(e),C(e,r),C(e,~r),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r)}r._tr_init=function(e){B||(function(){var e,t,r,n,s,o=new Array(16);for(n=r=0;n<28;n++)for(w[n]=r,e=0;e<1<<c[n];e++)g[r++]=n;for(g[r-1]=n,n=s=0;n<16;n++)for(v[n]=s,e=0;e<1<<l[n];e++)m[s++]=n;for(s>>=7;n<a;n++)for(v[n]=s<<7,e=0;e<1<<l[n]-7;e++)m[256+s++]=n;for(t=0;t<=u;t++)o[t]=0;for(e=0;e<=143;)d[2*e+1]=8,e++,o[8]++;for(;e<=255;)d[2*e+1]=9,e++,o[9]++;for(;e<=279;)d[2*e+1]=7,e++,o[7]++;for(;e<=287;)d[2*e+1]=8,e++,o[8]++;for(O(d,287,o),e=0;e<a;e++)f[2*e+1]=5,f[2*e]=S(e,5);y=new x(d,c,257,i,u),b=new x(f,l,0,a,u),_=new x(new Array(0),h,0,19,7)}(),B=!0),e.l_desc=new T(e.dyn_ltree,y),e.d_desc=new T(e.dyn_dtree,b),e.bl_desc=new T(e.bl_tree,_),e.bi_buf=0,e.bi_valid=0,R(e)},r._tr_stored_block=L,r._tr_flush_block=function(e,t,r,n){var s,i,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<o;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),D(e,e.l_desc),D(e,e.d_desc),a=function(e){var t;for(F(e,e.dyn_ltree,e.l_desc.max_code),F(e,e.dyn_dtree,e.d_desc.max_code),D(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*p[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),s=e.opt_len+3+7>>>3,(i=e.static_len+3+7>>>3)<=s&&(s=i)):s=i=r+5,r+4<=s&&-1!==t?L(e,t,r,n):4===e.strategy||i===s?(A(e,2+(n?1:0),3),N(e,d,f)):(A(e,4+(n?1:0),3),function(e,t,r,n){var s;for(A(e,t-257,5),A(e,r-1,5),A(e,n-4,4),s=0;s<n;s++)A(e,e.bl_tree[2*p[s]+1],3);j(e,e.dyn_ltree,t-1),j(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),N(e,e.dyn_ltree,e.dyn_dtree)),R(e),n&&k(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(g[r]+o+1)]++,e.dyn_dtree[2*E(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){A(e,2,3),P(e,256,d),function(e){16===e.bi_valid?(C(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){"use strict";t.exports="function"==typeof n?n:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)}).call(t,r(6).Buffer,r(4),r(59).setImmediate)},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0});var s=r(12);t.Document=s.File,n(r(12)),n(r(351)),n(r(359))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(24);t.EMPTY_OBJECT=Object.seal({});class s extends n.BaseXmlComponent{constructor(e){super(e),this.root=new Array}prepForXml(e){const r=this.root.filter((e=>e instanceof n.BaseXmlComponent?!e.IsDeleted:void 0!==e)).map((t=>t instanceof n.BaseXmlComponent?t.prepForXml(e):t)).filter((e=>void 0!==e));return{[this.rootKey]:r.length?1===r.length&&(s=r[0],"object"==typeof s&&s._attr)?r[0]:r:t.EMPTY_OBJECT};var s}addChildElement(e){return this.root.push(e),this}delete(){this.deleted=!0}}t.XmlComponent=s,t.IgnoreIfEmptyXmlComponent=class extends s{prepForXml(){const e=super.prepForXml();if(e&&("object"!=typeof e[this.rootKey]||Object.keys(e[this.rootKey]).length))return e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(52);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",color:"w:color",fill:"w:fill",space:"w:space",sz:"w:sz",type:"w:type",rsidR:"w:rsidR",rsidRPr:"w:rsidRPr",rsidSect:"w:rsidSect",w:"w:w",h:"w:h",top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",linePitch:"w:linePitch",pos:"w:pos"}}}t.Attributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(25),s=r(0);function o(e){switch(e.type){case void 0:case"element":const t=new a(e.name,e.attributes),r=e.elements||[];for(const e of r){const r=o(e);void 0!==r&&t.push(r)}return t;case"text":return e.text;default:return}}t.convertToXmlComponent=o;class i extends s.XmlAttributeComponent{}class a extends s.XmlComponent{static fromXmlString(e){return o(n.xml2js(e,{compact:!1}))}constructor(e,t){super(e),t&&this.root.push(new i(t))}push(e){this.root.push(e)}}t.ImportedXmlComponent=a;class u extends s.XmlComponent{constructor(e){super(""),this._attr=e}prepForXml(){return{_attr:this._attr}}}t.ImportedRootElementAttributes=u},function(e,t,r){(function(e){!function(t){t.parser=function(e,t){return new o(e,t)},t.SAXParser=o,t.SAXStream=a,t.createStream=function(e,t){return new a(e,t)},t.MAX_BUFFER_LENGTH=65536;var n,s=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(e,r){if(!(this instanceof o))return new o(e,r);var n=this;!function(e){for(var t=0,r=s.length;t<r;t++)e[s[t]]=""}(n),n.q=n.c="",n.bufferCheckPosition=t.MAX_BUFFER_LENGTH,n.opt=r||{},n.opt.lowercase=n.opt.lowercase||n.opt.lowercasetags,n.looseCase=n.opt.lowercase?"toLowerCase":"toUpperCase",n.tags=[],n.closed=n.closedRoot=n.sawRoot=!1,n.tag=n.error=null,n.strict=!!e,n.noscript=!(!e&&!n.opt.noscript),n.state=T.BEGIN,n.strictEntities=n.opt.strictEntities,n.ENTITIES=n.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),n.attribList=[],n.opt.xmlns&&(n.ns=Object.create(l)),n.trackPosition=!1!==n.opt.position,n.trackPosition&&(n.position=n.line=n.column=0),C(n,"onready")}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t}),o.prototype={end:function(){R(this)},write:function(e){var r=this;if(this.error)throw this.error;if(r.closed)return O(r,"Cannot write after close. Assign an onready handler.");if(null===e)return R(r);"object"==typeof e&&(e=e.toString());for(var n=0,o="";o=L(e,n++),r.c=o,o;)switch(r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++),r.state){case T.BEGIN:if(r.state=T.BEGIN_WHITESPACE,"\ufeff"===o)continue;B(r,o);continue;case T.BEGIN_WHITESPACE:B(r,o);continue;case T.TEXT:if(r.sawRoot&&!r.closedRoot){for(var i=n-1;o&&"<"!==o&&"&"!==o;)(o=L(e,n++))&&r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++);r.textNode+=e.substring(i,n-1)}"<"!==o||r.sawRoot&&r.closedRoot&&!r.strict?(m(o)||r.sawRoot&&!r.closedRoot||k(r,"Text data outside of root node."),"&"===o?r.state=T.TEXT_ENTITY:r.textNode+=o):(r.state=T.OPEN_WAKA,r.startTagPosition=r.position);continue;case T.SCRIPT:"<"===o?r.state=T.SCRIPT_ENDING:r.script+=o;continue;case T.SCRIPT_ENDING:"/"===o?r.state=T.CLOSE_TAG:(r.script+="<"+o,r.state=T.SCRIPT);continue;case T.OPEN_WAKA:if("!"===o)r.state=T.SGML_DECL,r.sgmlDecl="";else if(m(o));else if(y(h,o))r.state=T.OPEN_TAG,r.tagName=o;else if("/"===o)r.state=T.CLOSE_TAG,r.tagName="";else if("?"===o)r.state=T.PROC_INST,r.procInstName=r.procInstBody="";else{if(k(r,"Unencoded <"),r.startTagPosition+1<r.position){var a=r.position-r.startTagPosition;o=new Array(a).join(" ")+o}r.textNode+="<"+o,r.state=T.TEXT}continue;case T.SGML_DECL:"[CDATA["===(r.sgmlDecl+o).toUpperCase()?(A(r,"onopencdata"),r.state=T.CDATA,r.sgmlDecl="",r.cdata=""):r.sgmlDecl+o==="--"?(r.state=T.COMMENT,r.comment="",r.sgmlDecl=""):"DOCTYPE"===(r.sgmlDecl+o).toUpperCase()?(r.state=T.DOCTYPE,(r.doctype||r.sawRoot)&&k(r,"Inappropriately located doctype declaration"),r.doctype="",r.sgmlDecl=""):">"===o?(A(r,"onsgmldeclaration",r.sgmlDecl),r.sgmlDecl="",r.state=T.TEXT):g(o)?(r.state=T.SGML_DECL_QUOTED,r.sgmlDecl+=o):r.sgmlDecl+=o;continue;case T.SGML_DECL_QUOTED:o===r.q&&(r.state=T.SGML_DECL,r.q=""),r.sgmlDecl+=o;continue;case T.DOCTYPE:">"===o?(r.state=T.TEXT,A(r,"ondoctype",r.doctype),r.doctype=!0):(r.doctype+=o,"["===o?r.state=T.DOCTYPE_DTD:g(o)&&(r.state=T.DOCTYPE_QUOTED,r.q=o));continue;case T.DOCTYPE_QUOTED:r.doctype+=o,o===r.q&&(r.q="",r.state=T.DOCTYPE);continue;case T.DOCTYPE_DTD:r.doctype+=o,"]"===o?r.state=T.DOCTYPE:g(o)&&(r.state=T.DOCTYPE_DTD_QUOTED,r.q=o);continue;case T.DOCTYPE_DTD_QUOTED:r.doctype+=o,o===r.q&&(r.state=T.DOCTYPE_DTD,r.q="");continue;case T.COMMENT:"-"===o?r.state=T.COMMENT_ENDING:r.comment+=o;continue;case T.COMMENT_ENDING:"-"===o?(r.state=T.COMMENT_ENDED,r.comment=S(r.opt,r.comment),r.comment&&A(r,"oncomment",r.comment),r.comment=""):(r.comment+="-"+o,r.state=T.COMMENT);continue;case T.COMMENT_ENDED:">"!==o?(k(r,"Malformed comment"),r.comment+="--"+o,r.state=T.COMMENT):r.state=T.TEXT;continue;case T.CDATA:"]"===o?r.state=T.CDATA_ENDING:r.cdata+=o;continue;case T.CDATA_ENDING:"]"===o?r.state=T.CDATA_ENDING_2:(r.cdata+="]"+o,r.state=T.CDATA);continue;case T.CDATA_ENDING_2:">"===o?(r.cdata&&A(r,"oncdata",r.cdata),A(r,"onclosecdata"),r.cdata="",r.state=T.TEXT):"]"===o?r.cdata+="]":(r.cdata+="]]"+o,r.state=T.CDATA);continue;case T.PROC_INST:"?"===o?r.state=T.PROC_INST_ENDING:m(o)?r.state=T.PROC_INST_BODY:r.procInstName+=o;continue;case T.PROC_INST_BODY:if(!r.procInstBody&&m(o))continue;"?"===o?r.state=T.PROC_INST_ENDING:r.procInstBody+=o;continue;case T.PROC_INST_ENDING:">"===o?(A(r,"onprocessinginstruction",{name:r.procInstName,body:r.procInstBody}),r.procInstName=r.procInstBody="",r.state=T.TEXT):(r.procInstBody+="?"+o,r.state=T.PROC_INST_BODY);continue;case T.OPEN_TAG:y(p,o)?r.tagName+=o:(I(r),">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:(m(o)||k(r,"Invalid character in tag name"),r.state=T.ATTRIB));continue;case T.OPEN_TAG_SLASH:">"===o?(D(r,!0),F(r)):(k(r,"Forward-slash in opening tag not followed by >"),r.state=T.ATTRIB);continue;case T.ATTRIB:if(m(o))continue;">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:y(h,o)?(r.attribName=o,r.attribValue="",r.state=T.ATTRIB_NAME):k(r,"Invalid attribute name");continue;case T.ATTRIB_NAME:"="===o?r.state=T.ATTRIB_VALUE:">"===o?(k(r,"Attribute without value"),r.attribValue=r.attribName,N(r),D(r)):m(o)?r.state=T.ATTRIB_NAME_SAW_WHITE:y(p,o)?r.attribName+=o:k(r,"Invalid attribute name");continue;case T.ATTRIB_NAME_SAW_WHITE:if("="===o)r.state=T.ATTRIB_VALUE;else{if(m(o))continue;k(r,"Attribute without value"),r.tag.attributes[r.attribName]="",r.attribValue="",A(r,"onattribute",{name:r.attribName,value:""}),r.attribName="",">"===o?D(r):y(h,o)?(r.attribName=o,r.state=T.ATTRIB_NAME):(k(r,"Invalid attribute name"),r.state=T.ATTRIB)}continue;case T.ATTRIB_VALUE:if(m(o))continue;g(o)?(r.q=o,r.state=T.ATTRIB_VALUE_QUOTED):(k(r,"Unquoted attribute value"),r.state=T.ATTRIB_VALUE_UNQUOTED,r.attribValue=o);continue;case T.ATTRIB_VALUE_QUOTED:if(o!==r.q){"&"===o?r.state=T.ATTRIB_VALUE_ENTITY_Q:r.attribValue+=o;continue}N(r),r.q="",r.state=T.ATTRIB_VALUE_CLOSED;continue;case T.ATTRIB_VALUE_CLOSED:m(o)?r.state=T.ATTRIB:">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:y(h,o)?(k(r,"No whitespace between attributes"),r.attribName=o,r.attribValue="",r.state=T.ATTRIB_NAME):k(r,"Invalid attribute name");continue;case T.ATTRIB_VALUE_UNQUOTED:if(!w(o)){"&"===o?r.state=T.ATTRIB_VALUE_ENTITY_U:r.attribValue+=o;continue}N(r),">"===o?D(r):r.state=T.ATTRIB;continue;case T.CLOSE_TAG:if(r.tagName)">"===o?F(r):y(p,o)?r.tagName+=o:r.script?(r.script+="</"+r.tagName,r.tagName="",r.state=T.SCRIPT):(m(o)||k(r,"Invalid tagname in closing tag"),r.state=T.CLOSE_TAG_SAW_WHITE);else{if(m(o))continue;b(h,o)?r.script?(r.script+="</"+o,r.state=T.SCRIPT):k(r,"Invalid tagname in closing tag."):r.tagName=o}continue;case T.CLOSE_TAG_SAW_WHITE:if(m(o))continue;">"===o?F(r):k(r,"Invalid characters in closing tag");continue;case T.TEXT_ENTITY:case T.ATTRIB_VALUE_ENTITY_Q:case T.ATTRIB_VALUE_ENTITY_U:var u,c;switch(r.state){case T.TEXT_ENTITY:u=T.TEXT,c="textNode";break;case T.ATTRIB_VALUE_ENTITY_Q:u=T.ATTRIB_VALUE_QUOTED,c="attribValue";break;case T.ATTRIB_VALUE_ENTITY_U:u=T.ATTRIB_VALUE_UNQUOTED,c="attribValue"}";"===o?(r[c]+=j(r),r.entity="",r.state=u):y(r.entity.length?f:d,o)?r.entity+=o:(k(r,"Invalid character in entity name"),r[c]+="&"+r.entity+o,r.entity="",r.state=u);continue;default:throw new Error(r,"Unknown state: "+r.state)}return r.position>=r.bufferCheckPosition&&function(e){for(var r=Math.max(t.MAX_BUFFER_LENGTH,10),n=0,o=0,i=s.length;o<i;o++){var a=e[s[o]].length;if(a>r)switch(s[o]){case"textNode":P(e);break;case"cdata":A(e,"oncdata",e.cdata),e.cdata="";break;case"script":A(e,"onscript",e.script),e.script="";break;default:O(e,"Max buffer length exceeded: "+s[o])}n=Math.max(n,a)}var u=t.MAX_BUFFER_LENGTH-n;e.bufferCheckPosition=u+e.position}(r),r},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;P(e=this),""!==e.cdata&&(A(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(A(e,"onscript",e.script),e.script="")}};try{n=r(55).Stream}catch(e){n=function(){}}var i=t.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function a(e,t){if(!(this instanceof a))return new a(e,t);n.apply(this),this._parser=new o(e,t),this.writable=!0,this.readable=!0;var r=this;this._parser.onend=function(){r.emit("end")},this._parser.onerror=function(e){r.emit("error",e),r._parser.error=null},this._decoder=null,i.forEach((function(e){Object.defineProperty(r,"on"+e,{get:function(){return r._parser["on"+e]},set:function(t){if(!t)return r.removeAllListeners(e),r._parser["on"+e]=t,t;r.on(e,t)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(n.prototype,{constructor:{value:a}}),a.prototype.write=function(t){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(t)){if(!this._decoder){var n=r(29).StringDecoder;this._decoder=new n("utf8")}t=this._decoder.write(t)}return this._parser.write(t.toString()),this.emit("data",t),!0},a.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},a.prototype.on=function(e,t){var r=this;return r._parser["on"+e]||-1===i.indexOf(e)||(r._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),r.emit.apply(r,t)}),n.prototype.on.call(r,e,t)};var u="http://www.w3.org/XML/1998/namespace",c="http://www.w3.org/2000/xmlns/",l={xml:u,xmlns:c},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function g(e){return'"'===e||"'"===e}function w(e){return">"===e||m(e)}function y(e,t){return e.test(t)}function b(e,t){return!y(e,t)}var _,v,x,T=0;for(var E in t.STATE={BEGIN:T++,BEGIN_WHITESPACE:T++,TEXT:T++,TEXT_ENTITY:T++,OPEN_WAKA:T++,SGML_DECL:T++,SGML_DECL_QUOTED:T++,DOCTYPE:T++,DOCTYPE_QUOTED:T++,DOCTYPE_DTD:T++,DOCTYPE_DTD_QUOTED:T++,COMMENT_STARTING:T++,COMMENT:T++,COMMENT_ENDING:T++,COMMENT_ENDED:T++,CDATA:T++,CDATA_ENDING:T++,CDATA_ENDING_2:T++,PROC_INST:T++,PROC_INST_BODY:T++,PROC_INST_ENDING:T++,OPEN_TAG:T++,OPEN_TAG_SLASH:T++,ATTRIB:T++,ATTRIB_NAME:T++,ATTRIB_NAME_SAW_WHITE:T++,ATTRIB_VALUE:T++,ATTRIB_VALUE_QUOTED:T++,ATTRIB_VALUE_CLOSED:T++,ATTRIB_VALUE_UNQUOTED:T++,ATTRIB_VALUE_ENTITY_Q:T++,ATTRIB_VALUE_ENTITY_U:T++,CLOSE_TAG:T++,CLOSE_TAG_SAW_WHITE:T++,SCRIPT:T++,SCRIPT_ENDING:T++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach((function(e){var r=t.ENTITIES[e],n="number"==typeof r?String.fromCharCode(r):r;t.ENTITIES[e]=n})),t.STATE)t.STATE[t.STATE[E]]=E;function C(e,t,r){e[t]&&e[t](r)}function A(e,t,r){e.textNode&&P(e),C(e,t,r)}function P(e){e.textNode=S(e.opt,e.textNode),e.textNode&&C(e,"ontext",e.textNode),e.textNode=""}function S(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function O(e,t){return P(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,C(e,"onerror",t),e}function R(e){return e.sawRoot&&!e.closedRoot&&k(e,"Unclosed root tag"),e.state!==T.BEGIN&&e.state!==T.BEGIN_WHITESPACE&&e.state!==T.TEXT&&O(e,"Unexpected end"),P(e),e.c="",e.closed=!0,C(e,"onend"),o.call(e,e.strict,e.opt),e}function k(e,t){if("object"!=typeof e||!(e instanceof o))throw new Error("bad call to strictFail");e.strict&&O(e,t)}function I(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,r=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(r.ns=t.ns),e.attribList.length=0,A(e,"onopentagstart",r)}function M(e,t){var r=e.indexOf(":")<0?["",e]:e.split(":"),n=r[0],s=r[1];return t&&"xmlns"===e&&(n="xmlns",s=""),{prefix:n,local:s}}function N(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=M(e.attribName,!0),r=t.prefix,n=t.local;if("xmlns"===r)if("xml"===n&&e.attribValue!==u)k(e,"xml: prefix must be bound to "+u+"\nActual: "+e.attribValue);else if("xmlns"===n&&e.attribValue!==c)k(e,"xmlns: prefix must be bound to "+c+"\nActual: "+e.attribValue);else{var s=e.tag,o=e.tags[e.tags.length-1]||e;s.ns===o.ns&&(s.ns=Object.create(o.ns)),s.ns[n]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,A(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function D(e,t){if(e.opt.xmlns){var r=e.tag,n=M(e.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(k(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),r.uri=n.prefix);var s=e.tags[e.tags.length-1]||e;r.ns&&s.ns!==r.ns&&Object.keys(r.ns).forEach((function(t){A(e,"onopennamespace",{prefix:t,uri:r.ns[t]})}));for(var o=0,i=e.attribList.length;o<i;o++){var a=e.attribList[o],u=a[0],c=a[1],l=M(u,!0),h=l.prefix,p=l.local,d=""===h?"":r.ns[h]||"",f={name:u,value:c,prefix:h,local:p,uri:d};h&&"xmlns"!==h&&!d&&(k(e,"Unbound namespace prefix: "+JSON.stringify(h)),f.uri=h),e.tag.attributes[u]=f,A(e,"onattribute",f)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),A(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=T.TEXT:e.state=T.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function F(e){if(!e.tagName)return k(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=T.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=T.SCRIPT);A(e,"onscript",e.script),e.script=""}var t=e.tags.length,r=e.tagName;e.strict||(r=r[e.looseCase]());for(var n=r;t--&&e.tags[t].name!==n;)k(e,"Unexpected close tag");if(t<0)return k(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=T.TEXT);e.tagName=r;for(var s=e.tags.length;s-- >t;){var o=e.tag=e.tags.pop();e.tagName=e.tag.name,A(e,"onclosetag",e.tagName);var i={};for(var a in o.ns)i[a]=o.ns[a];var u=e.tags[e.tags.length-1]||e;e.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(t){var r=o.ns[t];A(e,"onclosenamespace",{prefix:t,uri:r})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=T.TEXT}function j(e){var t,r=e.entity,n=r.toLowerCase(),s="";return e.ENTITIES[r]?e.ENTITIES[r]:e.ENTITIES[n]?e.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),s=(t=parseInt(r,16)).toString(16)):(r=r.slice(1),s=(t=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(t)||s.toLowerCase()!==r?(k(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function B(e,t){"<"===t?(e.state=T.OPEN_WAKA,e.startTagPosition=e.position):m(t)||(k(e,"Non-whitespace before first tag."),e.textNode=t,e.state=T.TEXT)}function L(e,t){var r="";return t<e.length&&(r=e.charAt(t)),r}T=t.STATE,String.fromCodePoint||(_=String.fromCharCode,v=Math.floor,x=function(){var e,t,r=16384,n=[],s=-1,o=arguments.length;if(!o)return"";for(var i="";++s<o;){var a=Number(arguments[s]);if(!isFinite(a)||a<0||a>1114111||v(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(e=55296+((a-=65536)>>10),t=a%1024+56320,n.push(e,t)),(s+1===o||n.length>r)&&(i+=_.apply(null,n),n.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:x,configurable:!0,writable:!0}):String.fromCodePoint=x)}(t)}).call(t,r(6).Buffer)},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){for(var t,r=c(e),n=r[0],i=r[1],a=new o(function(e,t,r){return 3*(t+r)/4-r}(0,n,i)),u=0,l=i>0?n-4:n,h=0;h<l;h+=4)t=s[e.charCodeAt(h)]<<18|s[e.charCodeAt(h+1)]<<12|s[e.charCodeAt(h+2)]<<6|s[e.charCodeAt(h+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;return 2===i&&(t=s[e.charCodeAt(h)]<<2|s[e.charCodeAt(h+1)]>>4,a[u++]=255&t),1===i&&(t=s[e.charCodeAt(h)]<<10|s[e.charCodeAt(h+1)]<<4|s[e.charCodeAt(h+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t),a},t.fromByteArray=function(e){for(var t,r=e.length,s=r%3,o=[],i=16383,a=0,u=r-s;a<u;a+=i)o.push(l(e,a,a+i>u?u:a+i));return 1===s?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===s&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),o.join("")};for(var n=[],s=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=i.length;a<u;++a)n[a]=i[a],s[i.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var s,o,i=[],a=t;a<r;a+=3)s=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(n[(o=s)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return i.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,s){var o,i,a=8*s-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?s-1:0,p=r?-1:1,d=e[t+h];for(h+=p,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=p,l-=8);for(i=o&(1<<-l)-1,o>>=-l,l+=n;l>0;i=256*i+e[t+h],h+=p,l-=8);if(0===o)o=1-c;else{if(o===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,n),o-=c}return(d?-1:1)*i*Math.pow(2,o-n)},t.write=function(e,t,r,n,s,o){var i,a,u,c=8*o-s-1,l=(1<<c)-1,h=l>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,f=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=l):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=l?(a=0,i=l):i+h>=1?(a=(t*u-1)*Math.pow(2,s),i+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;e[r+d]=255&a,d+=f,a/=256,s-=8);for(i=i<<s|a,c+=s;c>0;e[r+d]=255&i,d+=f,i/=256,c-=8);e[r+d-f]|=128*m}},function(e,t){},function(e,t,r){"use strict";var n=r(16).Buffer,s=r(147);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,s=n.allocUnsafe(e>>>0),o=this.head,i=0;o;)t=s,r=i,o.data.copy(t,r),i+=o.data.length,o=o.next;return s},e}(),s&&s.inspect&&s.inspect.custom&&(e.exports.prototype[s.inspect.custom]=function(){var e=s.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,s,o,i,a,u=1,c={},l=!1,h=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){f(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(i="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(i)&&f(+t.data.slice(i.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),n=function(t){e.postMessage(i+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){f(e.data)},n=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):n=function(e){setTimeout(f,0,e)},p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var s={callback:e,args:t};return c[u]=s,n(u),u++},p.clearImmediate=d}function d(e){delete c[e]}function f(e){if(l)setTimeout(f,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{d(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,r(4),r(13))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(t,r(4))},function(e,t,r){"use strict";e.exports=o;var n=r(60),s=r(14);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}s.inherits=r(7),s.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(28)},function(e,t,r){e.exports=r(5)},function(e,t,r){e.exports=r(27).Transform},function(e,t,r){e.exports=r(27).PassThrough},function(e,t,r){var n=r(30),s=r(53);e.exports=function(e,t){var r,o,i;return r=function(e){var t=n.copyOptions(e);return n.ensureSpacesExists(t),t}(t),o=s(e,r),i="compact"in r&&r.compact?"_parent":"parent",("addParent"in r&&r.addParent?JSON.stringify(o,(function(e,t){return e===i?"_":t}),r.spaces):JSON.stringify(o,null,r.spaces)).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}},function(e,t,r){(function(t){var n=r(61);e.exports=function(e,r){e instanceof t&&(e=e.toString());var s=null;if("string"==typeof e)try{s=JSON.parse(e)}catch(e){throw new Error("The JSON structure is invalid")}else s=e;return n(s,r)}}).call(t,r(6).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND3=""},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t){super(e),t&&(this.root=t.root)}}t.InitializableXmlComponent=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",color:"w:color",space:"w:space",sz:"w:sz"}}}t.BorderAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("PAGE")}}t.Page=i;class a extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("NUMPAGES")}}t.NumberOfPages=a;class u extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("SECTIONPAGES")}}t.NumberOfPagesSection=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(17),s=r(70);class o extends n.Run{constructor(e){if("string"==typeof e)return super({}),void this.root.push(new s.Text(e));super(e)}}t.TextRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(17),s=r(163);class o extends n.Run{constructor(e){if("string"==typeof e)return super({}),void this.root.push(new s.Symbol(e));super(e),this.root.push(new s.Symbol(e.char,e.symbolfont))}}t.SymbolRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={char:"w:char",symbolfont:"w:font"}}}class o extends n.XmlComponent{constructor(e="",t="Wingdings"){super("w:sym"),this.root.push(new s({char:e,symbolfont:t}))}}t.Symbol=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(71),s=r(3);class o extends s.Run{constructor(e,t){super({});const r=new n.Drawing(e,t);this.root.push(r)}}t.PictureRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(166),o=r(209);class i extends n.XmlComponent{constructor(e,t={}){super("w:drawing"),t.floating?this.root.push(new s.Anchor(e,e.dimensions,t)):(this.inline=new o.Inline(e,e.dimensions),this.root.push(this.inline))}scale(e,t){this.inline.scale(e,t)}}t.Drawing=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(167)),n(r(80))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(72),o=r(75),i=r(35),a=r(76),u=r(77),c=r(78),l=r(79),h=r(80),p={allowOverlap:!0,behindDocument:!1,lockAnchor:!1,layoutInCell:!0,verticalPosition:{},horizontalPosition:{}};class d extends n.XmlComponent{constructor(e,t,r){super("wp:anchor");const n=Object.assign({margins:{top:0,bottom:0,left:0,right:0}},p,r.floating);if(this.root.push(new h.AnchorAttributes({distT:n.margins.top||0,distB:n.margins.bottom||0,distL:n.margins.left||0,distR:n.margins.right||0,simplePos:"0",allowOverlap:!0===n.allowOverlap?"1":"0",behindDoc:!0===n.behindDocument?"1":"0",locked:!0===n.lockAnchor?"1":"0",layoutInCell:!0===n.layoutInCell?"1":"0",relativeHeight:t.emus.y})),this.root.push(new s.SimplePos),this.root.push(new s.HorizontalPosition(n.horizontalPosition)),this.root.push(new s.VerticalPosition(n.verticalPosition)),this.root.push(new c.Extent(t.emus.x,t.emus.y)),this.root.push(new u.EffectExtent),void 0!==r.floating&&void 0!==r.floating.wrap)switch(r.floating.wrap.type){case i.TextWrappingType.SQUARE:this.root.push(new i.WrapSquare(r.floating.wrap,r.floating.margins));break;case i.TextWrappingType.TIGHT:this.root.push(new i.WrapTight(r.floating.margins));break;case i.TextWrappingType.TOP_AND_BOTTOM:this.root.push(new i.WrapTopAndBottom(r.floating.margins));break;case i.TextWrappingType.NONE:default:this.root.push(new i.WrapNone)}else this.root.push(new i.WrapNone);this.root.push(new a.DocProperties),this.root.push(new l.GraphicFrameProperties),this.root.push(new o.Graphic(e,t.emus.x,t.emus.y))}}t.Anchor=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"}}}class o extends n.XmlComponent{constructor(){super("wp:simplePos"),this.root.push(new s({x:0,y:0}))}}t.SimplePos=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(73),o=r(34),i=r(74);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"}}}class u extends n.XmlComponent{constructor(e){if(super("wp:positionH"),this.root.push(new a({relativeFrom:e.relative||o.HorizontalPositionRelativeFrom.PAGE})),e.align)this.root.push(new s.Align(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new i.PositionOffset(e.offset))}}}t.HorizontalPosition=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(73),o=r(34),i=r(74);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"}}}class u extends n.XmlComponent{constructor(e){if(super("wp:positionV"),this.root.push(new a({relativeFrom:e.relative||o.VerticalPositionRelativeFrom.PAGE})),e.align)this.root.push(new s.Align(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new i.PositionOffset(e.offset))}}}t.VerticalPosition=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(172);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={a:"xmlns:a"}}}class i extends n.XmlComponent{constructor(e,t,r){super("a:graphic"),this.root.push(new o({a:"http://schemas.openxmlformats.org/drawingml/2006/main"})),this.data=new s.GraphicData(e,t,r),this.root.push(this.data)}setXY(e,t){this.data.setXY(e,t)}}t.Graphic=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(173))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(174),o=r(175);class i extends n.XmlComponent{constructor(e,t,r){super("a:graphicData"),this.root.push(new s.GraphicDataAttributes({uri:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.pic=new o.Pic(e,t,r),this.root.push(this.pic)}setXY(e,t){this.pic.setXY(e,t)}}t.GraphicData=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={uri:"uri"}}}t.GraphicDataAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(176))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(177),o=r(181),i=r(187),a=r(188);class u extends n.XmlComponent{constructor(e,t,r){super("pic:pic"),this.root.push(new i.PicAttributes({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.shapeProperties=new a.ShapeProperties(t,r),this.root.push(new o.NonVisualPicProperties),this.root.push(new s.BlipFill(e)),this.root.push(new a.ShapeProperties(t,r))}setXY(e,t){this.shapeProperties.setXY(e,t)}}t.Pic=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(178),o=r(179),i=r(180);class a extends n.XmlComponent{constructor(e){super("pic:blipFill"),this.root.push(new s.Blip(e)),this.root.push(new o.SourceRectangle),this.root.push(new i.Stretch)}}t.BlipFill=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={embed:"r:embed",cstate:"cstate"}}}class o extends n.XmlComponent{constructor(e){super("a:blip"),this.root.push(new s({embed:`rId{${e.fileName}}`,cstate:"none"}))}}t.Blip=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:srcRect")}}t.SourceRectangle=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:fillRect")}}class o extends n.XmlComponent{constructor(){super("a:stretch"),this.root.push(new s)}}t.Stretch=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(182),o=r(185);class i extends n.XmlComponent{constructor(){super("pic:nvPicPr"),this.root.push(new o.NonVisualProperties),this.root.push(new s.ChildNonVisualProperties)}}t.NonVisualPicProperties=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(183);class o extends n.XmlComponent{constructor(){super("pic:cNvPicPr"),this.root.push(new s.PicLocks)}}t.ChildNonVisualProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(184);class o extends n.XmlComponent{constructor(){super("a:picLocks"),this.root.push(new s.PicLocksAttributes({noChangeAspect:1,noChangeArrowheads:1}))}}t.PicLocks=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={noChangeAspect:"noChangeAspect",noChangeArrowheads:"noChangeArrowheads"}}}t.PicLocksAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(186);class o extends n.XmlComponent{constructor(){super("pic:cNvPr"),this.root.push(new s.NonVisualPropertiesAttributes({id:0,name:"",descr:""}))}}t.NonVisualProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"desc"}}}t.NonVisualPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:pic"}}}t.PicAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(189),o=r(195),i=r(198);class a extends n.XmlComponent{constructor(e,t){super("pic:spPr"),this.root.push(new i.ShapePropertiesAttributes({bwMode:"auto"})),this.form=new s.Form(e,t),this.root.push(this.form),this.root.push(new o.PresetGeometry)}setXY(e,t){this.form.setXY(e,t)}}t.ShapeProperties=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(190))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(191),o=r(193);class i extends n.XmlComponent{constructor(e,t){super("a:xfrm"),this.extents=new s.Extents(e,t),this.root.push(this.extents),this.root.push(new o.Offset)}setXY(e,t){this.extents.setXY(e,t)}}t.Form=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(192);class o extends n.XmlComponent{constructor(e,t){super("a:ext"),this.attributes=new s.ExtentsAttributes({cx:e,cy:t}),this.root.push(this.attributes)}setXY(e,t){this.attributes.set({cx:e,cy:t})}}t.Extents=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"}}}t.ExtentsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(194);class o extends n.XmlComponent{constructor(){super("a:off"),this.root.push(new s.OffsetAttributes({x:0,y:0}))}}t.Offset=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"}}}t.OffsetAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(196),o=r(197);class i extends n.XmlComponent{constructor(){super("a:prstGeom"),this.root.push(new o.PresetGeometryAttributes({prst:"rect"})),this.root.push(new s.AdjustmentValues)}}t.PresetGeometry=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:avLst")}}t.AdjustmentValues=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={prst:"prst"}}}t.PresetGeometryAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={bwMode:"bwMode"}}}t.ShapePropertiesAttributes=s},function(e,t,r){"use strict";var n,s;Object.defineProperty(t,"__esModule",{value:!0}),(s=t.TextWrappingType||(t.TextWrappingType={}))[s.NONE=0]="NONE",s[s.SQUARE=1]="SQUARE",s[s.TIGHT=2]="TIGHT",s[s.TOP_AND_BOTTOM=3]="TOP_AND_BOTTOM",(n=t.TextWrappingSide||(t.TextWrappingSide={})).BOTH_SIDES="bothSides",n.LEFT="left",n.RIGHT="right",n.LARGEST="largest"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("wp:wrapNone")}}t.WrapNone=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(35);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",wrapText:"wrapText"}}}class i extends n.XmlComponent{constructor(e,t={top:0,bottom:0,left:0,right:0}){super("wp:wrapSquare"),this.root.push(new o({wrapText:e.side||s.TextWrappingSide.BOTH_SIDES,distT:t.top,distB:t.bottom,distL:t.left,distR:t.right}))}}t.WrapSquare=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"}}}class o extends n.XmlComponent{constructor(e={top:0,bottom:0}){super("wp:wrapTight"),this.root.push(new s({distT:e.top,distB:e.bottom}))}}t.WrapTight=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"}}}class o extends n.XmlComponent{constructor(e={top:0,bottom:0}){super("wp:wrapTopAndBottom"),this.root.push(new s({distT:e.top,distB:e.bottom}))}}t.WrapTopAndBottom=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"descr"}}}t.DocPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={b:"b",l:"l",r:"r",t:"t"}}}t.EffectExtentAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"}}}t.ExtentAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(208);class o extends n.XmlComponent{constructor(){super("a:graphicFrameLocks"),this.root.push(new s.GraphicFrameLockAttributes({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/main",noChangeAspect:1}))}}t.GraphicFrameLocks=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:a",noChangeAspect:"noChangeAspect"}}}t.GraphicFrameLockAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(210))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(76),o=r(77),i=r(78),a=r(79),u=r(75),c=r(211);class l extends n.XmlComponent{constructor(e,t){super("wp:inline"),this.dimensions=t,this.root.push(new c.InlineAttributes({distT:0,distB:0,distL:0,distR:0})),this.extent=new i.Extent(t.emus.x,t.emus.y),this.graphic=new u.Graphic(e,t.emus.x,t.emus.y),this.root.push(this.extent),this.root.push(new o.EffectExtent),this.root.push(new s.DocProperties),this.root.push(new a.GraphicFrameProperties),this.root.push(this.graphic)}scale(e,t){const r=Math.round(this.dimensions.emus.x*e),n=Math.round(this.dimensions.emus.y*t);this.extent.setXY(r,n),this.graphic.setXY(r,n)}}t.Inline=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR"}}}t.InlineAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3),s=r(18),o=r(213);class i extends n.Run{constructor(e){super({}),this.root.push(new s.Begin(!0)),this.root.push(new o.SequentialIdentifierInstruction(e)),this.root.push(new s.Separate),this.root.push(new s.End)}}t.SequentialIdentifier=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(`SEQ ${e}`)}}t.SequentialIdentifierInstruction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:tab")}}t.Tab=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(36),o=r(21),i=r(3);class a extends n.XmlComponent{constructor(e){if(super("w:p"),"string"==typeof e)return this.properties=new o.ParagraphProperties({}),this.root.push(this.properties),void this.root.push(new i.TextRun(e));if(e instanceof i.PictureRun)return this.properties=new o.ParagraphProperties({}),this.root.push(this.properties),void this.root.push(e);if(this.properties=new o.ParagraphProperties(e),this.root.push(this.properties),e.text&&this.root.push(new i.TextRun(e.text)),e.children)for(const t of e.children)t instanceof s.Bookmark?(this.root.push(t.start),this.root.push(t.text),this.root.push(t.end)):this.root.push(t)}prepForXml(e){for(const t of this.root)if(t instanceof s.HyperlinkRef){const r=this.root.indexOf(t);this.root[r]=e.HyperlinkCache[t.id]}return super.prepForXml()}addRunToFront(e){return this.root.splice(1,0,e),this}}t.Paragraph=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(3),o=r(217);var i;(i=t.HyperlinkType||(t.HyperlinkType={})).INTERNAL="INTERNAL",i.EXTERNAL="EXTERNAL",t.HyperlinkRef=class{constructor(e){this.id=e}};class a extends n.XmlComponent{constructor(e,t,r){super("w:hyperlink"),this.linkId=t;const n={history:1,anchor:r||void 0,id:r?void 0:`rId${this.linkId}`},i=new o.HyperlinkAttributes(n);this.root.push(i),this.textRun=new s.TextRun({text:e,style:"Hyperlink"}),this.root.push(this.textRun)}get TextRun(){return this.textRun}}t.Hyperlink=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"r:id",history:"w:history",anchor:"w:anchor"}}}t.HyperlinkAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(85),o=r(3),i=r(227);t.Bookmark=class{constructor(e,t){const r=s.generate().toLowerCase();this.start=new a(e,r),this.text=new o.TextRun(t),this.end=new u(r)}};class a extends n.XmlComponent{constructor(e,t){super("w:bookmarkStart");const r=new i.BookmarkStartAttributes({name:e,id:t});this.root.push(r)}}t.BookmarkStart=a;class u extends n.XmlComponent{constructor(e){super("w:bookmarkEnd");const t=new i.BookmarkEndAttributes({id:e});this.root.push(t)}}t.BookmarkEnd=u},function(e,t,r){"use strict";var n=r(20),s=r(221),o=r(225),i=r(226)||0;function a(){return s(i)}e.exports=a,e.exports.generate=a,e.exports.seed=function(t){return n.seed(t),e.exports},e.exports.worker=function(t){return i=t,e.exports},e.exports.characters=function(e){return void 0!==e&&n.characters(e),n.shuffled()},e.exports.isValid=o},function(e,t,r){"use strict";var n=1;e.exports={nextValue:function(){return(n=(9301*n+49297)%233280)/233280},seed:function(e){n=e}}},function(e,t,r){"use strict";var n,s,o=r(222);r(20),e.exports=function(e){var t="",r=Math.floor(.001*(Date.now()-1567752802062));return r===s?n++:(n=0,s=r),t+=o(7),t+=o(e),n>0&&(t+=o(n)),t+o(r)}},function(e,t,r){"use strict";var n=r(20),s=r(223),o=r(224);e.exports=function(e){for(var t,r=0,i="";!t;)i+=o(s,n.get(),1),t=e<Math.pow(16,r+1),r++;return i}},function(e,t,r){"use strict";var n,s="object"==typeof window&&(window.crypto||window.msCrypto);n=s&&s.getRandomValues?function(e){return s.getRandomValues(new Uint8Array(e))}:function(e){for(var t=[],r=0;r<e;r++)t.push(Math.floor(256*Math.random()));return t},e.exports=n},function(e,t){e.exports=function(e,t,r){for(var n=(2<<Math.log(t.length-1)/Math.LN2)-1,s=Math.ceil(1.6*n*r/t.length),o="";;)for(var i=s,a=e(i);i--;)if((o+=t[a[i]&n]||"").length===+r)return o}},function(e,t,r){"use strict";var n=r(20);e.exports=function(e){return!(!e||"string"!=typeof e||e.length<6||new RegExp("[^"+n.get().replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")+"]").test(e))}},function(e,t,r){"use strict";e.exports=0},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id",name:"w:name"}}}t.BookmarkStartAttributes=s;class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id"}}}t.BookmarkEndAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:outlineLvl"),this.level=e,this.root.push(new n.Attributes({val:e}))}}t.OutlineLevel=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:bidi")}}t.Bidirectional=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(231)),n(r(232)),n(r(234)),n(r(2)),n(r(239)),n(r(248)),n(r(249)),n(r(252)),n(r(254))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:oMath");for(const t of e.children)this.root.push(t)}}t.Math=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(233);class o extends n.XmlComponent{constructor(e){super("m:r"),this.root.push(new s.MathText(e))}}t.MathRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:t"),this.root.push(e)}}t.MathText=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(235)),n(r(86)),n(r(87))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(86),o=r(87);class i extends n.XmlComponent{constructor(e){super("m:f"),this.root.push(new o.MathNumerator(e.numerator)),this.root.push(new s.MathDenominator(e.denominator))}}t.MathFraction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:subHide"),this.root.push(new s({hide:1}))}}t.MathSubScriptHide=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:supHide"),this.root.push(new s({hide:1}))}}t.MathSuperScriptHide=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(89),o=r(91),i=r(92),a=r(93);class u extends n.XmlComponent{constructor(e){super("m:nary"),this.root.push(new o.MathNArayProperties("∑",!!e.superScript,!!e.subScript)),e.subScript&&this.root.push(new i.MathSubScriptElement(e.subScript)),e.superScript&&this.root.push(new a.MathSuperScriptElement(e.superScript)),this.root.push(new s.MathBase(e.children))}}t.MathSum=u},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(240)),n(r(242)),n(r(244)),n(r(246))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(241)),n(r(94))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(94);class i extends n.XmlComponent{constructor(e){super("m:sSup"),this.root.push(new o.MathSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathSuperScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(243)),n(r(95))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(95);class i extends n.XmlComponent{constructor(e){super("m:sSub"),this.root.push(new o.MathSubScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript))}}t.MathSubScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(245)),n(r(96))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(96);class i extends n.XmlComponent{constructor(e){super("m:sSubSup"),this.root.push(new o.MathSubSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathSubSuperScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(247)),n(r(97))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(97);class i extends n.XmlComponent{constructor(e){super("m:sPre"),this.root.push(new o.MathPreSubSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathPreSubSuperScript=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND4=""},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(98)),n(r(250)),n(r(99))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(98),i=r(99);class a extends n.XmlComponent{constructor(e){super("m:rad"),this.root.push(new i.MathRadicalProperties(!!e.degree)),this.root.push(new o.MathDegree(e.degree)),this.root.push(new s.MathBase(e.children))}}t.MathRadical=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:degHide"),this.root.push(new s({hide:1}))}}t.MathDegreeHide=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(253)),n(r(100)),n(r(101))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(100),i=r(101);class a extends n.XmlComponent{constructor(e){super("m:func"),this.root.push(new i.MathFunctionProperties),this.root.push(new o.MathFunctionName(e.name)),this.root.push(new s.MathBase(e.children))}}t.MathFunction=a},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(255)),n(r(258)),n(r(259)),n(r(260))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties),this.root.push(new s.MathBase(e.children))}}t.MathRoundBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={character:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:begChr"),this.root.push(new s({character:e}))}}t.MathBeginningCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={character:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:endChr"),this.root.push(new s({character:e}))}}t.MathEndingCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"[",endingCharacter:"]"})),this.root.push(new s.MathBase(e.children))}}t.MathSquareBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"{",endingCharacter:"}"})),this.root.push(new s.MathBase(e.children))}}t.MathCurlyBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"〈",endingCharacter:"〉"})),this.root.push(new s.MathBase(e.children))}}t.MathAngledBrackets=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(262)),n(r(10)),n(r(102)),n(r(38)),n(r(277))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(263),o=r(10),i=r(102);class a extends n.XmlComponent{constructor({rows:e,width:t,columnWidths:r=Array(Math.max(...e.map((e=>e.CellCount)))).fill(100),margins:{marginUnitType:n,top:a,bottom:u,right:c,left:l}={marginUnitType:o.WidthType.AUTO,top:0,bottom:0,right:0,left:0},float:h,layout:p,borders:d,alignment:f}){super("w:tbl"),this.properties=new i.TableProperties,this.root.push(this.properties),d?this.properties.setBorder(d):this.properties.setBorder({}),t?this.properties.setWidth(t.size,t.type):this.properties.setWidth(100),this.properties.CellMargin.addBottomMargin(u||0,n),this.properties.CellMargin.addTopMargin(a||0,n),this.properties.CellMargin.addLeftMargin(l||0,n),this.properties.CellMargin.addRightMargin(c||0,n),this.root.push(new s.TableGrid(r));for(const t of e)this.root.push(t);e.forEach(((t,r)=>{if(r===e.length-1)return;let n=0;t.cells.forEach((t=>{if(t.options.rowSpan&&t.options.rowSpan>1){const s=new o.TableCell({rowSpan:t.options.rowSpan-1,columnSpan:t.options.columnSpan,borders:t.options.borders,children:[],verticalMerge:o.VerticalMergeType.CONTINUE});e[r+1].addCellToColumnIndex(s,n)}n+=t.options.columnSpan||1}))})),h&&this.properties.setTableFloatProperties(h),p&&this.properties.setLayout(p),f&&this.properties.setAlignment(f)}}t.Table=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:tblGrid");for(const t of e)this.root.push(new i(t))}}t.TableGrid=s;class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={w:"w:w"}}}class i extends n.XmlComponent{constructor(e){super("w:gridCol"),void 0!==e&&this.root.push(new o({w:e}))}}t.GridCol=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(0),o=r(37),i=r(265);class a extends s.XmlComponent{constructor(e){super("w:tc"),this.options=e,this.properties=new i.TableCellProperties,this.root.push(this.properties);for(const t of e.children)this.root.push(t);e.verticalAlign&&this.properties.setVerticalAlign(e.verticalAlign),e.textDirection&&this.properties.setTextDirection(e.textDirection),e.verticalMerge?this.properties.addVerticalMerge(e.verticalMerge):e.rowSpan&&e.rowSpan>1&&this.properties.addVerticalMerge(o.VerticalMergeType.RESTART),e.margins&&this.properties.addMargins(e.margins),e.shading&&this.properties.setShading(e.shading),e.columnSpan&&this.properties.addGridSpan(e.columnSpan),e.width&&this.properties.setWidth(e.width.size,e.width.type),e.borders&&(e.borders.top&&this.properties.Borders.addTopBorder(e.borders.top.style,e.borders.top.size,e.borders.top.color),e.borders.bottom&&this.properties.Borders.addBottomBorder(e.borders.bottom.style,e.borders.bottom.size,e.borders.bottom.color),e.borders.left&&this.properties.Borders.addLeftBorder(e.borders.left.style,e.borders.left.size,e.borders.left.color),e.borders.right&&this.properties.Borders.addRightBorder(e.borders.right.style,e.borders.right.size,e.borders.right.color))}prepForXml(e){return this.root[this.root.length-1]instanceof n.Paragraph||this.root.push(new n.Paragraph({})),super.prepForXml(e)}}t.TableCell=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(38),o=r(267),i=r(37);class a extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tcPr"),this.cellBorder=new i.TableCellBorders,this.root.push(this.cellBorder)}get Borders(){return this.cellBorder}addGridSpan(e){return this.root.push(new i.GridSpan(e)),this}addVerticalMerge(e){return this.root.push(new i.VerticalMerge(e)),this}setVerticalAlign(e){return this.root.push(new i.VAlign(e)),this}setWidth(e,t=i.WidthType.AUTO){return this.root.push(new i.TableCellWidth(e,t)),this}setShading(e){return this.root.push(new s.TableShading(e)),this}addMargins(e){return this.root.push(new o.TableCellMargin(e)),this}setTextDirection(e){return this.root.push(new i.TDirection(e)),this}}t.TableCellProperties=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={fill:"w:fill",color:"w:color",val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:shd"),this.root.push(new s(e))}}var i;t.TableShading=o,(i=t.ShadingType||(t.ShadingType={})).CLEAR="clear",i.DIAGONAL_CROSS="diagCross",i.DIAGONAL_STRIPE="diagStripe",i.HORIZONTAL_CROSS="horzCross",i.HORIZONTAL_STRIPE="horzStripe",i.NIL="nil",i.PERCENT_5="pct5",i.PERCENT_10="pct10",i.PERCENT_12="pct12",i.PERCENT_15="pct15",i.PERCENT_20="pct20",i.PERCENT_25="pct25",i.PERCENT_30="pct30",i.PERCENT_35="pct35",i.PERCENT_37="pct37",i.PERCENT_40="pct40",i.PERCENT_45="pct45",i.PERCENT_50="pct50",i.PERCENT_55="pct55",i.PERCENT_60="pct60",i.PERCENT_62="pct62",i.PERCENT_65="pct65",i.PERCENT_70="pct70",i.PERCENT_75="pct75",i.PERCENT_80="pct80",i.PERCENT_85="pct85",i.PERCENT_87="pct87",i.PERCENT_90="pct90",i.PERCENT_95="pct95",i.REVERSE_DIAGONAL_STRIPE="reverseDiagStripe",i.SOLID="solid",i.THIN_DIAGONAL_CROSS="thinDiagCross",i.THIN_DIAGONAL_STRIPE="thinDiagStripe",i.THIN_HORIZONTAL_CROSS="thinHorzCross",i.THIN_REVERSE_DIAGONAL_STRIPE="thinReverseDiagStripe",i.THIN_VERTICAL_STRIPE="thinVertStripe",i.VERTICAL_STRIPE="vertStripe"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(268);class o extends n.XmlComponent{constructor({top:e=0,left:t=0,right:r=0,bottom:n=0}){super("w:tcMar"),this.root.push(new s.TopCellMargin(e)),this.root.push(new s.BottomCellMargin(n)),this.root.push(new s.RightCellMargin(r)),this.root.push(new s.LeftCellMargin(t))}}t.TableCellMargin=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",type:"w:type"}}}class o extends n.XmlComponent{constructor(e){super("w:top"),this.root.push(new s({width:e,type:"dxa"}))}}t.TopCellMargin=o;class i extends n.XmlComponent{constructor(e){super("w:bottom"),this.root.push(new s({width:e,type:"dxa"}))}}t.BottomCellMargin=i;class a extends n.XmlComponent{constructor(e){super("w:start"),this.root.push(new s({width:e,type:"dxa"}))}}t.LeftCellMargin=a;class u extends n.XmlComponent{constructor(e){super("w:end"),this.root.push(new s({width:e,type:"dxa"}))}}t.RightCellMargin=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(1),o=r(38),i=r(10),a=r(103),u=r(275),c=r(108),l=r(110),h=r(276);class p extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tblPr"),this.cellMargin=new u.TableCellMargin,this.root.push(this.cellMargin)}setWidth(e,t=i.WidthType.AUTO){return this.root.push(new h.PreferredTableWidth(t,e)),this}setLayout(e){this.root.push(new l.TableLayout(e))}setBorder(e){return this.root.push(new a.TableBorders(e)),this}get CellMargin(){return this.cellMargin}setTableFloatProperties(e){return this.root.push(new c.TableFloatProperties(e)),this}setShading(e){return this.root.push(new o.TableShading(e)),this}setAlignment(e){this.root.push(new s.Alignment(e))}}t.TableProperties=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(104);!function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(272));class o extends n.XmlComponent{constructor(e){if(super("w:styles"),e.initialStyles&&this.root.push(e.initialStyles),e.importedStyles)for(const t of e.importedStyles)this.root.push(t);if(e.paragraphStyles)for(const t of e.paragraphStyles)this.root.push(new s.StyleForParagraph(t));if(e.characterStyles)for(const t of e.characterStyles)this.root.push(new s.StyleForCharacter(t))}}t.Styles=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(19),s=r(42),o=r(41);class i extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{basedOn:"Normal",next:"Normal",quickFormat:!0}))}}t.HeadingStyle=i,t.TitleStyle=class extends i{constructor(e){super(Object.assign({},e,{id:"Title",name:"Title"}))}},t.Heading1Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading1",name:"Heading 1"}))}},t.Heading2Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading2",name:"Heading 2"}))}},t.Heading3Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading3",name:"Heading 3"}))}},t.Heading4Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading4",name:"Heading 4"}))}},t.Heading5Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading5",name:"Heading 5"}))}},t.Heading6Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading6",name:"Heading 6"}))}};class a extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{id:"ListParagraph",name:"List Paragraph",basedOn:"Normal",quickFormat:!0}))}}t.ListParagraph=a;class u extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{id:"FootnoteText",name:"footnote text",link:"FootnoteTextChar",basedOn:"Normal",uiPriority:99,semiHidden:!0,unhideWhenUsed:!0,paragraph:{spacing:{after:0,line:240,lineRule:"auto"}},run:{size:20}}))}}t.FootnoteText=u;class c extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"FootnoteReference",name:"footnote reference",basedOn:"DefaultParagraphFont",semiHidden:!0,run:{superScript:!0}}))}}t.FootnoteReferenceStyle=c;class l extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"FootnoteTextChar",name:"Footnote Text Char",basedOn:"DefaultParagraphFont",link:"FootnoteText",semiHidden:!0,run:{size:20}}))}}t.FootnoteTextChar=l;class h extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"Hyperlink",name:"Hyperlink",basedOn:"DefaultParagraphFont",run:{color:"0563C1",underline:{type:n.UnderlineType.SINGLE}}}))}}t.HyperlinkStyle=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(273))},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),(n=t.BorderStyle||(t.BorderStyle={})).SINGLE="single",n.DASH_DOT_STROKED="dashDotStroked",n.DASHED="dashed",n.DASH_SMALL_GAP="dashSmallGap",n.DOT_DASH="dotDash",n.DOT_DOT_DASH="dotDotDash",n.DOTTED="dotted",n.DOUBLE="double",n.DOUBLE_WAVE="doubleWave",n.INSET="inset",n.NIL="nil",n.NONE="none",n.OUTSET="outset",n.THICK="thick",n.THICK_THIN_LARGE_GAP="thickThinLargeGap",n.THICK_THIN_MEDIUM_GAP="thickThinMediumGap",n.THICK_THIN_SMALL_GAP="thickThinSmallGap",n.THIN_THICK_LARGE_GAP="thinThickLargeGap",n.THIN_THICK_MEDIUM_GAP="thinThickMediumGap",n.THIN_THICK_SMALL_GAP="thinThickSmallGap",n.THIN_THICK_THIN_LARGE_GAP="thinThickThinLargeGap",n.THIN_THICK_THIN_MEDIUM_GAP="thinThickThinMediumGap",n.THIN_THICK_THIN_SMALL_GAP="thinThickThinSmallGap",n.THREE_D_EMBOSS="threeDEmboss",n.THREE_D_ENGRAVE="threeDEngrave",n.TRIPLE="triple",n.WAVE="wave"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(106),o=r(107);class i extends n.XmlComponent{constructor(e){super("w:docDefaults"),this.runPropertiesDefaults=new o.RunPropertiesDefaults(e&&e.run),this.paragraphPropertiesDefaults=new s.ParagraphPropertiesDefaults(e&&e.paragraph),this.root.push(this.runPropertiesDefaults),this.root.push(this.paragraphPropertiesDefaults)}}t.DocumentDefaults=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:w",type:"w:type"}}}class i extends n.XmlComponent{setProperties(e,t=s.WidthType.DXA){this.root.push(new o({type:t,value:e}))}}class a extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tblCellMar")}addTopMargin(e,t=s.WidthType.DXA){const r=new i("w:top");r.setProperties(e,t),this.root.push(r)}addLeftMargin(e,t=s.WidthType.DXA){const r=new i("w:left");r.setProperties(e,t),this.root.push(r)}addBottomMargin(e,t=s.WidthType.DXA){const r=new i("w:bottom");r.setProperties(e,t),this.root.push(r)}addRightMargin(e,t=s.WidthType.DXA){const r=new i("w:right");r.setProperties(e,t),this.root.push(r)}}t.TableCellMargin=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",w:"w:w"}}}class i extends n.XmlComponent{constructor(e,t){super("w:tblW");const r=e===s.WidthType.PERCENTAGE?`${t}%`:t;this.root.push(new o({type:e,w:r}))}}t.PreferredTableWidth=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(278)),n(r(111)),n(r(112))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10),o=r(111);class i extends n.XmlComponent{constructor(e){super("w:tr"),this.options=e,this.properties=new o.TableRowProperties,this.root.push(this.properties);for(const t of e.children)this.root.push(t);e.cantSplit&&this.properties.setCantSplit(),e.tableHeader&&this.properties.setTableHeader(),e.height&&this.properties.setHeight(e.height.height,e.height.rule)}get CellCount(){return this.options.children.length}get Children(){return this.options.children}get cells(){return this.root.filter((e=>e instanceof s.TableCell))}addCellToIndex(e,t){this.root.splice(t+1,0,e)}addCellToColumnIndex(e,t){const r=this.columnIndexToRootIndex(t,!0);this.addCellToIndex(e,r-1)}rootIndexToColumnIndex(e){if(e<1||e>=this.root.length)throw new Error("cell 'rootIndex' should between 1 to "+(this.root.length-1));let t=0;for(let r=1;r<e;r++)t+=this.root[r].options.columnSpan||1;return t}columnIndexToRootIndex(e,t=!1){if(e<0)throw new Error("cell 'columnIndex' should not less than zero");let r=0,n=1;for(;r<=e;){if(n>=this.root.length){if(t)return this.root.length;throw new Error("cell 'columnIndex' should not great than "+(r-1))}const e=this.root[n];n+=1,r+=e&&e.options.columnSpan||1}return n-1}}t.TableRow=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(85),s=r(280),o=r(282),i=r(288),a=r(113),u=r(128),c=r(44),l=r(130),h=r(131),p=r(47),d=r(48),f=r(132),m=r(1),g=r(45),w=r(46),y=r(331),b=r(23),_=r(336),v=r(337);t.File=class{constructor(e={creator:"Un-named",revision:"1",lastModifiedBy:"Un-named"},t={},r=[]){if(this.currentRelationshipId=1,this.headers=[],this.footers=[],this.hyperlinkCache={},this.coreProperties=new i.CoreProperties(e),this.numbering=new f.Numbering(e.numbering?e.numbering:{config:[]}),this.docRelationships=new g.Relationships,this.fileRelationships=new g.Relationships,this.appProperties=new s.AppProperties,this.footNotes=new l.FootNotes,this.contentTypes=new o.ContentTypes,this.document=new a.Document({background:e.background||{}}),this.settings=new y.Settings,this.media=t.template&&t.template.media?t.template.media:new d.Media,t.template&&(this.currentRelationshipId=t.template.currentRelationshipId+1),t.template&&e.externalStyles)throw Error("can not use both template and external styles");if(t.template){const e=new _.ExternalStylesFactory;this.styles=e.newInstance(t.template.styles)}else if(e.externalStyles){const t=new _.ExternalStylesFactory;this.styles=t.newInstance(e.externalStyles)}else if(e.styles){const t=(new v.DefaultStylesFactory).newInstance();this.styles=new b.Styles(Object.assign({},t,e.styles))}else{const e=new v.DefaultStylesFactory;this.styles=new b.Styles(e.newInstance())}if(this.addDefaultRelationships(),t.template&&t.template.headers)for(const e of t.template.headers)this.addHeaderToDocument(e.header,e.type);if(t.template&&t.template.footers)for(const e of t.template.footers)this.addFooterToDocument(e.footer,e.type);for(const e of r){this.document.Body.addSection(e.properties?e.properties:{});for(const t of e.children)if(t instanceof m.HyperlinkRef){const e=this.hyperlinkCache[t.id];this.document.add(e)}else this.document.add(t)}if(e.footnotes)for(const t of e.footnotes)this.footNotes.createFootNote(t);if(e.hyperlinks){const t={};for(const r in e.hyperlinks){if(!e.hyperlinks[r])continue;const n=e.hyperlinks[r],s=n.type===m.HyperlinkType.EXTERNAL?this.createHyperlink(n.link,n.text):this.createInternalHyperLink(r,n.text);t[r]=s}this.hyperlinkCache=t}e.features&&e.features.trackRevisions&&this.settings.addTrackRevisions()}addSection({headers:e={default:new h.Header},footers:t={default:new h.Header},margins:r={},size:n={},properties:s,children:o}){this.document.Body.addSection(Object.assign({},s,{headers:{default:e.default?this.createHeader(e.default):this.createHeader(new h.Header),first:e.first?this.createHeader(e.first):void 0,even:e.even?this.createHeader(e.even):void 0},footers:{default:t.default?this.createFooter(t.default):this.createFooter(new h.Footer),first:t.first?this.createFooter(t.first):void 0,even:t.even?this.createFooter(t.even):void 0}},r,n));for(const e of o)if(e instanceof m.HyperlinkRef){const t=this.hyperlinkCache[e.id];this.document.add(t)}else this.document.add(e)}verifyUpdateFields(){this.document.getTablesOfContents().length&&this.settings.addUpdateFields()}createHyperlink(e,t=e){const r=new m.Hyperlink(t,n.generate().toLowerCase());return this.docRelationships.createRelationship(r.linkId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",e,w.TargetModeType.EXTERNAL),r}createInternalHyperLink(e,t=e){return new m.Hyperlink(t,n.generate().toLowerCase(),e)}createHeader(e){const t=new p.HeaderWrapper(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addHeaderToDocument(t),t}createFooter(e){const t=new c.FooterWrapper(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addFooterToDocument(t),t}addHeaderToDocument(e,t=u.HeaderReferenceType.DEFAULT){this.headers.push({header:e,type:t}),this.docRelationships.createRelationship(e.Header.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header",`header${this.headers.length}.xml`),this.contentTypes.addHeader(this.headers.length)}addFooterToDocument(e,t=u.FooterReferenceType.DEFAULT){this.footers.push({footer:e,type:t}),this.docRelationships.createRelationship(e.Footer.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer",`footer${this.footers.length}.xml`),this.contentTypes.addFooter(this.footers.length)}addDefaultRelationships(){this.fileRelationships.createRelationship(1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument","word/document.xml"),this.fileRelationships.createRelationship(2,"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties","docProps/core.xml"),this.fileRelationships.createRelationship(3,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties","docProps/app.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles","styles.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering","numbering.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes","footnotes.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings","settings.xml")}get Document(){return this.document}get Styles(){return this.styles}get CoreProperties(){return this.coreProperties}get Numbering(){return this.numbering}get Media(){return this.media}get DocumentRelationships(){return this.docRelationships}get FileRelationships(){return this.fileRelationships}get Headers(){return this.headers.map((e=>e.header))}get Footers(){return this.footers.map((e=>e.footer))}get ContentTypes(){return this.contentTypes}get AppProperties(){return this.appProperties}get FootNotes(){return this.footNotes}get Settings(){return this.settings}get HyperlinkCache(){return this.hyperlinkCache}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(281);class o extends n.XmlComponent{constructor(){super("Properties"),this.root.push(new s.AppPropertiesAttributes({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"}))}}t.AppProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns",vt:"xmlns:vt"}}}t.AppPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(283),o=r(284),i=r(286);class a extends n.XmlComponent{constructor(){super("Types"),this.root.push(new s.ContentTypeAttributes({xmlns:"http://schemas.openxmlformats.org/package/2006/content-types"})),this.root.push(new o.Default("image/png","png")),this.root.push(new o.Default("image/jpeg","jpeg")),this.root.push(new o.Default("image/jpeg","jpg")),this.root.push(new o.Default("image/bmp","bmp")),this.root.push(new o.Default("image/gif","gif")),this.root.push(new o.Default("application/vnd.openxmlformats-package.relationships+xml","rels")),this.root.push(new o.Default("application/xml","xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml","/word/document.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml","/word/styles.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-package.core-properties+xml","/docProps/core.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.extended-properties+xml","/docProps/app.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml","/word/numbering.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml","/word/footnotes.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml","/word/settings.xml"))}addFooter(e){this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml",`/word/footer${e}.xml`))}addHeader(e){this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml",`/word/header${e}.xml`))}}t.ContentTypes=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"}}}t.ContentTypeAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(285);class o extends n.XmlComponent{constructor(e,t){super("Default"),this.root.push(new s.DefaultAttributes({contentType:e,extension:t}))}}t.Default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",extension:"Extension"}}}t.DefaultAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(287);class o extends n.XmlComponent{constructor(e,t){super("Override"),this.root.push(new s.OverrideAttributes({contentType:e,partName:t}))}}t.Override=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",partName:"PartName"}}}t.OverrideAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(289))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(11),o=r(290);class i extends n.XmlComponent{constructor(e){super("cp:coreProperties"),this.root.push(new s.DocumentAttributes({cp:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",xsi:"http://www.w3.org/2001/XMLSchema-instance"})),e.title&&this.root.push(new o.Title(e.title)),e.subject&&this.root.push(new o.Subject(e.subject)),e.creator&&this.root.push(new o.Creator(e.creator)),e.keywords&&this.root.push(new o.Keywords(e.keywords)),e.description&&this.root.push(new o.Description(e.description)),e.lastModifiedBy&&this.root.push(new o.LastModifiedBy(e.lastModifiedBy)),e.revision&&this.root.push(new o.Revision(e.revision)),this.root.push(new o.Created),this.root.push(new o.Modified)}}t.CoreProperties=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(11);class o extends n.XmlComponent{constructor(e){super("dc:title"),this.root.push(e)}}t.Title=o;class i extends n.XmlComponent{constructor(e){super("dc:subject"),this.root.push(e)}}t.Subject=i;class a extends n.XmlComponent{constructor(e){super("dc:creator"),this.root.push(e)}}t.Creator=a;class u extends n.XmlComponent{constructor(e){super("cp:keywords"),this.root.push(e)}}t.Keywords=u;class c extends n.XmlComponent{constructor(e){super("dc:description"),this.root.push(e)}}t.Description=c;class l extends n.XmlComponent{constructor(e){super("cp:lastModifiedBy"),this.root.push(e)}}t.LastModifiedBy=l;class h extends n.XmlComponent{constructor(e){super("cp:revision"),this.root.push(e)}}t.Revision=h;class p extends n.XmlComponent{getCurrentDate(){const e=new Date;return e.getFullYear()+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+("0"+e.getDate()).slice(-2)+"T"+("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"Z"}}t.DateComponent=p,t.Created=class extends p{constructor(){super("dcterms:created"),this.root.push(new s.DocumentAttributes({type:"dcterms:W3CDTF"})),this.root.push(this.getCurrentDate())}},t.Modified=class extends p{constructor(){super("dcterms:modified"),this.root.push(new s.DocumentAttributes({type:"dcterms:W3CDTF"})),this.root.push(this.getCurrentDate())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(114),o=r(11),i=r(129);class a extends n.XmlComponent{constructor(e){super("w:document"),this.root.push(new o.DocumentAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.body=new s.Body,this.root.push(new i.DocumentBackground(e.background)),this.root.push(this.body)}add(e){return this.body.push(e),this}get Body(){return this.body}getTablesOfContents(){return this.body.getTablesOfContents()}}t.Document=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(115);class i extends n.XmlComponent{constructor(){super("w:body"),this.sections=[]}addSection(e){const t=this.sections.pop();this.root.push(this.createSectionParagraph(t)),this.sections.push(new o.SectionProperties(e))}prepForXml(e){return 1===this.sections.length&&(this.root.splice(0,1),this.root.push(this.sections.pop())),super.prepForXml(e)}push(e){this.root.push(e)}getTablesOfContents(){return this.root.filter((e=>e instanceof s.TableOfContents))}createSectionParagraph(e){const t=new s.Paragraph({}),r=new s.ParagraphProperties({});return r.push(e),t.addChildElement(r),t}}t.Body=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(294);class o extends n.XmlComponent{constructor(e,t){super("w:cols"),this.root.push(new s.ColumnsAttributes({space:e,num:t}))}}t.Columns=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"w:space",num:"w:num"}}}t.ColumnsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(296);class o extends n.XmlComponent{constructor(e){super("w:docGrid"),this.root.push(new s.DocGridAttributes({linePitch:e}))}}t.DocumentGrid=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={linePitch:"w:linePitch"}}}t.DocGridAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.LineNumberRestartFormat||(t.LineNumberRestartFormat={})).CONTINUOUS="continuous",s.NEW_SECTION="newSection",s.NEW_PAGE="newPage";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={lineNumberCountBy:"w:countBy",lineNumberStart:"w:start",lineNumberRestart:"w:restart",lineNumberDistance:"w:distance"}}}t.LineNumberAttributes=o;class i extends n.XmlComponent{constructor(e,t,r,n){super("w:lnNumType"),this.root.push(new o({lineNumberCountBy:e,lineNumberStart:t,lineNumberRestart:r,lineNumberDistance:n}))}}t.LineNumberType=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s,o,i;(i=t.PageBorderDisplay||(t.PageBorderDisplay={})).ALL_PAGES="allPages",i.FIRST_PAGE="firstPage",i.NOT_FIRST_PAGE="notFirstPage",(o=t.PageBorderOffsetFrom||(t.PageBorderOffsetFrom={})).PAGE="page",o.TEXT="text",(s=t.PageBorderZOrder||(t.PageBorderZOrder={})).BACK="back",s.FRONT="front";class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={style:"w:val",size:"w:size",color:"w:color",space:"w:space"}}}class u extends n.XmlComponent{constructor(e,t){super(e),this.root.push(new a(t))}}class c extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={display:"w:display",offsetFrom:"w:offsetFrom",zOrder:"w:zOrder"}}}class l extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:pgBorders"),!e)return;let t={};e.pageBorders&&(t={display:e.pageBorders.display,offsetFrom:e.pageBorders.offsetFrom,zOrder:e.pageBorders.zOrder}),this.root.push(new c(t)),e.pageBorderTop&&this.root.push(new u("w:top",e.pageBorderTop)),e.pageBorderRight&&this.root.push(new u("w:right",e.pageBorderRight)),e.pageBorderBottom&&this.root.push(new u("w:bottom",e.pageBorderBottom)),e.pageBorderLeft&&this.root.push(new u("w:left",e.pageBorderLeft))}}t.PageBorders=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(300);class o extends n.XmlComponent{constructor(e,t,r,n,o,i,a,u){super("w:pgMar"),this.root.push(new s.PageMarginAttributes({top:e,right:t,bottom:r,left:n,header:o,footer:i,gutter:a,mirror:u}))}}t.PageMargin=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",mirror:"w:mirrorMargins"}}}t.PageMarginAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.PageNumberFormat||(t.PageNumberFormat={})).CARDINAL_TEXT="cardinalText",s.DECIMAL="decimal",s.DECIMAL_ENCLOSED_CIRCLE="decimalEnclosedCircle",s.DECIMAL_ENCLOSED_FULL_STOP="decimalEnclosedFullstop",s.DECIMAL_ENCLOSED_PAREN="decimalEnclosedParen",s.DECIMAL_ZERO="decimalZero",s.LOWER_LETTER="lowerLetter",s.LOWER_ROMAN="lowerRoman",s.NONE="none",s.ORDINAL_TEXT="ordinalText",s.UPPER_LETTER="upperLetter",s.UPPER_ROMAN="upperRoman",s.DECIMAL_FULL_WIDTH="decimalFullWidth";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={pageNumberStart:"w:start",pageNumberFormatType:"w:fmt"}}}t.PageNumberTypeAttributes=o;class i extends n.XmlComponent{constructor(e,t){super("w:pgNumType"),this.root.push(new o({pageNumberStart:e,pageNumberFormatType:t}))}}t.PageNumberType=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(303);class o extends n.XmlComponent{constructor(){super("w:titlePg"),this.root.push(new s.TitlePageAttributes({value:"1"}))}}t.TitlePage=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:val"}}}t.TitlePageAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(127);var o;(o=t.SectionVerticalAlignValue||(t.SectionVerticalAlignValue={})).BOTH="both",o.BOTTOM="bottom",o.CENTER="center",o.TOP="top";class i extends n.XmlComponent{constructor(e){super("w:vAlign"),this.root.push(new s.SectionVerticalAlignAttributes({verticalAlign:e}))}}t.SectionVerticalAlign=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(125)),n(r(43))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={color:"w:color",themeColor:"w:themeColor",themeShade:"w:themeShade",themeTint:"w:themeTint"}}}t.DocumentBackgroundAttributes=s;class o extends n.XmlComponent{constructor(e){super("w:background"),this.root.push(new s({color:e.color?e.color:"FFFFFF",themeColor:e.themeColor,themeShade:e.themeShade,themeTint:e.themeTint}))}}t.DocumentBackground=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(308);class o extends n.InitializableXmlComponent{constructor(e,t){super("w:ftr",t),this.refId=e,t||this.root.push(new s.FooterAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}}t.Footer=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"}}}t.FooterAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(310),o=r(46);class i extends n.XmlComponent{constructor(){super("Relationships"),this.root.push(new s.RelationshipsAttributes({xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"}))}addRelationship(e){this.root.push(e)}createRelationship(e,t,r,n){const s=new o.Relationship(`rId${e}`,t,r,n);return this.addRelationship(s),s}get RelationshipCount(){return this.root.length-1}}t.Relationships=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"}}}t.RelationshipsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"Id",type:"Type",target:"Target",targetMode:"TargetMode"}}}t.RelationshipAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(1),o=r(313),i=r(317),a=r(319),u=r(321);class c extends n.XmlComponent{constructor(){super("w:footnotes"),this.currentId=1,this.root.push(new u.FootnotesAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const e=new o.Footnote(-1,o.FootnoteType.SEPERATOR);e.add(new s.Paragraph({spacing:{after:0,line:240,lineRule:"auto"},children:[new a.SeperatorRun]})),this.root.push(e);const t=new o.Footnote(0,o.FootnoteType.CONTINUATION_SEPERATOR);t.add(new s.Paragraph({spacing:{after:0,line:240,lineRule:"auto"},children:[new i.ContinuationSeperatorRun]})),this.root.push(t)}createFootNote(e){const t=new o.Footnote(this.currentId);t.add(e),this.root.push(t),this.currentId++}}t.FootNotes=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(314),o=r(315);var i;(i=t.FootnoteType||(t.FootnoteType={})).SEPERATOR="separator",i.CONTINUATION_SEPERATOR="continuationSeparator";class a extends n.XmlComponent{constructor(e,t){super("w:footnote"),this.root.push(new s.FootnoteAttributes({type:t,id:e}))}add(e){e.addRunToFront(new o.FootnoteRefRun),this.root.push(e)}}t.Footnote=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"w:id"}}}t.FootnoteAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(316);class o extends n.Run{constructor(){super({style:"FootnoteReference"}),this.root.push(new s.FootnoteRef)}}t.FootnoteRefRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:footnoteRef")}}t.FootnoteRef=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(318);class o extends n.Run{constructor(){super({}),this.root.push(new s.ContinuationSeperator)}}t.ContinuationSeperatorRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:continuationSeparator")}}t.ContinuationSeperator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(320);class o extends n.Run{constructor(){super({}),this.root.push(new s.Seperator)}}t.SeperatorRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:separator")}}t.Seperator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"}}}t.FootnotesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(323))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(324))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3),s=r(69),o=r(0);class i extends o.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id"}}}t.FootNoteReferenceRunAttributes=i;class a extends o.XmlComponent{constructor(e){super("w:footnoteReference"),this.root.push(new i({id:e}))}}t.FootnoteReference=a;class u extends n.Run{constructor(e){super({}),this.properties.push(new s.Style("FootnoteReference")),this.root.push(new a(e))}}t.FootnoteReferenceRun=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(326);class o extends n.InitializableXmlComponent{constructor(e,t){super("w:hdr",t),this.refId=e,t||this.root.push(new s.HeaderAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}}t.Header=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",w16cid:"xmlns:w16cid",w16se:"xmlns:w16se"}}}t.HeaderAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class s{static addImage(e,t,r,s,o){const i=e.Media.addMedia(t,r,s);return new n.PictureRun(i,o)}static generateId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}constructor(){this.map=new Map}getMedia(e){const t=this.map.get(e);if(void 0===t)throw new Error(`Cannot find image with the key ${e}`);return t}addMedia(e,t=100,r=100){const n=`${s.generateId()}.png`;return this.createMedia(n,{width:t,height:r},e)}createMedia(e,t,r,n){const s={stream:"string"==typeof r?this.convertDataURIToBinary(r):r,path:n,fileName:e,dimensions:{pixels:{x:Math.round(t.width),y:Math.round(t.height)},emus:{x:Math.round(9525*t.width),y:Math.round(9525*t.height)}}};return this.map.set(e,s),s}get Array(){const e=new Array;return this.map.forEach((t=>{e.push(t)})),e}convertDataURIToBinary(e){const t=";base64,",n=e.indexOf(t)+t.length;return"function"==typeof atob?new Uint8Array(atob(e.substring(n)).split("").map((e=>e.charCodeAt(0)))):new(r(6).Buffer)(e,"base64")}}t.Media=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND2=""},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(0),o=r(11),i=r(133),a=r(134);class u extends s.XmlComponent{constructor(e){super("w:numbering"),this.abstractNumbering=[],this.concreteNumbering=[],this.root.push(new o.DocumentAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.nextId=0;const t=this.createAbstractNumbering([{level:0,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:720,hanging:360}}}},{level:1,format:"bullet",text:"○",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:1440,hanging:360}}}},{level:2,format:"bullet",text:"■",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2160,hanging:360}}}},{level:3,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2880,hanging:360}}}},{level:4,format:"bullet",text:"○",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:3600,hanging:360}}}},{level:5,format:"bullet",text:"■",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:4320,hanging:360}}}},{level:6,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:5040,hanging:360}}}},{level:7,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:5760,hanging:360}}}},{level:8,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:6480,hanging:360}}}}]);this.createConcreteNumbering(t);for(const t of e.config){const e=this.createAbstractNumbering(t.levels);this.createConcreteNumbering(e,t.reference)}}prepForXml(){return this.abstractNumbering.forEach((e=>this.root.push(e))),this.concreteNumbering.forEach((e=>this.root.push(e))),super.prepForXml()}createConcreteNumbering(e,t){const r=new a.ConcreteNumbering(this.nextId++,e.id,t);return this.concreteNumbering.push(r),r}createAbstractNumbering(e){const t=new i.AbstractNumbering(this.nextId++,e);return this.abstractNumbering.push(t),t}get ConcreteNumbering(){return this.concreteNumbering}}t.Numbering=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:multiLevelType"),this.root.push(new n.Attributes({val:e}))}}t.MultiLevelType=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(332)),n(r(135))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(333),o=r(334),i=r(335),a=r(135);class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"}}}t.SettingsAttributes=u;class c extends n.XmlComponent{constructor(){super("w:settings"),this.root.push(new u({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.compatibility=new s.Compatibility,this.trackRevisions=new i.TrackRevisions,this.root.push(new o.DisplayBackgroundShape)}addUpdateFields(){this.root.find((e=>e instanceof a.UpdateFields))||this.addChildElement(new a.UpdateFields)}addCompatibility(){return this.root.find((e=>e instanceof s.Compatibility))||this.addChildElement(this.compatibility),this.compatibility}addTrackRevisions(){return this.root.find((e=>e instanceof i.TrackRevisions))||this.addChildElement(this.trackRevisions),this.trackRevisions}}t.Settings=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:doNotExpandShiftReturn")}}class o extends n.XmlComponent{constructor(){super("w:compat")}doNotExpandShiftReturn(){return this.root.push(new s),this}}t.Compatibility=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:displayBackgroundShape")}}t.DisplayBackgroundShape=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:trackRevisions")}}t.TrackRevisions=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(25),o=r(23);t.ExternalStylesFactory=class{newInstance(e){const t=s.xml2js(e,{compact:!1});let r;for(const e of t.elements||[])"w:styles"===e.name&&(r=e);if(void 0===r)throw new Error("can not find styles element");const i=r.elements||[];return new o.Styles({initialStyles:new n.ImportedRootElementAttributes(r.attributes),importedStyles:i.map((e=>n.convertToXmlComponent(e)))})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(11),s=r(105),o=r(104);t.DefaultStylesFactory=class{newInstance(){return{initialStyles:new n.DocumentAttributes({mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",Ignorable:"w14 w15"}),importedStyles:[new s.DocumentDefaults,new o.TitleStyle({run:{size:56}}),new o.Heading1Style({run:{color:"2E74B5",size:32}}),new o.Heading2Style({run:{color:"2E74B5",size:26}}),new o.Heading3Style({run:{color:"1F4D78",size:24}}),new o.Heading4Style({run:{color:"2E74B5",italics:!0}}),new o.Heading5Style({run:{color:"2E74B5"}}),new o.Heading6Style({run:{color:"1F4D78"}}),new o.ListParagraph({}),new o.HyperlinkStyle({}),new o.FootnoteReferenceStyle({}),new o.FootnoteText({}),new o.FootnoteTextChar({})]}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND=""},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(340)),n(r(345))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(3),o=r(18),i=r(0),a=r(341),u=r(342),c=r(343);class l extends i.XmlComponent{constructor(e="Table of Contents",t){super("w:sdt"),this.root.push(new c.StructuredDocumentTagProperties(e));const r=new u.StructuredDocumentTagContent,i=new n.Paragraph({children:[new s.Run({children:[new o.Begin(!0),new a.FieldInstruction(t),new o.Separate]})]});r.addChildElement(i);const l=new n.Paragraph({children:[new s.Run({children:[new o.End]})]});r.addChildElement(l),this.root.push(r)}}t.TableOfContents=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e={}){super("w:instrText"),this.properties=e,this.root.push(new o({space:n.SpaceType.PRESERVE}));let t="TOC";this.properties.captionLabel&&(t=`${t} \\a "${this.properties.captionLabel}"`),this.properties.entriesFromBookmark&&(t=`${t} \\b "${this.properties.entriesFromBookmark}"`),this.properties.captionLabelIncludingNumbers&&(t=`${t} \\c "${this.properties.captionLabelIncludingNumbers}"`),this.properties.sequenceAndPageNumbersSeparator&&(t=`${t} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`),this.properties.tcFieldIdentifier&&(t=`${t} \\f "${this.properties.tcFieldIdentifier}"`),this.properties.hyperlink&&(t=`${t} \\h`),this.properties.tcFieldLevelRange&&(t=`${t} \\l "${this.properties.tcFieldLevelRange}"`),this.properties.pageNumbersEntryLevelsRange&&(t=`${t} \\n "${this.properties.pageNumbersEntryLevelsRange}"`),this.properties.headingStyleRange&&(t=`${t} \\o "${this.properties.headingStyleRange}"`),this.properties.entryAndPageNumberSeparator&&(t=`${t} \\p "${this.properties.entryAndPageNumberSeparator}"`),this.properties.seqFieldIdentifierForPrefix&&(t=`${t} \\s "${this.properties.seqFieldIdentifierForPrefix}"`),this.properties.stylesWithLevels&&this.properties.stylesWithLevels.length&&(t=`${t} \\t "${this.properties.stylesWithLevels.map((e=>`${e.styleName},${e.level}`)).join(",")}"`),this.properties.useAppliedParagraphOutlineLevel&&(t=`${t} \\u`),this.properties.preserveTabInEntries&&(t=`${t} \\w`),this.properties.preserveNewLineInEntries&&(t=`${t} \\x`),this.properties.hideTabAndPageNumbersInWebView&&(t=`${t} \\z`),this.root.push(t)}}t.FieldInstruction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:sdtContent")}}t.StructuredDocumentTagContent=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(344);class o extends n.XmlComponent{constructor(e){super("w:sdtPr"),this.root.push(new s.Alias(e))}}t.StructuredDocumentTagProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={alias:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:alias"),this.root.push(new s({alias:e}))}}t.Alias=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StyleLevel=class{constructor(e,t){this.styleName=e,this.level=t}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(347)),n(r(348))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(136);class i extends n.XmlComponent{constructor(e){super("w:ins"),this.root.push(new o.ChangeAttributes({id:e.id,author:e.author,date:e.date})),this.addChildElement(new s.TextRun(e))}}t.InsertedTextRun=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(66),i=r(18),a=r(17),u=r(136),c=r(349),l=r(350);class h extends n.XmlComponent{constructor(e){super("w:del"),this.root.push(new u.ChangeAttributes({id:e.id,author:e.author,date:e.date})),this.deletedTextRunWrapper=new p(e),this.addChildElement(this.deletedTextRunWrapper)}break(){return this.deletedTextRunWrapper.break(),this}}t.DeletedTextRun=h;class p extends n.XmlComponent{constructor(e){if(super("w:r"),this.root.push(new s.RunProperties(e)),e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case a.PageNumber.CURRENT:this.root.push(new i.Begin),this.root.push(new c.DeletedPage),this.root.push(new i.Separate),this.root.push(new i.End);break;case a.PageNumber.TOTAL_PAGES:this.root.push(new i.Begin),this.root.push(new c.DeletedNumberOfPages),this.root.push(new i.Separate),this.root.push(new i.End);break;case a.PageNumber.TOTAL_PAGES_IN_SECTION:this.root.push(new i.Begin),this.root.push(new c.DeletedNumberOfPagesSection),this.root.push(new i.Separate),this.root.push(new i.End);break;default:this.root.push(new l.DeletedText(t))}else e.text&&this.root.push(new l.DeletedText(e.text))}break(){this.root.splice(1,0,new o.Break)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("PAGE")}}t.DeletedPage=i;class a extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("NUMPAGES")}}t.DeletedNumberOfPages=a;class u extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("SECTIONPAGES")}}t.DeletedNumberOfPagesSection=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:delText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(e)}}t.DeletedText=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(352))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){e.done?s(e.value):new r((function(t){t(e.value)})).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=r(353);class o{static toBuffer(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBase64String(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"base64",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBlob(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}}o.compiler=new s.Compiler,t.Packer=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(137),s=r(354),o=r(356),i=r(357),a=r(358);t.Compiler=class{constructor(){this.formatter=new o.Formatter,this.imageReplacer=new i.ImageReplacer,this.numberingReplacer=new a.NumberingReplacer}compile(e,t){const r=new n,s=this.xmlifyFile(e,t);for(const e in s){if(!s[e])continue;const t=s[e];if(Array.isArray(t))for(const e of t)r.file(e.path,e.data);else r.file(t.path,t.data)}for(const t of e.Media.Array){const e=t.stream;r.file(`word/media/${t.fileName}`,e)}return r}xmlifyFile(e,t){e.verifyUpdateFields();const r=e.DocumentRelationships.RelationshipCount+1,n=s(this.formatter.format(e.Document,e),t),o=this.imageReplacer.getMediaData(n,e.Media);return{Relationships:{data:(()=>(o.forEach(((t,n)=>{e.DocumentRelationships.createRelationship(r+n,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`)})),s(this.formatter.format(e.DocumentRelationships,e),t)))(),path:"word/_rels/document.xml.rels"},Document:{data:(()=>{const t=this.imageReplacer.replace(n,o,r);return this.numberingReplacer.replace(t,e.Numbering.ConcreteNumbering)})(),path:"word/document.xml"},Styles:{data:s(this.formatter.format(e.Styles,e),t),path:"word/styles.xml"},Properties:{data:s(this.formatter.format(e.CoreProperties,e),{declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/core.xml"},Numbering:{data:s(this.formatter.format(e.Numbering,e),t),path:"word/numbering.xml"},FileRelationships:{data:s(this.formatter.format(e.FileRelationships,e),t),path:"_rels/.rels"},HeaderRelationships:e.Headers.map(((r,n)=>{const o=s(this.formatter.format(r.Header,e),t);return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:s(this.formatter.format(r.Relationships,e),t),path:`word/_rels/header${n+1}.xml.rels`}})),FooterRelationships:e.Footers.map(((r,n)=>{const o=s(this.formatter.format(r.Footer,e),t);return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:s(this.formatter.format(r.Relationships,e),t),path:`word/_rels/footer${n+1}.xml.rels`}})),Headers:e.Headers.map(((r,n)=>{const o=s(this.formatter.format(r.Header,e),t),i=this.imageReplacer.getMediaData(o,e.Media);return{data:this.imageReplacer.replace(o,i,0),path:`word/header${n+1}.xml`}})),Footers:e.Footers.map(((r,n)=>{const o=s(this.formatter.format(r.Footer,e),t),i=this.imageReplacer.getMediaData(o,e.Media);return{data:this.imageReplacer.replace(o,i,0),path:`word/footer${n+1}.xml`}})),ContentTypes:{data:s(this.formatter.format(e.ContentTypes,e),t),path:"[Content_Types].xml"},AppProperties:{data:s(this.formatter.format(e.AppProperties,e),t),path:"docProps/app.xml"},FootNotes:{data:s(this.formatter.format(e.FootNotes,e),t),path:"word/footnotes.xml"},Settings:{data:s(this.formatter.format(e.Settings,e),t),path:"word/settings.xml"}}}}},function(e,t,r){(function(t){var n=r(355),s=r(55).Stream;function o(e,t,r){r=r||0;var s,i,a=(s=t,new Array(r||0).join(s||"")),u=e;if("object"==typeof e&&(u=e[i=Object.keys(e)[0]])&&u._elem)return u._elem.name=i,u._elem.icount=r,u._elem.indent=t,u._elem.indents=a,u._elem.interrupt=u,u._elem;var c,l=[],h=[];function p(e){Object.keys(e).forEach((function(t){l.push(function(e,t){return e+'="'+n(t)+'"'}(t,e[t]))}))}switch(typeof u){case"object":if(null===u)break;u._attr&&p(u._attr),u._cdata&&h.push(("<![CDATA["+u._cdata).replace(/\]\]>/g,"]]]]><![CDATA[>")+"]]>"),u.forEach&&(c=!1,h.push(""),u.forEach((function(e){"object"==typeof e?"_attr"==Object.keys(e)[0]?p(e._attr):h.push(o(e,t,r+1)):(h.pop(),c=!0,h.push(n(e)))})),c||h.push(""));break;default:h.push(n(u))}return{name:i,interrupt:!1,attributes:l,content:h,icount:r,indents:a,indent:t}}function i(e,t,r){if("object"!=typeof t)return e(!1,t);var n=t.interrupt?1:t.content.length;function s(){for(;t.content.length;){var s=t.content.shift();if(void 0!==s){if(o(s))return;i(e,s)}}e(!1,(n>1?t.indents:"")+(t.name?"</"+t.name+">":"")+(t.indent&&!r?"\n":"")),r&&r()}function o(t){return!!t.interrupt&&(t.interrupt.append=e,t.interrupt.end=s,t.interrupt=!1,e(!0),!0)}if(e(!1,t.indents+(t.name?"<"+t.name:"")+(t.attributes.length?" "+t.attributes.join(" "):"")+(n?t.name?">":"":t.name?"/>":"")+(t.indent&&n>1?"\n":"")),!n)return e(!1,t.indent?"\n":"");o(t)||s()}e.exports=function(e,r){"object"!=typeof r&&(r={indent:r});var n,a,u=r.stream?new s:null,c="",l=!1,h=r.indent?!0===r.indent?"    ":r.indent:"",p=!0;function d(e){p?t.nextTick(e):e()}function f(e,t){if(void 0!==t&&(c+=t),e&&!l&&(u=u||new s,l=!0),e&&l){var r=c;d((function(){u.emit("data",r)})),c=""}}function m(e,t){i(f,o(e,h,h?1:0),t)}function g(){if(u){var e=c;d((function(){u.emit("data",e),u.emit("end"),u.readable=!1,u.emit("close")}))}}return d((function(){p=!1})),r.declaration&&(a={version:"1.0",encoding:(n=r.declaration).encoding||"UTF-8"},n.standalone&&(a.standalone=n.standalone),m({"?xml":{_attr:a}}),c=c.replace("/>","?>")),e&&e.forEach?e.forEach((function(t,r){var n;r+1===e.length&&(n=g),m(t,n)})):m(e,g),u?(u.readable=!0,u):c},e.exports.element=e.exports.Element=function(){var e=Array.prototype.slice.call(arguments),t={_elem:o(e),push:function(e){if(!this.append)throw new Error("not assigned to a parent!");var t=this,r=this._elem.indent;i(this.append,o(e,r,this._elem.icount+(r?1:0)),(function(){t.append(!0)}))},close:function(e){void 0!==e&&this.push(e),this.end&&this.end()}};return t}}).call(t,r(13))},function(e,t){var r={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};e.exports=function(e){return e&&e.replace?e.replace(/([&"<>'])/g,(function(e,t){return r[t]})):e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Formatter=class{format(e,t){const r=e.prepForXml(t);if(r)return r;throw Error("XMLComponent did not format correctly")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ImageReplacer=class{replace(e,t,r){let n=e;return t.forEach(((e,t)=>{n=n.replace(new RegExp(`{${e.fileName}}`,"g"),(r+t).toString())})),n}getMediaData(e,t){return t.Array.filter((t=>e.search(`{${t.fileName}}`)>0))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NumberingReplacer=class{replace(e,t){let r=e;for(const e of t)e.reference&&(r=r.replace(new RegExp(`{${e.reference}}`,"g"),e.id.toString()));return r}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(360))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){e.done?s(e.value):new r((function(t){t(e.value)})).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=r(137),o=r(25),i=r(44),a=r(47),u=r(48),c=r(46),l=r(0),h={"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header":"header","http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer":"footer","http://schemas.openxmlformats.org/officeDocument/2006/relationships/image":"image","http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink":"hyperlink"};var p;!function(e){e.HEADER="header",e.FOOTER="footer",e.IMAGE="image",e.HYPERLINK="hyperlink"}(p||(p={})),t.ImportDotx=class{extract(e){return n(this,void 0,void 0,(function*(){const t=yield s.loadAsync(e),r=yield t.files["word/document.xml"].async("text"),n=yield t.files["word/_rels/document.xml.rels"].async("text"),o=this.extractDocumentRefs(r),i=this.findReferenceFiles(n),a=new u.Media;return{headers:yield this.createHeaders(t,o,i,a,0),footers:yield this.createFooters(t,o,i,a,o.headers.length),currentRelationshipId:o.footers.length+o.headers.length,styles:yield t.files["word/styles.xml"].async("text"),titlePageIsDefined:this.checkIfTitlePageIsDefined(r),media:a}}))}createFooters(e,t,r,s,a){return n(this,void 0,void 0,(function*(){const u=t.footers.map(((t,u)=>n(this,void 0,void 0,(function*(){const n=r.find((e=>e.id===t.id));if(null===n||!n)throw new Error(`Can not find target file for id ${t.id}`);const c=yield e.files[`word/${n.target}`].async("text"),h=o.xml2js(c,{compact:!1,captureSpacesBetweenElements:!0});if(!h.elements)return;const p=h.elements.reduce(((e,t)=>"w:ftr"===t.name?t:e)),d=l.convertToXmlComponent(p),f=new i.FooterWrapper(s,a+u,d);return yield this.addRelationshipToWrapper(n,e,f,s),{type:t.type,footer:f}})))).filter((e=>!!e));return Promise.all(u)}))}createHeaders(e,t,r,s,i){return n(this,void 0,void 0,(function*(){const u=t.headers.map(((t,u)=>n(this,void 0,void 0,(function*(){const n=r.find((e=>e.id===t.id));if(null===n||!n)throw new Error(`Can not find target file for id ${t.id}`);const c=yield e.files[`word/${n.target}`].async("text"),h=o.xml2js(c,{compact:!1,captureSpacesBetweenElements:!0});if(!h.elements)return;const p=h.elements.reduce(((e,t)=>"w:hdr"===t.name?t:e)),d=l.convertToXmlComponent(p),f=new a.HeaderWrapper(s,i+u,d);return yield this.addRelationshipToWrapper(n,e,f,s),{type:t.type,header:f}})))).filter((e=>!!e));return Promise.all(u)}))}addRelationshipToWrapper(e,t,r,s){return n(this,void 0,void 0,(function*(){const n=t.files[`word/_rels/${e.target}.rels`];if(!n)return;const o=yield n.async("text"),i=this.findReferenceFiles(o).filter((e=>e.type===p.IMAGE)),a=this.findReferenceFiles(o).filter((e=>e.type===p.HYPERLINK));for(const e of i){const n=yield t.files[`word/${e.target}`].async("nodebuffer"),o=s.addMedia(n);r.Relationships.createRelationship(e.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${o.fileName}`)}for(const e of a)r.Relationships.createRelationship(e.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",e.target,c.TargetModeType.EXTERNAL)}))}findReferenceFiles(e){const t=o.xml2js(e,{compact:!0});return(Array.isArray(t.Relationships.Relationship)?t.Relationships.Relationship:[t.Relationships.Relationship]).map((e=>{if(void 0===e._attributes)throw Error("relationship element has no attributes");return{id:this.parseRefId(e._attributes.Id),type:h[e._attributes.Type],target:e._attributes.Target}})).filter((e=>null!==e.type))}extractDocumentRefs(e){const t=o.xml2js(e,{compact:!0})["w:document"]["w:body"]["w:sectPr"],r=t["w:headerReference"];let n;n=void 0===r?[]:Array.isArray(r)?r:[r];const s=n.map((e=>{if(void 0===e._attributes)throw Error("header referecne element has no attributes");return{type:e._attributes["w:type"],id:this.parseRefId(e._attributes["r:id"])}})),i=t["w:footerReference"];let a;return a=void 0===i?[]:Array.isArray(i)?i:[i],{headers:s,footers:a.map((e=>{if(void 0===e._attributes)throw Error("footer referecne element has no attributes");return{type:e._attributes["w:type"],id:this.parseRefId(e._attributes["r:id"])}}))}}checkIfTitlePageIsDefined(e){return void 0!==o.xml2js(e,{compact:!0})["w:document"]["w:body"]["w:sectPr"]["w:titlePg"]}parseRefId(e){const t=/^rId(\d+)$/.exec(e);if(null===t)throw new Error("Invalid ref id");return parseInt(t[1],10)}}}])},e.exports=t()},190:e=>{self,e.exports=(()=>{"use strict";var e={607:(e,t)=>{function r(e,t){e.insert.video||e.insert.image?function(e,t){t.paragraphs.push({embed:e.insert}),n(t)}(e,t):e.insert.formula?function(e,t){var r;0===t.paragraphs.length&&n(t),null===(r=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===r||r.push({formula:e.insert.formula,attributes:e.attributes})}(e,t):"\n"===e.insert?function(e,t){e.attributes&&(t.paragraphs[t.paragraphs.length-1].attributes=e.attributes),n(t)}(e,t):function(e,t){if(0===t.paragraphs.length&&n(t),e.insert.match(/\n/)){const r=e.insert.split(/(\n)/);for(const e of r)"\n"===e?n(t):s(e,t)}else s(e.insert,t,e.attributes)}(e,t)}function n(e){e.paragraphs.push({textRuns:[]})}function s(e,t,r){var n,s;r?null===(n=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===n||n.push({text:e,attributes:r}):null===(s=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===s||s.push({text:e})}Object.defineProperty(t,"__esModule",{value:!0}),t.parseQuillDelta=void 0,t.parseQuillDelta=function(e){const t={paragraphs:[]};for(const n of e.ops)r(n,t);return t}}},t={};return function r(n){if(t[n])return t[n].exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}(607)})()},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.generateWord=void 0;const a=r(190),u=o(r(50)),c=r(50),l=[{id:"normal",name:"Normal",next:"normal",basedOn:"normal",quickFormat:!0,run:{size:24},paragraph:{spacing:{line:480,before:0,after:0}}},{id:"header_1",name:"Heading 1",next:"normal",quickFormat:!0,run:{font:"Calibri",size:30,bold:!0},paragraph:{spacing:{before:300,after:200}}},{id:"header_2",name:"Heading 2",basedOn:"normal",next:"normal",quickFormat:!0,run:{font:"Calibri",size:26,bold:!0},paragraph:{spacing:{before:200,after:100}}},{id:"list_paragraph",name:"List Paragraph",basedOn:"normal",quickFormat:!0,run:{size:26}}],h={config:[{reference:"default-numbering",levels:[{level:0,format:"decimal",text:"%1.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:720,hanging:360}}}},{level:1,format:"lowerLetter",text:"%2.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:1440,hanging:360}}}},{level:2,format:"lowerRoman",text:"%3.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:2160,hanging:360}}}},{level:3,format:"decimal",text:"%4.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:2880,hanging:360}}}},{level:4,format:"lowerLetter",text:"%5.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:3600,hanging:360}}}},{level:3,format:"lowerRoman",text:"%5.",alignment:c.AlignmentType.LEFT,style:{paragraph:{indent:{left:4320,hanging:360}}}}]}]};function p(e){var t,r,n,s,o,i,a,l;const h=[];for(const p of e)p.embed||p.textRuns&&h.push(new c.Paragraph({children:d(p),heading:1===(null===(t=p.attributes)||void 0===t?void 0:t.header)?u.HeadingLevel.HEADING_1:2===(null===(r=p.attributes)||void 0===r?void 0:r.header)?u.HeadingLevel.HEADING_2:void 0,bullet:"bullet"===(null===(n=p.attributes)||void 0===n?void 0:n.list)?{level:p.attributes.indent?p.attributes.indent:0}:void 0,numbering:"ordered"===(null===(s=p.attributes)||void 0===s?void 0:s.list)?{reference:"default-numbering",level:p.attributes.indent?p.attributes.indent:0}:void 0,alignment:"left"===(null===(o=p.attributes)||void 0===o?void 0:o.align)?c.AlignmentType.LEFT:"center"===(null===(i=p.attributes)||void 0===i?void 0:i.align)?c.AlignmentType.CENTER:"right"===(null===(a=p.attributes)||void 0===a?void 0:a.align)?c.AlignmentType.RIGHT:"justify"===(null===(l=p.attributes)||void 0===l?void 0:l.align)?c.AlignmentType.JUSTIFIED:void 0}));return h}function d(e){const t=[];for(const r of e.textRuns)r.formula||r.text&&t.push(f(r));return t}function f(e){var t,r,n,s,o,i,a,u;return new c.TextRun({text:e.text,bold:!!(null===(t=e.attributes)||void 0===t?void 0:t.bold),italics:!!(null===(r=e.attributes)||void 0===r?void 0:r.italic),subScript:"sub"===(null===(n=e.attributes)||void 0===n?void 0:n.script),superScript:"super"===(null===(s=e.attributes)||void 0===s?void 0:s.script),strike:!!(null===(o=e.attributes)||void 0===o?void 0:o.strike),underline:(null===(i=e.attributes)||void 0===i?void 0:i.underline)?{type:c.UnderlineType.SINGLE,color:void 0}:void 0,color:(null===(a=e.attributes)||void 0===a?void 0:a.color)?null===(u=e.attributes)||void 0===u?void 0:u.color.slice(1):void 0})}t.generateWord=function(e){return i(this,void 0,void 0,(function*(){const t=a.parseQuillDelta(e),r=new u.Document({styles:{paragraphStyles:l},numbering:h}),n=[];if(Array.isArray(t))for(const e of t)n.push(p(e.paragraphs));else n.push(p(t.paragraphs));for(const e of n)r.addSection({children:e});return yield c.Packer.toBlob(r)}))}}},t={},function r(n){if(t[n])return t[n].exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(607);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9RdWlsbFRvV29yZC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vUXVpbGxUb1dvcmQvLi9ub2RlX21vZHVsZXMvZG9jeC9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9RdWlsbFRvV29yZC8uL25vZGVfbW9kdWxlcy9xdWlsbGpzLXBhcnNlci9kaXN0L21haW4uanMiLCJ3ZWJwYWNrOi8vUXVpbGxUb1dvcmQvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vUXVpbGxUb1dvcmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vUXVpbGxUb1dvcmQvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJtb2R1bGVzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZUlkIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fZXhwb3J0IiwidmFsdWUiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJwbmEiLCJvYmplY3RLZXlzIiwia2V5cyIsIm9iaiIsImtleSIsInB1c2giLCJEdXBsZXgiLCJ1dGlsIiwiaW5oZXJpdHMiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwidiIsImxlbmd0aCIsIm1ldGhvZCIsIm9wdGlvbnMiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uY2UiLCJvbmVuZCIsIl93cml0YWJsZVN0YXRlIiwiZW5kZWQiLCJuZXh0VGljayIsIm9uRW5kTlQiLCJlbmQiLCJoaWdoV2F0ZXJNYXJrIiwidW5kZWZpbmVkIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJzZXQiLCJfZGVzdHJveSIsImVyciIsImNiIiwiZ2xvYmFsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJFcnJvciIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIlR5cGVFcnJvciIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwibGVuIiwiY2hlY2tlZCIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJNYXRoIiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsIlN5bWJvbCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJBcnJheSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImNyZWF0ZSIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsIlRlbXBDdG9yIiwiU3BhY2VUeXBlIiwieG1sX2NvbXBvbmVudHNfMSIsImVtcGhhc2lzX21hcmtfMSIsImZvcm1hdHRpbmdfMSIsInJ1bl9mb250c18xIiwic2NyaXB0XzEiLCJzdHlsZV8xIiwidW5kZXJsaW5lXzEiLCJSdW5Qcm9wZXJ0aWVzIiwiSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCIsInN1cGVyIiwiYm9sZCIsIkJvbGQiLCJib2xkQ29tcGxleFNjcmlwdCIsIkJvbGRDb21wbGV4U2NyaXB0IiwiaXRhbGljcyIsIkl0YWxpY3MiLCJpdGFsaWNzQ29tcGxleFNjcmlwdCIsIkl0YWxpY3NDb21wbGV4U2NyaXB0IiwidW5kZXJsaW5lIiwiVW5kZXJsaW5lIiwiY29sb3IiLCJlbXBoYXNpc01hcmsiLCJFbXBoYXNpc01hcmsiLCJDb2xvciIsIlNpemUiLCJzekNzIiwic2l6ZUNvbXBsZXhTY3JpcHQiLCJTaXplQ29tcGxleFNjcmlwdCIsInJpZ2h0VG9MZWZ0IiwiUmlnaHRUb0xlZnQiLCJzbWFsbENhcHMiLCJTbWFsbENhcHMiLCJhbGxDYXBzIiwiQ2FwcyIsInN0cmlrZSIsIlN0cmlrZSIsImRvdWJsZVN0cmlrZSIsIkRvdWJsZVN0cmlrZSIsInN1YlNjcmlwdCIsIlN1YlNjcmlwdCIsInN1cGVyU2NyaXB0IiwiU3VwZXJTY3JpcHQiLCJzdHlsZSIsIlN0eWxlIiwiZm9udCIsIlJ1bkZvbnRzIiwiaGludCIsImhpZ2hsaWdodCIsIkhpZ2hsaWdodCIsImhpZ2hsaWdodENzIiwiaGlnaGxpZ2h0Q29tcGxleFNjcmlwdCIsIkhpZ2hsaWdodENvbXBsZXhTY3JpcHQiLCJjaGFyYWN0ZXJTcGFjaW5nIiwiQ2hhcmFjdGVyU3BhY2luZyIsInNoYWRpbmciLCJzaGFkb3ciLCJTaGFkaW5nIiwic2hkQ3MiLCJzaGFkaW5nQ29tcGxleFNjcmlwdCIsIlNoYWRvd0NvbXBsZXhTY3JpcHQiLCJpdGVtIiwiRG9jdW1lbnRBdHRyaWJ1dGVzIiwiWG1sQXR0cmlidXRlQ29tcG9uZW50IiwieG1sS2V5cyIsIndwYyIsIm1jIiwiciIsIndwMTQiLCJ3cCIsIncxMCIsInciLCJ3MTQiLCJ3MTUiLCJ3cGciLCJ3cGkiLCJ3bmUiLCJ3cHMiLCJJZ25vcmFibGUiLCJjcCIsImRjIiwiZGN0ZXJtcyIsImRjbWl0eXBlIiwieHNpIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwib2JqZWN0VG9TdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImlzVW5kZWZpbmVkIiwiaXNSZWdFeHAiLCJyZSIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsImlzRnVuY3Rpb24iLCJpc1ByaW1pdGl2ZSIsImZuIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiY29weVByb3BzIiwiU2FmZUJ1ZmZlciIsImJyZWFrXzEiLCJmaWVsZF8xIiwicGFnZV9udW1iZXJfMSIsInByb3BlcnRpZXNfMSIsInRleHRfMSIsIlBhZ2VOdW1iZXIiLCJSdW4iLCJYbWxDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJjaGlsZCIsIkNVUlJFTlQiLCJCZWdpbiIsIlBhZ2UiLCJTZXBhcmF0ZSIsIkVuZCIsIlRPVEFMX1BBR0VTIiwiTnVtYmVyT2ZQYWdlcyIsIlRPVEFMX1BBR0VTX0lOX1NFQ1RJT04iLCJOdW1iZXJPZlBhZ2VzU2VjdGlvbiIsIlRleHQiLCJ0ZXh0Iiwic3BsaWNlIiwiQnJlYWsiLCJGaWVsZENoYXJhY3RlclR5cGUiLCJGaWRDaGFyQXR0cnMiLCJkaXJ0eSIsIkJFR0lOIiwiU0VQQVJBVEUiLCJFTkQiLCJVbmRlcmxpbmVUeXBlIiwiQmFzZVVuZGVybGluZSIsInVuZGVybGluZVR5cGUiLCJBdHRyaWJ1dGVzIiwiU0lOR0xFIiwiRGFzaFVuZGVybGluZSIsIkRhc2hEb3REb3RIZWF2eVVuZGVybGluZSIsIkRhc2hEb3RIZWF2eVVuZGVybGluZSIsIkRhc2hMb25nVW5kZXJsaW5lIiwiRGFzaExvbmdIZWF2eVVuZGVybGluZSIsIkRvdERhc2hVbmRlcmxpbmUiLCJEb3REb3REYXNoVW5kZXJsaW5lIiwiRG90dGVkVW5kZXJsaW5lIiwiRG90dGVkSGVhdnlVbmRlcmxpbmUiLCJEb3VibGVVbmRlcmxpbmUiLCJTaW5nbGVVbmRlcmxpbmUiLCJUaGlja1VuZGVybGluZSIsIldhdmVVbmRlcmxpbmUiLCJXYXZ5RG91YmxlVW5kZXJsaW5lIiwiV2F2eUhlYXZ5VW5kZXJsaW5lIiwiV29yZHNVbmRlcmxpbmUiLCJhbHBoYWJldCIsInByZXZpb3VzU2VlZCIsInNodWZmbGVkIiwicmFuZG9tRnJvbVNlZWQiLCJPUklHSU5BTCIsInJlc2V0Iiwic2V0Q2hhcmFjdGVycyIsIl9hbHBoYWJldF8iLCJ1bmlxdWUiLCJzcGxpdCIsImZpbHRlciIsImluZCIsImdldFNodWZmbGVkIiwiY2hhcmFjdGVySW5kZXgiLCJzb3VyY2VBcnJheSIsInRhcmdldEFycmF5IiwibmV4dFZhbHVlIiwic2h1ZmZsZSIsImNoYXJhY3RlcnMiLCJzZWVkIiwibG9va3VwIiwiaW5kZXgiLCJhbGlnbm1lbnRfMSIsImJpZGlyZWN0aW9uYWxfMSIsImJvcmRlcl8xIiwiaW5kZW50XzEiLCJrZWVwXzEiLCJwYWdlX2JyZWFrXzEiLCJzcGFjaW5nXzEiLCJ0YWJfc3RvcF8xIiwidW5vcmRlcmVkX2xpc3RfMSIsImxpbmtzXzEiLCJQYXJhZ3JhcGhQcm9wZXJ0aWVzIiwiYm9yZGVyIiwiQm9yZGVyIiwic3BhY2luZyIsIlNwYWNpbmciLCJvdXRsaW5lTGV2ZWwiLCJPdXRsaW5lTGV2ZWwiLCJhbGlnbm1lbnQiLCJBbGlnbm1lbnQiLCJoZWFkaW5nIiwiYmlkaXJlY3Rpb25hbCIsIkJpZGlyZWN0aW9uYWwiLCJ0aGVtYXRpY0JyZWFrIiwiVGhlbWF0aWNCcmVhayIsInBhZ2VCcmVha0JlZm9yZSIsIlBhZ2VCcmVha0JlZm9yZSIsImNvbnRleHR1YWxTcGFjaW5nIiwiQ29udGV4dHVhbFNwYWNpbmciLCJpbmRlbnQiLCJJbmRlbnQiLCJrZWVwTGluZXMiLCJLZWVwTGluZXMiLCJrZWVwTmV4dCIsIktlZXBOZXh0IiwidGFiU3RvcHMiLCJ0YWJTdG9wIiwiVGFiU3RvcCIsInBvc2l0aW9uIiwibGVhZGVyIiwiYnVsbGV0IiwiTnVtYmVyUHJvcGVydGllcyIsImxldmVsIiwibnVtYmVyaW5nIiwiY3VzdG9tIiwicmVmZXJlbmNlIiwicmlnaHRUYWJTdG9wIiwiVGFiU3RvcFR5cGUiLCJSSUdIVCIsImxlZnRUYWJTdG9wIiwiTEVGVCIsIm1hdGhfYmVnaW5uaW5nX2NoYXJhY3Rlcl8xIiwibWF0aF9lbmRpbmdfY2hhcl8xIiwiTWF0aEJyYWNrZXRQcm9wZXJ0aWVzIiwiTWF0aEJlZ2lubmluZ0NoYXJhY3RlciIsImJlZ2lubmluZ0NoYXJhY3RlciIsIk1hdGhFbmRpbmdDaGFyYWN0ZXIiLCJlbmRpbmdDaGFyYWN0ZXIiLCJCYXNlWG1sQ29tcG9uZW50Iiwicm9vdEtleSIsImRlbGV0ZWQiLCJ4bWwyanMiLCJ4bWwyanNvbiIsImpzMnhtbCIsImpzb24yeG1sIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCIkZ2V0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiZW1pdHRlciIsImNvdW50IiwiY29uc29sZSIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiYmluZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwicG9wIiwic3BsaWNlT25lIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIiwic2V0SW1tZWRpYXRlIiwiQ29ya2VkUmVxdWVzdCIsIl90aGlzIiwibmV4dCIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwib25Db3JrZWRGaW5pc2giLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsInJlYWxIYXNJbnN0YW5jZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZGVzdHJveSIsImZpbmFsIiwiX2ZpbmFsIiwiZG9Xcml0ZSIsImNodW5rIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInByZWZpbmlzaCIsImdldEJ1ZmZlciIsImN1cnJlbnQiLCJfIiwiaGFzSW5zdGFuY2UiLCJwaXBlIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwibGFzdCIsIndyaXRlT3JCdWZmZXIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZW5kV3JpdGFibGUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiU3RyaW5nRGVjb2RlciIsIm5iIiwiZW5jIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiY29weU9wdGlvbnMiLCJlbnN1cmVGbGFnRXhpc3RzIiwiZW5zdXJlU3BhY2VzRXhpc3RzIiwic3BhY2VzIiwiZW5zdXJlQWx3YXlzQXJyYXlFeGlzdHMiLCJhbHdheXNBcnJheSIsImVuc3VyZUtleUV4aXN0cyIsImNvbXBhY3QiLCJjaGVja0ZuRXhpc3RzIiwiRW1waGFzaXNNYXJrVHlwZSIsIkJhc2VFbXBoYXNpc01hcmsiLCJlbXBoYXNpc01hcmtUeXBlIiwiRE9UIiwiRG90RW1waGFzaXNNYXJrIiwiUnVuRm9udEF0dHJpYnV0ZXMiLCJhc2NpaSIsImNzIiwiZWFzdEFzaWEiLCJoQW5zaSIsIm5hbWVPckF0dHJzIiwiYXR0cnMiLCJWZXJ0aWNhbFBvc2l0aW9uQWxpZ24iLCJIb3Jpem9udGFsUG9zaXRpb25BbGlnbiIsIlZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb20iLCJIb3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb20iLCJDZWxsQm9yZGVyQXR0cmlidXRlcyIsIkJhc2VUYWJsZUNlbGxCb3JkZXIiLCJUYWJsZUNlbGxCb3JkZXJzIiwidG9wIiwic2V0UHJvcGVydGllcyIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsIkdyaWRTcGFuQXR0cmlidXRlcyIsIkdyaWRTcGFuIiwiVmVydGljYWxNZXJnZVR5cGUiLCJWZXJ0aWNhbEFsaWduIiwiVGV4dERpcmVjdGlvbiIsIldpZHRoVHlwZSIsIlZlcnRpY2FsTWVyZ2VBdHRyaWJ1dGVzIiwiVmVydGljYWxNZXJnZSIsIlZBbGlnbkF0dHJpYnV0ZXMiLCJWQWxpZ24iLCJURGlyZWN0aW9uQXR0cmlidXRlcyIsIlREaXJlY3Rpb24iLCJUYWJsZUNlbGxXaWR0aEF0dHJpYnV0ZXMiLCJ3aWR0aCIsIlRhYmxlQ2VsbFdpZHRoIiwiY29tcG9uZW50c18xIiwiU3R5bGVBdHRyaWJ1dGVzIiwic3R5bGVJZCIsImRlZmF1bHQiLCJjdXN0b21TdHlsZSIsImF0dHJpYnV0ZXMiLCJOYW1lIiwiQ29tcG9uZW50QXR0cmlidXRlcyIsIkJhc2VkT24iLCJOZXh0IiwiTGluayIsIlVpUHJpb3JpdHkiLCJVbmhpZGVXaGVuVXNlZCIsIlF1aWNrRm9ybWF0IiwiVGFibGVQcm9wZXJ0aWVzIiwiUnNJZCIsIlNlbWlIaWRkZW4iLCJwYXJhZ3JhcGhfMSIsIlN0eWxlRm9yUGFyYWdyYXBoIiwiaWQiLCJwYXJhZ3JhcGhQcm9wZXJ0aWVzIiwicGFyYWdyYXBoIiwicnVuUHJvcGVydGllcyIsImJhc2VkT24iLCJxdWlja0Zvcm1hdCIsImxpbmsiLCJzZW1pSGlkZGVuIiwidWlQcmlvcml0eSIsInVuaGlkZVdoZW5Vc2VkIiwiU3R5bGVGb3JDaGFyYWN0ZXIiLCJQYWdlT3JpZW50YXRpb24iLCJQYWdlU2l6ZUF0dHJpYnV0ZXMiLCJoZWlnaHQiLCJvcmllbnRhdGlvbiIsImZvb3Rlcl8xIiwicmVsYXRpb25zaGlwc18xIiwiRm9vdGVyV3JhcHBlciIsIm1lZGlhIiwicmVmZXJlbmNlSWQiLCJpbml0Q29udGVudCIsImZvb3RlciIsIkZvb3RlciIsInJlbGF0aW9uc2hpcHMiLCJSZWxhdGlvbnNoaXBzIiwiYWRkIiwiY2hpbGRFbGVtZW50IiwiYWRkQ2hpbGRFbGVtZW50IiwicmVsYXRpb25zaGlwX2F0dHJpYnV0ZXNfMSIsIlRhcmdldE1vZGVUeXBlIiwiUmVsYXRpb25zaGlwIiwidGFyZ2V0TW9kZSIsIlJlbGF0aW9uc2hpcEF0dHJpYnV0ZXMiLCJoZWFkZXJfMSIsIkhlYWRlcldyYXBwZXIiLCJoZWFkZXIiLCJIZWFkZXIiLCJwcm9wZXJ0aWVzXzIiLCJMZXZlbEF0dHJpYnV0ZXMiLCJpbHZsIiwidGVudGF0aXZlIiwiU3RhcnQiLCJOdW1iZXJGb3JtYXQiLCJMZXZlbFRleHQiLCJMZXZlbEpjIiwiTGV2ZWxTdWZmaXgiLCJTdWZmaXgiLCJMZXZlbEJhc2UiLCJmb3JtYXQiLCJBbGlnbm1lbnRUeXBlIiwiU1RBUlQiLCJzdWZmaXgiLCJMZXZlbCIsIkxldmVsRm9yT3ZlcnJpZGUiLCJBbGlnbm1lbnRBdHRyaWJ1dGVzIiwiYmFzZV8xIiwiZm9yRWFjaCIsIm5ld0tleSIsIl9hdHRyIiwiY3VycmVudEVsZW1lbnQiLCJzYXgiLCJoZWxwZXIiLCJuYXRpdmVUeXBlIiwiblZhbHVlIiwiYlZhbHVlIiwiYWRkRmllbGQiLCJpbnN0cnVjdGlvbkZuIiwidGVtcCIsImluc3RydWN0aW9uTmFtZUZuIiwiZWxlbWVudHNLZXkiLCJlbGVtZW50IiwidHlwZUtleSIsIm5hbWVLZXkiLCJpbnN0cnVjdGlvbkhhc0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzS2V5IiwiaW5zdHJ1Y3Rpb25LZXkiLCJhZGRQYXJlbnQiLCJwYXJlbnRLZXkiLCJtYW5pcHVsYXRlQXR0cmlidXRlcyIsImF0dHJpYnV0ZXNGbiIsIm5hdGl2ZVR5cGVBdHRyaWJ1dGVzIiwiYXR0cmlidXRlVmFsdWVGbiIsImF0dHJpYnV0ZU5hbWVGbiIsIm9uSW5zdHJ1Y3Rpb24iLCJpbnN0cnVjdGlvbiIsImJvZHkiLCJhdHRyc1JlZ0V4cCIsImV4ZWMiLCJpZ25vcmVEZWNsYXJhdGlvbiIsImRlY2xhcmF0aW9uS2V5IiwiaWdub3JlSW5zdHJ1Y3Rpb24iLCJvblN0YXJ0RWxlbWVudCIsImVsZW1lbnROYW1lRm4iLCJpZ25vcmVBdHRyaWJ1dGVzIiwiYWx3YXlzQ2hpbGRyZW4iLCJvblRleHQiLCJpZ25vcmVUZXh0IiwiY2FwdHVyZVNwYWNlc0JldHdlZW5FbGVtZW50cyIsInNhbml0aXplIiwib25Db21tZW50IiwiY29tbWVudCIsImlnbm9yZUNvbW1lbnQiLCJvbkVuZEVsZW1lbnQiLCJwYXJlbnRFbGVtZW50Iiwib25DZGF0YSIsImNkYXRhIiwiaWdub3JlQ2RhdGEiLCJvbkRvY3R5cGUiLCJkb2N0eXBlIiwiaWdub3JlRG9jdHlwZSIsIm9uRXJyb3IiLCJub3RlIiwieG1sIiwidXNlck9wdGlvbnMiLCJwYXJzZXIiLCJyZXN1bHQiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJvcHQiLCJzdHJpY3RFbnRpdGllcyIsIm9ub3BlbnRhZyIsIm9udGV4dCIsIm9uY29tbWVudCIsIm9uY2xvc2V0YWciLCJvbmVycm9yIiwib25jZGF0YSIsIm9uZG9jdHlwZSIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiY2xvc2UiLCJFRSIsImRlc3QiLCJzb3VyY2UiLCJvbmRhdGEiLCJwYXVzZSIsIm9uZHJhaW4iLCJyZXN1bWUiLCJfaXNTdGRpbyIsIm9uY2xvc2UiLCJkaWRPbkVuZCIsImNsZWFudXAiLCJSZWFkYWJsZVN0YXRlIiwiRUVsaXN0ZW5lckNvdW50IiwiZGVidWdVdGlsIiwiZGVidWciLCJkZWJ1Z2xvZyIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJuZWVkTW9yZURhdGEiLCJpc1BhdXNlZCIsInNldEVuY29kaW5nIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNsZWFyIiwiaGFzU3RyaW5ncyIsInRhaWwiLCJjb3B5RnJvbUJ1ZmZlclN0cmluZyIsImNvcHlGcm9tQnVmZmVyIiwiZnJvbUxpc3RQYXJ0aWFsIiwiZW5kUmVhZGFibGUiLCJlbmRSZWFkYWJsZU5UIiwieHMiLCJuT3JpZyIsImRvUmVhZCIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25maW5pc2giLCJjbGVhbmVkVXAiLCJwaXBlT25EcmFpbiIsImluY3JlYXNlZEF3YWl0RHJhaW4iLCJldmVudCIsImRlc3RzIiwiZXYiLCJ3cmFwIiwicGF1c2VkIiwiX2Zyb21MaXN0IiwiZW1pdEVycm9yTlQiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJkb25lIiwiX3RoaXMyIiwiZXJyMiIsImN1cnJlbnRFbGVtZW50TmFtZSIsIndyaXRlSW5kZW50YXRpb24iLCJkZXB0aCIsImZpcnN0TGluZSIsIndyaXRlQXR0cmlidXRlcyIsImF0dHIiLCJhdHRyTmFtZSIsInF1b3RlIiwibm9RdW90ZXNGb3JOYXRpdmVBdHRyaWJ1dGVzIiwiaW5kZW50QXR0cmlidXRlcyIsIndyaXRlRGVjbGFyYXRpb24iLCJkZWNsYXJhdGlvbiIsIndyaXRlSW5zdHJ1Y3Rpb24iLCJpbnN0cnVjdGlvbk5hbWUiLCJpbnN0cnVjdGlvblZhbHVlIiwid3JpdGVDb21tZW50IiwiY29tbWVudEZuIiwid3JpdGVDZGF0YSIsImNkYXRhRm4iLCJ3cml0ZURvY3R5cGUiLCJkb2N0eXBlRm4iLCJ3cml0ZVRleHQiLCJ0ZXh0Rm4iLCJ3cml0ZUVsZW1lbnRzIiwiZWxlbWVudHMiLCJyZWR1Y2UiLCJlbGVtZW50TmFtZSIsIndpdGhDbG9zaW5nVGFnIiwiZnVsbFRhZ0VtcHR5RWxlbWVudEZuIiwiZnVsbFRhZ0VtcHR5RWxlbWVudCIsImluZGVudFRleHQiLCJpbmRlbnRDZGF0YSIsImluZGVudEluc3RydWN0aW9uIiwiaGFzQ29udGVudCIsIndyaXRlRWxlbWVudCIsImNvbW1lbnRLZXkiLCJkb2N0eXBlS2V5IiwiY2RhdGFLZXkiLCJ0ZXh0S2V5IiwiaGFzQ29udGVudENvbXBhY3QiLCJhbnlDb250ZW50Iiwid3JpdGVFbGVtZW50Q29tcGFjdCIsIndyaXRlRWxlbWVudHNDb21wYWN0Iiwibm9kZXMiLCJqcyIsImJvcmRlcl9hdHRyaWJ1dGVzXzEiLCJCb3JkZXJQcm9wZXJ0eSIsInNwYWNlIiwiQm9yZGVyQXR0cmlidXRlcyIsInN6IiwiYm9yZGVyUHJvcGVydHkiLCJJbmRlbnRBdHRyaWJ1dGVzIiwiaGFuZ2luZyIsInJ1bl8xIiwiUGFnZUJyZWFrIiwiRW1ib3NzIiwiSW1wcmludCIsInNwYWNlX3R5cGVfMSIsIlRleHRBdHRyaWJ1dGVzIiwiUFJFU0VSVkUiLCJBbGlnbiIsIlBvc2l0aW9uT2Zmc2V0Iiwib2Zmc2V0VmFsdWUiLCJkb2NfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEiLCJEb2NQcm9wZXJ0aWVzIiwiRG9jUHJvcGVydGllc0F0dHJpYnV0ZXMiLCJkZXNjciIsImVmZmVjdF9leHRlbnRfYXR0cmlidXRlc18xIiwiRWZmZWN0RXh0ZW50IiwiRWZmZWN0RXh0ZW50QXR0cmlidXRlcyIsInQiLCJleHRlbnRfYXR0cmlidXRlc18xIiwiRXh0ZW50IiwiRXh0ZW50QXR0cmlidXRlcyIsImN4IiwiY3kiLCJncmFwaGljX2ZyYW1lX2xvY2tzXzEiLCJHcmFwaGljRnJhbWVQcm9wZXJ0aWVzIiwiR3JhcGhpY0ZyYW1lTG9ja3MiLCJBbmNob3JBdHRyaWJ1dGVzIiwiZGlzdFQiLCJkaXN0QiIsImRpc3RMIiwiZGlzdFIiLCJhbGxvd092ZXJsYXAiLCJiZWhpbmREb2MiLCJsYXlvdXRJbkNlbGwiLCJsb2NrZWQiLCJyZWxhdGl2ZUhlaWdodCIsInNpbXBsZVBvcyIsIlNwYWNpbmdBdHRyaWJ1dGVzIiwiYWZ0ZXIiLCJiZWZvcmUiLCJsaW5lIiwibGluZVJ1bGUiLCJIZWFkaW5nTGV2ZWwiLCJUYWJTdG9wSXRlbSIsIlRhYlN0b3BQb3NpdGlvbiIsIkxlYWRlclR5cGUiLCJUYWJBdHRyaWJ1dGVzIiwibnVtYmVySWQiLCJpbmRlbnRMZXZlbCIsIkluZGVudExldmVsIiwiTnVtYmVySWQiLCJNYXRoRGVub21pbmF0b3IiLCJNYXRoTnVtZXJhdG9yIiwiTWF0aEFjY2VudENoYXJhY3RlckF0dHJpYnV0ZXMiLCJhY2NlbnQiLCJNYXRoQWNjZW50Q2hhcmFjdGVyIiwiTWF0aEJhc2UiLCJNYXRoTGltaXRMb2NhdGlvbkF0dHJpYnV0ZXMiLCJNYXRoTGltaXRMb2NhdGlvbiIsIm1hdGhfYWNjZW50X2NoYXJhY3Rlcl8xIiwibWF0aF9saW1pdF9sb2NhdGlvbl8xIiwibWF0aF9zdWJfc2NyaXB0X2hpZGVfMSIsIm1hdGhfc3VwZXJfc2NyaXB0X2hpZGVfMSIsIk1hdGhOQXJheVByb3BlcnRpZXMiLCJoYXNTdXBlclNjcmlwdCIsImhhc1N1YlNjcmlwdCIsIk1hdGhTdXBlclNjcmlwdEhpZGUiLCJNYXRoU3ViU2NyaXB0SGlkZSIsIk1hdGhTdWJTY3JpcHRFbGVtZW50IiwiTWF0aFN1cGVyU2NyaXB0RWxlbWVudCIsIk1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMiLCJNYXRoU3ViU2NyaXB0UHJvcGVydGllcyIsIk1hdGhTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMiLCJNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIiwiTWF0aERlZ3JlZSIsIm1hdGhfZGVncmVlX2hpZGVfMSIsIk1hdGhSYWRpY2FsUHJvcGVydGllcyIsImhhc0RlZ3JlZSIsIk1hdGhEZWdyZWVIaWRlIiwiTWF0aEZ1bmN0aW9uTmFtZSIsIk1hdGhGdW5jdGlvblByb3BlcnRpZXMiLCJzdHlsZXNfMSIsIlRhYmxlQm9yZGVycyIsIlRhYmxlQm9yZGVyc0VsZW1lbnQiLCJCb3JkZXJTdHlsZSIsImluc2lkZUhvcml6b250YWwiLCJpbnNpZGVWZXJ0aWNhbCIsIlRhYmxlQm9yZGVyc0F0dHJpYnV0ZXMiLCJQYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMiLCJSdW5Qcm9wZXJ0aWVzRGVmYXVsdHMiLCJ0YWJsZV9vdmVybGFwXzEiLCJSZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb24iLCJSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbiIsIlRhYmxlQW5jaG9yVHlwZSIsIlRhYmxlRmxvYXRPcHRpb25zQXR0cmlidXRlcyIsImhvcml6b250YWxBbmNob3IiLCJ2ZXJ0aWNhbEFuY2hvciIsImFic29sdXRlSG9yaXpvbnRhbFBvc2l0aW9uIiwicmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24iLCJhYnNvbHV0ZVZlcnRpY2FsUG9zaXRpb24iLCJyZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb24iLCJib3R0b21Gcm9tVGV4dCIsInRvcEZyb21UZXh0IiwibGVmdEZyb21UZXh0IiwicmlnaHRGcm9tVGV4dCIsIlRhYmxlRmxvYXRQcm9wZXJ0aWVzIiwib3ZlcmxhcCIsIlRhYmxlT3ZlcmxhcCIsIk92ZXJsYXBUeXBlIiwiVGFibGVPdmVybGFwQXR0cmlidXRlcyIsIlRhYmxlTGF5b3V0VHlwZSIsIlRhYmxlTGF5b3V0QXR0cmlidXRlcyIsIlRhYmxlTGF5b3V0IiwidGFibGVfcm93X2hlaWdodF8xIiwiVGFibGVSb3dQcm9wZXJ0aWVzIiwiQ2FudFNwbGl0IiwiVGFibGVIZWFkZXIiLCJydWxlIiwiVGFibGVSb3dIZWlnaHQiLCJDYW50U3BsaXRBdHRyaWJ1dGVzIiwiVGFibGVIZWFkZXJBdHRyaWJ1dGVzIiwiSGVpZ2h0UnVsZSIsIlRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcyIsImNvbHVtbnNfMSIsImRvY19ncmlkXzEiLCJmb290ZXJfcmVmZXJlbmNlXzEiLCJmb290ZXJfcmVmZXJlbmNlXzIiLCJoZWFkZXJfcmVmZXJlbmNlXzEiLCJoZWFkZXJfcmVmZXJlbmNlXzIiLCJsaW5lX251bWJlcl8xIiwicGFnZV9ib3JkZXJfMSIsInBhZ2VfbWFyZ2luXzEiLCJwYWdlX3NpemVfMSIsInBhZ2Vfc2l6ZV9hdHRyaWJ1dGVzXzEiLCJ0aXRsZV9wYWdlXzEiLCJ2ZXJ0aWNhbF9hbGlnbl8xIiwiU2VjdGlvblByb3BlcnRpZXMiLCJjb2x1bW4iLCJndXR0ZXIiLCJtaXJyb3IiLCJsaW5lUGl0Y2giLCJQT1JUUkFJVCIsImhlYWRlcnMiLCJmb290ZXJzIiwicGFnZU51bWJlckZvcm1hdFR5cGUiLCJwYWdlTnVtYmVyU3RhcnQiLCJsaW5lTnVtYmVyQ291bnRCeSIsImxpbmVOdW1iZXJTdGFydCIsImxpbmVOdW1iZXJSZXN0YXJ0IiwibGluZU51bWJlckRpc3RhbmNlIiwicGFnZUJvcmRlcnMiLCJwYWdlQm9yZGVyVG9wIiwicGFnZUJvcmRlclJpZ2h0IiwicGFnZUJvcmRlckJvdHRvbSIsInBhZ2VCb3JkZXJMZWZ0IiwidGl0bGVQYWdlIiwidmVydGljYWxBbGlnbiIsIlBhZ2VTaXplIiwiUGFnZU1hcmdpbiIsIkNvbHVtbnMiLCJEb2N1bWVudEdyaWQiLCJhZGRIZWFkZXJzIiwiYWRkRm9vdGVycyIsIlBhZ2VOdW1iZXJUeXBlIiwiTGluZU51bWJlclR5cGUiLCJQYWdlQm9yZGVycyIsIlRpdGxlUGFnZSIsIlNlY3Rpb25WZXJ0aWNhbEFsaWduIiwiSGVhZGVyUmVmZXJlbmNlIiwiaGVhZGVyVHlwZSIsIkhlYWRlclJlZmVyZW5jZVR5cGUiLCJERUZBVUxUIiwiaGVhZGVySWQiLCJSZWZlcmVuY2VJZCIsImZpcnN0IiwiRklSU1QiLCJldmVuIiwiRVZFTiIsIkZvb3RlclJlZmVyZW5jZSIsImZvb3RlclR5cGUiLCJGb290ZXJSZWZlcmVuY2VUeXBlIiwiZm9vdGVySWQiLCJmb290ZXJfcmVmZXJlbmNlX2F0dHJpYnV0ZXNfMSIsIkZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMiLCJoZWFkZXJfcmVmZXJlbmNlX2F0dHJpYnV0ZXNfMSIsIkhlYWRlclJlZmVyZW5jZUF0dHJpYnV0ZXMiLCJmbGlwIiwiTEFORFNDQVBFIiwiU2VjdGlvblZlcnRpY2FsQWxpZ25BdHRyaWJ1dGVzIiwibGV2ZWxfMSIsIm11bHRpX2xldmVsX3R5cGVfMSIsIkFic3RyYWN0TnVtYmVyaW5nQXR0cmlidXRlcyIsImFic3RyYWN0TnVtSWQiLCJyZXN0YXJ0TnVtYmVyaW5nQWZ0ZXJCcmVhayIsIkFic3RyYWN0TnVtYmVyaW5nIiwibGV2ZWxPcHRpb25zIiwiTXVsdGlMZXZlbFR5cGUiLCJvcHRpb24iLCJBYnN0cmFjdE51bUlkIiwiTnVtQXR0cmlidXRlcyIsIm51bUlkIiwiQ29uY3JldGVOdW1iZXJpbmciLCJudW0iLCJvbHZsIiwiTGV2ZWxPdmVycmlkZSIsIkxldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzIiwibGV2ZWxOdW0iLCJTdGFydE92ZXJyaWRlIiwibHZsIiwiU3RhcnRPdmVycmlkZUF0dHJpYnV0ZXMiLCJVcGRhdGVGaWVsZHNBdHRyaWJ1dGVzIiwiZW5hYmxlZCIsIlVwZGF0ZUZpZWxkcyIsIkNoYW5nZUF0dHJpYnV0ZXMiLCJhdXRob3IiLCJkYXRlIiwiaCIsInUiLCIxIiwiZW5jb2RlIiwiZiIsImdldFR5cGVPZiIsImNoYXJBdCIsImRlY29kZSIsInVpbnQ4YXJyYXkiLCIyIiwiY29tcHJlc3NlZFNpemUiLCJ1bmNvbXByZXNzZWRTaXplIiwiY3JjMzIiLCJjb21wcmVzc2lvbiIsImNvbXByZXNzZWRDb250ZW50IiwiZ2V0Q29udGVudFdvcmtlciIsIlByb21pc2UiLCJyZXNvbHZlIiwidW5jb21wcmVzc1dvcmtlciIsInN0cmVhbUluZm8iLCJkYXRhX2xlbmd0aCIsImdldENvbXByZXNzZWRXb3JrZXIiLCJ3aXRoU3RyZWFtSW5mbyIsImNyZWF0ZVdvcmtlckZyb20iLCJjb21wcmVzc1dvcmtlciIsIjMiLCJTVE9SRSIsIm1hZ2ljIiwiREVGTEFURSIsIjQiLCI1IiwiYmluYXJ5IiwiY3JlYXRlRm9sZGVycyIsImNvbXByZXNzaW9uT3B0aW9ucyIsInVuaXhQZXJtaXNzaW9ucyIsImRvc1Blcm1pc3Npb25zIiwiNiIsImxpZSIsIjciLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiX3Bha28iLCJfcGFrb0FjdGlvbiIsIl9wYWtvT3B0aW9ucyIsIm1ldGEiLCJwcm9jZXNzQ2h1bmsiLCJfY3JlYXRlUGFrbyIsInRyYW5zZm9ybVRvIiwiY2xlYW5VcCIsInJhdyIsIm9uRGF0YSIsInBha28iLCI4IiwiQSIsImZpbGUiLCJPIiwidXRmOGVuY29kZSIsIkkiLCJrIiwiUyIsInoiLCJDIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiQiIsIkUiLCJmaWxlUmVjb3JkIiwiTE9DQUxfRklMRV9IRUFERVIiLCJkaXJSZWNvcmQiLCJDRU5UUkFMX0ZJTEVfSEVBREVSIiwiYnl0ZXNXcml0dGVuIiwiemlwQ29tbWVudCIsInppcFBsYXRmb3JtIiwiZW5jb2RlRmlsZU5hbWUiLCJzdHJlYW1GaWxlcyIsImFjY3VtdWxhdGUiLCJjb250ZW50QnVmZmVyIiwiZGlyUmVjb3JkcyIsImN1cnJlbnRTb3VyY2VPZmZzZXQiLCJlbnRyaWVzQ291bnQiLCJjdXJyZW50RmlsZSIsIl9zb3VyY2VzIiwicGVyY2VudCIsIm9wZW5lZFNvdXJjZSIsImNsb3NlZFNvdXJjZSIsIkRBVEFfREVTQ1JJUFRPUiIsIkNFTlRSQUxfRElSRUNUT1JZX0VORCIsInByZXBhcmVOZXh0U291cmNlIiwicHJldmlvdXMiLCJyZWdpc3RlclByZXZpb3VzIiwiZ2VuZXJhdGVkRXJyb3IiLCJsb2NrIiwiOSIsImdlbmVyYXRlV29ya2VyIiwicGxhdGZvcm0iLCJfY29tcHJlc3NXb3JrZXIiLCIxMCIsImZpbGVzIiwiY2xvbmUiLCJsb2FkQXN5bmMiLCJzdXBwb3J0IiwiZGVmYXVsdHMiLCJleHRlcm5hbCIsIjExIiwiZGVjb21wcmVzc2VkIiwiZXh0ZW5kIiwiY2hlY2tDUkMzMiIsIm9wdGltaXplZEJpbmFyeVN0cmluZyIsImRlY29kZUZpbGVOYW1lIiwidXRmOGRlY29kZSIsImlzTm9kZSIsImlzU3RyZWFtIiwicmVqZWN0IiwicHJlcGFyZUNvbnRlbnQiLCJ0aGVuIiwibG9hZCIsImFsbCIsImZpbGVOYW1lU3RyIiwiZmlsZUNvbW1lbnRTdHIiLCIxMiIsIl91cHN0cmVhbUVuZGVkIiwiX2JpbmRTdHJlYW0iLCJfc3RyZWFtIiwiMTMiLCJfaGVscGVyIiwiMTQiLCJuZXdCdWZmZXJGcm9tIiwiYWxsb2NCdWZmZXIiLCIxNSIsIkRhdGUiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsInRlc3QiLCJmb2xkZXIiLCJyZW1vdmUiLCJnZW5lcmF0ZSIsImdlbmVyYXRlSW50ZXJuYWxTdHJlYW0iLCJtaW1lVHlwZSIsImNoZWNrU3VwcG9ydCIsImdlbmVyYXRlQXN5bmMiLCJnZW5lcmF0ZU5vZGVTdHJlYW0iLCJ0b05vZGVqc1N0cmVhbSIsIjE2IiwiMTciLCJieXRlQXQiLCJ6ZXJvIiwibGFzdEluZGV4T2ZTaWduYXR1cmUiLCJyZWFkQW5kQ2hlY2tTaWduYXR1cmUiLCJyZWFkRGF0YSIsIjE4IiwiY2hlY2tJbmRleCIsInNldEluZGV4Iiwic2tpcCIsInJlYWRJbnQiLCJyZWFkU3RyaW5nIiwicmVhZERhdGUiLCJVVEMiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCIsIjI0IiwiZGVzdFR5cGUiLCIyNSIsIjI2IiwicHJvcE5hbWUiLCIyNyIsImRhdGFJc1JlYWR5IiwiX3RpY2tTY2hlZHVsZWQiLCJfdGlja0FuZFJlcGVhdCIsImRlbGF5IiwiaXNGaW5pc2hlZCIsIl90aWNrIiwiMjgiLCJleHRyYVN0cmVhbUluZm8iLCJpc0xvY2tlZCIsIm1lcmdlU3RyZWFtSW5mbyIsIjI5Iiwibm9kZXN0cmVhbSIsIl9pbnRlcm5hbFR5cGUiLCJfb3V0cHV0VHlwZSIsIl9taW1lVHlwZSIsIl93b3JrZXIiLCJuZXdCbG9iIiwiMzAiLCJhcnJheWJ1ZmZlciIsIm5vZGVidWZmZXIiLCJibG9iIiwiQmxvYiIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJhcHBlbmQiLCJnZXRCbG9iIiwiMzEiLCJsZWZ0T3ZlciIsImFwcGx5RnJvbUNoYXJDb2RlIiwiVXRmOERlY29kZVdvcmtlciIsIlV0ZjhFbmNvZGVXb3JrZXIiLCIzMiIsInN0cmluZ2lmeUJ5Q2h1bmsiLCJzdHJpbmdpZnlCeUNoYXIiLCJhcHBseUNhbkJlVXNlZCIsIk1BWF9WQUxVRV8xNkJJVFMiLCJNQVhfVkFMVUVfMzJCSVRTIiwicHJldHR5IiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiMzMiLCJsb2FkT3B0aW9ucyIsImNoZWNrU2lnbmF0dXJlIiwicmVhZGVyIiwiaXNTaWduYXR1cmUiLCJyZWFkQmxvY2tFbmRPZkNlbnRyYWwiLCJkaXNrTnVtYmVyIiwiZGlza1dpdGhDZW50cmFsRGlyU3RhcnQiLCJjZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2siLCJjZW50cmFsRGlyUmVjb3JkcyIsImNlbnRyYWxEaXJTaXplIiwiY2VudHJhbERpck9mZnNldCIsInppcENvbW1lbnRMZW5ndGgiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IiLCJkaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0IiwicmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciIsImRpc2tzQ291bnQiLCJyZWFkTG9jYWxGaWxlcyIsImxvY2FsSGVhZGVyT2Zmc2V0IiwicmVhZExvY2FsUGFydCIsImhhbmRsZVVURjgiLCJwcm9jZXNzQXR0cmlidXRlcyIsInJlYWRDZW50cmFsRGlyIiwiemlwNjQiLCJyZWFkQ2VudHJhbFBhcnQiLCJyZWFkRW5kT2ZDZW50cmFsIiwiYWJzIiwicHJlcGFyZVJlYWRlciIsIjM0IiwiaXNFbmNyeXB0ZWQiLCJiaXRGbGFnIiwidXNlVVRGOCIsImZpbGVOYW1lTGVuZ3RoIiwiZmlsZU5hbWUiLCJjb21wcmVzc2lvbk1ldGhvZCIsInZlcnNpb25NYWRlQnkiLCJleHRyYUZpZWxkc0xlbmd0aCIsImZpbGVDb21tZW50TGVuZ3RoIiwiZGlza051bWJlclN0YXJ0IiwiaW50ZXJuYWxGaWxlQXR0cmlidXRlcyIsImV4dGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJyZWFkRXh0cmFGaWVsZHMiLCJwYXJzZVpJUDY0RXh0cmFGaWVsZCIsImZpbGVDb21tZW50IiwiZXh0cmFGaWVsZHMiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoIiwiZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudCIsIjM1IiwiX2RhdGEiLCJfZGF0YUJpbmFyeSIsImludGVybmFsU3RyZWFtIiwiX2RlY29tcHJlc3NXb3JrZXIiLCJhc3luYyIsIm5vZGVTdHJlYW0iLCIzNiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiTWVzc2FnZUNoYW5uZWwiLCJjcmVhdGVFbGVtZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCIzNyIsIm91dGNvbWUiLCJwcm9taXNlIiwib25GdWxmaWxsZWQiLCJjYWxsRnVsZmlsbGVkIiwib3RoZXJDYWxsRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhbGxSZWplY3RlZCIsIm90aGVyQ2FsbFJlamVjdGVkIiwic3RhdHVzIiwiZmluYWxseSIsImNhdGNoIiwicmFjZSIsImltbWVkaWF0ZSIsIjM4IiwiYXNzaWduIiwiMzkiLCJjaHVua1NpemUiLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsInRvIiwiZ3ppcCIsIm1zZyIsImNodW5rcyIsInN0cm0iLCJhdmFpbF9vdXQiLCJkZWZsYXRlSW5pdDIiLCJkZWZsYXRlU2V0SGVhZGVyIiwiZGljdGlvbmFyeSIsInN0cmluZzJidWYiLCJkZWZsYXRlU2V0RGljdGlvbmFyeSIsIl9kaWN0X3NldCIsImlucHV0IiwibmV4dF9pbiIsImF2YWlsX2luIiwib3V0cHV0IiwiQnVmOCIsIm5leHRfb3V0IiwiZGVmbGF0ZSIsIm9uRW5kIiwiYnVmMmJpbnN0cmluZyIsInNocmlua0J1ZiIsImRlZmxhdGVFbmQiLCJmbGF0dGVuQ2h1bmtzIiwiRGVmbGF0ZSIsImRlZmxhdGVSYXciLCI0MCIsImluZmxhdGVJbml0MiIsIlpfT0siLCJpbmZsYXRlR2V0SGVhZGVyIiwiWl9GSU5JU0giLCJaX05PX0ZMVVNIIiwiYmluc3RyaW5nMmJ1ZiIsImluZmxhdGUiLCJaX05FRURfRElDVCIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiWl9CVUZfRVJST1IiLCJaX1NUUkVBTV9FTkQiLCJaX1NZTkNfRkxVU0giLCJ1dGY4Ym9yZGVyIiwiYnVmMnN0cmluZyIsImFycmF5U2V0IiwiaW5mbGF0ZUVuZCIsIkluZmxhdGUiLCJpbmZsYXRlUmF3IiwidW5nemlwIiwiNDEiLCJJbnQzMkFycmF5Iiwic2V0VHlwZWQiLCJCdWYxNiIsIkJ1ZjMyIiwiNDIiLCI0MyIsIjQ0IiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9CTE9DSyIsIlpfVFJFRVMiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9GSUxURVJFRCIsIlpfSFVGRk1BTl9PTkxZIiwiWl9STEUiLCJaX0ZJWEVEIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJaX0RFRkxBVEVEIiwiNDUiLCI0NiIsIlQiLCJEIiwiRiIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwidG90YWxfb3V0IiwiTiIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJVIiwiUCIsIkwiLCJtYXhfY2hhaW5fbGVuZ3RoIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwid19tYXNrIiwicHJldiIsImdvb2RfbWF0Y2giLCJsb29rYWhlYWQiLCJtYXRjaF9zdGFydCIsIndpbmRvd19zaXplIiwiaGFzaF9zaXplIiwiYWRsZXIiLCJ0b3RhbF9pbiIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsIloiLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsImxhc3RfbGl0IiwiVyIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJNIiwiZ29vZF9sZW5ndGgiLCJtYXhfbGF6eSIsIm5pY2VfbGVuZ3RoIiwibWF4X2NoYWluIiwiZnVuYyIsIkgiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiaGVhcCIsImhlYXBfbGVuIiwiaGVhcF9tYXgiLCJsX2J1ZiIsImxpdF9idWZzaXplIiwiZF9idWYiLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsIm1hdGNoZXMiLCJiaV9idWYiLCJiaV92YWxpZCIsIkciLCJkYXRhX3R5cGUiLCJfdHJfaW5pdCIsIksiLCJZIiwiZGVmbGF0ZUluaXQiLCJkZWZsYXRlUmVzZXQiLCJkZWZsYXRlUmVzZXRLZWVwIiwiaGNyYyIsImV4dHJhIiwidGltZSIsIm9zIiwiX3RyX2FsaWduIiwiX3RyX3N0b3JlZF9ibG9jayIsImRlZmxhdGVJbmZvIiwiNDciLCJ4ZmxhZ3MiLCJleHRyYV9sZW4iLCI0OCIsImRtYXgiLCJ3c2l6ZSIsIndoYXZlIiwid25leHQiLCJob2xkIiwiYml0cyIsImxlbmNvZGUiLCJkaXN0Y29kZSIsImxlbmJpdHMiLCJkaXN0Yml0cyIsIm1vZGUiLCJzYW5lIiwiNDkiLCJoYXZlZGljdCIsImZsYWdzIiwiY2hlY2siLCJ3Yml0cyIsIm5jb2RlIiwibmxlbiIsIm5kaXN0IiwiaGF2ZSIsImxlbnMiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZUluZm8iLCI1MCIsIjUxIiwiMCIsIjUyIiwic3RhdGljX3RyZWUiLCJleHRyYV9iaXRzIiwiZXh0cmFfYmFzZSIsImVsZW1zIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsImR5bl90cmVlIiwibWF4X2NvZGUiLCJzdGF0X2Rlc2MiLCJYIiwiViIsInEiLCJKIiwiNTMiLCI1NCIsImZpbGVfMSIsIkRvY3VtZW50IiwiRmlsZSIsIkVNUFRZX09CSkVDVCIsInNlYWwiLCJJc0RlbGV0ZWQiLCJtYXAiLCJjb21wIiwicHJlcEZvclhtbCIsImRlZmF1bHRfYXR0cmlidXRlc18xIiwicnNpZFIiLCJyc2lkUlByIiwicnNpZFNlY3QiLCJ4bWxfanNfMSIsIl8xIiwiY29udmVydFRvWG1sQ29tcG9uZW50IiwieG1sQ29tcG9uZW50IiwiSW1wb3J0ZWRYbWxDb21wb25lbnQiLCJjaGlsZEVsbWVudHMiLCJjaGlsZEVsbSIsIkltcG9ydGVkWG1sQ29tcG9uZW50QXR0cmlidXRlcyIsImltcG9ydGVkQ29udGVudCIsIkltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzIiwic3RyaWN0IiwiU0FYUGFyc2VyIiwiU0FYU3RyZWFtIiwiY3JlYXRlU3RyZWFtIiwiTUFYX0JVRkZFUl9MRU5HVEgiLCJidWZmZXJzIiwiY2xlYXJCdWZmZXJzIiwiYnVmZmVyQ2hlY2tQb3NpdGlvbiIsImxvd2VyY2FzZSIsImxvd2VyY2FzZXRhZ3MiLCJsb29zZUNhc2UiLCJ0YWdzIiwiY2xvc2VkIiwiY2xvc2VkUm9vdCIsInNhd1Jvb3QiLCJ0YWciLCJub3NjcmlwdCIsIkVOVElUSUVTIiwiWE1MX0VOVElUSUVTIiwiYXR0cmliTGlzdCIsInhtbG5zIiwibnMiLCJyb290TlMiLCJ0cmFja1Bvc2l0aW9uIiwiRVZFTlRTIiwiQkVHSU5fV0hJVEVTUEFDRSIsImJlZ2luV2hpdGVTcGFjZSIsIlRFWFQiLCJzdGFydGkiLCJ0ZXh0Tm9kZSIsImlzV2hpdGVzcGFjZSIsInN0cmljdEZhaWwiLCJURVhUX0VOVElUWSIsIk9QRU5fV0FLQSIsInN0YXJ0VGFnUG9zaXRpb24iLCJTQ1JJUFQiLCJTQ1JJUFRfRU5ESU5HIiwic2NyaXB0IiwiQ0xPU0VfVEFHIiwiU0dNTF9ERUNMIiwic2dtbERlY2wiLCJpc01hdGNoIiwibmFtZVN0YXJ0IiwiT1BFTl9UQUciLCJ0YWdOYW1lIiwiUFJPQ19JTlNUIiwicHJvY0luc3ROYW1lIiwicHJvY0luc3RCb2R5IiwicGFkIiwiZW1pdE5vZGUiLCJDREFUQSIsIkNPTU1FTlQiLCJET0NUWVBFIiwiaXNRdW90ZSIsIlNHTUxfREVDTF9RVU9URUQiLCJET0NUWVBFX0RURCIsIkRPQ1RZUEVfUVVPVEVEIiwiRE9DVFlQRV9EVERfUVVPVEVEIiwiQ09NTUVOVF9FTkRJTkciLCJDT01NRU5UX0VOREVEIiwidGV4dG9wdHMiLCJDREFUQV9FTkRJTkciLCJDREFUQV9FTkRJTkdfMiIsIlBST0NfSU5TVF9FTkRJTkciLCJQUk9DX0lOU1RfQk9EWSIsIm5hbWVCb2R5IiwibmV3VGFnIiwib3BlblRhZyIsIk9QRU5fVEFHX1NMQVNIIiwiQVRUUklCIiwiY2xvc2VUYWciLCJhdHRyaWJOYW1lIiwiYXR0cmliVmFsdWUiLCJBVFRSSUJfTkFNRSIsIkFUVFJJQl9WQUxVRSIsImF0dHJpYiIsIkFUVFJJQl9OQU1FX1NBV19XSElURSIsIkFUVFJJQl9WQUxVRV9RVU9URUQiLCJBVFRSSUJfVkFMVUVfVU5RVU9URUQiLCJBVFRSSUJfVkFMVUVfRU5USVRZX1EiLCJBVFRSSUJfVkFMVUVfQ0xPU0VEIiwiaXNBdHRyaWJFbmQiLCJBVFRSSUJfVkFMVUVfRU5USVRZX1UiLCJDTE9TRV9UQUdfU0FXX1dISVRFIiwibm90TWF0Y2giLCJyZXR1cm5TdGF0ZSIsInBhcnNlRW50aXR5IiwiZW50aXR5IiwiZW50aXR5Qm9keSIsImVudGl0eVN0YXJ0IiwibWF4QWxsb3dlZCIsIm1heEFjdHVhbCIsImNsb3NlVGV4dCIsImNoZWNrQnVmZmVyTGVuZ3RoIiwiZXgiLCJzdHJlYW1XcmFwcyIsIl9wYXJzZXIiLCJtZSIsIl9kZWNvZGVyIiwiU0QiLCJYTUxfTkFNRVNQQUNFIiwiWE1MTlNfTkFNRVNQQUNFIiwicmVnZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJmcm9tQ29kZVBvaW50IiwiU1RBVEUiLCJDT01NRU5UX1NUQVJUSU5HIiwibm9kZVR5cGUiLCJub3JtYWxpemUiLCJwYXJlbnQiLCJxbmFtZSIsImF0dHJpYnV0ZSIsInF1YWxOYW1lIiwicHJlZml4IiwibG9jYWwiLCJxbiIsInNlbGZDbG9zaW5nIiwidXJpIiwiSlNPTiIsInN0cmluZ2lmeSIsIm52IiwiaXNTZWxmQ2xvc2luZyIsImNsb3NlVG8iLCJlbnRpdHlMQyIsIm51bVN0ciIsImhpZ2hTdXJyb2dhdGUiLCJsb3dTdXJyb2dhdGUiLCJNQVhfU0laRSIsImNvZGVVbml0cyIsImI2NCIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwibG9nIiwiTE4yIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInJlZ2lzdGVySW1tZWRpYXRlIiwiaHRtbCIsImNoYW5uZWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJyYW5kb20iLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJ0YXNrIiwiY29uZmlnIiwibG9jYWxTdG9yYWdlIiwidHJhY2UiLCJqc29uIiwicGFyc2UiLCJXT1JLQVJPVU5EMyIsIkluaXRpYWxpemFibGVYbWxDb21wb25lbnQiLCJpbml0Q29tcG9uZW50IiwiVGV4dFJ1biIsInN5bWJvbF8xIiwiU3ltYm9sUnVuIiwiY2hhciIsInN5bWJvbGZvbnQiLCJTeW1ib2xBdHRyaWJ1dGVzIiwiZHJhd2luZ18xIiwiUGljdHVyZVJ1biIsImltYWdlRGF0YSIsImRyYXdpbmdPcHRpb25zIiwiZHJhd2luZyIsIkRyYXdpbmciLCJhbmNob3JfMSIsImlubGluZV8xIiwiZmxvYXRpbmciLCJBbmNob3IiLCJkaW1lbnNpb25zIiwiaW5saW5lIiwiSW5saW5lIiwiZmFjdG9yWCIsImZhY3RvclkiLCJzY2FsZSIsImZsb2F0aW5nXzEiLCJncmFwaGljXzEiLCJ0ZXh0X3dyYXBfMSIsImRvY19wcm9wZXJ0aWVzXzEiLCJlZmZlY3RfZXh0ZW50XzEiLCJleHRlbnRfMSIsImdyYXBoaWNfZnJhbWVfcHJvcGVydGllc18xIiwiYW5jaG9yX2F0dHJpYnV0ZXNfMSIsImRlZmF1bHRPcHRpb25zIiwiYmVoaW5kRG9jdW1lbnQiLCJsb2NrQW5jaG9yIiwidmVydGljYWxQb3NpdGlvbiIsImhvcml6b250YWxQb3NpdGlvbiIsIm1lZGlhRGF0YSIsIm1hcmdpbnMiLCJlbXVzIiwiU2ltcGxlUG9zIiwiSG9yaXpvbnRhbFBvc2l0aW9uIiwiVmVydGljYWxQb3NpdGlvbiIsIlRleHRXcmFwcGluZ1R5cGUiLCJTUVVBUkUiLCJXcmFwU3F1YXJlIiwiVElHSFQiLCJXcmFwVGlnaHQiLCJUT1BfQU5EX0JPVFRPTSIsIldyYXBUb3BBbmRCb3R0b20iLCJOT05FIiwiV3JhcE5vbmUiLCJHcmFwaGljIiwiU2ltcGxlUG9zQXR0cmlidXRlcyIsImFsaWduXzEiLCJmbG9hdGluZ19wb3NpdGlvbl8xIiwicG9zaXRpb25fb2Zmc2V0XzEiLCJIb3Jpem9udGFsUG9zaXRpb25BdHRyaWJ1dGVzIiwicmVsYXRpdmVGcm9tIiwicmVsYXRpdmUiLCJQQUdFIiwiYWxpZ24iLCJWZXJ0aWNhbFBvc2l0aW9uQXR0cmlidXRlcyIsImdyYXBoaWNfZGF0YV8xIiwiR3JhcGhpY0F0dHJpYnV0ZXMiLCJHcmFwaGljRGF0YSIsInNldFhZIiwiZ3JhcGhpY19kYXRhX2F0dHJpYnV0ZV8xIiwicGljXzEiLCJHcmFwaGljRGF0YUF0dHJpYnV0ZXMiLCJwaWMiLCJQaWMiLCJibGlwX2ZpbGxfMSIsIm5vbl92aXN1YWxfcGljX3Byb3BlcnRpZXNfMSIsInBpY19hdHRyaWJ1dGVzXzEiLCJzaGFwZV9wcm9wZXJ0aWVzXzEiLCJQaWNBdHRyaWJ1dGVzIiwic2hhcGVQcm9wZXJ0aWVzIiwiU2hhcGVQcm9wZXJ0aWVzIiwiTm9uVmlzdWFsUGljUHJvcGVydGllcyIsIkJsaXBGaWxsIiwiYmxpcF8xIiwic291cmNlX3JlY3RhbmdsZV8xIiwic3RyZXRjaF8xIiwiQmxpcCIsIlNvdXJjZVJlY3RhbmdsZSIsIlN0cmV0Y2giLCJCbGlwQXR0cmlidXRlcyIsImVtYmVkIiwiY3N0YXRlIiwiRmlsbFJlY3RhbmdsZSIsImNoaWxkX25vbl92aXN1YWxfcGljX3Byb3BlcnRpZXNfMSIsIm5vbl92aXN1YWxfcHJvcGVydGllc18xIiwiTm9uVmlzdWFsUHJvcGVydGllcyIsIkNoaWxkTm9uVmlzdWFsUHJvcGVydGllcyIsInBpY19sb2Nrc18xIiwiUGljTG9ja3MiLCJwaWNfbG9ja3NfYXR0cmlidXRlc18xIiwiUGljTG9ja3NBdHRyaWJ1dGVzIiwibm9DaGFuZ2VBc3BlY3QiLCJub0NoYW5nZUFycm93aGVhZHMiLCJub25fdmlzdWFsX3Byb3BlcnRpZXNfYXR0cmlidXRlc18xIiwiTm9uVmlzdWFsUHJvcGVydGllc0F0dHJpYnV0ZXMiLCJmb3JtXzEiLCJwcmVzZXRfZ2VvbWV0cnlfMSIsInNoYXBlX3Byb3BlcnRpZXNfYXR0cmlidXRlc18xIiwiU2hhcGVQcm9wZXJ0aWVzQXR0cmlidXRlcyIsImJ3TW9kZSIsImZvcm0iLCJGb3JtIiwiUHJlc2V0R2VvbWV0cnkiLCJleHRlbnRzXzEiLCJvZmZfMSIsImV4dGVudHMiLCJFeHRlbnRzIiwiT2Zmc2V0IiwiZXh0ZW50c19hdHRyaWJ1dGVzXzEiLCJFeHRlbnRzQXR0cmlidXRlcyIsIm9mZl9hdHRyaWJ1dGVzXzEiLCJPZmZzZXRBdHRyaWJ1dGVzIiwiYWRqdXN0bWVudF92YWx1ZXNfMSIsInByZXNldF9nZW9tZXRyeV9hdHRyaWJ1dGVzXzEiLCJQcmVzZXRHZW9tZXRyeUF0dHJpYnV0ZXMiLCJwcnN0IiwiQWRqdXN0bWVudFZhbHVlcyIsIlRleHRXcmFwcGluZ1NpZGUiLCJXcmFwU3F1YXJlQXR0cmlidXRlcyIsIndyYXBUZXh0IiwidGV4dFdyYXBwaW5nIiwic2lkZSIsIkJPVEhfU0lERVMiLCJXcmFwVGlnaHRBdHRyaWJ1dGVzIiwiV3JhcFRvcEFuZEJvdHRvbUF0dHJpYnV0ZXMiLCJncmFwaGljX2ZyYW1lX2xvY2tfYXR0cmlidXRlc18xIiwiR3JhcGhpY0ZyYW1lTG9ja0F0dHJpYnV0ZXMiLCJpbmxpbmVfYXR0cmlidXRlc18xIiwiSW5saW5lQXR0cmlidXRlcyIsImV4dGVudCIsImdyYXBoaWMiLCJuZXdYIiwicm91bmQiLCJuZXdZIiwic2VxdWVudGlhbF9pZGVudGlmaWVyX2luc3RydWN0aW9uXzEiLCJTZXF1ZW50aWFsSWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJTZXF1ZW50aWFsSWRlbnRpZmllckluc3RydWN0aW9uIiwiVGFiIiwiUGFyYWdyYXBoIiwiQm9va21hcmsiLCJIeXBlcmxpbmtSZWYiLCJIeXBlcmxpbmtDYWNoZSIsImh5cGVybGlua19hdHRyaWJ1dGVzXzEiLCJIeXBlcmxpbmtUeXBlIiwiSHlwZXJsaW5rIiwicmVsYXRpb25zaGlwSWQiLCJhbmNob3IiLCJsaW5rSWQiLCJwcm9wcyIsImhpc3RvcnkiLCJIeXBlcmxpbmtBdHRyaWJ1dGVzIiwidGV4dFJ1biIsInNob3J0aWQiLCJib29rbWFya19hdHRyaWJ1dGVzXzEiLCJCb29rbWFya1N0YXJ0IiwiQm9va21hcmtFbmQiLCJCb29rbWFya1N0YXJ0QXR0cmlidXRlcyIsIkJvb2ttYXJrRW5kQXR0cmlidXRlcyIsImJ1aWxkIiwiaXNWYWxpZCIsImNsdXN0ZXJXb3JrZXJJZCIsInNlZWRWYWx1ZSIsIndvcmtlciIsIndvcmtlcklkIiwibmV3Q2hhcmFjdGVycyIsIl9zZWVkXyIsImNvdW50ZXIiLCJwcmV2aW91c1NlY29uZHMiLCJzZWNvbmRzIiwibm93IiwibnVtYmVyIiwibG9vcENvdW50ZXIiLCJyYW5kb21CeXRlIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJtYXNrIiwic3RlcCIsImNlaWwiLCJSZWdFeHAiLCJtYXRoX3RleHRfMSIsIk1hdGhSdW4iLCJNYXRoVGV4dCIsIm1hdGhfZGVub21pbmF0b3JfMSIsIm1hdGhfbnVtZXJhdG9yXzEiLCJNYXRoRnJhY3Rpb24iLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsIk1hdGhTdWJTY3JpcHRIaWRlQXR0cmlidXRlcyIsImhpZGUiLCJNYXRoU3VwZXJTY3JpcHRIaWRlQXR0cmlidXRlcyIsIm1hdGhfYmFzZV8xIiwibWF0aF9uYXJheV9wcm9wZXJ0aWVzXzEiLCJtYXRoX3N1Yl9zY3JpcHRfMSIsIm1hdGhfc3VwZXJfc2NyaXB0XzEiLCJNYXRoU3VtIiwibl9hcnlfMSIsIm1hdGhfc3VwZXJfc2NyaXB0X2Z1bmN0aW9uX3Byb3BlcnRpZXNfMSIsIk1hdGhTdXBlclNjcmlwdCIsIm1hdGhfc3ViX3NjcmlwdF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEiLCJNYXRoU3ViU2NyaXB0IiwibWF0aF9zdWJfc3VwZXJfc2NyaXB0X2Z1bmN0aW9uX3Byb3BlcnRpZXNfMSIsIk1hdGhTdWJTdXBlclNjcmlwdCIsIm1hdGhfcHJlX3N1Yl9zdXBlcl9zY3JpcHRfZnVuY3Rpb25fcHJvcGVydGllc18xIiwiTWF0aFByZVN1YlN1cGVyU2NyaXB0IiwiV09SS0FST1VORDQiLCJtYXRoX2RlZ3JlZV8xIiwibWF0aF9yYWRpY2FsX3Byb3BlcnRpZXNfMSIsIk1hdGhSYWRpY2FsIiwiZGVncmVlIiwiTWF0aERlZ3JlZUhpZGVBdHRyaWJ1dGVzIiwibWF0aF9mdW5jdGlvbl9uYW1lXzEiLCJtYXRoX2Z1bmN0aW9uX3Byb3BlcnRpZXNfMSIsIk1hdGhGdW5jdGlvbiIsIm1hdGhfYnJhY2tldF9wcm9wZXJ0aWVzXzEiLCJNYXRoUm91bmRCcmFja2V0cyIsIk1hdGhCZWdpbm5pbmdDaGFyYWN0ZXJBdHRyaWJ1dGVzIiwiY2hhcmFjdGVyIiwiTWF0aEVuZGluZ0NoYXJhY3RlckF0dHJpYnV0ZXMiLCJNYXRoU3F1YXJlQnJhY2tldHMiLCJNYXRoQ3VybHlCcmFja2V0cyIsIk1hdGhBbmdsZWRCcmFja2V0cyIsImdyaWRfMSIsInRhYmxlX2NlbGxfMSIsInRhYmxlX3Byb3BlcnRpZXNfMSIsIlRhYmxlIiwicm93cyIsImNvbHVtbldpZHRocyIsInJvdyIsIkNlbGxDb3VudCIsIm1hcmdpblVuaXRUeXBlIiwiQVVUTyIsImZsb2F0IiwibGF5b3V0IiwiYm9yZGVycyIsInNldEJvcmRlciIsInNldFdpZHRoIiwiQ2VsbE1hcmdpbiIsImFkZEJvdHRvbU1hcmdpbiIsImFkZFRvcE1hcmdpbiIsImFkZExlZnRNYXJnaW4iLCJhZGRSaWdodE1hcmdpbiIsIlRhYmxlR3JpZCIsInJvd0luZGV4IiwiY29sdW1uSW5kZXgiLCJjZWxscyIsImNlbGwiLCJyb3dTcGFuIiwiY29udGludWVDZWxsIiwiVGFibGVDZWxsIiwiY29sdW1uU3BhbiIsInZlcnRpY2FsTWVyZ2UiLCJDT05USU5VRSIsImFkZENlbGxUb0NvbHVtbkluZGV4Iiwic2V0VGFibGVGbG9hdFByb3BlcnRpZXMiLCJzZXRMYXlvdXQiLCJzZXRBbGlnbm1lbnQiLCJ3aWR0aHMiLCJHcmlkQ29sIiwiR3JpZENvbEF0dHJpYnV0ZXMiLCJ0YWJsZV9jZWxsX2NvbXBvbmVudHNfMSIsInRhYmxlX2NlbGxfcHJvcGVydGllc18xIiwiVGFibGVDZWxsUHJvcGVydGllcyIsInNldFZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGlyZWN0aW9uIiwic2V0VGV4dERpcmVjdGlvbiIsImFkZFZlcnRpY2FsTWVyZ2UiLCJSRVNUQVJUIiwiYWRkTWFyZ2lucyIsInNldFNoYWRpbmciLCJhZGRHcmlkU3BhbiIsIkJvcmRlcnMiLCJhZGRUb3BCb3JkZXIiLCJhZGRCb3R0b21Cb3JkZXIiLCJhZGRMZWZ0Qm9yZGVyIiwiYWRkUmlnaHRCb3JkZXIiLCJzaGFkaW5nXzEiLCJ0YWJsZV9jZWxsX21hcmdpbnNfMSIsImNlbGxCb3JkZXIiLCJjZWxsU3BhbiIsIlRhYmxlU2hhZGluZyIsIlRhYmxlQ2VsbE1hcmdpbiIsIlRhYmxlU2hhZGluZ0F0dHJpYnV0ZXMiLCJTaGFkaW5nVHlwZSIsImNlbGxfbWFyZ2luXzEiLCJUb3BDZWxsTWFyZ2luIiwiQm90dG9tQ2VsbE1hcmdpbiIsIlJpZ2h0Q2VsbE1hcmdpbiIsIkxlZnRDZWxsTWFyZ2luIiwiQ2VsbE1hcmdpbkF0dHJpYnV0ZXMiLCJ0YWJsZV9ib3JkZXJzXzEiLCJ0YWJsZV9jZWxsX21hcmdpbl8xIiwidGFibGVfZmxvYXRfcHJvcGVydGllc18xIiwidGFibGVfbGF5b3V0XzEiLCJ0YWJsZV93aWR0aF8xIiwiY2VsbE1hcmdpbiIsIlByZWZlcnJlZFRhYmxlV2lkdGgiLCJib3JkZXJPcHRpb25zIiwidGFibGVGbG9hdE9wdGlvbnMiLCJTdHlsZXMiLCJpbml0aWFsU3R5bGVzIiwiaW1wb3J0ZWRTdHlsZXMiLCJwYXJhZ3JhcGhTdHlsZXMiLCJjaGFyYWN0ZXJTdHlsZXMiLCJjaGFyYWN0ZXJfc3R5bGVfMSIsInBhcmFncmFwaF9zdHlsZV8xIiwiSGVhZGluZ1N0eWxlIiwiVGl0bGVTdHlsZSIsIkhlYWRpbmcxU3R5bGUiLCJIZWFkaW5nMlN0eWxlIiwiSGVhZGluZzNTdHlsZSIsIkhlYWRpbmc0U3R5bGUiLCJIZWFkaW5nNVN0eWxlIiwiSGVhZGluZzZTdHlsZSIsIkxpc3RQYXJhZ3JhcGgiLCJGb290bm90ZVRleHQiLCJGb290bm90ZVJlZmVyZW5jZVN0eWxlIiwiRm9vdG5vdGVUZXh0Q2hhciIsIkh5cGVybGlua1N0eWxlIiwicGFyYWdyYXBoX3Byb3BlcnRpZXNfMSIsInJ1bl9wcm9wZXJ0aWVzXzEiLCJEb2N1bWVudERlZmF1bHRzIiwicnVuUHJvcGVydGllc0RlZmF1bHRzIiwicGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzIiwiVGFibGVDZWxsTWFyZ2luQXR0cmlidXRlcyIsIkJhc2VUYWJsZUNlbGxNYXJnaW4iLCJEWEEiLCJUYWJsZVdpZHRoQXR0cmlidXRlcyIsIlBFUkNFTlRBR0UiLCJ0YWJsZV9yb3dfcHJvcGVydGllc18xIiwiVGFibGVSb3ciLCJjYW50U3BsaXQiLCJzZXRDYW50U3BsaXQiLCJ0YWJsZUhlYWRlciIsInNldFRhYmxlSGVhZGVyIiwic2V0SGVpZ2h0Iiwicm9vdEluZGV4IiwiY29sdW1uSW5kZXhUb1Jvb3RJbmRleCIsImFkZENlbGxUb0luZGV4IiwiY29sSWR4Iiwicm9vdElkeCIsImFsbG93RW5kTmV3Q2VsbCIsImFwcF9wcm9wZXJ0aWVzXzEiLCJjb250ZW50X3R5cGVzXzEiLCJjb3JlX3Byb3BlcnRpZXNfMSIsImRvY3VtZW50XzEiLCJzZWN0aW9uX3Byb3BlcnRpZXNfMSIsImZvb3Rlcl93cmFwcGVyXzEiLCJmb290bm90ZXNfMSIsImhlYWRlcl93cmFwcGVyXzEiLCJtZWRpYV8xIiwibnVtYmVyaW5nXzEiLCJyZWxhdGlvbnNoaXBfMSIsInNldHRpbmdzXzEiLCJleHRlcm5hbF9zdHlsZXNfZmFjdG9yeV8xIiwiZmFjdG9yeV8xIiwiY3JlYXRvciIsInJldmlzaW9uIiwibGFzdE1vZGlmaWVkQnkiLCJmaWxlUHJvcGVydGllcyIsInNlY3Rpb25zIiwiY3VycmVudFJlbGF0aW9uc2hpcElkIiwiaHlwZXJsaW5rQ2FjaGUiLCJjb3JlUHJvcGVydGllcyIsIkNvcmVQcm9wZXJ0aWVzIiwiTnVtYmVyaW5nIiwiZG9jUmVsYXRpb25zaGlwcyIsImZpbGVSZWxhdGlvbnNoaXBzIiwiYXBwUHJvcGVydGllcyIsIkFwcFByb3BlcnRpZXMiLCJmb290Tm90ZXMiLCJGb290Tm90ZXMiLCJjb250ZW50VHlwZXMiLCJDb250ZW50VHlwZXMiLCJiYWNrZ3JvdW5kIiwic2V0dGluZ3MiLCJTZXR0aW5ncyIsInRlbXBsYXRlIiwiTWVkaWEiLCJleHRlcm5hbFN0eWxlcyIsInN0eWxlc0ZhY3RvcnkiLCJFeHRlcm5hbFN0eWxlc0ZhY3RvcnkiLCJzdHlsZXMiLCJuZXdJbnN0YW5jZSIsImRlZmF1bHRTdHlsZXMiLCJEZWZhdWx0U3R5bGVzRmFjdG9yeSIsImFkZERlZmF1bHRSZWxhdGlvbnNoaXBzIiwidGVtcGxhdGVIZWFkZXIiLCJhZGRIZWFkZXJUb0RvY3VtZW50IiwidGVtcGxhdGVGb290ZXIiLCJhZGRGb290ZXJUb0RvY3VtZW50Iiwic2VjdGlvbiIsIkJvZHkiLCJhZGRTZWN0aW9uIiwiaHlwZXJsaW5rIiwiZm9vdG5vdGVzIiwiY3JlYXRlRm9vdE5vdGUiLCJoeXBlcmxpbmtzIiwiY2FjaGUiLCJoeXBlcmxpbmtSZWYiLCJFWFRFUk5BTCIsImNyZWF0ZUh5cGVybGluayIsImNyZWF0ZUludGVybmFsSHlwZXJMaW5rIiwiZmVhdHVyZXMiLCJ0cmFja1JldmlzaW9ucyIsImFkZFRyYWNrUmV2aXNpb25zIiwiY3JlYXRlSGVhZGVyIiwiY3JlYXRlRm9vdGVyIiwiZ2V0VGFibGVzT2ZDb250ZW50cyIsImFkZFVwZGF0ZUZpZWxkcyIsImNyZWF0ZVJlbGF0aW9uc2hpcCIsIndyYXBwZXIiLCJhZGRIZWFkZXIiLCJhZGRGb290ZXIiLCJhcHBfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEiLCJBcHBQcm9wZXJ0aWVzQXR0cmlidXRlcyIsInZ0IiwiY29udGVudF90eXBlc19hdHRyaWJ1dGVzXzEiLCJkZWZhdWx0XzEiLCJvdmVycmlkZV8xIiwiQ29udGVudFR5cGVBdHRyaWJ1dGVzIiwiRGVmYXVsdCIsIk92ZXJyaWRlIiwiY29udGVudFR5cGUiLCJleHRlbnNpb24iLCJEZWZhdWx0QXR0cmlidXRlcyIsIm92ZXJyaWRlX2F0dHJpYnV0ZXNfMSIsInBhcnROYW1lIiwiT3ZlcnJpZGVBdHRyaWJ1dGVzIiwiZG9jdW1lbnRfYXR0cmlidXRlc18xIiwiVGl0bGUiLCJzdWJqZWN0IiwiU3ViamVjdCIsIkNyZWF0b3IiLCJrZXl3b3JkcyIsIktleXdvcmRzIiwiZGVzY3JpcHRpb24iLCJEZXNjcmlwdGlvbiIsIkxhc3RNb2RpZmllZEJ5IiwiUmV2aXNpb24iLCJDcmVhdGVkIiwiTW9kaWZpZWQiLCJEYXRlQ29tcG9uZW50IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0Q3VycmVudERhdGUiLCJib2R5XzEiLCJkb2N1bWVudF9iYWNrZ3JvdW5kXzEiLCJEb2N1bWVudEJhY2tncm91bmQiLCJfXzEiLCJjdXJyZW50U2VjdGlvbiIsImNyZWF0ZVNlY3Rpb25QYXJhZ3JhcGgiLCJjb21wb25lbnQiLCJUYWJsZU9mQ29udGVudHMiLCJjb2x1bW5zX2F0dHJpYnV0ZXNfMSIsIkNvbHVtbnNBdHRyaWJ1dGVzIiwiZG9jX2dyaWRfYXR0cmlidXRlc18xIiwiRG9jR3JpZEF0dHJpYnV0ZXMiLCJMaW5lTnVtYmVyUmVzdGFydEZvcm1hdCIsIkxpbmVOdW1iZXJBdHRyaWJ1dGVzIiwiY291bnRCeSIsInJlc3RhcnQiLCJkaXN0IiwiUGFnZUJvcmRlclpPcmRlciIsIlBhZ2VCb3JkZXJPZmZzZXRGcm9tIiwiUGFnZUJvcmRlckRpc3BsYXkiLCJQYWdlQm9yZGVBdHRyaWJ1dGVzIiwiUGFnZUJvcmRlciIsIlBhZ2VCb3JkZXJzQXR0cmlidXRlcyIsImRpc3BsYXkiLCJvZmZzZXRGcm9tIiwiek9yZGVyIiwicGFnZUJvcmRlcnNBdHRyaWJ1dGVzIiwicGFnZV9tYXJnaW5fYXR0cmlidXRlc18xIiwiUGFnZU1hcmdpbkF0dHJpYnV0ZXMiLCJQYWdlTnVtYmVyRm9ybWF0IiwiUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzIiwibnVtYmVyRm9ybWF0IiwidGl0bGVfcGFnZV9hdHRyaWJ1dGVzXzEiLCJUaXRsZVBhZ2VBdHRyaWJ1dGVzIiwidmVydGljYWxfYWxpZ25fYXR0cmlidXRlc18xIiwiU2VjdGlvblZlcnRpY2FsQWxpZ25WYWx1ZSIsIkRvY3VtZW50QmFja2dyb3VuZEF0dHJpYnV0ZXMiLCJ0aGVtZUNvbG9yIiwidGhlbWVTaGFkZSIsInRoZW1lVGludCIsImZvb3Rlcl9hdHRyaWJ1dGVzXzEiLCJyZWZlcmVuY2VOdW1iZXIiLCJyZWZJZCIsIkZvb3RlckF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzXzEiLCJSZWxhdGlvbnNoaXBzQXR0cmlidXRlcyIsInJlbGF0aW9uc2hpcCIsImFkZFJlbGF0aW9uc2hpcCIsImZvb3Rub3RlXzEiLCJjb250aW51YXRpb25fc2VwZXJhdG9yX3J1bl8xIiwic2VwZXJhdG9yX3J1bl8xIiwiZm9vdG5vdGVzX2F0dHJpYnV0ZXNfMSIsImN1cnJlbnRJZCIsIkZvb3Rub3Rlc0F0dHJpYnV0ZXMiLCJiZWdpbiIsIkZvb3Rub3RlIiwiRm9vdG5vdGVUeXBlIiwiU0VQRVJBVE9SIiwiU2VwZXJhdG9yUnVuIiwiQ09OVElOVUFUSU9OX1NFUEVSQVRPUiIsIkNvbnRpbnVhdGlvblNlcGVyYXRvclJ1biIsImZvb3Rub3RlIiwiZm9vdG5vdGVfYXR0cmlidXRlc18xIiwiZm9vdG5vdGVfcmVmX3J1bl8xIiwiRm9vdG5vdGVBdHRyaWJ1dGVzIiwiYWRkUnVuVG9Gcm9udCIsIkZvb3Rub3RlUmVmUnVuIiwiZm9vdG5vdGVfcmVmXzEiLCJGb290bm90ZVJlZiIsImNvbnRpbnVhdGlvbl9zZXBlcmF0b3JfMSIsIkNvbnRpbnVhdGlvblNlcGVyYXRvciIsInNlcGVyYXRvcl8xIiwiU2VwZXJhdG9yIiwiRm9vdE5vdGVSZWZlcmVuY2VSdW5BdHRyaWJ1dGVzIiwiRm9vdG5vdGVSZWZlcmVuY2UiLCJGb290bm90ZVJlZmVyZW5jZVJ1biIsImhlYWRlcl9hdHRyaWJ1dGVzXzEiLCJIZWFkZXJBdHRyaWJ1dGVzIiwiY3gxIiwiY3gyIiwiY3gzIiwiY3g0IiwiY3g1IiwiY3g2IiwiY3g3IiwiY3g4IiwidzE2Y2lkIiwidzE2c2UiLCJhZGRNZWRpYSIsIk1hcCIsImdlbmVyYXRlSWQiLCJjcmVhdGVNZWRpYSIsImZpbGVQYXRoIiwiY29udmVydERhdGFVUklUb0JpbmFyeSIsInBhdGgiLCJwaXhlbHMiLCJkYXRhVVJJIiwiQkFTRTY0X01BUktFUiIsImJhc2U2NEluZGV4IiwiYXRvYiIsIldPUktBUk9VTkQyIiwiYWJzdHJhY3RfbnVtYmVyaW5nXzEiLCJudW1fMSIsImFic3RyYWN0TnVtYmVyaW5nIiwiY29uY3JldGVOdW1iZXJpbmciLCJuZXh0SWQiLCJjcmVhdGVBYnN0cmFjdE51bWJlcmluZyIsImNyZWF0ZUNvbmNyZXRlTnVtYmVyaW5nIiwiY29uIiwiY3VycmVudEFic3RyYWN0TnVtYmVyaW5nIiwibGV2ZWxzIiwiY29tcGF0aWJpbGl0eV8xIiwiZGlzcGxheV9iYWNrZ3JvdW5kX3NoYXBlXzEiLCJ0cmFja19yZXZpc2lvbnNfMSIsInVwZGF0ZV9maWVsZHNfMSIsIlNldHRpbmdzQXR0cmlidXRlcyIsImNvbXBhdGliaWxpdHkiLCJDb21wYXRpYmlsaXR5IiwiVHJhY2tSZXZpc2lvbnMiLCJEaXNwbGF5QmFja2dyb3VuZFNoYXBlIiwiZmluZCIsIkRvTm90RXhwYW5kU2hpZnRSZXR1cm4iLCJ4bWxEYXRhIiwieG1sT2JqIiwic3R5bGVzWG1sRWxlbWVudCIsInhtbEVsbSIsInN0eWxlc0VsZW1lbnRzIiwiZGVmYXVsdHNfMSIsIldPUktBUk9VTkQiLCJmaWVsZF9pbnN0cnVjdGlvbl8xIiwic2R0X2NvbnRlbnRfMSIsInNkdF9wcm9wZXJ0aWVzXzEiLCJhbGlhcyIsIlN0cnVjdHVyZWREb2N1bWVudFRhZ1Byb3BlcnRpZXMiLCJjb250ZW50IiwiU3RydWN0dXJlZERvY3VtZW50VGFnQ29udGVudCIsImJlZ2luUGFyYWdyYXBoIiwiRmllbGRJbnN0cnVjdGlvbiIsImVuZFBhcmFncmFwaCIsImNhcHRpb25MYWJlbCIsImVudHJpZXNGcm9tQm9va21hcmsiLCJjYXB0aW9uTGFiZWxJbmNsdWRpbmdOdW1iZXJzIiwic2VxdWVuY2VBbmRQYWdlTnVtYmVyc1NlcGFyYXRvciIsInRjRmllbGRJZGVudGlmaWVyIiwidGNGaWVsZExldmVsUmFuZ2UiLCJwYWdlTnVtYmVyc0VudHJ5TGV2ZWxzUmFuZ2UiLCJoZWFkaW5nU3R5bGVSYW5nZSIsImVudHJ5QW5kUGFnZU51bWJlclNlcGFyYXRvciIsInNlcUZpZWxkSWRlbnRpZmllckZvclByZWZpeCIsInN0eWxlc1dpdGhMZXZlbHMiLCJzbCIsInN0eWxlTmFtZSIsInVzZUFwcGxpZWRQYXJhZ3JhcGhPdXRsaW5lTGV2ZWwiLCJwcmVzZXJ2ZVRhYkluRW50cmllcyIsInByZXNlcnZlTmV3TGluZUluRW50cmllcyIsImhpZGVUYWJBbmRQYWdlTnVtYmVyc0luV2ViVmlldyIsImFsaWFzXzEiLCJBbGlhcyIsIkFsaWFzQXR0cmlidXRlcyIsIlN0eWxlTGV2ZWwiLCJpbmRleF8xIiwidHJhY2tfcmV2aXNpb25fMSIsIkluc2VydGVkVGV4dFJ1biIsImRlbGV0ZWRfcGFnZV9udW1iZXJfMSIsImRlbGV0ZWRfdGV4dF8xIiwiRGVsZXRlZFRleHRSdW4iLCJkZWxldGVkVGV4dFJ1bldyYXBwZXIiLCJEZWxldGVkVGV4dFJ1bldyYXBwZXIiLCJicmVhayIsIkRlbGV0ZWRQYWdlIiwiRGVsZXRlZE51bWJlck9mUGFnZXMiLCJEZWxldGVkTnVtYmVyT2ZQYWdlc1NlY3Rpb24iLCJEZWxldGVkVGV4dCIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJuZXh0X2NvbXBpbGVyXzEiLCJQYWNrZXIiLCJwcmV0dGlmeSIsInppcCIsImNvbXBpbGVyIiwiY29tcGlsZSIsIkNvbXBpbGVyIiwiSlNaaXAiLCJmb3JtYXR0ZXJfMSIsImltYWdlX3JlcGxhY2VyXzEiLCJudW1iZXJpbmdfcmVwbGFjZXJfMSIsImZvcm1hdHRlciIsIkZvcm1hdHRlciIsImltYWdlUmVwbGFjZXIiLCJJbWFnZVJlcGxhY2VyIiwibnVtYmVyaW5nUmVwbGFjZXIiLCJOdW1iZXJpbmdSZXBsYWNlciIsInByZXR0aWZ5WG1sIiwieG1saWZpZWRGaWxlTWFwcGluZyIsInhtbGlmeUZpbGUiLCJzdWJGaWxlIiwidmVyaWZ5VXBkYXRlRmllbGRzIiwiZG9jdW1lbnRSZWxhdGlvbnNoaXBDb3VudCIsIkRvY3VtZW50UmVsYXRpb25zaGlwcyIsIlJlbGF0aW9uc2hpcENvdW50IiwiZG9jdW1lbnRYbWxEYXRhIiwiZG9jdW1lbnRNZWRpYURhdGFzIiwiZ2V0TWVkaWFEYXRhIiwiUHJvcGVydGllcyIsInN0YW5kYWxvbmUiLCJGaWxlUmVsYXRpb25zaGlwcyIsIkhlYWRlclJlbGF0aW9uc2hpcHMiLCJIZWFkZXJzIiwiaGVhZGVyV3JhcHBlciIsIkZvb3RlclJlbGF0aW9uc2hpcHMiLCJGb290ZXJzIiwiZm9vdGVyV3JhcHBlciIsInRlbXBYbWxEYXRhIiwibWVkaWFEYXRhcyIsImVzY2FwZUZvclhNTCIsImluZGVudF9jb3VudCIsImluZGVudF9zcGFjZXMiLCJ2YWx1ZXMiLCJfZWxlbSIsImljb3VudCIsImluZGVudHMiLCJpbnRlcnJ1cHQiLCJpc1N0cmluZ0NvbnRlbnQiLCJnZXRfYXR0cmlidXRlcyIsIl9jZGF0YSIsImVsZW0iLCJwcm9jZWVkIiwiaW50ZXJydXB0ZWQiLCJpbnN0YW50IiwiRWxlbWVudCIsIlhNTF9DSEFSQUNURVJfTUFQIiwiY3VycmVudFhtbERhdGEiLCJpbWFnZSIsInNlYXJjaCIsImNvbmNyZXRlTnVtYmVyaW5ncyIsInNjaGVtZVRvVHlwZSIsIlJlbGF0aW9uc2hpcFR5cGUiLCJJbXBvcnREb3R4IiwiemlwQ29udGVudCIsImRvY3VtZW50Q29udGVudCIsInJlbGF0aW9uc2hpcENvbnRlbnQiLCJkb2N1bWVudFJlZnMiLCJleHRyYWN0RG9jdW1lbnRSZWZzIiwiZG9jdW1lbnRSZWxhdGlvbnNoaXBzIiwiZmluZFJlZmVyZW5jZUZpbGVzIiwiY3JlYXRlSGVhZGVycyIsImNyZWF0ZUZvb3RlcnMiLCJ0aXRsZVBhZ2VJc0RlZmluZWQiLCJjaGVja0lmVGl0bGVQYWdlSXNEZWZpbmVkIiwic3RhcnRpbmdSZWxhdGlvbnNoaXBJZCIsInJlbGF0aW9uc2hpcEZpbGVJbmZvIiwicmVsIiwieG1sRWxlbWVudCIsImFjYyIsImltcG9ydGVkQ29tcCIsImFkZFJlbGF0aW9uc2hpcFRvV3JhcHBlciIsInJlbGF0aW9uaGlwRmlsZSIsInJlZkZpbGUiLCJ4bWxSZWYiLCJ3cmFwcGVySW1hZ2VzUmVmZXJlbmNlcyIsIklNQUdFIiwiaHlwZXJMaW5rUmVmZXJlbmNlcyIsIkhZUEVSTElOSyIsIl9hdHRyaWJ1dGVzIiwicGFyc2VSZWZJZCIsIklkIiwiVHlwZSIsIlRhcmdldCIsInNlY3Rpb25Qcm9wIiwiaGVhZGVyUHJvcHMiLCJoZWFkZXJzWG1sQXJyYXkiLCJmb290ZXJQcm9wcyIsImZvb3RlcnNYbWxBcnJheSIsIjYwNyIsInZpZGVvIiwicGFyYWdyYXBocyIsImZvcm11bGEiLCJ0ZXh0UnVucyIsInBhcnNlUXVpbGxEZWx0YSIsIm9wcyIsImRlZmF1bHROdW1iZXJpbmciLCJidWlsZFNlY3Rpb24iLCJxdWlsbFBhcmFncmFwaHMiLCJidWlsZFBhcmFncmFwaCIsImRvY3giLCJIRUFESU5HXzEiLCJIRUFESU5HXzIiLCJDRU5URVIiLCJKVVNUSUZJRUQiLCJidWlsZFRleHRSdW4iLCJpdGFsaWMiLCJkZWx0YSIsInRvQmxvYiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sIm1hcHBpbmdzIjoiO0NBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFxQixZQUFJRCxJQUV6QkQsRUFBa0IsWUFBSUMsSUFSeEIsQ0FTR0ssTUFBTSxXQUNULE8sa0JDVkEsSUFBaURMLEVBUzlCLG9CQUFUSyxNQUF1QkEsS0FUZ0JMLEVBU0gsV0FDOUMsT0FBZ0IsU0FBVU0sR0FFaEIsSUFBSUMsRUFBbUIsR0FHdkIsU0FBUyxFQUFvQkMsR0FHNUIsR0FBR0QsRUFBaUJDLEdBQ25CLE9BQU9ELEVBQWlCQyxHQUFVUCxRQUduQyxJQUFJ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LElBQ1YsS0FBUSxJQUNSLEtBQVEsSUFDUixJQUFPLElBQ1AsS0FBUSxJQUNSLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixJQUFPLElBQ1AsT0FBVSxJQUNWLEtBQVEsSUFDUixJQUFPLElBQ1AsS0FBUSxJQUNSLE1BQVMsSUFDVCxJQUFPLElBQ1AsSUFBTyxJQUNQLEtBQVEsSUFDUixJQUFPLElBQ1AsT0FBVSxJQUNWLEtBQVEsSUFDUixLQUFRLElBQ1IsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsS0FBUSxJQUNSLE9BQVUsSUFDVixNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsT0FBVSxJQUNWLE9BQVUsSUFDVixPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixNQUFTLElBQ1QsTUFBUyxJQUNULE9BQVUsSUFDVixPQUFVLElBQ1YsS0FBUSxJQUNSLEtBQVEsSUFDUixLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxRQUFXLElBQ1gsS0FBUSxJQUNSLElBQU8sSUFDUCxNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsR0FBTSxJQUNOLEdBQU0sSUFDTixHQUFNLElBQ04sUUFBVyxJQUNYLEdBQU0sSUFDTixJQUFPLElBQ1AsTUFBUyxJQUNULElBQU8sSUFDUCxRQUFXLElBQ1gsSUFBTyxJQUNQLElBQU8sSUFDUCxJQUFPLElBQ1AsTUFBUyxJQUNULE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxRQUFXLElBQ1gsS0FBUSxJQUNSLElBQU8sSUFDUCxNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsR0FBTSxJQUNOLEdBQU0sSUFDTixHQUFNLElBQ04sUUFBVyxJQUNYLEdBQU0sSUFDTixJQUFPLElBQ1AsT0FBVSxJQUNWLE1BQVMsSUFDVCxJQUFPLElBQ1AsUUFBVyxJQUNYLElBQU8sSUFDUCxJQUFPLElBQ1AsSUFBTyxJQUNQLE1BQVMsSUFDVCxTQUFZLElBQ1osTUFBUyxJQUNULElBQU8sSUFDUCxLQUFRLEtBQ1IsS0FBUSxLQUNSLE9BQVUsS0FDVixLQUFRLEtBQ1IsSUFBTyxLQUNQLElBQU8sS0FDUCxJQUFPLEtBQ1AsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxPQUFVLEtBQ1YsT0FBVSxLQUNWLEtBQVEsS0FDUixPQUFVLEtBQ1YsT0FBVSxLQUNWLE1BQVMsS0FDVCxNQUFTLEtBQ1QsT0FBVSxLQUNWLE9BQVUsS0FDVixNQUFTLEtBQ1QsTUFBUyxLQUNULEtBQVEsS0FDUixNQUFTLEtBQ1QsT0FBVSxLQUNWLEtBQVEsS0FDUixNQUFTLEtBQ1QsUUFBVyxLQUNYLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsT0FBVSxLQUNWLEtBQVEsS0FDUixNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxLQUFRLEtBQ1IsTUFBUyxLQUNULEdBQU0sS0FDTixLQUFRLEtBQ1IsSUFBTyxLQUNQLE1BQVMsS0FDVCxPQUFVLEtBQ1YsTUFBUyxLQUNULEtBQVEsS0FDUixNQUFTLEtBQ1QsSUFBTyxLQUNQLElBQU8sS0FDUCxHQUFNLEtBQ04sSUFBTyxLQUNQLElBQU8sS0FDUCxJQUFPLEtBQ1AsT0FBVSxLQUNWLElBQU8sS0FDUCxLQUFRLEtBQ1IsTUFBUyxLQUNULEdBQU0sS0FDTixNQUFTLEtBQ1QsR0FBTSxLQUNOLEdBQU0sS0FDTixJQUFPLEtBQ1AsSUFBTyxLQUNQLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLE1BQVMsS0FDVCxPQUFVLEtBQ1YsS0FBUSxLQUNSLEtBQVEsS0FDUixNQUFTLEtBQ1QsTUFBUyxLQUNULE9BQVUsS0FDVixPQUFV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andGLEdBQVksQ0FHakRQLFFBQVMsSUFPVixPQUhBMHdGLEVBQW9CbndGLEdBQVVHLEtBQUtULEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVN5d0YsR0FHcEV4d0YsRUFBT0QsUUNqQlJ5d0YsQ0FBb0IsSyxNREZ2QkQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlF1aWxsVG9Xb3JkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlF1aWxsVG9Xb3JkXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZG9jeFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJkb2N4XCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMzgpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTQxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTU3KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTU4KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjE1KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjEpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzYpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyMzApKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oODkpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5MCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oOTIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyMzgpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5MykpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTcpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTYxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTYyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTY0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyMTIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxOSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjE0KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcbnV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xudmFyIFdyaXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59O1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuXG5cbnZhciBiYXNlNjQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MylcbnZhciBpZWVlNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDQpXG52YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNTQpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg0KSkpXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNwYWNlVHlwZTtcclxuKGZ1bmN0aW9uIChTcGFjZVR5cGUpIHtcclxuICAgIFNwYWNlVHlwZVtcIkRFRkFVTFRcIl0gPSBcImRlZmF1bHRcIjtcclxuICAgIFNwYWNlVHlwZVtcIlBSRVNFUlZFXCJdID0gXCJwcmVzZXJ2ZVwiO1xyXG59KShTcGFjZVR5cGUgPSBleHBvcnRzLlNwYWNlVHlwZSB8fCAoZXhwb3J0cy5TcGFjZVR5cGUgPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGVtcGhhc2lzX21hcmtfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xyXG5jb25zdCBmb3JtYXR0aW5nXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcclxuY29uc3QgcnVuX2ZvbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcclxuY29uc3Qgc2NyaXB0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KTtcclxuY29uc3Qgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xyXG5jb25zdCB1bmRlcmxpbmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xyXG5jbGFzcyBSdW5Qcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5JZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6clByXCIpO1xyXG4gICAgICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmJvbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBmb3JtYXR0aW5nXzEuQm9sZCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChvcHRpb25zLmJvbGRDb21wbGV4U2NyaXB0ID09PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5ib2xkKSB8fCBvcHRpb25zLmJvbGRDb21wbGV4U2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLkJvbGRDb21wbGV4U2NyaXB0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5pdGFsaWNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLkl0YWxpY3MoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgob3B0aW9ucy5pdGFsaWNzQ29tcGxleFNjcmlwdCA9PT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuaXRhbGljcykgfHwgb3B0aW9ucy5pdGFsaWNzQ29tcGxleFNjcmlwdCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5JdGFsaWNzQ29tcGxleFNjcmlwdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudW5kZXJsaW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgdW5kZXJsaW5lXzEuVW5kZXJsaW5lKG9wdGlvbnMudW5kZXJsaW5lLnR5cGUsIG9wdGlvbnMudW5kZXJsaW5lLmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmVtcGhhc2lzTWFyaykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGVtcGhhc2lzX21hcmtfMS5FbXBoYXNpc01hcmsob3B0aW9ucy5lbXBoYXNpc01hcmsudHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5jb2xvcikge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5Db2xvcihvcHRpb25zLmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBmb3JtYXR0aW5nXzEuU2l6ZShvcHRpb25zLnNpemUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3pDcyA9IG9wdGlvbnMuc2l6ZUNvbXBsZXhTY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnNpemVDb21wbGV4U2NyaXB0ID09PSB0cnVlID8gb3B0aW9ucy5zaXplIDogb3B0aW9ucy5zaXplQ29tcGxleFNjcmlwdDtcclxuICAgICAgICBpZiAoc3pDcykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5TaXplQ29tcGxleFNjcmlwdChzekNzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnJpZ2h0VG9MZWZ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLlJpZ2h0VG9MZWZ0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5zbWFsbENhcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBmb3JtYXR0aW5nXzEuU21hbGxDYXBzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5hbGxDYXBzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLkNhcHMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmlrZSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5TdHJpa2UoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmRvdWJsZVN0cmlrZSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5Eb3VibGVTdHJpa2UoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnN1YlNjcmlwdCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHNjcmlwdF8xLlN1YlNjcmlwdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3VwZXJTY3JpcHQpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBzY3JpcHRfMS5TdXBlclNjcmlwdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3R5bGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBzdHlsZV8xLlN0eWxlKG9wdGlvbnMuc3R5bGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZm9udCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZm9udCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBydW5fZm9udHNfMS5SdW5Gb250cyhvcHRpb25zLmZvbnQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChcIm5hbWVcIiBpbiBvcHRpb25zLmZvbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHVzaChuZXcgcnVuX2ZvbnRzXzEuUnVuRm9udHMob3B0aW9ucy5mb250Lm5hbWUsIG9wdGlvbnMuZm9udC5oaW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2gobmV3IHJ1bl9mb250c18xLlJ1bkZvbnRzKG9wdGlvbnMuZm9udCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmhpZ2hsaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5IaWdobGlnaHQob3B0aW9ucy5oaWdobGlnaHQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0Q3MgPSBvcHRpb25zLmhpZ2hsaWdodENvbXBsZXhTY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmhpZ2hsaWdodENvbXBsZXhTY3JpcHQgPT09IHRydWVcclxuICAgICAgICAgICAgPyBvcHRpb25zLmhpZ2hsaWdodFxyXG4gICAgICAgICAgICA6IG9wdGlvbnMuaGlnaGxpZ2h0Q29tcGxleFNjcmlwdDtcclxuICAgICAgICBpZiAoaGlnaGxpZ2h0Q3MpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBmb3JtYXR0aW5nXzEuSGlnaGxpZ2h0Q29tcGxleFNjcmlwdChoaWdobGlnaHRDcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5jaGFyYWN0ZXJTcGFjaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLkNoYXJhY3RlclNwYWNpbmcob3B0aW9ucy5jaGFyYWN0ZXJTcGFjaW5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNoYWRpbmcgPSBvcHRpb25zLnNoYWRpbmcgfHwgb3B0aW9ucy5zaGFkb3c7XHJcbiAgICAgICAgaWYgKHNoYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBmb3JtYXR0aW5nXzEuU2hhZGluZyhzaGFkaW5nLnR5cGUsIHNoYWRpbmcuZmlsbCwgc2hhZGluZy5jb2xvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaGRDcyA9IG9wdGlvbnMuc2hhZGluZ0NvbXBsZXhTY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnNoYWRpbmdDb21wbGV4U2NyaXB0ID09PSB0cnVlID8gc2hhZGluZyA6IG9wdGlvbnMuc2hhZGluZ0NvbXBsZXhTY3JpcHQ7XHJcbiAgICAgICAgaWYgKHNoZENzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgZm9ybWF0dGluZ18xLlNoYWRvd0NvbXBsZXhTY3JpcHQoc2hkQ3MudHlwZSwgc2hkQ3MuZmlsbCwgc2hkQ3MuY29sb3IpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdXNoKGl0ZW0pIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJ1blByb3BlcnRpZXMgPSBSdW5Qcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2NCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIERvY3VtZW50QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXHJcbiAgICAgICAgICAgIG1jOiBcInhtbG5zOm1jXCIsXHJcbiAgICAgICAgICAgIG86IFwieG1sbnM6b1wiLFxyXG4gICAgICAgICAgICByOiBcInhtbG5zOnJcIixcclxuICAgICAgICAgICAgbTogXCJ4bWxuczptXCIsXHJcbiAgICAgICAgICAgIHY6IFwieG1sbnM6dlwiLFxyXG4gICAgICAgICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcclxuICAgICAgICAgICAgd3A6IFwieG1sbnM6d3BcIixcclxuICAgICAgICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxyXG4gICAgICAgICAgICB3OiBcInhtbG5zOndcIixcclxuICAgICAgICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXHJcbiAgICAgICAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcclxuICAgICAgICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxyXG4gICAgICAgICAgICB3bmU6IFwieG1sbnM6d25lXCIsXHJcbiAgICAgICAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcclxuICAgICAgICAgICAgSWdub3JhYmxlOiBcIm1jOklnbm9yYWJsZVwiLFxyXG4gICAgICAgICAgICBjcDogXCJ4bWxuczpjcFwiLFxyXG4gICAgICAgICAgICBkYzogXCJ4bWxuczpkY1wiLFxyXG4gICAgICAgICAgICBkY3Rlcm1zOiBcInhtbG5zOmRjdGVybXNcIixcclxuICAgICAgICAgICAgZGNtaXR5cGU6IFwieG1sbnM6ZGNtaXR5cGVcIixcclxuICAgICAgICAgICAgeHNpOiBcInhtbG5zOnhzaVwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInhzaTp0eXBlXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvY3VtZW50QXR0cmlidXRlcyA9IERvY3VtZW50QXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjYxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjc5KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzM4KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTMyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNDgpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg3MSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDExMykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzM5KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNDQpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMzEpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMzApKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNDYpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oNilcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgYnJlYWtfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpO1xyXG5jb25zdCBmaWVsZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XHJcbmNvbnN0IHBhZ2VfbnVtYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MCk7XHJcbmNvbnN0IHByb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcbmNvbnN0IHRleHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xyXG52YXIgUGFnZU51bWJlcjtcclxuKGZ1bmN0aW9uIChQYWdlTnVtYmVyKSB7XHJcbiAgICBQYWdlTnVtYmVyW1wiQ1VSUkVOVFwiXSA9IFwiQ1VSUkVOVFwiO1xyXG4gICAgUGFnZU51bWJlcltcIlRPVEFMX1BBR0VTXCJdID0gXCJUT1RBTF9QQUdFU1wiO1xyXG4gICAgUGFnZU51bWJlcltcIlRPVEFMX1BBR0VTX0lOX1NFQ1RJT05cIl0gPSBcIlRPVEFMX1BBR0VTX0lOX1NFQ1RJT05cIjtcclxufSkoUGFnZU51bWJlciA9IGV4cG9ydHMuUGFnZU51bWJlciB8fCAoZXhwb3J0cy5QYWdlTnVtYmVyID0ge30pKTtcclxuY2xhc3MgUnVuIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpyXCIpO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IG5ldyBwcm9wZXJ0aWVzXzEuUnVuUHJvcGVydGllcyhvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLkNVUlJFTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5CZWdpbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwYWdlX251bWJlcl8xLlBhZ2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5TZXBhcmF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLkVuZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBhZ2VOdW1iZXIuVE9UQUxfUEFHRVM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5CZWdpbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwYWdlX251bWJlcl8xLk51bWJlck9mUGFnZXMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5TZXBhcmF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLkVuZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBhZ2VOdW1iZXIuVE9UQUxfUEFHRVNfSU5fU0VDVElPTjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLkJlZ2luKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHBhZ2VfbnVtYmVyXzEuTnVtYmVyT2ZQYWdlc1NlY3Rpb24oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5TZXBhcmF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLkVuZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRleHRfMS5UZXh0KGNoaWxkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy50ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0ZXh0XzEuVGV4dChvcHRpb25zLnRleHQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBicmVhaygpIHtcclxuICAgICAgICB0aGlzLnJvb3Quc3BsaWNlKDEsIDAsIG5ldyBicmVha18xLkJyZWFrKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUnVuID0gUnVuO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgRmllbGRDaGFyYWN0ZXJUeXBlO1xyXG4oZnVuY3Rpb24gKEZpZWxkQ2hhcmFjdGVyVHlwZSkge1xyXG4gICAgRmllbGRDaGFyYWN0ZXJUeXBlW1wiQkVHSU5cIl0gPSBcImJlZ2luXCI7XHJcbiAgICBGaWVsZENoYXJhY3RlclR5cGVbXCJFTkRcIl0gPSBcImVuZFwiO1xyXG4gICAgRmllbGRDaGFyYWN0ZXJUeXBlW1wiU0VQQVJBVEVcIl0gPSBcInNlcGFyYXRlXCI7XHJcbn0pKEZpZWxkQ2hhcmFjdGVyVHlwZSB8fCAoRmllbGRDaGFyYWN0ZXJUeXBlID0ge30pKTtcclxuY2xhc3MgRmlkQ2hhckF0dHJzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHR5cGU6IFwidzpmbGRDaGFyVHlwZVwiLCBkaXJ0eTogXCJ3OmRpcnR5XCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBCZWdpbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRpcnR5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5CRUdJTiwgZGlydHkgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQmVnaW4gPSBCZWdpbjtcclxuY2xhc3MgU2VwYXJhdGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkaXJ0eSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpmbGRDaGFyXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGaWRDaGFyQXR0cnMoeyB0eXBlOiBGaWVsZENoYXJhY3RlclR5cGUuU0VQQVJBVEUsIGRpcnR5IH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNlcGFyYXRlID0gU2VwYXJhdGU7XHJcbmNsYXNzIEVuZCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRpcnR5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5FTkQsIGRpcnR5IH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkVuZCA9IEVuZDtcclxuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIFVuZGVybGluZVR5cGU7XHJcbihmdW5jdGlvbiAoVW5kZXJsaW5lVHlwZSkge1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIlNJTkdMRVwiXSA9IFwic2luZ2xlXCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiV09SRFNcIl0gPSBcIndvcmRzXCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiRE9VQkxFXCJdID0gXCJkb3VibGVcIjtcclxuICAgIFVuZGVybGluZVR5cGVbXCJUSElDS1wiXSA9IFwidGhpY2tcIjtcclxuICAgIFVuZGVybGluZVR5cGVbXCJET1RURURcIl0gPSBcImRvdHRlZFwiO1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIkRPVFRFREhFQVZZXCJdID0gXCJkb3R0ZWRIZWF2eVwiO1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIkRBU0hcIl0gPSBcImRhc2hcIjtcclxuICAgIFVuZGVybGluZVR5cGVbXCJEQVNIRURIRUFWWVwiXSA9IFwiZGFzaGVkSGVhdnlcIjtcclxuICAgIFVuZGVybGluZVR5cGVbXCJEQVNITE9OR1wiXSA9IFwiZGFzaExvbmdcIjtcclxuICAgIFVuZGVybGluZVR5cGVbXCJEQVNITE9OR0hFQVZZXCJdID0gXCJkYXNoTG9uZ0hlYXZ5XCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiRE9UREFTSFwiXSA9IFwiZG90RGFzaFwiO1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIkRBU0hET1RIRUFWWVwiXSA9IFwiZGFzaERvdEhlYXZ5XCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiRE9URE9UREFTSFwiXSA9IFwiZG90RG90RGFzaFwiO1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIkRBU0hET1RET1RIRUFWWVwiXSA9IFwiZGFzaERvdERvdEhlYXZ5XCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiV0FWRVwiXSA9IFwid2F2ZVwiO1xyXG4gICAgVW5kZXJsaW5lVHlwZVtcIldBVllIRUFWWVwiXSA9IFwid2F2eUhlYXZ5XCI7XHJcbiAgICBVbmRlcmxpbmVUeXBlW1wiV0FWWURPVUJMRVwiXSA9IFwid2F2eURvdWJsZVwiO1xyXG59KShVbmRlcmxpbmVUeXBlID0gZXhwb3J0cy5VbmRlcmxpbmVUeXBlIHx8IChleHBvcnRzLlVuZGVybGluZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBCYXNlVW5kZXJsaW5lIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodW5kZXJsaW5lVHlwZSwgY29sb3IpIHtcclxuICAgICAgICBzdXBlcihcInc6dVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB1bmRlcmxpbmVUeXBlLFxyXG4gICAgICAgICAgICBjb2xvcjogY29sb3IsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQmFzZVVuZGVybGluZSA9IEJhc2VVbmRlcmxpbmU7XHJcbmNsYXNzIFVuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IodW5kZXJsaW5lVHlwZSA9IFVuZGVybGluZVR5cGUuU0lOR0xFLCBjb2xvcikge1xyXG4gICAgICAgIHN1cGVyKHVuZGVybGluZVR5cGUsIGNvbG9yKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlVuZGVybGluZSA9IFVuZGVybGluZTtcclxuY2xhc3MgRGFzaFVuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkYXNoXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGFzaFVuZGVybGluZSA9IERhc2hVbmRlcmxpbmU7XHJcbmNsYXNzIERhc2hEb3REb3RIZWF2eVVuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkYXNoRG90RG90SGVhdnlcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EYXNoRG90RG90SGVhdnlVbmRlcmxpbmUgPSBEYXNoRG90RG90SGVhdnlVbmRlcmxpbmU7XHJcbmNsYXNzIERhc2hEb3RIZWF2eVVuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkYXNoRG90SGVhdnlcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EYXNoRG90SGVhdnlVbmRlcmxpbmUgPSBEYXNoRG90SGVhdnlVbmRlcmxpbmU7XHJcbmNsYXNzIERhc2hMb25nVW5kZXJsaW5lIGV4dGVuZHMgQmFzZVVuZGVybGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImRhc2hMb25nXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGFzaExvbmdVbmRlcmxpbmUgPSBEYXNoTG9uZ1VuZGVybGluZTtcclxuY2xhc3MgRGFzaExvbmdIZWF2eVVuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkYXNoTG9uZ0hlYXZ5XCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGFzaExvbmdIZWF2eVVuZGVybGluZSA9IERhc2hMb25nSGVhdnlVbmRlcmxpbmU7XHJcbmNsYXNzIERvdERhc2hVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZG90RGFzaFwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvdERhc2hVbmRlcmxpbmUgPSBEb3REYXNoVW5kZXJsaW5lO1xyXG5jbGFzcyBEb3REb3REYXNoVW5kZXJsaW5lIGV4dGVuZHMgQmFzZVVuZGVybGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImRvdERvdERhc2hcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb3REb3REYXNoVW5kZXJsaW5lID0gRG90RG90RGFzaFVuZGVybGluZTtcclxuY2xhc3MgRG90dGVkVW5kZXJsaW5lIGV4dGVuZHMgQmFzZVVuZGVybGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImRvdHRlZFwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvdHRlZFVuZGVybGluZSA9IERvdHRlZFVuZGVybGluZTtcclxuY2xhc3MgRG90dGVkSGVhdnlVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZG90dGVkSGVhdnlcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb3R0ZWRIZWF2eVVuZGVybGluZSA9IERvdHRlZEhlYXZ5VW5kZXJsaW5lO1xyXG5jbGFzcyBEb3VibGVVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZG91YmxlXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRG91YmxlVW5kZXJsaW5lID0gRG91YmxlVW5kZXJsaW5lO1xyXG5jbGFzcyBTaW5nbGVVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwic2luZ2xlXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2luZ2xlVW5kZXJsaW5lID0gU2luZ2xlVW5kZXJsaW5lO1xyXG5jbGFzcyBUaGlja1VuZGVybGluZSBleHRlbmRzIEJhc2VVbmRlcmxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ0aGlja1wiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRoaWNrVW5kZXJsaW5lID0gVGhpY2tVbmRlcmxpbmU7XHJcbmNsYXNzIFdhdmVVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwid2F2ZVwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLldhdmVVbmRlcmxpbmUgPSBXYXZlVW5kZXJsaW5lO1xyXG5jbGFzcyBXYXZ5RG91YmxlVW5kZXJsaW5lIGV4dGVuZHMgQmFzZVVuZGVybGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIndhdnlEb3VibGVcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5XYXZ5RG91YmxlVW5kZXJsaW5lID0gV2F2eURvdWJsZVVuZGVybGluZTtcclxuY2xhc3MgV2F2eUhlYXZ5VW5kZXJsaW5lIGV4dGVuZHMgQmFzZVVuZGVybGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIndhdnlIZWF2eVwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLldhdnlIZWF2eVVuZGVybGluZSA9IFdhdnlIZWF2eVVuZGVybGluZTtcclxuY2xhc3MgV29yZHNVbmRlcmxpbmUgZXh0ZW5kcyBCYXNlVW5kZXJsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwid29yZHNcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Xb3Jkc1VuZGVybGluZSA9IFdvcmRzVW5kZXJsaW5lO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcmFuZG9tRnJvbVNlZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMCk7XG5cbnZhciBPUklHSU5BTCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWl8tJztcbnZhciBhbHBoYWJldDtcbnZhciBwcmV2aW91c1NlZWQ7XG5cbnZhciBzaHVmZmxlZDtcblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgc2h1ZmZsZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2V0Q2hhcmFjdGVycyhfYWxwaGFiZXRfKSB7XG4gICAgaWYgKCFfYWxwaGFiZXRfKSB7XG4gICAgICAgIGlmIChhbHBoYWJldCAhPT0gT1JJR0lOQUwpIHtcbiAgICAgICAgICAgIGFscGhhYmV0ID0gT1JJR0lOQUw7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX2FscGhhYmV0XyA9PT0gYWxwaGFiZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfYWxwaGFiZXRfLmxlbmd0aCAhPT0gT1JJR0lOQUwubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ3VzdG9tIGFscGhhYmV0IGZvciBzaG9ydGlkIG11c3QgYmUgJyArIE9SSUdJTkFMLmxlbmd0aCArICcgdW5pcXVlIGNoYXJhY3RlcnMuIFlvdSBzdWJtaXR0ZWQgJyArIF9hbHBoYWJldF8ubGVuZ3RoICsgJyBjaGFyYWN0ZXJzOiAnICsgX2FscGhhYmV0Xyk7XG4gICAgfVxuXG4gICAgdmFyIHVuaXF1ZSA9IF9hbHBoYWJldF8uc3BsaXQoJycpLmZpbHRlcihmdW5jdGlvbihpdGVtLCBpbmQsIGFycil7XG4gICAgICAgcmV0dXJuIGluZCAhPT0gYXJyLmxhc3RJbmRleE9mKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgaWYgKHVuaXF1ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXN0b20gYWxwaGFiZXQgZm9yIHNob3J0aWQgbXVzdCBiZSAnICsgT1JJR0lOQUwubGVuZ3RoICsgJyB1bmlxdWUgY2hhcmFjdGVycy4gVGhlc2UgY2hhcmFjdGVycyB3ZXJlIG5vdCB1bmlxdWU6ICcgKyB1bmlxdWUuam9pbignLCAnKSk7XG4gICAgfVxuXG4gICAgYWxwaGFiZXQgPSBfYWxwaGFiZXRfO1xuICAgIHJlc2V0KCk7XG59XG5cbmZ1bmN0aW9uIGNoYXJhY3RlcnMoX2FscGhhYmV0Xykge1xuICAgIHNldENoYXJhY3RlcnMoX2FscGhhYmV0Xyk7XG4gICAgcmV0dXJuIGFscGhhYmV0O1xufVxuXG5mdW5jdGlvbiBzZXRTZWVkKHNlZWQpIHtcbiAgICByYW5kb21Gcm9tU2VlZC5zZWVkKHNlZWQpO1xuICAgIGlmIChwcmV2aW91c1NlZWQgIT09IHNlZWQpIHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcHJldmlvdXNTZWVkID0gc2VlZDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNodWZmbGUoKSB7XG4gICAgaWYgKCFhbHBoYWJldCkge1xuICAgICAgICBzZXRDaGFyYWN0ZXJzKE9SSUdJTkFMKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlQXJyYXkgPSBhbHBoYWJldC5zcGxpdCgnJyk7XG4gICAgdmFyIHRhcmdldEFycmF5ID0gW107XG4gICAgdmFyIHIgPSByYW5kb21Gcm9tU2VlZC5uZXh0VmFsdWUoKTtcbiAgICB2YXIgY2hhcmFjdGVySW5kZXg7XG5cbiAgICB3aGlsZSAoc291cmNlQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICByID0gcmFuZG9tRnJvbVNlZWQubmV4dFZhbHVlKCk7XG4gICAgICAgIGNoYXJhY3RlckluZGV4ID0gTWF0aC5mbG9vcihyICogc291cmNlQXJyYXkubGVuZ3RoKTtcbiAgICAgICAgdGFyZ2V0QXJyYXkucHVzaChzb3VyY2VBcnJheS5zcGxpY2UoY2hhcmFjdGVySW5kZXgsIDEpWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldEFycmF5LmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBnZXRTaHVmZmxlZCgpIHtcbiAgICBpZiAoc2h1ZmZsZWQpIHtcbiAgICAgICAgcmV0dXJuIHNodWZmbGVkO1xuICAgIH1cbiAgICBzaHVmZmxlZCA9IHNodWZmbGUoKTtcbiAgICByZXR1cm4gc2h1ZmZsZWQ7XG59XG5cbi8qKlxuICogbG9va3VwIHNodWZmbGVkIGxldHRlclxuICogQHBhcmFtIGluZGV4XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBsb29rdXAoaW5kZXgpIHtcbiAgICB2YXIgYWxwaGFiZXRTaHVmZmxlZCA9IGdldFNodWZmbGVkKCk7XG4gICAgcmV0dXJuIGFscGhhYmV0U2h1ZmZsZWRbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBnZXQgKCkge1xuICByZXR1cm4gYWxwaGFiZXQgfHwgT1JJR0lOQUw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldDogZ2V0LFxuICAgIGNoYXJhY3RlcnM6IGNoYXJhY3RlcnMsXG4gICAgc2VlZDogc2V0U2VlZCxcbiAgICBsb29rdXA6IGxvb2t1cCxcbiAgICBzaHVmZmxlZDogZ2V0U2h1ZmZsZWRcbn07XG5cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBhbGlnbm1lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xyXG5jb25zdCBiaWRpcmVjdGlvbmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSk7XHJcbmNvbnN0IGJvcmRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XHJcbmNvbnN0IGluZGVudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XHJcbmNvbnN0IGtlZXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xyXG5jb25zdCBwYWdlX2JyZWFrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KTtcclxuY29uc3Qgc3BhY2luZ18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSk7XHJcbmNvbnN0IHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcclxuY29uc3QgdGFiX3N0b3BfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODMpO1xyXG5jb25zdCB1bm9yZGVyZWRfbGlzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NCk7XHJcbmNvbnN0IGxpbmtzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcclxuY29uc3QgZm9ybWF0dGluZ18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7XHJcbmNsYXNzIFBhcmFncmFwaFByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLklnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpwUHJcIik7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgYm9yZGVyXzEuQm9yZGVyKG9wdGlvbnMuYm9yZGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNwYWNpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBzcGFjaW5nXzEuU3BhY2luZyhvcHRpb25zLnNwYWNpbmcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0bGluZUxldmVsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBsaW5rc18xLk91dGxpbmVMZXZlbChvcHRpb25zLm91dGxpbmVMZXZlbCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5hbGlnbm1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBhbGlnbm1lbnRfMS5BbGlnbm1lbnQob3B0aW9ucy5hbGlnbm1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGVhZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHN0eWxlXzEuU3R5bGUob3B0aW9ucy5oZWFkaW5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmJpZGlyZWN0aW9uYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyBiaWRpcmVjdGlvbmFsXzEuQmlkaXJlY3Rpb25hbCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudGhlbWF0aWNCcmVhaykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGJvcmRlcl8xLlRoZW1hdGljQnJlYWsoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnBhZ2VCcmVha0JlZm9yZSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHBhZ2VfYnJlYWtfMS5QYWdlQnJlYWtCZWZvcmUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRleHR1YWxTcGFjaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgc3BhY2luZ18xLkNvbnRleHR1YWxTcGFjaW5nKG9wdGlvbnMuY29udGV4dHVhbFNwYWNpbmcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgaW5kZW50XzEuSW5kZW50KG9wdGlvbnMuaW5kZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGtlZXBfMS5LZWVwTGluZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmtlZXBOZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcga2VlcF8xLktlZXBOZXh0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy50YWJTdG9wcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhYlN0b3Agb2Ygb3B0aW9ucy50YWJTdG9wcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyB0YWJfc3RvcF8xLlRhYlN0b3AodGFiU3RvcC50eXBlLCB0YWJTdG9wLnBvc2l0aW9uLCB0YWJTdG9wLmxlYWRlcikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChuZXcgc3R5bGVfMS5TdHlsZShvcHRpb25zLnN0eWxlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmJ1bGxldCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHN0eWxlXzEuU3R5bGUoXCJMaXN0UGFyYWdyYXBoXCIpKTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoKG5ldyB1bm9yZGVyZWRfbGlzdF8xLk51bWJlclByb3BlcnRpZXMoMSwgb3B0aW9ucy5idWxsZXQubGV2ZWwpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubnVtYmVyaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5udW1iZXJpbmcuY3VzdG9tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2gobmV3IHN0eWxlXzEuU3R5bGUoXCJMaXN0UGFyYWdyYXBoXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHVub3JkZXJlZF9saXN0XzEuTnVtYmVyUHJvcGVydGllcyhvcHRpb25zLm51bWJlcmluZy5yZWZlcmVuY2UsIG9wdGlvbnMubnVtYmVyaW5nLmxldmVsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnJpZ2h0VGFiU3RvcCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHRhYl9zdG9wXzEuVGFiU3RvcCh0YWJfc3RvcF8xLlRhYlN0b3BUeXBlLlJJR0hULCBvcHRpb25zLnJpZ2h0VGFiU3RvcCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5sZWZ0VGFiU3RvcCkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IHRhYl9zdG9wXzEuVGFiU3RvcCh0YWJfc3RvcF8xLlRhYlN0b3BUeXBlLkxFRlQsIG9wdGlvbnMubGVmdFRhYlN0b3ApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2hhZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2gobmV3IGZvcm1hdHRpbmdfMS5TaGFkaW5nKG9wdGlvbnMuc2hhZGluZy50eXBlLCBvcHRpb25zLnNoYWRpbmcuZmlsbCwgb3B0aW9ucy5zaGFkaW5nLmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVzaChpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goaXRlbSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QYXJhZ3JhcGhQcm9wZXJ0aWVzID0gUGFyYWdyYXBoUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgbWF0aF9iZWdpbm5pbmdfY2hhcmFjdGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1Nik7XHJcbmNvbnN0IG1hdGhfZW5kaW5nX2NoYXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjU3KTtcclxuY2xhc3MgTWF0aEJyYWNrZXRQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpkUHJcIik7XHJcbiAgICAgICAgaWYgKCEhb3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9iZWdpbm5pbmdfY2hhcmFjdGVyXzEuTWF0aEJlZ2lubmluZ0NoYXJhY3RlcihvcHRpb25zLmJlZ2lubmluZ0NoYXJhY3RlcikpO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9lbmRpbmdfY2hhcl8xLk1hdGhFbmRpbmdDaGFyYWN0ZXIob3B0aW9ucy5lbmRpbmdDaGFyYWN0ZXIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoQnJhY2tldFByb3BlcnRpZXMgPSBNYXRoQnJhY2tldFByb3BlcnRpZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjcwKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNDIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNsYXNzIEJhc2VYbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iocm9vdEtleSkge1xyXG4gICAgICAgIHRoaXMuZGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucm9vdEtleSA9IHJvb3RLZXk7XHJcbiAgICB9XHJcbiAgICBnZXQgSXNEZWxldGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZWQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CYXNlWG1sQ29tcG9uZW50ID0gQmFzZVhtbENvbXBvbmVudDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypqc2xpbnQgbm9kZTp0cnVlICovXHJcblxyXG52YXIgeG1sMmpzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XHJcbnZhciB4bWwyanNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTU1KTtcclxudmFyIGpzMnhtbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xyXG52YXIganNvbjJ4bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Nik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICB4bWwyanM6IHhtbDJqcyxcclxuICB4bWwyanNvbjogeG1sMmpzb24sXHJcbiAganMyeG1sOiBqczJ4bWwsXHJcbiAganNvbjJ4bWw6IGpzb24yeG1sXHJcbn07XHJcblxuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5leHBvcnRzLkR1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oNjApO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUwKTtcblxuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MsIHNldEltbWVkaWF0ZSwgZ2xvYmFsKSB7Ly8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG51dGlsLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OSlcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXyg1OSkuc2V0SW1tZWRpYXRlLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKSlcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufVxuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSkuaXNBcnJheTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICBjb3B5T3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBrZXksIGNvcHkgPSB7fTtcclxuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgIGNvcHlba2V5XSA9IG9wdGlvbnNba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcHk7XHJcbiAgfSxcclxuXHJcbiAgZW5zdXJlRmxhZ0V4aXN0czogZnVuY3Rpb24gKGl0ZW0sIG9wdGlvbnMpIHtcclxuICAgIGlmICghKGl0ZW0gaW4gb3B0aW9ucykgfHwgdHlwZW9mIG9wdGlvbnNbaXRlbV0gIT09ICdib29sZWFuJykge1xyXG4gICAgICBvcHRpb25zW2l0ZW1dID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZW5zdXJlU3BhY2VzRXhpc3RzOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKCEoJ3NwYWNlcycgaW4gb3B0aW9ucykgfHwgKHR5cGVvZiBvcHRpb25zLnNwYWNlcyAhPT0gJ251bWJlcicgJiYgdHlwZW9mIG9wdGlvbnMuc3BhY2VzICE9PSAnc3RyaW5nJykpIHtcclxuICAgICAgb3B0aW9ucy5zcGFjZXMgPSAwO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGVuc3VyZUFsd2F5c0FycmF5RXhpc3RzOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKCEoJ2Fsd2F5c0FycmF5JyBpbiBvcHRpb25zKSB8fCAodHlwZW9mIG9wdGlvbnMuYWx3YXlzQXJyYXkgIT09ICdib29sZWFuJyAmJiAhaXNBcnJheShvcHRpb25zLmFsd2F5c0FycmF5KSkpIHtcclxuICAgICAgb3B0aW9ucy5hbHdheXNBcnJheSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGVuc3VyZUtleUV4aXN0czogZnVuY3Rpb24gKGtleSwgb3B0aW9ucykge1xyXG4gICAgaWYgKCEoa2V5ICsgJ0tleScgaW4gb3B0aW9ucykgfHwgdHlwZW9mIG9wdGlvbnNba2V5ICsgJ0tleSddICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBvcHRpb25zW2tleSArICdLZXknXSA9IG9wdGlvbnMuY29tcGFjdCA/ICdfJyArIGtleSA6IGtleTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBjaGVja0ZuRXhpc3RzOiBmdW5jdGlvbiAoa2V5LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4ga2V5ICsgJ0ZuJyBpbiBvcHRpb25zO1xyXG4gIH1cclxuXHJcbn07XHJcblxuXG4vKioqLyB9KSxcbi8qIDMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICBpc0FycmF5OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkpIHtcclxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLy8gZmFsbGJhY2sgZm9yIG9sZGVyIGJyb3dzZXJzIGxpa2UgIElFIDhcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIHZhbHVlICkgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbiAgfVxyXG5cclxufTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIEVtcGhhc2lzTWFya1R5cGU7XHJcbihmdW5jdGlvbiAoRW1waGFzaXNNYXJrVHlwZSkge1xyXG4gICAgRW1waGFzaXNNYXJrVHlwZVtcIkRPVFwiXSA9IFwiZG90XCI7XHJcbn0pKEVtcGhhc2lzTWFya1R5cGUgPSBleHBvcnRzLkVtcGhhc2lzTWFya1R5cGUgfHwgKGV4cG9ydHMuRW1waGFzaXNNYXJrVHlwZSA9IHt9KSk7XHJcbmNsYXNzIEJhc2VFbXBoYXNpc01hcmsgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbXBoYXNpc01hcmtUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmVtXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IGVtcGhhc2lzTWFya1R5cGUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQmFzZUVtcGhhc2lzTWFyayA9IEJhc2VFbXBoYXNpc01hcms7XHJcbmNsYXNzIEVtcGhhc2lzTWFyayBleHRlbmRzIEJhc2VFbXBoYXNpc01hcmsge1xyXG4gICAgY29uc3RydWN0b3IoZW1waGFzaXNNYXJrVHlwZSA9IEVtcGhhc2lzTWFya1R5cGUuRE9UKSB7XHJcbiAgICAgICAgc3VwZXIoZW1waGFzaXNNYXJrVHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FbXBoYXNpc01hcmsgPSBFbXBoYXNpc01hcms7XHJcbmNsYXNzIERvdEVtcGhhc2lzTWFyayBleHRlbmRzIEJhc2VFbXBoYXNpc01hcmsge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoRW1waGFzaXNNYXJrVHlwZS5ET1QpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRG90RW1waGFzaXNNYXJrID0gRG90RW1waGFzaXNNYXJrO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBSdW5Gb250QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBhc2NpaTogXCJ3OmFzY2lpXCIsXHJcbiAgICAgICAgICAgIGNzOiBcInc6Y3NcIixcclxuICAgICAgICAgICAgZWFzdEFzaWE6IFwidzplYXN0QXNpYVwiLFxyXG4gICAgICAgICAgICBoQW5zaTogXCJ3OmhBbnNpXCIsXHJcbiAgICAgICAgICAgIGhpbnQ6IFwidzpoaW50XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBSdW5Gb250cyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWVPckF0dHJzLCBoaW50KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnJGb250c1wiKTtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckF0dHJzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBuYW1lT3JBdHRycztcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFJ1bkZvbnRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgICAgIGFzY2lpOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgY3M6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBlYXN0QXNpYTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGhBbnNpOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGludDogaGludCxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBuYW1lT3JBdHRycztcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFJ1bkZvbnRBdHRyaWJ1dGVzKGF0dHJzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUnVuRm9udHMgPSBSdW5Gb250cztcclxuXG5cbi8qKiovIH0pLFxuLyogMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tO1xyXG4oZnVuY3Rpb24gKEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbSkge1xyXG4gICAgSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tW1wiQ0hBUkFDVEVSXCJdID0gXCJjaGFyYWN0ZXJcIjtcclxuICAgIEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIkNPTFVNTlwiXSA9IFwiY29sdW1uXCI7XHJcbiAgICBIb3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb21bXCJJTlNJREVfTUFSR0lOXCJdID0gXCJpbnNpZGVNYXJnaW5cIjtcclxuICAgIEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIkxFRlRfTUFSR0lOXCJdID0gXCJsZWZ0TWFyZ2luXCI7XHJcbiAgICBIb3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb21bXCJNQVJHSU5cIl0gPSBcIm1hcmdpblwiO1xyXG4gICAgSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tW1wiT1VUU0lERV9NQVJHSU5cIl0gPSBcIm91dHNpZGVNYXJnaW5cIjtcclxuICAgIEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIlBBR0VcIl0gPSBcInBhZ2VcIjtcclxuICAgIEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIlJJR0hUX01BUkdJTlwiXSA9IFwicmlnaHRNYXJnaW5cIjtcclxufSkoSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tID0gZXhwb3J0cy5Ib3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb20gfHwgKGV4cG9ydHMuSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tID0ge30pKTtcclxudmFyIFZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb207XHJcbihmdW5jdGlvbiAoVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbSkge1xyXG4gICAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIkJPVFRPTV9NQVJHSU5cIl0gPSBcImJvdHRvbU1hcmdpblwiO1xyXG4gICAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIklOU0lERV9NQVJHSU5cIl0gPSBcImluc2lkZU1hcmdpblwiO1xyXG4gICAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIkxJTkVcIl0gPSBcImxpbmVcIjtcclxuICAgIFZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb21bXCJNQVJHSU5cIl0gPSBcIm1hcmdpblwiO1xyXG4gICAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIk9VVFNJREVfTUFSR0lOXCJdID0gXCJvdXRzaWRlTWFyZ2luXCI7XHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tW1wiUEFHRVwiXSA9IFwicGFnZVwiO1xyXG4gICAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbVtcIlBBUkFHUkFQSFwiXSA9IFwicGFyYWdyYXBoXCI7XHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tW1wiVE9QX01BUkdJTlwiXSA9IFwidG9wTWFyZ2luXCI7XHJcbn0pKFZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb20gPSBleHBvcnRzLlZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb20gfHwgKGV4cG9ydHMuVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbSA9IHt9KSk7XHJcbnZhciBIb3Jpem9udGFsUG9zaXRpb25BbGlnbjtcclxuKGZ1bmN0aW9uIChIb3Jpem9udGFsUG9zaXRpb25BbGlnbikge1xyXG4gICAgSG9yaXpvbnRhbFBvc2l0aW9uQWxpZ25bXCJDRU5URVJcIl0gPSBcImNlbnRlclwiO1xyXG4gICAgSG9yaXpvbnRhbFBvc2l0aW9uQWxpZ25bXCJJTlNJREVcIl0gPSBcImluc2lkZVwiO1xyXG4gICAgSG9yaXpvbnRhbFBvc2l0aW9uQWxpZ25bXCJMRUZUXCJdID0gXCJsZWZ0XCI7XHJcbiAgICBIb3Jpem9udGFsUG9zaXRpb25BbGlnbltcIk9VVFNJREVcIl0gPSBcIm91dHNpZGVcIjtcclxuICAgIEhvcml6b250YWxQb3NpdGlvbkFsaWduW1wiUklHSFRcIl0gPSBcInJpZ2h0XCI7XHJcbn0pKEhvcml6b250YWxQb3NpdGlvbkFsaWduID0gZXhwb3J0cy5Ib3Jpem9udGFsUG9zaXRpb25BbGlnbiB8fCAoZXhwb3J0cy5Ib3Jpem9udGFsUG9zaXRpb25BbGlnbiA9IHt9KSk7XHJcbnZhciBWZXJ0aWNhbFBvc2l0aW9uQWxpZ247XHJcbihmdW5jdGlvbiAoVmVydGljYWxQb3NpdGlvbkFsaWduKSB7XHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uQWxpZ25bXCJCT1RUT01cIl0gPSBcImJvdHRvbVwiO1xyXG4gICAgVmVydGljYWxQb3NpdGlvbkFsaWduW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcclxuICAgIFZlcnRpY2FsUG9zaXRpb25BbGlnbltcIklOU0lERVwiXSA9IFwiaW5zaWRlXCI7XHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uQWxpZ25bXCJPVVRTSURFXCJdID0gXCJvdXRzaWRlXCI7XHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uQWxpZ25bXCJUT1BcIl0gPSBcInRvcFwiO1xyXG59KShWZXJ0aWNhbFBvc2l0aW9uQWxpZ24gPSBleHBvcnRzLlZlcnRpY2FsUG9zaXRpb25BbGlnbiB8fCAoZXhwb3J0cy5WZXJ0aWNhbFBvc2l0aW9uQWxpZ24gPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE5OSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMykpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIxOCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBDZWxsQm9yZGVyQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBzdHlsZTogXCJ3OnZhbFwiLCBzaXplOiBcInc6c3pcIiwgY29sb3I6IFwidzpjb2xvclwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgQmFzZVRhYmxlQ2VsbEJvcmRlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIHNldFByb3BlcnRpZXMoc3R5bGUsIHNpemUsIGNvbG9yKSB7XHJcbiAgICAgICAgY29uc3QgYXR0cnMgPSBuZXcgQ2VsbEJvcmRlckF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBzdHlsZTogc3R5bGUsXHJcbiAgICAgICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChhdHRycyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVGFibGVDZWxsQm9yZGVycyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6dGNCb3JkZXJzXCIpO1xyXG4gICAgfVxyXG4gICAgYWRkVG9wQm9yZGVyKHN0eWxlLCBzaXplLCBjb2xvcikge1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IG5ldyBCYXNlVGFibGVDZWxsQm9yZGVyKFwidzp0b3BcIik7XHJcbiAgICAgICAgdG9wLnNldFByb3BlcnRpZXMoc3R5bGUsIHNpemUsIGNvbG9yKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0b3ApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYWRkU3RhcnRCb3JkZXIoc3R5bGUsIHNpemUsIGNvbG9yKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBuZXcgQmFzZVRhYmxlQ2VsbEJvcmRlcihcInc6c3RhcnRcIik7XHJcbiAgICAgICAgc3RhcnQuc2V0UHJvcGVydGllcyhzdHlsZSwgc2l6ZSwgY29sb3IpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHN0YXJ0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZEJvdHRvbUJvcmRlcihzdHlsZSwgc2l6ZSwgY29sb3IpIHtcclxuICAgICAgICBjb25zdCBib3R0b20gPSBuZXcgQmFzZVRhYmxlQ2VsbEJvcmRlcihcInc6Ym90dG9tXCIpO1xyXG4gICAgICAgIGJvdHRvbS5zZXRQcm9wZXJ0aWVzKHN0eWxlLCBzaXplLCBjb2xvcik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goYm90dG9tKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZEVuZEJvcmRlcihzdHlsZSwgc2l6ZSwgY29sb3IpIHtcclxuICAgICAgICBjb25zdCBlbmQgPSBuZXcgQmFzZVRhYmxlQ2VsbEJvcmRlcihcInc6ZW5kXCIpO1xyXG4gICAgICAgIGVuZC5zZXRQcm9wZXJ0aWVzKHN0eWxlLCBzaXplLCBjb2xvcik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goZW5kKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZExlZnRCb3JkZXIoc3R5bGUsIHNpemUsIGNvbG9yKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IG5ldyBCYXNlVGFibGVDZWxsQm9yZGVyKFwidzpsZWZ0XCIpO1xyXG4gICAgICAgIGxlZnQuc2V0UHJvcGVydGllcyhzdHlsZSwgc2l6ZSwgY29sb3IpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGxlZnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYWRkUmlnaHRCb3JkZXIoc3R5bGUsIHNpemUsIGNvbG9yKSB7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBuZXcgQmFzZVRhYmxlQ2VsbEJvcmRlcihcInc6cmlnaHRcIik7XHJcbiAgICAgICAgcmlnaHQuc2V0UHJvcGVydGllcyhzdHlsZSwgc2l6ZSwgY29sb3IpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHJpZ2h0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlQ2VsbEJvcmRlcnMgPSBUYWJsZUNlbGxCb3JkZXJzO1xyXG5jbGFzcyBHcmlkU3BhbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBHcmlkU3BhbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmdyaWRTcGFuXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBHcmlkU3BhbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdyaWRTcGFuID0gR3JpZFNwYW47XHJcbnZhciBWZXJ0aWNhbE1lcmdlVHlwZTtcclxuKGZ1bmN0aW9uIChWZXJ0aWNhbE1lcmdlVHlwZSkge1xyXG4gICAgVmVydGljYWxNZXJnZVR5cGVbXCJDT05USU5VRVwiXSA9IFwiY29udGludWVcIjtcclxuICAgIFZlcnRpY2FsTWVyZ2VUeXBlW1wiUkVTVEFSVFwiXSA9IFwicmVzdGFydFwiO1xyXG59KShWZXJ0aWNhbE1lcmdlVHlwZSA9IGV4cG9ydHMuVmVydGljYWxNZXJnZVR5cGUgfHwgKGV4cG9ydHMuVmVydGljYWxNZXJnZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBWZXJ0aWNhbE1lcmdlQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyB2YWw6IFwidzp2YWxcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFZlcnRpY2FsTWVyZ2UgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp2TWVyZ2VcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFZlcnRpY2FsTWVyZ2VBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB2YWx1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5WZXJ0aWNhbE1lcmdlID0gVmVydGljYWxNZXJnZTtcclxudmFyIFZlcnRpY2FsQWxpZ247XHJcbihmdW5jdGlvbiAoVmVydGljYWxBbGlnbikge1xyXG4gICAgVmVydGljYWxBbGlnbltcIkJPVFRPTVwiXSA9IFwiYm90dG9tXCI7XHJcbiAgICBWZXJ0aWNhbEFsaWduW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcclxuICAgIFZlcnRpY2FsQWxpZ25bXCJUT1BcIl0gPSBcInRvcFwiO1xyXG59KShWZXJ0aWNhbEFsaWduID0gZXhwb3J0cy5WZXJ0aWNhbEFsaWduIHx8IChleHBvcnRzLlZlcnRpY2FsQWxpZ24gPSB7fSkpO1xyXG5jbGFzcyBWQWxpZ25BdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHZhbDogXCJ3OnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVkFsaWduIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6dkFsaWduXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWQWxpZ25BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB2YWx1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5WQWxpZ24gPSBWQWxpZ247XHJcbnZhciBUZXh0RGlyZWN0aW9uO1xyXG4oZnVuY3Rpb24gKFRleHREaXJlY3Rpb24pIHtcclxuICAgIFRleHREaXJlY3Rpb25bXCJCT1RUT01fVE9fVE9QX0xFRlRfVE9fUklHSFRcIl0gPSBcImJ0THJcIjtcclxuICAgIFRleHREaXJlY3Rpb25bXCJMRUZUX1RPX1JJR0hUX1RPUF9UT19CT1RUT01cIl0gPSBcImxyVGJcIjtcclxuICAgIFRleHREaXJlY3Rpb25bXCJUT1BfVE9fQk9UVE9NX1JJR0hUX1RPX0xFRlRcIl0gPSBcInRiUmxcIjtcclxufSkoVGV4dERpcmVjdGlvbiA9IGV4cG9ydHMuVGV4dERpcmVjdGlvbiB8fCAoZXhwb3J0cy5UZXh0RGlyZWN0aW9uID0ge30pKTtcclxuY2xhc3MgVERpcmVjdGlvbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBURGlyZWN0aW9uIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6dGV4dERpcmVjdGlvblwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVERpcmVjdGlvbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlREaXJlY3Rpb24gPSBURGlyZWN0aW9uO1xyXG52YXIgV2lkdGhUeXBlO1xyXG4oZnVuY3Rpb24gKFdpZHRoVHlwZSkge1xyXG4gICAgV2lkdGhUeXBlW1wiQVVUT1wiXSA9IFwiYXV0b1wiO1xyXG4gICAgV2lkdGhUeXBlW1wiRFhBXCJdID0gXCJkeGFcIjtcclxuICAgIFdpZHRoVHlwZVtcIk5JTFwiXSA9IFwibmlsXCI7XHJcbiAgICBXaWR0aFR5cGVbXCJQRVJDRU5UQUdFXCJdID0gXCJwY3RcIjtcclxufSkoV2lkdGhUeXBlID0gZXhwb3J0cy5XaWR0aFR5cGUgfHwgKGV4cG9ydHMuV2lkdGhUeXBlID0ge30pKTtcclxuY2xhc3MgVGFibGVDZWxsV2lkdGhBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHdpZHRoOiBcInc6d1wiLCB0eXBlOiBcInc6dHlwZVwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVGFibGVDZWxsV2lkdGggZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgdHlwZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0Y1dcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQ2VsbFdpZHRoQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHdpZHRoOiB2YWx1ZSxcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZUNlbGxXaWR0aCA9IFRhYmxlQ2VsbFdpZHRoO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2NikpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBjb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcclxuY2xhc3MgU3R5bGVBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwidzp0eXBlXCIsXHJcbiAgICAgICAgICAgIHN0eWxlSWQ6IFwidzpzdHlsZUlkXCIsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IFwidzpkZWZhdWx0XCIsXHJcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlOiBcInc6Y3VzdG9tU3R5bGVcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFN0eWxlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoYXR0cmlidXRlcywgbmFtZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzdHlsZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3R5bGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpKTtcclxuICAgICAgICBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLk5hbWUobmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0eWxlID0gU3R5bGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIENvbXBvbmVudEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBOYW1lIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6bmFtZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29tcG9uZW50QXR0cmlidXRlcyh7IHZhbDogdmFsdWUgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTmFtZSA9IE5hbWU7XHJcbmNsYXNzIEJhc2VkT24gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpiYXNlZE9uXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb21wb25lbnRBdHRyaWJ1dGVzKHsgdmFsOiB2YWx1ZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CYXNlZE9uID0gQmFzZWRPbjtcclxuY2xhc3MgTmV4dCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Om5leHRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IENvbXBvbmVudEF0dHJpYnV0ZXMoeyB2YWw6IHZhbHVlIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk5leHQgPSBOZXh0O1xyXG5jbGFzcyBMaW5rIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6bGlua1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29tcG9uZW50QXR0cmlidXRlcyh7IHZhbDogdmFsdWUgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTGluayA9IExpbms7XHJcbmNsYXNzIFVpUHJpb3JpdHkgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp1aVByaW9yaXR5XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb21wb25lbnRBdHRyaWJ1dGVzKHsgdmFsOiB2YWx1ZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5VaVByaW9yaXR5ID0gVWlQcmlvcml0eTtcclxuY2xhc3MgVW5oaWRlV2hlblVzZWQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6dW5oaWRlV2hlblVzZWRcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5VbmhpZGVXaGVuVXNlZCA9IFVuaGlkZVdoZW5Vc2VkO1xyXG5jbGFzcyBRdWlja0Zvcm1hdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpxRm9ybWF0XCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUXVpY2tGb3JtYXQgPSBRdWlja0Zvcm1hdDtcclxuY2xhc3MgVGFibGVQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG59XHJcbmV4cG9ydHMuVGFibGVQcm9wZXJ0aWVzID0gVGFibGVQcm9wZXJ0aWVzO1xyXG5jbGFzcyBSc0lkIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG59XHJcbmV4cG9ydHMuUnNJZCA9IFJzSWQ7XHJcbmNsYXNzIFNlbWlIaWRkZW4gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6c2VtaUhpZGRlblwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNlbWlIaWRkZW4gPSBTZW1pSGlkZGVuO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHBhcmFncmFwaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuY29uc3QgcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcclxuY29uc3QgY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XHJcbmNvbnN0IHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcclxuY2xhc3MgU3R5bGVGb3JQYXJhZ3JhcGggZXh0ZW5kcyBzdHlsZV8xLlN0eWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcih7IHR5cGU6IFwicGFyYWdyYXBoXCIsIHN0eWxlSWQ6IG9wdGlvbnMuaWQgfSwgb3B0aW9ucy5uYW1lKTtcclxuICAgICAgICB0aGlzLnBhcmFncmFwaFByb3BlcnRpZXMgPSBuZXcgcGFyYWdyYXBoXzEuUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zLnBhcmFncmFwaCk7XHJcbiAgICAgICAgdGhpcy5ydW5Qcm9wZXJ0aWVzID0gbmV3IHByb3BlcnRpZXNfMS5SdW5Qcm9wZXJ0aWVzKG9wdGlvbnMucnVuKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnBhcmFncmFwaFByb3BlcnRpZXMpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucnVuUHJvcGVydGllcyk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYmFzZWRPbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLkJhc2VkT24ob3B0aW9ucy5iYXNlZE9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLm5leHQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5OZXh0KG9wdGlvbnMubmV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5xdWlja0Zvcm1hdCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLlF1aWNrRm9ybWF0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5saW5rKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb21wb25lbnRzXzEuTGluayhvcHRpb25zLmxpbmspKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2VtaUhpZGRlbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLlNlbWlIaWRkZW4oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnVpUHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5VaVByaW9yaXR5KG9wdGlvbnMudWlQcmlvcml0eSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy51bmhpZGVXaGVuVXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLlVuaGlkZVdoZW5Vc2VkKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0eWxlRm9yUGFyYWdyYXBoID0gU3R5bGVGb3JQYXJhZ3JhcGg7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcclxuY29uc3QgY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XHJcbmNvbnN0IHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcclxuY2xhc3MgU3R5bGVGb3JDaGFyYWN0ZXIgZXh0ZW5kcyBzdHlsZV8xLlN0eWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcih7IHR5cGU6IFwiY2hhcmFjdGVyXCIsIHN0eWxlSWQ6IG9wdGlvbnMuaWQgfSwgb3B0aW9ucy5uYW1lKTtcclxuICAgICAgICB0aGlzLnJ1blByb3BlcnRpZXMgPSBuZXcgcHJvcGVydGllc18xLlJ1blByb3BlcnRpZXMob3B0aW9ucy5ydW4pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucnVuUHJvcGVydGllcyk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5VaVByaW9yaXR5KDk5KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5VbmhpZGVXaGVuVXNlZCgpKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5iYXNlZE9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb21wb25lbnRzXzEuQmFzZWRPbihvcHRpb25zLmJhc2VkT24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubGluaykge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLkxpbmsob3B0aW9ucy5saW5rKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNlbWlIaWRkZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5TZW1pSGlkZGVuKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0eWxlRm9yQ2hhcmFjdGVyID0gU3R5bGVGb3JDaGFyYWN0ZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbnZhciBQYWdlT3JpZW50YXRpb247XHJcbihmdW5jdGlvbiAoUGFnZU9yaWVudGF0aW9uKSB7XHJcbiAgICBQYWdlT3JpZW50YXRpb25bXCJQT1JUUkFJVFwiXSA9IFwicG9ydHJhaXRcIjtcclxuICAgIFBhZ2VPcmllbnRhdGlvbltcIkxBTkRTQ0FQRVwiXSA9IFwibGFuZHNjYXBlXCI7XHJcbn0pKFBhZ2VPcmllbnRhdGlvbiA9IGV4cG9ydHMuUGFnZU9yaWVudGF0aW9uIHx8IChleHBvcnRzLlBhZ2VPcmllbnRhdGlvbiA9IHt9KSk7XHJcbmNsYXNzIFBhZ2VTaXplQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogXCJ3OndcIixcclxuICAgICAgICAgICAgaGVpZ2h0OiBcInc6aFwiLFxyXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogXCJ3Om9yaWVudFwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QYWdlU2l6ZUF0dHJpYnV0ZXMgPSBQYWdlU2l6ZUF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZm9vdGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNyk7XHJcbmNvbnN0IHJlbGF0aW9uc2hpcHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xyXG5jbGFzcyBGb290ZXJXcmFwcGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lZGlhLCByZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLm1lZGlhID0gbWVkaWE7XHJcbiAgICAgICAgdGhpcy5mb290ZXIgPSBuZXcgZm9vdGVyXzEuRm9vdGVyKHJlZmVyZW5jZUlkLCBpbml0Q29udGVudCk7XHJcbiAgICAgICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IHJlbGF0aW9uc2hpcHNfMS5SZWxhdGlvbnNoaXBzKCk7XHJcbiAgICB9XHJcbiAgICBhZGQoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuZm9vdGVyLmFkZChpdGVtKTtcclxuICAgIH1cclxuICAgIGFkZENoaWxkRWxlbWVudChjaGlsZEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmZvb3Rlci5hZGRDaGlsZEVsZW1lbnQoY2hpbGRFbGVtZW50KTtcclxuICAgIH1cclxuICAgIGdldCBGb290ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9vdGVyO1xyXG4gICAgfVxyXG4gICAgZ2V0IFJlbGF0aW9uc2hpcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRpb25zaGlwcztcclxuICAgIH1cclxuICAgIGdldCBNZWRpYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3RlcldyYXBwZXIgPSBGb290ZXJXcmFwcGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMwOSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCByZWxhdGlvbnNoaXBfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTEpO1xyXG52YXIgVGFyZ2V0TW9kZVR5cGU7XHJcbihmdW5jdGlvbiAoVGFyZ2V0TW9kZVR5cGUpIHtcclxuICAgIFRhcmdldE1vZGVUeXBlW1wiRVhURVJOQUxcIl0gPSBcIkV4dGVybmFsXCI7XHJcbn0pKFRhcmdldE1vZGVUeXBlID0gZXhwb3J0cy5UYXJnZXRNb2RlVHlwZSB8fCAoZXhwb3J0cy5UYXJnZXRNb2RlVHlwZSA9IHt9KSk7XHJcbmNsYXNzIFJlbGF0aW9uc2hpcCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlLCB0YXJnZXQsIHRhcmdldE1vZGUpIHtcclxuICAgICAgICBzdXBlcihcIlJlbGF0aW9uc2hpcFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcmVsYXRpb25zaGlwX2F0dHJpYnV0ZXNfMS5SZWxhdGlvbnNoaXBBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgdGFyZ2V0TW9kZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5SZWxhdGlvbnNoaXAgPSBSZWxhdGlvbnNoaXA7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQ3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaGVhZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyNSk7XHJcbmNvbnN0IHJlbGF0aW9uc2hpcHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xyXG5jbGFzcyBIZWFkZXJXcmFwcGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lZGlhLCByZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLm1lZGlhID0gbWVkaWE7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgaGVhZGVyXzEuSGVhZGVyKHJlZmVyZW5jZUlkLCBpbml0Q29udGVudCk7XHJcbiAgICAgICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IHJlbGF0aW9uc2hpcHNfMS5SZWxhdGlvbnNoaXBzKCk7XHJcbiAgICB9XHJcbiAgICBhZGQoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaGVhZGVyLmFkZChpdGVtKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZENoaWxkRWxlbWVudChjaGlsZEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmhlYWRlci5hZGRDaGlsZEVsZW1lbnQoY2hpbGRFbGVtZW50KTtcclxuICAgIH1cclxuICAgIGdldCBIZWFkZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyO1xyXG4gICAgfVxyXG4gICAgZ2V0IFJlbGF0aW9uc2hpcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRpb25zaGlwcztcclxuICAgIH1cclxuICAgIGdldCBNZWRpYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRlcldyYXBwZXIgPSBIZWFkZXJXcmFwcGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMyNykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMyOCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBmb3JtYXR0aW5nXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcclxuY29uc3QgcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XHJcbmNvbnN0IHByb3BlcnRpZXNfMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcbmNsYXNzIExldmVsQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBpbHZsOiBcInc6aWx2bFwiLFxyXG4gICAgICAgICAgICB0ZW50YXRpdmU6IFwidzE1OnRlbnRhdGl2ZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgU3RhcnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzdGFydFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB2YWx1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTnVtYmVyRm9ybWF0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6bnVtRm10XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBMZXZlbFRleHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpsdmxUZXh0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBMZXZlbEpjIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6bHZsSmNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdmFsdWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbnZhciBMZXZlbFN1ZmZpeDtcclxuKGZ1bmN0aW9uIChMZXZlbFN1ZmZpeCkge1xyXG4gICAgTGV2ZWxTdWZmaXhbXCJOT1RISU5HXCJdID0gXCJub3RoaW5nXCI7XHJcbiAgICBMZXZlbFN1ZmZpeFtcIlNQQUNFXCJdID0gXCJzcGFjZVwiO1xyXG4gICAgTGV2ZWxTdWZmaXhbXCJUQUJcIl0gPSBcInRhYlwiO1xyXG59KShMZXZlbFN1ZmZpeCA9IGV4cG9ydHMuTGV2ZWxTdWZmaXggfHwgKGV4cG9ydHMuTGV2ZWxTdWZmaXggPSB7fSkpO1xyXG5jbGFzcyBTdWZmaXggZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzdWZmXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBMZXZlbEJhc2UgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGxldmVsLCBmb3JtYXQsIHRleHQsIGFsaWdubWVudCA9IGZvcm1hdHRpbmdfMS5BbGlnbm1lbnRUeXBlLlNUQVJULCBzdGFydCA9IDEsIHN0eWxlLCBzdWZmaXggfSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpsdmxcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGlsdmw6IGxldmVsLFxyXG4gICAgICAgICAgICB0ZW50YXRpdmU6IDEsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdGFydChzdGFydCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBMZXZlbEpjKGFsaWdubWVudCkpO1xyXG4gICAgICAgIGlmIChmb3JtYXQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlckZvcm1hdChmb3JtYXQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsVGV4dCh0ZXh0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyA9IG5ldyBwcm9wZXJ0aWVzXzEuUGFyYWdyYXBoUHJvcGVydGllcyhzdHlsZSAmJiBzdHlsZS5wYXJhZ3JhcGgpO1xyXG4gICAgICAgIHRoaXMucnVuUHJvcGVydGllcyA9IG5ldyBwcm9wZXJ0aWVzXzIuUnVuUHJvcGVydGllcyhzdHlsZSAmJiBzdHlsZS5ydW4pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzKTtcclxuICAgICAgICBpZiAoc3VmZml4KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdWZmaXgoc3VmZml4KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTGV2ZWxCYXNlID0gTGV2ZWxCYXNlO1xyXG5jbGFzcyBMZXZlbCBleHRlbmRzIExldmVsQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5MZXZlbCA9IExldmVsO1xyXG5jbGFzcyBMZXZlbEZvck92ZXJyaWRlIGV4dGVuZHMgTGV2ZWxCYXNlIHtcclxufVxyXG5leHBvcnRzLkxldmVsRm9yT3ZlcnJpZGUgPSBMZXZlbEZvck92ZXJyaWRlO1xyXG5cblxuLyoqKi8gfSksXG4vKiA1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNjIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg2MykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNjUpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg4MSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oODMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg4NCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgQWxpZ25tZW50VHlwZTtcclxuKGZ1bmN0aW9uIChBbGlnbm1lbnRUeXBlKSB7XHJcbiAgICBBbGlnbm1lbnRUeXBlW1wiU1RBUlRcIl0gPSBcInN0YXJ0XCI7XHJcbiAgICBBbGlnbm1lbnRUeXBlW1wiRU5EXCJdID0gXCJlbmRcIjtcclxuICAgIEFsaWdubWVudFR5cGVbXCJDRU5URVJcIl0gPSBcImNlbnRlclwiO1xyXG4gICAgQWxpZ25tZW50VHlwZVtcIkJPVEhcIl0gPSBcImJvdGhcIjtcclxuICAgIEFsaWdubWVudFR5cGVbXCJKVVNUSUZJRURcIl0gPSBcImJvdGhcIjtcclxuICAgIEFsaWdubWVudFR5cGVbXCJESVNUUklCVVRFXCJdID0gXCJkaXN0cmlidXRlXCI7XHJcbiAgICBBbGlnbm1lbnRUeXBlW1wiTEVGVFwiXSA9IFwibGVmdFwiO1xyXG4gICAgQWxpZ25tZW50VHlwZVtcIlJJR0hUXCJdID0gXCJyaWdodFwiO1xyXG59KShBbGlnbm1lbnRUeXBlID0gZXhwb3J0cy5BbGlnbm1lbnRUeXBlIHx8IChleHBvcnRzLkFsaWdubWVudFR5cGUgPSB7fSkpO1xyXG5jbGFzcyBBbGlnbm1lbnRBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHZhbDogXCJ3OnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BbGlnbm1lbnRBdHRyaWJ1dGVzID0gQWxpZ25tZW50QXR0cmlidXRlcztcclxuY2xhc3MgQWxpZ25tZW50IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodHlwZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpqY1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQWxpZ25tZW50QXR0cmlidXRlcyh7IHZhbDogdHlwZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BbGlnbm1lbnQgPSBBbGlnbm1lbnQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgYmFzZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XHJcbmNsYXNzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCBleHRlbmRzIGJhc2VfMS5CYXNlWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcclxuICAgICAgICBzdXBlcihcIl9hdHRyXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHByb3BlcnRpZXM7XHJcbiAgICB9XHJcbiAgICBwcmVwRm9yWG1sKCkge1xyXG4gICAgICAgIGNvbnN0IGF0dHJzID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5yb290KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnJvb3Rba2V5XTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9ICh0aGlzLnhtbEtleXMgJiYgdGhpcy54bWxLZXlzW2tleV0pIHx8IGtleTtcclxuICAgICAgICAgICAgICAgIGF0dHJzW25ld0tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7IF9hdHRyOiBhdHRycyB9O1xyXG4gICAgfVxyXG4gICAgc2V0KHByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzLnJvb3QgPSBwcm9wZXJ0aWVzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuWG1sQXR0cmlidXRlQ29tcG9uZW50ID0gWG1sQXR0cmlidXRlQ29tcG9uZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc2F4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDIpO1xyXG52YXIgZXhwYXQgLyo9IHJlcXVpcmUoJ25vZGUtZXhwYXQnKTsqLyA9IHsgb246IGZ1bmN0aW9uICgpIHsgfSwgcGFyc2U6IGZ1bmN0aW9uICgpIHsgfSB9O1xyXG52YXIgaGVscGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XHJcbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSkuaXNBcnJheTtcclxuXHJcbnZhciBvcHRpb25zO1xyXG52YXIgcHVyZUpzUGFyc2VyID0gdHJ1ZTtcclxudmFyIGN1cnJlbnRFbGVtZW50O1xyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKHVzZXJPcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IGhlbHBlci5jb3B5T3B0aW9ucyh1c2VyT3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZURlY2xhcmF0aW9uJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZUluc3RydWN0aW9uJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZUF0dHJpYnV0ZXMnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnaWdub3JlVGV4dCcsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdpZ25vcmVDb21tZW50Jywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZUNkYXRhJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZURvY3R5cGUnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnY29tcGFjdCcsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdhbHdheXNDaGlsZHJlbicsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdhZGRQYXJlbnQnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygndHJpbScsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCduYXRpdmVUeXBlJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ25hdGl2ZVR5cGVBdHRyaWJ1dGVzJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ3Nhbml0aXplJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2luc3RydWN0aW9uSGFzQXR0cmlidXRlcycsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdjYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUFsd2F5c0FycmF5RXhpc3RzKG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ2RlY2xhcmF0aW9uJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygnaW5zdHJ1Y3Rpb24nLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdhdHRyaWJ1dGVzJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygndGV4dCcsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ2NvbW1lbnQnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdjZGF0YScsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ2RvY3R5cGUnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCd0eXBlJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygnbmFtZScsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ2VsZW1lbnRzJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygncGFyZW50Jywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2RvY3R5cGUnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnaW5zdHJ1Y3Rpb24nLCBvcHRpb25zKTtcclxuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnY2RhdGEnLCBvcHRpb25zKTtcclxuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnY29tbWVudCcsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCd0ZXh0Jywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2luc3RydWN0aW9uTmFtZScsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdlbGVtZW50TmFtZScsIG9wdGlvbnMpO1xyXG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdhdHRyaWJ1dGVOYW1lJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2F0dHJpYnV0ZVZhbHVlJywgb3B0aW9ucyk7XHJcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2F0dHJpYnV0ZXMnLCBvcHRpb25zKTtcclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5cclxuZnVuY3Rpb24gbmF0aXZlVHlwZSh2YWx1ZSkge1xyXG4gIHZhciBuVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xyXG4gIGlmICghaXNOYU4oblZhbHVlKSkge1xyXG4gICAgcmV0dXJuIG5WYWx1ZTtcclxuICB9XHJcbiAgdmFyIGJWYWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgaWYgKGJWYWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGVsc2UgaWYgKGJWYWx1ZSA9PT0gJ2ZhbHNlJykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEZpZWxkKHR5cGUsIHZhbHVlKSB7XHJcbiAgdmFyIGtleTtcclxuICBpZiAob3B0aW9ucy5jb21wYWN0KSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICFjdXJyZW50RWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dICYmXHJcbiAgICAgIChpc0FycmF5KG9wdGlvbnMuYWx3YXlzQXJyYXkpID8gb3B0aW9ucy5hbHdheXNBcnJheS5pbmRleE9mKG9wdGlvbnNbdHlwZSArICdLZXknXSkgIT09IC0xIDogb3B0aW9ucy5hbHdheXNBcnJheSlcclxuICAgICkge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dID0gW107XHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudEVsZW1lbnRbb3B0aW9uc1t0eXBlICsgJ0tleSddXSAmJiAhaXNBcnJheShjdXJyZW50RWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dKSkge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dID0gW2N1cnJlbnRFbGVtZW50W29wdGlvbnNbdHlwZSArICdLZXknXV1dO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGUgKyAnRm4nIGluIG9wdGlvbnMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICB2YWx1ZSA9IG9wdGlvbnNbdHlwZSArICdGbiddKHZhbHVlLCBjdXJyZW50RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PT0gJ2luc3RydWN0aW9uJyAmJiAoJ2luc3RydWN0aW9uRm4nIGluIG9wdGlvbnMgfHwgJ2luc3RydWN0aW9uTmFtZUZuJyBpbiBvcHRpb25zKSkge1xyXG4gICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICBpZiAoJ2luc3RydWN0aW9uRm4nIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdmFsdWVba2V5XSA9IG9wdGlvbnMuaW5zdHJ1Y3Rpb25Gbih2YWx1ZVtrZXldLCBrZXksIGN1cnJlbnRFbGVtZW50KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gdmFsdWVba2V5XTtcclxuICAgICAgICAgICAgZGVsZXRlIHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgIHZhbHVlW29wdGlvbnMuaW5zdHJ1Y3Rpb25OYW1lRm4oa2V5LCB0ZW1wLCBjdXJyZW50RWxlbWVudCldID0gdGVtcDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KGN1cnJlbnRFbGVtZW50W29wdGlvbnNbdHlwZSArICdLZXknXV0pKSB7XHJcbiAgICAgIGN1cnJlbnRFbGVtZW50W29wdGlvbnNbdHlwZSArICdLZXknXV0ucHVzaCh2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICghY3VycmVudEVsZW1lbnRbb3B0aW9ucy5lbGVtZW50c0tleV0pIHtcclxuICAgICAgY3VycmVudEVsZW1lbnRbb3B0aW9ucy5lbGVtZW50c0tleV0gPSBbXTtcclxuICAgIH1cclxuICAgIHZhciBlbGVtZW50ID0ge307XHJcbiAgICBlbGVtZW50W29wdGlvbnMudHlwZUtleV0gPSB0eXBlO1xyXG4gICAgaWYgKHR5cGUgPT09ICdpbnN0cnVjdGlvbicpIHtcclxuICAgICAgZm9yIChrZXkgaW4gdmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsZW1lbnRbb3B0aW9ucy5uYW1lS2V5XSA9ICdpbnN0cnVjdGlvbk5hbWVGbicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuaW5zdHJ1Y3Rpb25OYW1lRm4oa2V5LCB2YWx1ZSwgY3VycmVudEVsZW1lbnQpIDoga2V5O1xyXG4gICAgICBpZiAob3B0aW9ucy5pbnN0cnVjdGlvbkhhc0F0dHJpYnV0ZXMpIHtcclxuICAgICAgICBlbGVtZW50W29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSB2YWx1ZVtrZXldW29wdGlvbnMuYXR0cmlidXRlc0tleV07XHJcbiAgICAgICAgaWYgKCdpbnN0cnVjdGlvbkZuJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICBlbGVtZW50W29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSBvcHRpb25zLmluc3RydWN0aW9uRm4oZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldLCBrZXksIGN1cnJlbnRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCdpbnN0cnVjdGlvbkZuJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICB2YWx1ZVtrZXldID0gb3B0aW9ucy5pbnN0cnVjdGlvbkZuKHZhbHVlW2tleV0sIGtleSwgY3VycmVudEVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbGVtZW50W29wdGlvbnMuaW5zdHJ1Y3Rpb25LZXldID0gdmFsdWVba2V5XTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHR5cGUgKyAnRm4nIGluIG9wdGlvbnMpIHtcclxuICAgICAgICB2YWx1ZSA9IG9wdGlvbnNbdHlwZSArICdGbiddKHZhbHVlLCBjdXJyZW50RWxlbWVudCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudFtvcHRpb25zW3R5cGUgKyAnS2V5J11dID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5hZGRQYXJlbnQpIHtcclxuICAgICAgZWxlbWVudFtvcHRpb25zLnBhcmVudEtleV0gPSBjdXJyZW50RWxlbWVudDtcclxuICAgIH1cclxuICAgIGN1cnJlbnRFbGVtZW50W29wdGlvbnMuZWxlbWVudHNLZXldLnB1c2goZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYW5pcHVsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XHJcbiAgaWYgKCdhdHRyaWJ1dGVzRm4nIGluIG9wdGlvbnMgJiYgYXR0cmlidXRlcykge1xyXG4gICAgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlc0ZuKGF0dHJpYnV0ZXMsIGN1cnJlbnRFbGVtZW50KTtcclxuICB9XHJcbiAgaWYgKChvcHRpb25zLnRyaW0gfHwgJ2F0dHJpYnV0ZVZhbHVlRm4nIGluIG9wdGlvbnMgfHwgJ2F0dHJpYnV0ZU5hbWVGbicgaW4gb3B0aW9ucyB8fCBvcHRpb25zLm5hdGl2ZVR5cGVBdHRyaWJ1dGVzKSAmJiBhdHRyaWJ1dGVzKSB7XHJcbiAgICB2YXIga2V5O1xyXG4gICAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xyXG4gICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudHJpbSkgYXR0cmlidXRlc1trZXldID0gYXR0cmlidXRlc1trZXldLnRyaW0oKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5uYXRpdmVUeXBlQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gbmF0aXZlVHlwZShhdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJ2F0dHJpYnV0ZVZhbHVlRm4nIGluIG9wdGlvbnMpIGF0dHJpYnV0ZXNba2V5XSA9IG9wdGlvbnMuYXR0cmlidXRlVmFsdWVGbihhdHRyaWJ1dGVzW2tleV0sIGtleSwgY3VycmVudEVsZW1lbnQpO1xyXG4gICAgICAgIGlmICgnYXR0cmlidXRlTmFtZUZuJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICB2YXIgdGVtcCA9IGF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICBhdHRyaWJ1dGVzW29wdGlvbnMuYXR0cmlidXRlTmFtZUZuKGtleSwgYXR0cmlidXRlc1trZXldLCBjdXJyZW50RWxlbWVudCldID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGF0dHJpYnV0ZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24pIHtcclxuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xyXG4gIGlmIChpbnN0cnVjdGlvbi5ib2R5ICYmIChpbnN0cnVjdGlvbi5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd4bWwnIHx8IG9wdGlvbnMuaW5zdHJ1Y3Rpb25IYXNBdHRyaWJ1dGVzKSkge1xyXG4gICAgdmFyIGF0dHJzUmVnRXhwID0gLyhbXFx3Oi1dKylcXHMqPVxccyooPzpcIihbXlwiXSopXCJ8JyhbXiddKiknfChcXHcrKSlcXHMqL2c7XHJcbiAgICB2YXIgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gYXR0cnNSZWdFeHAuZXhlYyhpbnN0cnVjdGlvbi5ib2R5KSkgIT09IG51bGwpIHtcclxuICAgICAgYXR0cmlidXRlc1ttYXRjaFsxXV0gPSBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XTtcclxuICAgIH1cclxuICAgIGF0dHJpYnV0ZXMgPSBtYW5pcHVsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcclxuICB9XHJcbiAgaWYgKGluc3RydWN0aW9uLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3htbCcpIHtcclxuICAgIGlmIChvcHRpb25zLmlnbm9yZURlY2xhcmF0aW9uKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGN1cnJlbnRFbGVtZW50W29wdGlvbnMuZGVjbGFyYXRpb25LZXldID0ge307XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XHJcbiAgICAgIGN1cnJlbnRFbGVtZW50W29wdGlvbnMuZGVjbGFyYXRpb25LZXldW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSBhdHRyaWJ1dGVzO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuYWRkUGFyZW50KSB7XHJcbiAgICAgIGN1cnJlbnRFbGVtZW50W29wdGlvbnMuZGVjbGFyYXRpb25LZXldW29wdGlvbnMucGFyZW50S2V5XSA9IGN1cnJlbnRFbGVtZW50O1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAob3B0aW9ucy5pZ25vcmVJbnN0cnVjdGlvbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy50cmltKSB7XHJcbiAgICAgIGluc3RydWN0aW9uLmJvZHkgPSBpbnN0cnVjdGlvbi5ib2R5LnRyaW0oKTtcclxuICAgIH1cclxuICAgIHZhciB2YWx1ZSA9IHt9O1xyXG4gICAgaWYgKG9wdGlvbnMuaW5zdHJ1Y3Rpb25IYXNBdHRyaWJ1dGVzICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCkge1xyXG4gICAgICB2YWx1ZVtpbnN0cnVjdGlvbi5uYW1lXSA9IHt9O1xyXG4gICAgICB2YWx1ZVtpbnN0cnVjdGlvbi5uYW1lXVtvcHRpb25zLmF0dHJpYnV0ZXNLZXldID0gYXR0cmlidXRlcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhbHVlW2luc3RydWN0aW9uLm5hbWVdID0gaW5zdHJ1Y3Rpb24uYm9keTtcclxuICAgIH1cclxuICAgIGFkZEZpZWxkKCdpbnN0cnVjdGlvbicsIHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uU3RhcnRFbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMpIHtcclxuICB2YXIgZWxlbWVudDtcclxuICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICBhdHRyaWJ1dGVzID0gbmFtZS5hdHRyaWJ1dGVzO1xyXG4gICAgbmFtZSA9IG5hbWUubmFtZTtcclxuICB9XHJcbiAgYXR0cmlidXRlcyA9IG1hbmlwdWxhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xyXG4gIGlmICgnZWxlbWVudE5hbWVGbicgaW4gb3B0aW9ucykge1xyXG4gICAgbmFtZSA9IG9wdGlvbnMuZWxlbWVudE5hbWVGbihuYW1lLCBjdXJyZW50RWxlbWVudCk7XHJcbiAgfVxyXG4gIGlmIChvcHRpb25zLmNvbXBhY3QpIHtcclxuICAgIGVsZW1lbnQgPSB7fTtcclxuICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXMgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XHJcbiAgICAgIGVsZW1lbnRbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA9IHt9O1xyXG4gICAgICB2YXIga2V5O1xyXG4gICAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoXHJcbiAgICAgICEobmFtZSBpbiBjdXJyZW50RWxlbWVudCkgJiZcclxuICAgICAgKGlzQXJyYXkob3B0aW9ucy5hbHdheXNBcnJheSkgPyBvcHRpb25zLmFsd2F5c0FycmF5LmluZGV4T2YobmFtZSkgIT09IC0xIDogb3B0aW9ucy5hbHdheXNBcnJheSlcclxuICAgICkge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtuYW1lXSA9IFtdO1xyXG4gICAgfVxyXG4gICAgaWYgKGN1cnJlbnRFbGVtZW50W25hbWVdICYmICFpc0FycmF5KGN1cnJlbnRFbGVtZW50W25hbWVdKSkge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtuYW1lXSA9IFtjdXJyZW50RWxlbWVudFtuYW1lXV07XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShjdXJyZW50RWxlbWVudFtuYW1lXSkpIHtcclxuICAgICAgY3VycmVudEVsZW1lbnRbbmFtZV0ucHVzaChlbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGN1cnJlbnRFbGVtZW50W25hbWVdID0gZWxlbWVudDtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFjdXJyZW50RWxlbWVudFtvcHRpb25zLmVsZW1lbnRzS2V5XSkge1xyXG4gICAgICBjdXJyZW50RWxlbWVudFtvcHRpb25zLmVsZW1lbnRzS2V5XSA9IFtdO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudCA9IHt9O1xyXG4gICAgZWxlbWVudFtvcHRpb25zLnR5cGVLZXldID0gJ2VsZW1lbnQnO1xyXG4gICAgZWxlbWVudFtvcHRpb25zLm5hbWVLZXldID0gbmFtZTtcclxuICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXMgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XHJcbiAgICAgIGVsZW1lbnRbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA9IGF0dHJpYnV0ZXM7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5hbHdheXNDaGlsZHJlbikge1xyXG4gICAgICBlbGVtZW50W29wdGlvbnMuZWxlbWVudHNLZXldID0gW107XHJcbiAgICB9XHJcbiAgICBjdXJyZW50RWxlbWVudFtvcHRpb25zLmVsZW1lbnRzS2V5XS5wdXNoKGVsZW1lbnQpO1xyXG4gIH1cclxuICBlbGVtZW50W29wdGlvbnMucGFyZW50S2V5XSA9IGN1cnJlbnRFbGVtZW50OyAvLyB3aWxsIGJlIGRlbGV0ZWQgaW4gb25FbmRFbGVtZW50KCkgaWYgIW9wdGlvbnMuYWRkUGFyZW50XHJcbiAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblRleHQodGV4dCkge1xyXG4gIGlmIChvcHRpb25zLmlnbm9yZVRleHQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKCF0ZXh0LnRyaW0oKSAmJiAhb3B0aW9ucy5jYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlmIChvcHRpb25zLnRyaW0pIHtcclxuICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcclxuICB9XHJcbiAgaWYgKG9wdGlvbnMubmF0aXZlVHlwZSkge1xyXG4gICAgdGV4dCA9IG5hdGl2ZVR5cGUodGV4dCk7XHJcbiAgfVxyXG4gIGlmIChvcHRpb25zLnNhbml0aXplKSB7XHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XHJcbiAgfVxyXG4gIGFkZEZpZWxkKCd0ZXh0JywgdGV4dCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQ29tbWVudChjb21tZW50KSB7XHJcbiAgaWYgKG9wdGlvbnMuaWdub3JlQ29tbWVudCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAob3B0aW9ucy50cmltKSB7XHJcbiAgICBjb21tZW50ID0gY29tbWVudC50cmltKCk7XHJcbiAgfVxyXG4gIGFkZEZpZWxkKCdjb21tZW50JywgY29tbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uRW5kRWxlbWVudChuYW1lKSB7XHJcbiAgdmFyIHBhcmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudFtvcHRpb25zLnBhcmVudEtleV07XHJcbiAgaWYgKCFvcHRpb25zLmFkZFBhcmVudCkge1xyXG4gICAgZGVsZXRlIGN1cnJlbnRFbGVtZW50W29wdGlvbnMucGFyZW50S2V5XTtcclxuICB9XHJcbiAgY3VycmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbkNkYXRhKGNkYXRhKSB7XHJcbiAgaWYgKG9wdGlvbnMuaWdub3JlQ2RhdGEpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKG9wdGlvbnMudHJpbSkge1xyXG4gICAgY2RhdGEgPSBjZGF0YS50cmltKCk7XHJcbiAgfVxyXG4gIGFkZEZpZWxkKCdjZGF0YScsIGNkYXRhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Eb2N0eXBlKGRvY3R5cGUpIHtcclxuICBpZiAob3B0aW9ucy5pZ25vcmVEb2N0eXBlKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGRvY3R5cGUgPSBkb2N0eXBlLnJlcGxhY2UoL14gLywgJycpO1xyXG4gIGlmIChvcHRpb25zLnRyaW0pIHtcclxuICAgIGRvY3R5cGUgPSBkb2N0eXBlLnRyaW0oKTtcclxuICB9XHJcbiAgYWRkRmllbGQoJ2RvY3R5cGUnLCBkb2N0eXBlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xyXG4gIGVycm9yLm5vdGUgPSBlcnJvcjsgLy9jb25zb2xlLmVycm9yKGVycm9yKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeG1sLCB1c2VyT3B0aW9ucykge1xyXG5cclxuICB2YXIgcGFyc2VyID0gcHVyZUpzUGFyc2VyID8gc2F4LnBhcnNlcih0cnVlLCB7fSkgOiBwYXJzZXIgPSBuZXcgZXhwYXQuUGFyc2VyKCdVVEYtOCcpO1xyXG4gIHZhciByZXN1bHQgPSB7fTtcclxuICBjdXJyZW50RWxlbWVudCA9IHJlc3VsdDtcclxuXHJcbiAgb3B0aW9ucyA9IHZhbGlkYXRlT3B0aW9ucyh1c2VyT3B0aW9ucyk7XHJcblxyXG4gIGlmIChwdXJlSnNQYXJzZXIpIHtcclxuICAgIHBhcnNlci5vcHQgPSB7c3RyaWN0RW50aXRpZXM6IHRydWV9O1xyXG4gICAgcGFyc2VyLm9ub3BlbnRhZyA9IG9uU3RhcnRFbGVtZW50O1xyXG4gICAgcGFyc2VyLm9udGV4dCA9IG9uVGV4dDtcclxuICAgIHBhcnNlci5vbmNvbW1lbnQgPSBvbkNvbW1lbnQ7XHJcbiAgICBwYXJzZXIub25jbG9zZXRhZyA9IG9uRW5kRWxlbWVudDtcclxuICAgIHBhcnNlci5vbmVycm9yID0gb25FcnJvcjtcclxuICAgIHBhcnNlci5vbmNkYXRhID0gb25DZGF0YTtcclxuICAgIHBhcnNlci5vbmRvY3R5cGUgPSBvbkRvY3R5cGU7XHJcbiAgICBwYXJzZXIub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24gPSBvbkluc3RydWN0aW9uO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwYXJzZXIub24oJ3N0YXJ0RWxlbWVudCcsIG9uU3RhcnRFbGVtZW50KTtcclxuICAgIHBhcnNlci5vbigndGV4dCcsIG9uVGV4dCk7XHJcbiAgICBwYXJzZXIub24oJ2NvbW1lbnQnLCBvbkNvbW1lbnQpO1xyXG4gICAgcGFyc2VyLm9uKCdlbmRFbGVtZW50Jywgb25FbmRFbGVtZW50KTtcclxuICAgIHBhcnNlci5vbignZXJyb3InLCBvbkVycm9yKTtcclxuICAgIC8vcGFyc2VyLm9uKCdzdGFydENkYXRhJywgb25TdGFydENkYXRhKTtcclxuICAgIC8vcGFyc2VyLm9uKCdlbmRDZGF0YScsIG9uRW5kQ2RhdGEpO1xyXG4gICAgLy9wYXJzZXIub24oJ2VudGl0eURlY2wnLCBvbkVudGl0eURlY2wpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHB1cmVKc1BhcnNlcikge1xyXG4gICAgcGFyc2VyLndyaXRlKHhtbCkuY2xvc2UoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFwYXJzZXIucGFyc2UoeG1sKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1hNTCBwYXJzaW5nIGVycm9yOiAnICsgcGFyc2VyLmdldEVycm9yKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHJlc3VsdFtvcHRpb25zLmVsZW1lbnRzS2V5XSkge1xyXG4gICAgdmFyIHRlbXAgPSByZXN1bHRbb3B0aW9ucy5lbGVtZW50c0tleV07XHJcbiAgICBkZWxldGUgcmVzdWx0W29wdGlvbnMuZWxlbWVudHNLZXldO1xyXG4gICAgcmVzdWx0W29wdGlvbnMuZWxlbWVudHNLZXldID0gdGVtcDtcclxuICAgIGRlbGV0ZSByZXN1bHQudGV4dDtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcblxyXG59O1xyXG5cblxuLyoqKi8gfSksXG4vKiA1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDU1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblN0cmVhbS5Xcml0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUxKTtcblN0cmVhbS5EdXBsZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Mik7XG5TdHJlYW0uVHJhbnNmb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTMpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTQpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xudXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NSk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDYpO1xudmFyIGRlc3Ryb3lJbXBsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn1cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KS5FdmVudEVtaXR0ZXI7XG5cblxuLyoqKi8gfSksXG4vKiA1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07XG5cbi8qKiovIH0pLFxuLyogNTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge3ZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0OCk7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKSlcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xudXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59XG5cbi8qKiovIH0pLFxuLyogNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGhlbHBlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKS5pc0FycmF5O1xuXG52YXIgY3VycmVudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50TmFtZTtcblxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKHVzZXJPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gaGVscGVyLmNvcHlPcHRpb25zKHVzZXJPcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZURlY2xhcmF0aW9uJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdpZ25vcmVJbnN0cnVjdGlvbicsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnaWdub3JlQXR0cmlidXRlcycsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnaWdub3JlVGV4dCcsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnaWdub3JlQ29tbWVudCcsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnaWdub3JlQ2RhdGEnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2lnbm9yZURvY3R5cGUnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2NvbXBhY3QnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2luZGVudFRleHQnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoJ2luZGVudENkYXRhJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdpbmRlbnRBdHRyaWJ1dGVzJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKCdpbmRlbnRJbnN0cnVjdGlvbicsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnZnVsbFRhZ0VtcHR5RWxlbWVudCcsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cygnbm9RdW90ZXNGb3JOYXRpdmVBdHRyaWJ1dGVzJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVTcGFjZXNFeGlzdHMob3B0aW9ucyk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zcGFjZXMgPT09ICdudW1iZXInKSB7XG4gICAgb3B0aW9ucy5zcGFjZXMgPSBBcnJheShvcHRpb25zLnNwYWNlcyArIDEpLmpvaW4oJyAnKTtcbiAgfVxuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdkZWNsYXJhdGlvbicsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdpbnN0cnVjdGlvbicsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdhdHRyaWJ1dGVzJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ3RleHQnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygnY29tbWVudCcsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdjZGF0YScsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdkb2N0eXBlJywgb3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoJ3R5cGUnLCBvcHRpb25zKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cygnbmFtZScsIG9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKCdlbGVtZW50cycsIG9wdGlvbnMpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnZG9jdHlwZScsIG9wdGlvbnMpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnaW5zdHJ1Y3Rpb24nLCBvcHRpb25zKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2NkYXRhJywgb3B0aW9ucyk7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdjb21tZW50Jywgb3B0aW9ucyk7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCd0ZXh0Jywgb3B0aW9ucyk7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdpbnN0cnVjdGlvbk5hbWUnLCBvcHRpb25zKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoJ2VsZW1lbnROYW1lJywgb3B0aW9ucyk7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdhdHRyaWJ1dGVOYW1lJywgb3B0aW9ucyk7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKCdhdHRyaWJ1dGVWYWx1ZScsIG9wdGlvbnMpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnYXR0cmlidXRlcycsIG9wdGlvbnMpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cygnZnVsbFRhZ0VtcHR5RWxlbWVudCcsIG9wdGlvbnMpO1xuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCwgZmlyc3RMaW5lKSB7XG4gIHJldHVybiAoIWZpcnN0TGluZSAmJiBvcHRpb25zLnNwYWNlcyA/ICdcXG4nIDogJycpICsgQXJyYXkoZGVwdGggKyAxKS5qb2luKG9wdGlvbnMuc3BhY2VzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIG9wdGlvbnMsIGRlcHRoKSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKCdhdHRyaWJ1dGVzRm4nIGluIG9wdGlvbnMpIHtcbiAgICBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzRm4oYXR0cmlidXRlcywgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCk7XG4gIH1cbiAgdmFyIGtleSwgYXR0ciwgYXR0ck5hbWUsIHF1b3RlLCByZXN1bHQgPSBbXTtcbiAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkgJiYgYXR0cmlidXRlc1trZXldICE9PSBudWxsICYmIGF0dHJpYnV0ZXNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBxdW90ZSA9IG9wdGlvbnMubm9RdW90ZXNGb3JOYXRpdmVBdHRyaWJ1dGVzICYmIHR5cGVvZiBhdHRyaWJ1dGVzW2tleV0gIT09ICdzdHJpbmcnID8gJycgOiAnXCInO1xuICAgICAgYXR0ciA9ICcnICsgYXR0cmlidXRlc1trZXldOyAvLyBlbnN1cmUgbnVtYmVyIGFuZCBib29sZWFuIGFyZSBjb252ZXJ0ZWQgdG8gU3RyaW5nXG4gICAgICBhdHRyID0gYXR0ci5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgICBhdHRyTmFtZSA9ICdhdHRyaWJ1dGVOYW1lRm4nIGluIG9wdGlvbnMgPyBvcHRpb25zLmF0dHJpYnV0ZU5hbWVGbihrZXksIGF0dHIsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDoga2V5O1xuICAgICAgcmVzdWx0LnB1c2goKG9wdGlvbnMuc3BhY2VzICYmIG9wdGlvbnMuaW5kZW50QXR0cmlidXRlcz8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCsxLCBmYWxzZSkgOiAnICcpKTtcbiAgICAgIHJlc3VsdC5wdXNoKGF0dHJOYW1lICsgJz0nICsgcXVvdGUgKyAoJ2F0dHJpYnV0ZVZhbHVlRm4nIGluIG9wdGlvbnMgPyBvcHRpb25zLmF0dHJpYnV0ZVZhbHVlRm4oYXR0ciwga2V5LCBjdXJyZW50RWxlbWVudE5hbWUsIGN1cnJlbnRFbGVtZW50KSA6IGF0dHIpICsgcXVvdGUpO1xuICAgIH1cbiAgfVxuICBpZiAoYXR0cmlidXRlcyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggJiYgb3B0aW9ucy5zcGFjZXMgJiYgb3B0aW9ucy5pbmRlbnRBdHRyaWJ1dGVzKSB7XG4gICAgcmVzdWx0LnB1c2god3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCwgZmFsc2UpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiB3cml0ZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uLCBvcHRpb25zLCBkZXB0aCkge1xuICBjdXJyZW50RWxlbWVudCA9IGRlY2xhcmF0aW9uO1xuICBjdXJyZW50RWxlbWVudE5hbWUgPSAneG1sJztcbiAgcmV0dXJuIG9wdGlvbnMuaWdub3JlRGVjbGFyYXRpb24gPyAnJyA6ICAnPD8nICsgJ3htbCcgKyB3cml0ZUF0dHJpYnV0ZXMoZGVjbGFyYXRpb25bb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSwgb3B0aW9ucywgZGVwdGgpICsgJz8+Jztcbn1cblxuZnVuY3Rpb24gd3JpdGVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbiwgb3B0aW9ucywgZGVwdGgpIHtcbiAgaWYgKG9wdGlvbnMuaWdub3JlSW5zdHJ1Y3Rpb24pIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaW5zdHJ1Y3Rpb24pIHtcbiAgICBpZiAoaW5zdHJ1Y3Rpb24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBpbnN0cnVjdGlvbk5hbWUgPSAnaW5zdHJ1Y3Rpb25OYW1lRm4nIGluIG9wdGlvbnMgPyBvcHRpb25zLmluc3RydWN0aW9uTmFtZUZuKGtleSwgaW5zdHJ1Y3Rpb25ba2V5XSwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCkgOiBrZXk7XG4gIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb25ba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICBjdXJyZW50RWxlbWVudCA9IGluc3RydWN0aW9uO1xuICAgIGN1cnJlbnRFbGVtZW50TmFtZSA9IGluc3RydWN0aW9uTmFtZTtcbiAgICByZXR1cm4gJzw/JyArIGluc3RydWN0aW9uTmFtZSArIHdyaXRlQXR0cmlidXRlcyhpbnN0cnVjdGlvbltrZXldW29wdGlvbnMuYXR0cmlidXRlc0tleV0sIG9wdGlvbnMsIGRlcHRoKSArICc/Pic7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RydWN0aW9uVmFsdWUgPSBpbnN0cnVjdGlvbltrZXldID8gaW5zdHJ1Y3Rpb25ba2V5XSA6ICcnO1xuICAgIGlmICgnaW5zdHJ1Y3Rpb25GbicgaW4gb3B0aW9ucykgaW5zdHJ1Y3Rpb25WYWx1ZSA9IG9wdGlvbnMuaW5zdHJ1Y3Rpb25GbihpbnN0cnVjdGlvblZhbHVlLCBrZXksIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpO1xuICAgIHJldHVybiAnPD8nICsgaW5zdHJ1Y3Rpb25OYW1lICsgKGluc3RydWN0aW9uVmFsdWUgPyAnICcgKyBpbnN0cnVjdGlvblZhbHVlIDogJycpICsgJz8+JztcbiAgfVxufVxuXG5mdW5jdGlvbiB3cml0ZUNvbW1lbnQoY29tbWVudCwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5pZ25vcmVDb21tZW50ID8gJycgOiAnPCEtLScgKyAoJ2NvbW1lbnRGbicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuY29tbWVudEZuKGNvbW1lbnQsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogY29tbWVudCkgKyAnLS0+Jztcbn1cblxuZnVuY3Rpb24gd3JpdGVDZGF0YShjZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5pZ25vcmVDZGF0YSA/ICcnIDogJzwhW0NEQVRBWycgKyAoJ2NkYXRhRm4nIGluIG9wdGlvbnMgPyBvcHRpb25zLmNkYXRhRm4oY2RhdGEsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogY2RhdGEucmVwbGFjZSgnXV0+JywgJ11dXV0+PCFbQ0RBVEFbPicpKSArICddXT4nO1xufVxuXG5mdW5jdGlvbiB3cml0ZURvY3R5cGUoZG9jdHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5pZ25vcmVEb2N0eXBlID8gJycgOiAnPCFET0NUWVBFICcgKyAoJ2RvY3R5cGVGbicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZG9jdHlwZUZuKGRvY3R5cGUsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogZG9jdHlwZSkgKyAnPic7XG59XG5cbmZ1bmN0aW9uIHdyaXRlVGV4dCh0ZXh0LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZVRleHQpIHJldHVybiAnJztcbiAgdGV4dCA9ICcnICsgdGV4dDsgLy8gZW5zdXJlIE51bWJlciBhbmQgQm9vbGVhbiBhcmUgY29udmVydGVkIHRvIFN0cmluZ1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mYW1wOy9nLCAnJicpOyAvLyBkZXNhbml0aXplIHRvIGF2b2lkIGRvdWJsZSBzYW5pdGl6YXRpb25cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICByZXR1cm4gJ3RleHRGbicgaW4gb3B0aW9ucyA/IG9wdGlvbnMudGV4dEZuKHRleHQsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogdGV4dDtcbn1cblxuZnVuY3Rpb24gaGFzQ29udGVudChlbGVtZW50LCBvcHRpb25zKSB7XG4gIHZhciBpO1xuICBpZiAoZWxlbWVudC5lbGVtZW50cyAmJiBlbGVtZW50LmVsZW1lbnRzLmxlbmd0aCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50LmVsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzd2l0Y2ggKGVsZW1lbnQuZWxlbWVudHNbaV1bb3B0aW9ucy50eXBlS2V5XSkge1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIGlmIChvcHRpb25zLmluZGVudFRleHQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhazsgLy8gc2tpcCB0byBuZXh0IGtleVxuICAgICAgY2FzZSAnY2RhdGEnOlxuICAgICAgICBpZiAob3B0aW9ucy5pbmRlbnRDZGF0YSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAvLyBza2lwIHRvIG5leHQga2V5XG4gICAgICBjYXNlICdpbnN0cnVjdGlvbic6XG4gICAgICAgIGlmIChvcHRpb25zLmluZGVudEluc3RydWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7IC8vIHNraXAgdG8gbmV4dCBrZXlcbiAgICAgIGNhc2UgJ2RvY3R5cGUnOlxuICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICBjYXNlICdlbGVtZW50JzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB3cml0ZUVsZW1lbnQoZWxlbWVudCwgb3B0aW9ucywgZGVwdGgpIHtcbiAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICBjdXJyZW50RWxlbWVudE5hbWUgPSBlbGVtZW50Lm5hbWU7XG4gIHZhciB4bWwgPSBbXSwgZWxlbWVudE5hbWUgPSAnZWxlbWVudE5hbWVGbicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZWxlbWVudE5hbWVGbihlbGVtZW50Lm5hbWUsIGVsZW1lbnQpIDogZWxlbWVudC5uYW1lO1xuICB4bWwucHVzaCgnPCcgKyBlbGVtZW50TmFtZSk7XG4gIGlmIChlbGVtZW50W29wdGlvbnMuYXR0cmlidXRlc0tleV0pIHtcbiAgICB4bWwucHVzaCh3cml0ZUF0dHJpYnV0ZXMoZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldLCBvcHRpb25zLCBkZXB0aCkpO1xuICB9XG4gIHZhciB3aXRoQ2xvc2luZ1RhZyA9IGVsZW1lbnRbb3B0aW9ucy5lbGVtZW50c0tleV0gJiYgZWxlbWVudFtvcHRpb25zLmVsZW1lbnRzS2V5XS5sZW5ndGggfHwgZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldICYmIGVsZW1lbnRbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XVsneG1sOnNwYWNlJ10gPT09ICdwcmVzZXJ2ZSc7XG4gIGlmICghd2l0aENsb3NpbmdUYWcpIHtcbiAgICBpZiAoJ2Z1bGxUYWdFbXB0eUVsZW1lbnRGbicgaW4gb3B0aW9ucykge1xuICAgICAgd2l0aENsb3NpbmdUYWcgPSBvcHRpb25zLmZ1bGxUYWdFbXB0eUVsZW1lbnRGbihlbGVtZW50Lm5hbWUsIGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aXRoQ2xvc2luZ1RhZyA9IG9wdGlvbnMuZnVsbFRhZ0VtcHR5RWxlbWVudDtcbiAgICB9XG4gIH1cbiAgaWYgKHdpdGhDbG9zaW5nVGFnKSB7XG4gICAgeG1sLnB1c2goJz4nKTtcbiAgICBpZiAoZWxlbWVudFtvcHRpb25zLmVsZW1lbnRzS2V5XSAmJiBlbGVtZW50W29wdGlvbnMuZWxlbWVudHNLZXldLmxlbmd0aCkge1xuICAgICAgeG1sLnB1c2god3JpdGVFbGVtZW50cyhlbGVtZW50W29wdGlvbnMuZWxlbWVudHNLZXldLCBvcHRpb25zLCBkZXB0aCArIDEpKTtcbiAgICAgIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIGN1cnJlbnRFbGVtZW50TmFtZSA9IGVsZW1lbnQubmFtZTtcbiAgICB9XG4gICAgeG1sLnB1c2gob3B0aW9ucy5zcGFjZXMgJiYgaGFzQ29udGVudChlbGVtZW50LCBvcHRpb25zKSA/ICdcXG4nICsgQXJyYXkoZGVwdGggKyAxKS5qb2luKG9wdGlvbnMuc3BhY2VzKSA6ICcnKTtcbiAgICB4bWwucHVzaCgnPC8nICsgZWxlbWVudE5hbWUgKyAnPicpO1xuICB9IGVsc2Uge1xuICAgIHhtbC5wdXNoKCcvPicpO1xuICB9XG4gIHJldHVybiB4bWwuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRWxlbWVudHMoZWxlbWVudHMsIG9wdGlvbnMsIGRlcHRoLCBmaXJzdExpbmUpIHtcbiAgcmV0dXJuIGVsZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoeG1sLCBlbGVtZW50KSB7XG4gICAgdmFyIGluZGVudCA9IHdyaXRlSW5kZW50YXRpb24ob3B0aW9ucywgZGVwdGgsIGZpcnN0TGluZSAmJiAheG1sKTtcbiAgICBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgJ2VsZW1lbnQnOiByZXR1cm4geG1sICsgaW5kZW50ICsgd3JpdGVFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMsIGRlcHRoKTtcbiAgICBjYXNlICdjb21tZW50JzogcmV0dXJuIHhtbCArIGluZGVudCArIHdyaXRlQ29tbWVudChlbGVtZW50W29wdGlvbnMuY29tbWVudEtleV0sIG9wdGlvbnMpO1xuICAgIGNhc2UgJ2RvY3R5cGUnOiByZXR1cm4geG1sICsgaW5kZW50ICsgd3JpdGVEb2N0eXBlKGVsZW1lbnRbb3B0aW9ucy5kb2N0eXBlS2V5XSwgb3B0aW9ucyk7XG4gICAgY2FzZSAnY2RhdGEnOiByZXR1cm4geG1sICsgKG9wdGlvbnMuaW5kZW50Q2RhdGEgPyBpbmRlbnQgOiAnJykgKyB3cml0ZUNkYXRhKGVsZW1lbnRbb3B0aW9ucy5jZGF0YUtleV0sIG9wdGlvbnMpO1xuICAgIGNhc2UgJ3RleHQnOiByZXR1cm4geG1sICsgKG9wdGlvbnMuaW5kZW50VGV4dCA/IGluZGVudCA6ICcnKSArIHdyaXRlVGV4dChlbGVtZW50W29wdGlvbnMudGV4dEtleV0sIG9wdGlvbnMpO1xuICAgIGNhc2UgJ2luc3RydWN0aW9uJzpcbiAgICAgIHZhciBpbnN0cnVjdGlvbiA9IHt9O1xuICAgICAgaW5zdHJ1Y3Rpb25bZWxlbWVudFtvcHRpb25zLm5hbWVLZXldXSA9IGVsZW1lbnRbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA/IGVsZW1lbnQgOiBlbGVtZW50W29wdGlvbnMuaW5zdHJ1Y3Rpb25LZXldO1xuICAgICAgcmV0dXJuIHhtbCArIChvcHRpb25zLmluZGVudEluc3RydWN0aW9uID8gaW5kZW50IDogJycpICsgd3JpdGVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbiwgb3B0aW9ucywgZGVwdGgpO1xuICAgIH1cbiAgfSwgJycpO1xufVxuXG5mdW5jdGlvbiBoYXNDb250ZW50Q29tcGFjdChlbGVtZW50LCBvcHRpb25zLCBhbnlDb250ZW50KSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBvcHRpb25zLnBhcmVudEtleTpcbiAgICAgIGNhc2Ugb3B0aW9ucy5hdHRyaWJ1dGVzS2V5OlxuICAgICAgICBicmVhazsgLy8gc2tpcCB0byBuZXh0IGtleVxuICAgICAgY2FzZSBvcHRpb25zLnRleHRLZXk6XG4gICAgICAgIGlmIChvcHRpb25zLmluZGVudFRleHQgfHwgYW55Q29udGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAvLyBza2lwIHRvIG5leHQga2V5XG4gICAgICBjYXNlIG9wdGlvbnMuY2RhdGFLZXk6XG4gICAgICAgIGlmIChvcHRpb25zLmluZGVudENkYXRhIHx8IGFueUNvbnRlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhazsgLy8gc2tpcCB0byBuZXh0IGtleVxuICAgICAgY2FzZSBvcHRpb25zLmluc3RydWN0aW9uS2V5OlxuICAgICAgICBpZiAob3B0aW9ucy5pbmRlbnRJbnN0cnVjdGlvbiB8fCBhbnlDb250ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7IC8vIHNraXAgdG8gbmV4dCBrZXlcbiAgICAgIGNhc2Ugb3B0aW9ucy5kb2N0eXBlS2V5OlxuICAgICAgY2FzZSBvcHRpb25zLmNvbW1lbnRLZXk6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVFbGVtZW50Q29tcGFjdChlbGVtZW50LCBuYW1lLCBvcHRpb25zLCBkZXB0aCwgaW5kZW50KSB7XG4gIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgY3VycmVudEVsZW1lbnROYW1lID0gbmFtZTtcbiAgdmFyIGVsZW1lbnROYW1lID0gJ2VsZW1lbnROYW1lRm4nIGluIG9wdGlvbnMgPyBvcHRpb25zLmVsZW1lbnROYW1lRm4obmFtZSwgZWxlbWVudCkgOiBuYW1lO1xuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gJycpIHtcbiAgICByZXR1cm4gJ2Z1bGxUYWdFbXB0eUVsZW1lbnRGbicgaW4gb3B0aW9ucyAmJiBvcHRpb25zLmZ1bGxUYWdFbXB0eUVsZW1lbnRGbihuYW1lLCBlbGVtZW50KSB8fCBvcHRpb25zLmZ1bGxUYWdFbXB0eUVsZW1lbnQgPyAnPCcgKyBlbGVtZW50TmFtZSArICc+PC8nICsgZWxlbWVudE5hbWUgKyAnPicgOiAnPCcgKyBlbGVtZW50TmFtZSArICcvPic7XG4gIH1cbiAgdmFyIHhtbCA9IFtdO1xuICBpZiAobmFtZSkge1xuICAgIHhtbC5wdXNoKCc8JyArIGVsZW1lbnROYW1lKTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgIT09ICdvYmplY3QnKSB7XG4gICAgICB4bWwucHVzaCgnPicgKyB3cml0ZVRleHQoZWxlbWVudCxvcHRpb25zKSArICc8LycgKyBlbGVtZW50TmFtZSArICc+Jyk7XG4gICAgICByZXR1cm4geG1sLmpvaW4oJycpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldKSB7XG4gICAgICB4bWwucHVzaCh3cml0ZUF0dHJpYnV0ZXMoZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldLCBvcHRpb25zLCBkZXB0aCkpO1xuICAgIH1cbiAgICB2YXIgd2l0aENsb3NpbmdUYWcgPSBoYXNDb250ZW50Q29tcGFjdChlbGVtZW50LCBvcHRpb25zLCB0cnVlKSB8fCBlbGVtZW50W29wdGlvbnMuYXR0cmlidXRlc0tleV0gJiYgZWxlbWVudFtvcHRpb25zLmF0dHJpYnV0ZXNLZXldWyd4bWw6c3BhY2UnXSA9PT0gJ3ByZXNlcnZlJztcbiAgICBpZiAoIXdpdGhDbG9zaW5nVGFnKSB7XG4gICAgICBpZiAoJ2Z1bGxUYWdFbXB0eUVsZW1lbnRGbicgaW4gb3B0aW9ucykge1xuICAgICAgICB3aXRoQ2xvc2luZ1RhZyA9IG9wdGlvbnMuZnVsbFRhZ0VtcHR5RWxlbWVudEZuKG5hbWUsIGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aENsb3NpbmdUYWcgPSBvcHRpb25zLmZ1bGxUYWdFbXB0eUVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh3aXRoQ2xvc2luZ1RhZykge1xuICAgICAgeG1sLnB1c2goJz4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeG1sLnB1c2goJy8+Jyk7XG4gICAgICByZXR1cm4geG1sLmpvaW4oJycpO1xuICAgIH1cbiAgfVxuICB4bWwucHVzaCh3cml0ZUVsZW1lbnRzQ29tcGFjdChlbGVtZW50LCBvcHRpb25zLCBkZXB0aCArIDEsIGZhbHNlKSk7XG4gIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgY3VycmVudEVsZW1lbnROYW1lID0gbmFtZTtcbiAgaWYgKG5hbWUpIHtcbiAgICB4bWwucHVzaCgoaW5kZW50ID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCwgZmFsc2UpIDogJycpICsgJzwvJyArIGVsZW1lbnROYW1lICsgJz4nKTtcbiAgfVxuICByZXR1cm4geG1sLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiB3cml0ZUVsZW1lbnRzQ29tcGFjdChlbGVtZW50LCBvcHRpb25zLCBkZXB0aCwgZmlyc3RMaW5lKSB7XG4gIHZhciBpLCBrZXksIG5vZGVzLCB4bWwgPSBbXTtcbiAgZm9yIChrZXkgaW4gZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIG5vZGVzID0gaXNBcnJheShlbGVtZW50W2tleV0pID8gZWxlbWVudFtrZXldIDogW2VsZW1lbnRba2V5XV07XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBvcHRpb25zLmRlY2xhcmF0aW9uS2V5OiB4bWwucHVzaCh3cml0ZURlY2xhcmF0aW9uKG5vZGVzW2ldLCBvcHRpb25zLCBkZXB0aCkpOyBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zLmluc3RydWN0aW9uS2V5OiB4bWwucHVzaCgob3B0aW9ucy5pbmRlbnRJbnN0cnVjdGlvbiA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9ucywgZGVwdGgsIGZpcnN0TGluZSkgOiAnJykgKyB3cml0ZUluc3RydWN0aW9uKG5vZGVzW2ldLCBvcHRpb25zLCBkZXB0aCkpOyBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zLmF0dHJpYnV0ZXNLZXk6IGNhc2Ugb3B0aW9ucy5wYXJlbnRLZXk6IGJyZWFrOyAvLyBza2lwXG4gICAgICAgIGNhc2Ugb3B0aW9ucy50ZXh0S2V5OiB4bWwucHVzaCgob3B0aW9ucy5pbmRlbnRUZXh0ID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCwgZmlyc3RMaW5lKSA6ICcnKSArIHdyaXRlVGV4dChub2Rlc1tpXSwgb3B0aW9ucykpOyBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zLmNkYXRhS2V5OiB4bWwucHVzaCgob3B0aW9ucy5pbmRlbnRDZGF0YSA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9ucywgZGVwdGgsIGZpcnN0TGluZSkgOiAnJykgKyB3cml0ZUNkYXRhKG5vZGVzW2ldLCBvcHRpb25zKSk7IGJyZWFrO1xuICAgICAgICBjYXNlIG9wdGlvbnMuZG9jdHlwZUtleTogeG1sLnB1c2god3JpdGVJbmRlbnRhdGlvbihvcHRpb25zLCBkZXB0aCwgZmlyc3RMaW5lKSArIHdyaXRlRG9jdHlwZShub2Rlc1tpXSwgb3B0aW9ucykpOyBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zLmNvbW1lbnRLZXk6IHhtbC5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9ucywgZGVwdGgsIGZpcnN0TGluZSkgKyB3cml0ZUNvbW1lbnQobm9kZXNbaV0sIG9wdGlvbnMpKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHhtbC5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9ucywgZGVwdGgsIGZpcnN0TGluZSkgKyB3cml0ZUVsZW1lbnRDb21wYWN0KG5vZGVzW2ldLCBrZXksIG9wdGlvbnMsIGRlcHRoLCBoYXNDb250ZW50Q29tcGFjdChub2Rlc1tpXSwgb3B0aW9ucykpKTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdExpbmUgPSBmaXJzdExpbmUgJiYgIXhtbC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB4bWwuam9pbignJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGpzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHZhciB4bWwgPSBbXTtcbiAgY3VycmVudEVsZW1lbnQgPSBqcztcbiAgY3VycmVudEVsZW1lbnROYW1lID0gJ19yb290Xyc7XG4gIGlmIChvcHRpb25zLmNvbXBhY3QpIHtcbiAgICB4bWwucHVzaCh3cml0ZUVsZW1lbnRzQ29tcGFjdChqcywgb3B0aW9ucywgMCwgdHJ1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGlmIChqc1tvcHRpb25zLmRlY2xhcmF0aW9uS2V5XSkge1xuICAgICAgeG1sLnB1c2god3JpdGVEZWNsYXJhdGlvbihqc1tvcHRpb25zLmRlY2xhcmF0aW9uS2V5XSwgb3B0aW9ucywgMCkpO1xuICAgIH1cbiAgICBpZiAoanNbb3B0aW9ucy5lbGVtZW50c0tleV0gJiYganNbb3B0aW9ucy5lbGVtZW50c0tleV0ubGVuZ3RoKSB7XG4gICAgICB4bWwucHVzaCh3cml0ZUVsZW1lbnRzKGpzW29wdGlvbnMuZWxlbWVudHNLZXldLCBvcHRpb25zLCAwLCAheG1sLmxlbmd0aCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4geG1sLmpvaW4oJycpO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGJvcmRlcl9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1OSk7XHJcbmNsYXNzIEJvcmRlclByb3BlcnR5IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iocm9vdEtleSwgb3B0aW9ucyA9IHsgY29sb3I6IFwiYXV0b1wiLCBzcGFjZTogMSwgdmFsdWU6IFwic2luZ2xlXCIsIHNpemU6IDYgfSkge1xyXG4gICAgICAgIHN1cGVyKHJvb3RLZXkpO1xyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gbmV3IGJvcmRlcl9hdHRyaWJ1dGVzXzEuQm9yZGVyQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxyXG4gICAgICAgICAgICBzcGFjZTogb3B0aW9ucy5zcGFjZSxcclxuICAgICAgICAgICAgdmFsOiBvcHRpb25zLnZhbHVlLFxyXG4gICAgICAgICAgICBzejogb3B0aW9ucy5zaXplLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGF0dHJzKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBCb3JkZXIgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnBCZHJcIik7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudG9wICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgYm9yZGVyUHJvcGVydHkgPSBuZXcgQm9yZGVyUHJvcGVydHkoXCJ3OnRvcFwiLCBvcHRpb25zLnRvcCk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGJvcmRlclByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYm90dG9tICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgYm9yZGVyUHJvcGVydHkgPSBuZXcgQm9yZGVyUHJvcGVydHkoXCJ3OmJvdHRvbVwiLCBvcHRpb25zLmJvdHRvbSk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGJvcmRlclByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlclByb3BlcnR5ID0gbmV3IEJvcmRlclByb3BlcnR5KFwidzpsZWZ0XCIsIG9wdGlvbnMubGVmdCk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGJvcmRlclByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBib3JkZXJQcm9wZXJ0eSA9IG5ldyBCb3JkZXJQcm9wZXJ0eShcInc6cmlnaHRcIiwgb3B0aW9ucy5yaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGJvcmRlclByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Cb3JkZXIgPSBCb3JkZXI7XHJcbmNsYXNzIFRoZW1hdGljQnJlYWsgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6cEJkclwiKTtcclxuICAgICAgICBjb25zdCBib3R0b20gPSBuZXcgQm9yZGVyUHJvcGVydHkoXCJ3OmJvdHRvbVwiLCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImF1dG9cIixcclxuICAgICAgICAgICAgc3BhY2U6IDEsXHJcbiAgICAgICAgICAgIHZhbHVlOiBcInNpbmdsZVwiLFxyXG4gICAgICAgICAgICBzaXplOiA2LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGJvdHRvbSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UaGVtYXRpY0JyZWFrID0gVGhlbWF0aWNCcmVhaztcclxuXG5cbi8qKiovIH0pLFxuLyogNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgSW5kZW50QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBsZWZ0OiBcInc6bGVmdFwiLFxyXG4gICAgICAgICAgICBoYW5naW5nOiBcInc6aGFuZ2luZ1wiLFxyXG4gICAgICAgICAgICBmaXJzdExpbmU6IFwidzpmaXJzdExpbmVcIixcclxuICAgICAgICAgICAgc3RhcnQ6IFwidzpzdGFydFwiLFxyXG4gICAgICAgICAgICBlbmQ6IFwidzplbmRcIixcclxuICAgICAgICAgICAgcmlnaHQ6IFwidzplbmRcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEluZGVudCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGF0dHJzKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmluZFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgSW5kZW50QXR0cmlidXRlcyhhdHRycykpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSW5kZW50ID0gSW5kZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiA2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBLZWVwTGluZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6a2VlcExpbmVzXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuS2VlcExpbmVzID0gS2VlcExpbmVzO1xyXG5jbGFzcyBLZWVwTmV4dCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzprZWVwTmV4dFwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLktlZXBOZXh0ID0gS2VlcE5leHQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHJ1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuY2xhc3MgQnJlYWsgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6YnJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwicGFnZVwiLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBQYWdlQnJlYWsgZXh0ZW5kcyBydW5fMS5SdW4ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoe30pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCcmVhaygpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBhZ2VCcmVhayA9IFBhZ2VCcmVhaztcclxuY2xhc3MgUGFnZUJyZWFrQmVmb3JlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnBhZ2VCcmVha0JlZm9yZVwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBhZ2VCcmVha0JlZm9yZSA9IFBhZ2VCcmVha0JlZm9yZTtcclxuXG5cbi8qKiovIH0pLFxuLyogNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgQnJlYWsgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6YnJcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CcmVhayA9IEJyZWFrO1xyXG5cblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgdW5kZXJsaW5lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcclxuZXhwb3J0cy5VbmRlcmxpbmUgPSB1bmRlcmxpbmVfMS5VbmRlcmxpbmU7XHJcbnZhciBlbXBoYXNpc19tYXJrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcclxuZXhwb3J0cy5FbXBoYXNpc01hcmsgPSBlbXBoYXNpc19tYXJrXzEuRW1waGFzaXNNYXJrO1xyXG52YXIgc2NyaXB0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KTtcclxuZXhwb3J0cy5TdWJTY3JpcHQgPSBzY3JpcHRfMS5TdWJTY3JpcHQ7XHJcbmV4cG9ydHMuU3VwZXJTY3JpcHQgPSBzY3JpcHRfMS5TdXBlclNjcmlwdDtcclxudmFyIHJ1bl9mb250c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XHJcbmV4cG9ydHMuUnVuRm9udHMgPSBydW5fZm9udHNfMS5SdW5Gb250cztcclxuY2xhc3MgQm9sZCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpiXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHRydWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQm9sZCA9IEJvbGQ7XHJcbmNsYXNzIEJvbGRDb21wbGV4U2NyaXB0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmJDc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB0cnVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJvbGRDb21wbGV4U2NyaXB0ID0gQm9sZENvbXBsZXhTY3JpcHQ7XHJcbmNsYXNzIENoYXJhY3RlclNwYWNpbmcgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzcGFjaW5nXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNoYXJhY3RlclNwYWNpbmcgPSBDaGFyYWN0ZXJTcGFjaW5nO1xyXG5jbGFzcyBJdGFsaWNzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmlcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdHJ1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JdGFsaWNzID0gSXRhbGljcztcclxuY2xhc3MgSXRhbGljc0NvbXBsZXhTY3JpcHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6aUNzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHRydWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSXRhbGljc0NvbXBsZXhTY3JpcHQgPSBJdGFsaWNzQ29tcGxleFNjcmlwdDtcclxuY2xhc3MgQ2FwcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpjYXBzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHRydWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ2FwcyA9IENhcHM7XHJcbmNsYXNzIENvbG9yIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY29sb3IpIHtcclxuICAgICAgICBzdXBlcihcInc6Y29sb3JcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogY29sb3IsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29sb3IgPSBDb2xvcjtcclxuY2xhc3MgRG91YmxlU3RyaWtlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmRzdHJpa2VcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdHJ1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb3VibGVTdHJpa2UgPSBEb3VibGVTdHJpa2U7XHJcbmNsYXNzIEVtYm9zcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzplbWJvc3NcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdHJ1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FbWJvc3MgPSBFbWJvc3M7XHJcbmNsYXNzIEltcHJpbnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6aW1wcmludFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB0cnVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkltcHJpbnQgPSBJbXByaW50O1xyXG5jbGFzcyBTbWFsbENhcHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6c21hbGxDYXBzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHRydWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU21hbGxDYXBzID0gU21hbGxDYXBzO1xyXG5jbGFzcyBTdHJpa2UgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6c3RyaWtlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHRydWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RyaWtlID0gU3RyaWtlO1xyXG5jbGFzcyBTaXplIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc2l6ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzelwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiBzaXplLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNpemUgPSBTaXplO1xyXG5jbGFzcyBTaXplQ29tcGxleFNjcmlwdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcclxuICAgICAgICBzdXBlcihcInc6c3pDc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiBzaXplLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNpemVDb21wbGV4U2NyaXB0ID0gU2l6ZUNvbXBsZXhTY3JpcHQ7XHJcbmNsYXNzIFJpZ2h0VG9MZWZ0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnJ0bFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB0cnVlLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJpZ2h0VG9MZWZ0ID0gUmlnaHRUb0xlZnQ7XHJcbmNsYXNzIEhpZ2hsaWdodCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmhpZ2hsaWdodFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiBjb2xvcixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IaWdobGlnaHQgPSBIaWdobGlnaHQ7XHJcbmNsYXNzIEhpZ2hsaWdodENvbXBsZXhTY3JpcHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb2xvcikge1xyXG4gICAgICAgIHN1cGVyKFwidzpoaWdobGlnaHRDc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiBjb2xvcixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IaWdobGlnaHRDb21wbGV4U2NyaXB0ID0gSGlnaGxpZ2h0Q29tcGxleFNjcmlwdDtcclxuY2xhc3MgU2hhZGluZyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBmaWxsLCBjb2xvcikge1xyXG4gICAgICAgIHN1cGVyKFwidzpzaGRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdmFsdWUsXHJcbiAgICAgICAgICAgIGZpbGw6IGZpbGwsXHJcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaGFkaW5nID0gU2hhZGluZztcclxuY2xhc3MgU2hhZG93Q29tcGxleFNjcmlwdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBmaWxsLCBjb2xvcikge1xyXG4gICAgICAgIHN1cGVyKFwidzpzaGRDc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB2YWx1ZSxcclxuICAgICAgICAgICAgZmlsbDogZmlsbCxcclxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNoYWRvd0NvbXBsZXhTY3JpcHQgPSBTaGFkb3dDb21wbGV4U2NyaXB0O1xyXG5cblxuLyoqKi8gfSksXG4vKiA2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBWZXJ0aWNhbEFsaWduIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodHlwZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp2ZXJ0QWxpZ25cIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdHlwZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5WZXJ0aWNhbEFsaWduID0gVmVydGljYWxBbGlnbjtcclxuY2xhc3MgU3VwZXJTY3JpcHQgZXh0ZW5kcyBWZXJ0aWNhbEFsaWduIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwic3VwZXJzY3JpcHRcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TdXBlclNjcmlwdCA9IFN1cGVyU2NyaXB0O1xyXG5jbGFzcyBTdWJTY3JpcHQgZXh0ZW5kcyBWZXJ0aWNhbEFsaWduIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwic3Vic2NyaXB0XCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3ViU2NyaXB0ID0gU3ViU2NyaXB0O1xyXG5cblxuLyoqKi8gfSksXG4vKiA2OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBTdHlsZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBTdHlsZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHN0eWxlSWQpIHtcclxuICAgICAgICBzdXBlcihcInc6clN0eWxlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHlsZUF0dHJpYnV0ZXMoeyB2YWw6IHN0eWxlSWQgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTtcclxuXG5cbi8qKiovIH0pLFxuLyogNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzcGFjZV90eXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGV4dEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgc3BhY2U6IFwieG1sOnNwYWNlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBUZXh0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodGV4dCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBzcGFjZV90eXBlXzEuU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0ZXh0KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRleHQgPSBUZXh0O1xyXG5cblxuLyoqKi8gfSksXG4vKiA3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNzIpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE3MCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBBbGlnbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDphbGlnblwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BbGlnbiA9IEFsaWduO1xyXG5cblxuLyoqKi8gfSksXG4vKiA3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBQb3NpdGlvbk9mZnNldCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9mZnNldFZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDpwb3NPZmZzZXRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gob2Zmc2V0VmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Qb3NpdGlvbk9mZnNldCA9IFBvc2l0aW9uT2Zmc2V0O1xyXG5cblxuLyoqKi8gfSksXG4vKiA3NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE3MSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBkb2NfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNCk7XHJcbmNsYXNzIERvY1Byb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIndwOmRvY1ByXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkb2NfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEuRG9jUHJvcGVydGllc0F0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBpZDogMCxcclxuICAgICAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICAgICAgZGVzY3I6IFwiXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRG9jUHJvcGVydGllcyA9IERvY1Byb3BlcnRpZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGVmZmVjdF9leHRlbnRfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDUpO1xyXG5jbGFzcyBFZmZlY3RFeHRlbnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIndwOmVmZmVjdEV4dGVudFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZWZmZWN0X2V4dGVudF9hdHRyaWJ1dGVzXzEuRWZmZWN0RXh0ZW50QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGI6IDAsXHJcbiAgICAgICAgICAgIGw6IDAsXHJcbiAgICAgICAgICAgIHI6IDAsXHJcbiAgICAgICAgICAgIHQ6IDAsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRWZmZWN0RXh0ZW50ID0gRWZmZWN0RXh0ZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiA3OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBleHRlbnRfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDYpO1xyXG5jbGFzcyBFeHRlbnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDpleHRlbnRcIik7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IGV4dGVudF9hdHRyaWJ1dGVzXzEuRXh0ZW50QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGN4OiB4LFxyXG4gICAgICAgICAgICBjeTogeSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG4gICAgc2V0WFkoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5zZXQoe1xyXG4gICAgICAgICAgICBjeDogeCxcclxuICAgICAgICAgICAgY3k6IHksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FeHRlbnQgPSBFeHRlbnQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGdyYXBoaWNfZnJhbWVfbG9ja3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjA3KTtcclxuY2xhc3MgR3JhcGhpY0ZyYW1lUHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwid3A6Y052R3JhcGhpY0ZyYW1lUHJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGdyYXBoaWNfZnJhbWVfbG9ja3NfMS5HcmFwaGljRnJhbWVMb2NrcygpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdyYXBoaWNGcmFtZVByb3BlcnRpZXMgPSBHcmFwaGljRnJhbWVQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBBbmNob3JBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGRpc3RUOiBcImRpc3RUXCIsXHJcbiAgICAgICAgICAgIGRpc3RCOiBcImRpc3RCXCIsXHJcbiAgICAgICAgICAgIGRpc3RMOiBcImRpc3RMXCIsXHJcbiAgICAgICAgICAgIGRpc3RSOiBcImRpc3RSXCIsXHJcbiAgICAgICAgICAgIGFsbG93T3ZlcmxhcDogXCJhbGxvd092ZXJsYXBcIixcclxuICAgICAgICAgICAgYmVoaW5kRG9jOiBcImJlaGluZERvY1wiLFxyXG4gICAgICAgICAgICBsYXlvdXRJbkNlbGw6IFwibGF5b3V0SW5DZWxsXCIsXHJcbiAgICAgICAgICAgIGxvY2tlZDogXCJsb2NrZWRcIixcclxuICAgICAgICAgICAgcmVsYXRpdmVIZWlnaHQ6IFwicmVsYXRpdmVIZWlnaHRcIixcclxuICAgICAgICAgICAgc2ltcGxlUG9zOiBcInNpbXBsZVBvc1wiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BbmNob3JBdHRyaWJ1dGVzID0gQW5jaG9yQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogODEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgU3BhY2luZ0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgYWZ0ZXI6IFwidzphZnRlclwiLFxyXG4gICAgICAgICAgICBiZWZvcmU6IFwidzpiZWZvcmVcIixcclxuICAgICAgICAgICAgbGluZTogXCJ3OmxpbmVcIixcclxuICAgICAgICAgICAgbGluZVJ1bGU6IFwidzpsaW5lUnVsZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgU3BhY2luZyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6c3BhY2luZ1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3BhY2luZ0F0dHJpYnV0ZXMob3B0aW9ucykpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3BhY2luZyA9IFNwYWNpbmc7XHJcbmNsYXNzIENvbnRleHR1YWxTcGFjaW5nIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6Y29udGV4dHVhbFNwYWNpbmdcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdmFsdWUgPT09IGZhbHNlID8gMCA6IDEsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29udGV4dHVhbFNwYWNpbmcgPSBDb250ZXh0dWFsU3BhY2luZztcclxuXG5cbi8qKiovIH0pLFxuLyogODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIEhlYWRpbmdMZXZlbDtcclxuKGZ1bmN0aW9uIChIZWFkaW5nTGV2ZWwpIHtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfMVwiXSA9IFwiSGVhZGluZzFcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfMlwiXSA9IFwiSGVhZGluZzJcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfM1wiXSA9IFwiSGVhZGluZzNcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfNFwiXSA9IFwiSGVhZGluZzRcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfNVwiXSA9IFwiSGVhZGluZzVcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIkhFQURJTkdfNlwiXSA9IFwiSGVhZGluZzZcIjtcclxuICAgIEhlYWRpbmdMZXZlbFtcIlRJVExFXCJdID0gXCJUaXRsZVwiO1xyXG59KShIZWFkaW5nTGV2ZWwgPSBleHBvcnRzLkhlYWRpbmdMZXZlbCB8fCAoZXhwb3J0cy5IZWFkaW5nTGV2ZWwgPSB7fSkpO1xyXG5jbGFzcyBTdHlsZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHN0eWxlSWQpIHtcclxuICAgICAgICBzdXBlcihcInc6cFN0eWxlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB4bWxfY29tcG9uZW50c18xLkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHN0eWxlSWQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTtcclxuXG5cbi8qKiovIH0pLFxuLyogODMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGFiU3RvcCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHBvc2l0aW9uLCBsZWFkZXIpIHtcclxuICAgICAgICBzdXBlcihcInc6dGFic1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFiU3RvcEl0ZW0odHlwZSwgcG9zaXRpb24sIGxlYWRlcikpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFiU3RvcCA9IFRhYlN0b3A7XHJcbnZhciBUYWJTdG9wVHlwZTtcclxuKGZ1bmN0aW9uIChUYWJTdG9wVHlwZSkge1xyXG4gICAgVGFiU3RvcFR5cGVbXCJMRUZUXCJdID0gXCJsZWZ0XCI7XHJcbiAgICBUYWJTdG9wVHlwZVtcIlJJR0hUXCJdID0gXCJyaWdodFwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJDRU5URVJcIl0gPSBcImNlbnRlclwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJCQVJcIl0gPSBcImJhclwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJDTEVBUlwiXSA9IFwiY2xlYXJcIjtcclxuICAgIFRhYlN0b3BUeXBlW1wiREVDSU1BTFwiXSA9IFwiZGVjaW1hbFwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJFTkRcIl0gPSBcImVuZFwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJOVU1cIl0gPSBcIm51bVwiO1xyXG4gICAgVGFiU3RvcFR5cGVbXCJTVEFSVFwiXSA9IFwic3RhcnRcIjtcclxufSkoVGFiU3RvcFR5cGUgPSBleHBvcnRzLlRhYlN0b3BUeXBlIHx8IChleHBvcnRzLlRhYlN0b3BUeXBlID0ge30pKTtcclxudmFyIExlYWRlclR5cGU7XHJcbihmdW5jdGlvbiAoTGVhZGVyVHlwZSkge1xyXG4gICAgTGVhZGVyVHlwZVtcIkRPVFwiXSA9IFwiZG90XCI7XHJcbiAgICBMZWFkZXJUeXBlW1wiSFlQSEVOXCJdID0gXCJoeXBoZW5cIjtcclxuICAgIExlYWRlclR5cGVbXCJNSURETEVfRE9UXCJdID0gXCJtaWRkbGVEb3RcIjtcclxuICAgIExlYWRlclR5cGVbXCJOT05FXCJdID0gXCJub25lXCI7XHJcbiAgICBMZWFkZXJUeXBlW1wiVU5ERVJTQ09SRVwiXSA9IFwidW5kZXJzY29yZVwiO1xyXG59KShMZWFkZXJUeXBlID0gZXhwb3J0cy5MZWFkZXJUeXBlIHx8IChleHBvcnRzLkxlYWRlclR5cGUgPSB7fSkpO1xyXG52YXIgVGFiU3RvcFBvc2l0aW9uO1xyXG4oZnVuY3Rpb24gKFRhYlN0b3BQb3NpdGlvbikge1xyXG4gICAgVGFiU3RvcFBvc2l0aW9uW1RhYlN0b3BQb3NpdGlvbltcIk1BWFwiXSA9IDkwMjZdID0gXCJNQVhcIjtcclxufSkoVGFiU3RvcFBvc2l0aW9uID0gZXhwb3J0cy5UYWJTdG9wUG9zaXRpb24gfHwgKGV4cG9ydHMuVGFiU3RvcFBvc2l0aW9uID0ge30pKTtcclxuY2xhc3MgVGFiQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyB2YWw6IFwidzp2YWxcIiwgcG9zOiBcInc6cG9zXCIsIGxlYWRlcjogXCJ3OmxlYWRlclwiIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJBdHRyaWJ1dGVzID0gVGFiQXR0cmlidXRlcztcclxuY2xhc3MgVGFiU3RvcEl0ZW0gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgcG9zaXRpb24sIGxlYWRlcikge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YWJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB2YWw6IHZhbHVlLFxyXG4gICAgICAgICAgICBwb3M6IHBvc2l0aW9uLFxyXG4gICAgICAgICAgICBsZWFkZXIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFiU3RvcEl0ZW0gPSBUYWJTdG9wSXRlbTtcclxuXG5cbi8qKiovIH0pLFxuLyogODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgTnVtYmVyUHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG51bWJlcklkLCBpbmRlbnRMZXZlbCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpudW1QclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgSW5kZW50TGV2ZWwoaW5kZW50TGV2ZWwpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtYmVySWQobnVtYmVySWQpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk51bWJlclByb3BlcnRpZXMgPSBOdW1iZXJQcm9wZXJ0aWVzO1xyXG5jbGFzcyBJbmRlbnRMZXZlbCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGxldmVsKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmlsdmxcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogbGV2ZWwsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIE51bWJlcklkIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICBzdXBlcihcInc6bnVtSWRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdHlwZW9mIGlkID09PSBcInN0cmluZ1wiID8gYHske2lkfX1gIDogaWQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjE5KTtcblxuXG4vKioqLyB9KSxcbi8qIDg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhEZW5vbWluYXRvciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOmRlblwiKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoRGVub21pbmF0b3IgPSBNYXRoRGVub21pbmF0b3I7XHJcblxuXG4vKioqLyB9KSxcbi8qIDg3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhOdW1lcmF0b3IgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xyXG4gICAgICAgIHN1cGVyKFwibTpudW1cIik7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aE51bWVyYXRvciA9IE1hdGhOdW1lcmF0b3I7XHJcblxuXG4vKioqLyB9KSxcbi8qIDg4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhBY2NlbnRDaGFyYWN0ZXJBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IGFjY2VudDogXCJtOnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWF0aEFjY2VudENoYXJhY3RlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGFjY2VudCkge1xyXG4gICAgICAgIHN1cGVyKFwibTpjaHJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhBY2NlbnRDaGFyYWN0ZXJBdHRyaWJ1dGVzKHsgYWNjZW50IH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhBY2NlbnRDaGFyYWN0ZXIgPSBNYXRoQWNjZW50Q2hhcmFjdGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiA4OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoQmFzZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOmVcIik7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aEJhc2UgPSBNYXRoQmFzZTtcclxuXG5cbi8qKiovIH0pLFxuLyogOTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgTWF0aExpbWl0TG9jYXRpb25BdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHZhbHVlOiBcIm06dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBNYXRoTGltaXRMb2NhdGlvbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwibTpsaW1Mb2NcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhMaW1pdExvY2F0aW9uQXR0cmlidXRlcyh7IHZhbHVlOiBcInVuZE92clwiIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhMaW1pdExvY2F0aW9uID0gTWF0aExpbWl0TG9jYXRpb247XHJcblxuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IG1hdGhfYWNjZW50X2NoYXJhY3Rlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OCk7XHJcbmNvbnN0IG1hdGhfbGltaXRfbG9jYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xyXG5jb25zdCBtYXRoX3N1Yl9zY3JpcHRfaGlkZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzYpO1xyXG5jb25zdCBtYXRoX3N1cGVyX3NjcmlwdF9oaWRlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNyk7XHJcbmNsYXNzIE1hdGhOQXJheVByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihhY2NlbnQsIGhhc1N1cGVyU2NyaXB0LCBoYXNTdWJTY3JpcHQpIHtcclxuICAgICAgICBzdXBlcihcIm06bmFyeVByXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX2FjY2VudF9jaGFyYWN0ZXJfMS5NYXRoQWNjZW50Q2hhcmFjdGVyKGFjY2VudCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX2xpbWl0X2xvY2F0aW9uXzEuTWF0aExpbWl0TG9jYXRpb24oKSk7XHJcbiAgICAgICAgaWYgKCFoYXNTdXBlclNjcmlwdCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9zdXBlcl9zY3JpcHRfaGlkZV8xLk1hdGhTdXBlclNjcmlwdEhpZGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaGFzU3ViU2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX3N1Yl9zY3JpcHRfaGlkZV8xLk1hdGhTdWJTY3JpcHRIaWRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhOQXJheVByb3BlcnRpZXMgPSBNYXRoTkFyYXlQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3ViU2NyaXB0RWxlbWVudCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOnN1YlwiKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoU3ViU2NyaXB0RWxlbWVudCA9IE1hdGhTdWJTY3JpcHRFbGVtZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiA5MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3VwZXJTY3JpcHRFbGVtZW50IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcclxuICAgICAgICBzdXBlcihcIm06c3VwXCIpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhTdXBlclNjcmlwdEVsZW1lbnQgPSBNYXRoU3VwZXJTY3JpcHRFbGVtZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOnNTdXBQclwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMgPSBNYXRoU3VwZXJTY3JpcHRQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3ViU2NyaXB0UHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwibTpzU3ViUHJcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoU3ViU2NyaXB0UHJvcGVydGllcyA9IE1hdGhTdWJTY3JpcHRQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOnNTdWJTdXBQclwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMgPSBNYXRoU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOnNQcmVQclwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhQcmVTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMgPSBNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoRGVncmVlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcclxuICAgICAgICBzdXBlcihcIm06ZGVnXCIpO1xyXG4gICAgICAgIGlmICghIWNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhEZWdyZWUgPSBNYXRoRGVncmVlO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBtYXRoX2RlZ3JlZV9oaWRlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1MSk7XHJcbmNsYXNzIE1hdGhSYWRpY2FsUHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGhhc0RlZ3JlZSkge1xyXG4gICAgICAgIHN1cGVyKFwibTpyYWRQclwiKTtcclxuICAgICAgICBpZiAoIWhhc0RlZ3JlZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9kZWdyZWVfaGlkZV8xLk1hdGhEZWdyZWVIaWRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhSYWRpY2FsUHJvcGVydGllcyA9IE1hdGhSYWRpY2FsUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhGdW5jdGlvbk5hbWUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xyXG4gICAgICAgIHN1cGVyKFwibTpmTmFtZVwiKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoRnVuY3Rpb25OYW1lID0gTWF0aEZ1bmN0aW9uTmFtZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhGdW5jdGlvblByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIm06ZnVuY1ByXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aEZ1bmN0aW9uUHJvcGVydGllcyA9IE1hdGhGdW5jdGlvblByb3BlcnRpZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2OSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzdHlsZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGFibGVCb3JkZXJzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxCb3JkZXJzXCIpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnRvcCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVCb3JkZXJzRWxlbWVudChcInc6dG9wXCIsIG9wdGlvbnMudG9wLnN0eWxlLCBvcHRpb25zLnRvcC5zaXplLCAwLCBvcHRpb25zLnRvcC5jb2xvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVyc0VsZW1lbnQoXCJ3OnRvcFwiLCBzdHlsZXNfMS5Cb3JkZXJTdHlsZS5TSU5HTEUsIDQsIDAsIFwiYXV0b1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmxlZnQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVyc0VsZW1lbnQoXCJ3OmxlZnRcIiwgb3B0aW9ucy5sZWZ0LnN0eWxlLCBvcHRpb25zLmxlZnQuc2l6ZSwgMCwgb3B0aW9ucy5sZWZ0LmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVCb3JkZXJzRWxlbWVudChcInc6bGVmdFwiLCBzdHlsZXNfMS5Cb3JkZXJTdHlsZS5TSU5HTEUsIDQsIDAsIFwiYXV0b1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmJvdHRvbSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVCb3JkZXJzRWxlbWVudChcInc6Ym90dG9tXCIsIG9wdGlvbnMuYm90dG9tLnN0eWxlLCBvcHRpb25zLmJvdHRvbS5zaXplLCAwLCBvcHRpb25zLmJvdHRvbS5jb2xvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVyc0VsZW1lbnQoXCJ3OmJvdHRvbVwiLCBzdHlsZXNfMS5Cb3JkZXJTdHlsZS5TSU5HTEUsIDQsIDAsIFwiYXV0b1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnJpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUJvcmRlcnNFbGVtZW50KFwidzpyaWdodFwiLCBvcHRpb25zLnJpZ2h0LnN0eWxlLCBvcHRpb25zLnJpZ2h0LnNpemUsIDAsIG9wdGlvbnMucmlnaHQuY29sb3IpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUJvcmRlcnNFbGVtZW50KFwidzpyaWdodFwiLCBzdHlsZXNfMS5Cb3JkZXJTdHlsZS5TSU5HTEUsIDQsIDAsIFwiYXV0b1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmluc2lkZUhvcml6b250YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVyc0VsZW1lbnQoXCJ3Omluc2lkZUhcIiwgb3B0aW9ucy5pbnNpZGVIb3Jpem9udGFsLnN0eWxlLCBvcHRpb25zLmluc2lkZUhvcml6b250YWwuc2l6ZSwgMCwgb3B0aW9ucy5pbnNpZGVIb3Jpem9udGFsLmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVCb3JkZXJzRWxlbWVudChcInc6aW5zaWRlSFwiLCBzdHlsZXNfMS5Cb3JkZXJTdHlsZS5TSU5HTEUsIDQsIDAsIFwiYXV0b1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmluc2lkZVZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUJvcmRlcnNFbGVtZW50KFwidzppbnNpZGVWXCIsIG9wdGlvbnMuaW5zaWRlVmVydGljYWwuc3R5bGUsIG9wdGlvbnMuaW5zaWRlVmVydGljYWwuc2l6ZSwgMCwgb3B0aW9ucy5pbnNpZGVWZXJ0aWNhbC5jb2xvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVyc0VsZW1lbnQoXCJ3Omluc2lkZVZcIiwgc3R5bGVzXzEuQm9yZGVyU3R5bGUuU0lOR0xFLCA0LCAwLCBcImF1dG9cIikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlQm9yZGVycyA9IFRhYmxlQm9yZGVycztcclxuY2xhc3MgVGFibGVCb3JkZXJzRWxlbWVudCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnROYW1lLCB2YWx1ZSwgc2l6ZSwgc3BhY2UsIGNvbG9yKSB7XHJcbiAgICAgICAgc3VwZXIoZWxlbWVudE5hbWUpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUJvcmRlcnNBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIHNpemUsXHJcbiAgICAgICAgICAgIHNwYWNlLFxyXG4gICAgICAgICAgICBjb2xvcixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVGFibGVCb3JkZXJzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB2YWx1ZTogXCJ3OnZhbFwiLFxyXG4gICAgICAgICAgICBzaXplOiBcInc6c3pcIixcclxuICAgICAgICAgICAgc3BhY2U6IFwidzpzcGFjZVwiLFxyXG4gICAgICAgICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG4vKiAxMDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzOSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNDIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNzEpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTA2KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTA3KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjc0KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHByb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpwUHJEZWZhdWx0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwcm9wZXJ0aWVzXzEuUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMgPSBQYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHByb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBSdW5Qcm9wZXJ0aWVzRGVmYXVsdHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnJQckRlZmF1bHRcIik7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbmV3IHByb3BlcnRpZXNfMS5SdW5Qcm9wZXJ0aWVzKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucHJvcGVydGllcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5SdW5Qcm9wZXJ0aWVzRGVmYXVsdHMgPSBSdW5Qcm9wZXJ0aWVzRGVmYXVsdHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCB0YWJsZV9vdmVybGFwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOSk7XHJcbnZhciBUYWJsZUFuY2hvclR5cGU7XHJcbihmdW5jdGlvbiAoVGFibGVBbmNob3JUeXBlKSB7XHJcbiAgICBUYWJsZUFuY2hvclR5cGVbXCJNQVJHSU5cIl0gPSBcIm1hcmdpblwiO1xyXG4gICAgVGFibGVBbmNob3JUeXBlW1wiUEFHRVwiXSA9IFwicGFnZVwiO1xyXG4gICAgVGFibGVBbmNob3JUeXBlW1wiVEVYVFwiXSA9IFwidGV4dFwiO1xyXG59KShUYWJsZUFuY2hvclR5cGUgPSBleHBvcnRzLlRhYmxlQW5jaG9yVHlwZSB8fCAoZXhwb3J0cy5UYWJsZUFuY2hvclR5cGUgPSB7fSkpO1xyXG52YXIgUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb247XHJcbihmdW5jdGlvbiAoUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24pIHtcclxuICAgIFJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcclxuICAgIFJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uW1wiSU5TSURFXCJdID0gXCJpbnNpZGVcIjtcclxuICAgIFJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uW1wiTEVGVFwiXSA9IFwibGVmdFwiO1xyXG4gICAgUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb25bXCJPVVRTSURFXCJdID0gXCJvdXRzaWRlXCI7XHJcbiAgICBSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbltcIlJJR0hUXCJdID0gXCJyaWdodFwiO1xyXG59KShSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbiA9IGV4cG9ydHMuUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24gfHwgKGV4cG9ydHMuUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24gPSB7fSkpO1xyXG52YXIgUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uO1xyXG4oZnVuY3Rpb24gKFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbikge1xyXG4gICAgUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcclxuICAgIFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbltcIklOU0lERVwiXSA9IFwiaW5zaWRlXCI7XHJcbiAgICBSZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb25bXCJCT1RUT01cIl0gPSBcImJvdHRvbVwiO1xyXG4gICAgUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uW1wiT1VUU0lERVwiXSA9IFwib3V0c2lkZVwiO1xyXG4gICAgUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uW1wiSU5MSU5FXCJdID0gXCJpbmxpbmVcIjtcclxuICAgIFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbltcIlRPUFwiXSA9IFwidG9wXCI7XHJcbn0pKFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbiA9IGV4cG9ydHMuUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uIHx8IChleHBvcnRzLlJlbGF0aXZlVmVydGljYWxQb3NpdGlvbiA9IHt9KSk7XHJcbmNsYXNzIFRhYmxlRmxvYXRPcHRpb25zQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBob3Jpem9udGFsQW5jaG9yOiBcInc6aG9yekFuY2hvclwiLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbEFuY2hvcjogXCJ3OnZlcnRBbmNob3JcIixcclxuICAgICAgICAgICAgYWJzb2x1dGVIb3Jpem9udGFsUG9zaXRpb246IFwidzp0YmxwWFwiLFxyXG4gICAgICAgICAgICByZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbjogXCJ3OnRibHBYU3BlY1wiLFxyXG4gICAgICAgICAgICBhYnNvbHV0ZVZlcnRpY2FsUG9zaXRpb246IFwidzp0YmxwWVwiLFxyXG4gICAgICAgICAgICByZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb246IFwidzp0YmxwWVNwZWNcIixcclxuICAgICAgICAgICAgYm90dG9tRnJvbVRleHQ6IFwidzpib3R0b21Gcm9tVGV4dFwiLFxyXG4gICAgICAgICAgICB0b3BGcm9tVGV4dDogXCJ3OnRvcEZyb21UZXh0XCIsXHJcbiAgICAgICAgICAgIGxlZnRGcm9tVGV4dDogXCJ3OmxlZnRGcm9tVGV4dFwiLFxyXG4gICAgICAgICAgICByaWdodEZyb21UZXh0OiBcInc6cmlnaHRGcm9tVGV4dFwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZUZsb2F0T3B0aW9uc0F0dHJpYnV0ZXMgPSBUYWJsZUZsb2F0T3B0aW9uc0F0dHJpYnV0ZXM7XHJcbmNsYXNzIFRhYmxlRmxvYXRQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxwUHJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlRmxvYXRPcHRpb25zQXR0cmlidXRlcyhvcHRpb25zKSk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMub3ZlcmxhcCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdGFibGVfb3ZlcmxhcF8xLlRhYmxlT3ZlcmxhcChvcHRpb25zLm92ZXJsYXApKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZUZsb2F0UHJvcGVydGllcyA9IFRhYmxlRmxvYXRQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIE92ZXJsYXBUeXBlO1xyXG4oZnVuY3Rpb24gKE92ZXJsYXBUeXBlKSB7XHJcbiAgICBPdmVybGFwVHlwZVtcIk5FVkVSXCJdID0gXCJuZXZlclwiO1xyXG4gICAgT3ZlcmxhcFR5cGVbXCJPVkVSTEFQXCJdID0gXCJvdmVybGFwXCI7XHJcbn0pKE92ZXJsYXBUeXBlID0gZXhwb3J0cy5PdmVybGFwVHlwZSB8fCAoZXhwb3J0cy5PdmVybGFwVHlwZSA9IHt9KSk7XHJcbmNsYXNzIFRhYmxlT3ZlcmxhcEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBUYWJsZU92ZXJsYXAgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnRibE92ZXJsYXBcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlT3ZlcmxhcEF0dHJpYnV0ZXMoeyB2YWw6IHR5cGUgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFibGVPdmVybGFwID0gVGFibGVPdmVybGFwO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIFRhYmxlTGF5b3V0VHlwZTtcclxuKGZ1bmN0aW9uIChUYWJsZUxheW91dFR5cGUpIHtcclxuICAgIFRhYmxlTGF5b3V0VHlwZVtcIkFVVE9GSVRcIl0gPSBcImF1dG9maXRcIjtcclxuICAgIFRhYmxlTGF5b3V0VHlwZVtcIkZJWEVEXCJdID0gXCJmaXhlZFwiO1xyXG59KShUYWJsZUxheW91dFR5cGUgPSBleHBvcnRzLlRhYmxlTGF5b3V0VHlwZSB8fCAoZXhwb3J0cy5UYWJsZUxheW91dFR5cGUgPSB7fSkpO1xyXG5jbGFzcyBUYWJsZUxheW91dEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdHlwZTogXCJ3OnR5cGVcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFRhYmxlTGF5b3V0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodHlwZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxMYXlvdXRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlTGF5b3V0QXR0cmlidXRlcyh7IHR5cGUgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFibGVMYXlvdXQgPSBUYWJsZUxheW91dDtcclxuXG5cbi8qKiovIH0pLFxuLyogMTExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHRhYmxlX3Jvd19oZWlnaHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEyKTtcclxuY2xhc3MgVGFibGVSb3dQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5JZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0clByXCIpO1xyXG4gICAgfVxyXG4gICAgc2V0Q2FudFNwbGl0KCkge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDYW50U3BsaXQoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRUYWJsZUhlYWRlcigpIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVIZWFkZXIoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRIZWlnaHQoaGVpZ2h0LCBydWxlKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRhYmxlX3Jvd19oZWlnaHRfMS5UYWJsZVJvd0hlaWdodChoZWlnaHQsIHJ1bGUpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlUm93UHJvcGVydGllcyA9IFRhYmxlUm93UHJvcGVydGllcztcclxuY2xhc3MgQ2FudFNwbGl0QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyB2YWw6IFwidzp2YWxcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIENhbnRTcGxpdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpjYW50U3BsaXRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IENhbnRTcGxpdEF0dHJpYnV0ZXMoeyB2YWw6IHRydWUgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ2FudFNwbGl0ID0gQ2FudFNwbGl0O1xyXG5jbGFzcyBUYWJsZUhlYWRlckF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsOiBcInc6dmFsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBUYWJsZUhlYWRlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxIZWFkZXJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlSGVhZGVyQXR0cmlidXRlcyh7IHZhbDogdHJ1ZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZUhlYWRlciA9IFRhYmxlSGVhZGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIEhlaWdodFJ1bGU7XHJcbihmdW5jdGlvbiAoSGVpZ2h0UnVsZSkge1xyXG4gICAgSGVpZ2h0UnVsZVtcIkFVVE9cIl0gPSBcImF1dG9cIjtcclxuICAgIEhlaWdodFJ1bGVbXCJBVExFQVNUXCJdID0gXCJhdExlYXN0XCI7XHJcbiAgICBIZWlnaHRSdWxlW1wiRVhBQ1RcIl0gPSBcImV4YWN0XCI7XHJcbn0pKEhlaWdodFJ1bGUgPSBleHBvcnRzLkhlaWdodFJ1bGUgfHwgKGV4cG9ydHMuSGVpZ2h0UnVsZSA9IHt9KSk7XHJcbmNsYXNzIFRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBoZWlnaHQ6IFwidzp2YWxcIiwgcnVsZTogXCJ3OmhSdWxlXCIgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcyA9IFRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcztcclxuY2xhc3MgVGFibGVSb3dIZWlnaHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgcnVsZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0ckhlaWdodFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVSb3dIZWlnaHRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiB2YWx1ZSxcclxuICAgICAgICAgICAgcnVsZTogcnVsZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZVJvd0hlaWdodCA9IFRhYmxlUm93SGVpZ2h0O1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyOTEpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDExNCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyOTIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMjgpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGNvbHVtbnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkzKTtcclxuY29uc3QgZG9jX2dyaWRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjk1KTtcclxuY29uc3QgZm9vdGVyX3JlZmVyZW5jZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpO1xyXG5jb25zdCBmb290ZXJfcmVmZXJlbmNlXzIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNyk7XHJcbmNvbnN0IGhlYWRlcl9yZWZlcmVuY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTtcclxuY29uc3QgaGVhZGVyX3JlZmVyZW5jZV8yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xyXG5jb25zdCBsaW5lX251bWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpO1xyXG5jb25zdCBwYWdlX2JvcmRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xyXG5jb25zdCBwYWdlX21hcmdpbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTkpO1xyXG5jb25zdCBwYWdlX251bWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjQpO1xyXG5jb25zdCBwYWdlX3NpemVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcclxuY29uc3QgcGFnZV9zaXplX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xyXG5jb25zdCB0aXRsZV9wYWdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMik7XHJcbmNvbnN0IHZlcnRpY2FsX2FsaWduXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNik7XHJcbmNsYXNzIFNlY3Rpb25Qcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHsgY29sdW1uOiB7fSB9KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnNlY3RQclwiKTtcclxuICAgICAgICBjb25zdCB7IHdpZHRoID0gMTE5MDYsIGhlaWdodCA9IDE2ODM4LCB0b3AgPSAxNDQwLCByaWdodCA9IDE0NDAsIGJvdHRvbSA9IDE0NDAsIGxlZnQgPSAxNDQwLCBoZWFkZXIgPSA3MDgsIGZvb3RlciA9IDcwOCwgZ3V0dGVyID0gMCwgbWlycm9yID0gZmFsc2UsIGNvbHVtbiA9IHt9LCBsaW5lUGl0Y2ggPSAzNjAsIG9yaWVudGF0aW9uID0gcGFnZV9zaXplX2F0dHJpYnV0ZXNfMS5QYWdlT3JpZW50YXRpb24uUE9SVFJBSVQsIGhlYWRlcnMsIGZvb3RlcnMsIHBhZ2VOdW1iZXJGb3JtYXRUeXBlLCBwYWdlTnVtYmVyU3RhcnQsIGxpbmVOdW1iZXJDb3VudEJ5LCBsaW5lTnVtYmVyU3RhcnQsIGxpbmVOdW1iZXJSZXN0YXJ0LCBsaW5lTnVtYmVyRGlzdGFuY2UsIHBhZ2VCb3JkZXJzLCBwYWdlQm9yZGVyVG9wLCBwYWdlQm9yZGVyUmlnaHQsIHBhZ2VCb3JkZXJCb3R0b20sIHBhZ2VCb3JkZXJMZWZ0LCB0aXRsZVBhZ2UgPSBmYWxzZSwgdmVydGljYWxBbGlnbiwgfSA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcGFnZV9zaXplXzEuUGFnZVNpemUod2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcGFnZV9tYXJnaW5fMS5QYWdlTWFyZ2luKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgaGVhZGVyLCBmb290ZXIsIGd1dHRlciwgbWlycm9yKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbHVtbnNfMS5Db2x1bW5zKGNvbHVtbi5zcGFjZSA/IGNvbHVtbi5zcGFjZSA6IDcwOCwgY29sdW1uLmNvdW50ID8gY29sdW1uLmNvdW50IDogMSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkb2NfZ3JpZF8xLkRvY3VtZW50R3JpZChsaW5lUGl0Y2gpKTtcclxuICAgICAgICB0aGlzLmFkZEhlYWRlcnMoaGVhZGVycyk7XHJcbiAgICAgICAgdGhpcy5hZGRGb290ZXJzKGZvb3RlcnMpO1xyXG4gICAgICAgIGlmIChwYWdlTnVtYmVyU3RhcnQgfHwgcGFnZU51bWJlckZvcm1hdFR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHBhZ2VfbnVtYmVyXzEuUGFnZU51bWJlclR5cGUocGFnZU51bWJlclN0YXJ0LCBwYWdlTnVtYmVyRm9ybWF0VHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGluZU51bWJlckNvdW50QnkgfHwgbGluZU51bWJlclN0YXJ0IHx8IGxpbmVOdW1iZXJSZXN0YXJ0IHx8IGxpbmVOdW1iZXJEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbGluZV9udW1iZXJfMS5MaW5lTnVtYmVyVHlwZShsaW5lTnVtYmVyQ291bnRCeSwgbGluZU51bWJlclN0YXJ0LCBsaW5lTnVtYmVyUmVzdGFydCwgbGluZU51bWJlckRpc3RhbmNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYWdlQm9yZGVycyB8fCBwYWdlQm9yZGVyVG9wIHx8IHBhZ2VCb3JkZXJSaWdodCB8fCBwYWdlQm9yZGVyQm90dG9tIHx8IHBhZ2VCb3JkZXJMZWZ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwYWdlX2JvcmRlcl8xLlBhZ2VCb3JkZXJzKHtcclxuICAgICAgICAgICAgICAgIHBhZ2VCb3JkZXJzOiBwYWdlQm9yZGVycyxcclxuICAgICAgICAgICAgICAgIHBhZ2VCb3JkZXJUb3A6IHBhZ2VCb3JkZXJUb3AsXHJcbiAgICAgICAgICAgICAgICBwYWdlQm9yZGVyUmlnaHQ6IHBhZ2VCb3JkZXJSaWdodCxcclxuICAgICAgICAgICAgICAgIHBhZ2VCb3JkZXJCb3R0b206IHBhZ2VCb3JkZXJCb3R0b20sXHJcbiAgICAgICAgICAgICAgICBwYWdlQm9yZGVyTGVmdDogcGFnZUJvcmRlckxlZnQsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRpdGxlUGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdGl0bGVfcGFnZV8xLlRpdGxlUGFnZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlcnRpY2FsQWxpZ24pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHZlcnRpY2FsX2FsaWduXzEuU2VjdGlvblZlcnRpY2FsQWxpZ24odmVydGljYWxBbGlnbikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFkZEhlYWRlcnMoaGVhZGVycykge1xyXG4gICAgICAgIGlmIChoZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBoZWFkZXJfcmVmZXJlbmNlXzIuSGVhZGVyUmVmZXJlbmNlKHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJUeXBlOiBoZWFkZXJfcmVmZXJlbmNlXzEuSGVhZGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxULFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcklkOiBoZWFkZXJzLmRlZmF1bHQuSGVhZGVyLlJlZmVyZW5jZUlkLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgaGVhZGVyX3JlZmVyZW5jZV8yLkhlYWRlclJlZmVyZW5jZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyVHlwZTogaGVhZGVyX3JlZmVyZW5jZV8xLkhlYWRlclJlZmVyZW5jZVR5cGUuRklSU1QsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVySWQ6IGhlYWRlcnMuZmlyc3QuSGVhZGVyLlJlZmVyZW5jZUlkLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmV2ZW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBoZWFkZXJfcmVmZXJlbmNlXzIuSGVhZGVyUmVmZXJlbmNlKHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJUeXBlOiBoZWFkZXJfcmVmZXJlbmNlXzEuSGVhZGVyUmVmZXJlbmNlVHlwZS5FVkVOLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcklkOiBoZWFkZXJzLmV2ZW4uSGVhZGVyLlJlZmVyZW5jZUlkLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkRm9vdGVycyhmb290ZXJzKSB7XHJcbiAgICAgICAgaWYgKGZvb3RlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGZvb3RlcnMuZGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZvb3Rlcl9yZWZlcmVuY2VfMi5Gb290ZXJSZWZlcmVuY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlclR5cGU6IGZvb3Rlcl9yZWZlcmVuY2VfMS5Gb290ZXJSZWZlcmVuY2VUeXBlLkRFRkFVTFQsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVySWQ6IGZvb3RlcnMuZGVmYXVsdC5Gb290ZXIuUmVmZXJlbmNlSWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZvb3RlcnMuZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmb290ZXJfcmVmZXJlbmNlXzIuRm9vdGVyUmVmZXJlbmNlKHtcclxuICAgICAgICAgICAgICAgICAgICBmb290ZXJUeXBlOiBmb290ZXJfcmVmZXJlbmNlXzEuRm9vdGVyUmVmZXJlbmNlVHlwZS5GSVJTVCxcclxuICAgICAgICAgICAgICAgICAgICBmb290ZXJJZDogZm9vdGVycy5maXJzdC5Gb290ZXIuUmVmZXJlbmNlSWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZvb3RlcnMuZXZlbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZvb3Rlcl9yZWZlcmVuY2VfMi5Gb290ZXJSZWZlcmVuY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlclR5cGU6IGZvb3Rlcl9yZWZlcmVuY2VfMS5Gb290ZXJSZWZlcmVuY2VUeXBlLkVWRU4sXHJcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVySWQ6IGZvb3RlcnMuZXZlbi5Gb290ZXIuUmVmZXJlbmNlSWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2VjdGlvblByb3BlcnRpZXMgPSBTZWN0aW9uUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTE3KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTE4KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBmb290ZXJfcmVmZXJlbmNlX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4KTtcclxuY2xhc3MgRm9vdGVyUmVmZXJlbmNlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpmb290ZXJSZWZlcmVuY2VcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZvb3Rlcl9yZWZlcmVuY2VfYXR0cmlidXRlc18xLkZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB0eXBlOiBvcHRpb25zLmZvb3RlclR5cGUgfHwgZm9vdGVyX3JlZmVyZW5jZV9hdHRyaWJ1dGVzXzEuRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxULFxyXG4gICAgICAgICAgICBpZDogYHJJZCR7b3B0aW9ucy5mb290ZXJJZH1gLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3RlclJlZmVyZW5jZSA9IEZvb3RlclJlZmVyZW5jZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbnZhciBGb290ZXJSZWZlcmVuY2VUeXBlO1xyXG4oZnVuY3Rpb24gKEZvb3RlclJlZmVyZW5jZVR5cGUpIHtcclxuICAgIEZvb3RlclJlZmVyZW5jZVR5cGVbXCJERUZBVUxUXCJdID0gXCJkZWZhdWx0XCI7XHJcbiAgICBGb290ZXJSZWZlcmVuY2VUeXBlW1wiRklSU1RcIl0gPSBcImZpcnN0XCI7XHJcbiAgICBGb290ZXJSZWZlcmVuY2VUeXBlW1wiRVZFTlwiXSA9IFwiZXZlblwiO1xyXG59KShGb290ZXJSZWZlcmVuY2VUeXBlID0gZXhwb3J0cy5Gb290ZXJSZWZlcmVuY2VUeXBlIHx8IChleHBvcnRzLkZvb3RlclJlZmVyZW5jZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBGb290ZXJSZWZlcmVuY2VBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwidzp0eXBlXCIsXHJcbiAgICAgICAgICAgIGlkOiBcInI6aWRcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdGVyUmVmZXJlbmNlQXR0cmlidXRlcyA9IEZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgaGVhZGVyX3JlZmVyZW5jZV9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSk7XHJcbmNsYXNzIEhlYWRlclJlZmVyZW5jZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6aGVhZGVyUmVmZXJlbmNlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBoZWFkZXJfcmVmZXJlbmNlX2F0dHJpYnV0ZXNfMS5IZWFkZXJSZWZlcmVuY2VBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdHlwZTogb3B0aW9ucy5oZWFkZXJUeXBlIHx8IGhlYWRlcl9yZWZlcmVuY2VfYXR0cmlidXRlc18xLkhlYWRlclJlZmVyZW5jZVR5cGUuREVGQVVMVCxcclxuICAgICAgICAgICAgaWQ6IGBySWQke29wdGlvbnMuaGVhZGVySWR9YCxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IZWFkZXJSZWZlcmVuY2UgPSBIZWFkZXJSZWZlcmVuY2U7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgSGVhZGVyUmVmZXJlbmNlVHlwZTtcclxuKGZ1bmN0aW9uIChIZWFkZXJSZWZlcmVuY2VUeXBlKSB7XHJcbiAgICBIZWFkZXJSZWZlcmVuY2VUeXBlW1wiREVGQVVMVFwiXSA9IFwiZGVmYXVsdFwiO1xyXG4gICAgSGVhZGVyUmVmZXJlbmNlVHlwZVtcIkZJUlNUXCJdID0gXCJmaXJzdFwiO1xyXG4gICAgSGVhZGVyUmVmZXJlbmNlVHlwZVtcIkVWRU5cIl0gPSBcImV2ZW5cIjtcclxufSkoSGVhZGVyUmVmZXJlbmNlVHlwZSA9IGV4cG9ydHMuSGVhZGVyUmVmZXJlbmNlVHlwZSB8fCAoZXhwb3J0cy5IZWFkZXJSZWZlcmVuY2VUeXBlID0ge30pKTtcclxuY2xhc3MgSGVhZGVyUmVmZXJlbmNlQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcInc6dHlwZVwiLFxyXG4gICAgICAgICAgICBpZDogXCJyOmlkXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRlclJlZmVyZW5jZUF0dHJpYnV0ZXMgPSBIZWFkZXJSZWZlcmVuY2VBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyOTcpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjk4KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgcGFnZV9zaXplX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xyXG5jbGFzcyBQYWdlU2l6ZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIG9yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnBnU3pcIik7XHJcbiAgICAgICAgY29uc3QgZmxpcCA9IG9yaWVudGF0aW9uID09PSBwYWdlX3NpemVfYXR0cmlidXRlc18xLlBhZ2VPcmllbnRhdGlvbi5MQU5EU0NBUEU7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHBhZ2Vfc2l6ZV9hdHRyaWJ1dGVzXzEuUGFnZVNpemVBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgd2lkdGg6IGZsaXAgPyBoZWlnaHQgOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBmbGlwID8gd2lkdGggOiBoZWlnaHQsXHJcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QYWdlU2l6ZSA9IFBhZ2VTaXplO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzMDQpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMjcpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFNlY3Rpb25WZXJ0aWNhbEFsaWduQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcInc6dmFsXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNlY3Rpb25WZXJ0aWNhbEFsaWduQXR0cmlidXRlcyA9IFNlY3Rpb25WZXJ0aWNhbEFsaWduQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTE1KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTE2KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTE5KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzA1KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTI0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTIzKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTIyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTI2KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNikpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzMTIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzMjIpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgSGVhZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7IGNoaWxkcmVuOiBbXSB9KSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRlciA9IEhlYWRlcjtcclxuY2xhc3MgRm9vdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7IGNoaWxkcmVuOiBbXSB9KSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3RlciA9IEZvb3RlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzI5KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTMzKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNDkpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMzQpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGxldmVsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcclxuY29uc3QgbXVsdGlfbGV2ZWxfdHlwZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzApO1xyXG5jbGFzcyBBYnN0cmFjdE51bWJlcmluZ0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgYWJzdHJhY3ROdW1JZDogXCJ3OmFic3RyYWN0TnVtSWRcIixcclxuICAgICAgICAgICAgcmVzdGFydE51bWJlcmluZ0FmdGVyQnJlYWs6IFwidzE1OnJlc3RhcnROdW1iZXJpbmdBZnRlckJyZWFrXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBBYnN0cmFjdE51bWJlcmluZyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsZXZlbE9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6YWJzdHJhY3ROdW1cIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFic3RyYWN0TnVtYmVyaW5nQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGFic3RyYWN0TnVtSWQ6IGlkLFxyXG4gICAgICAgICAgICByZXN0YXJ0TnVtYmVyaW5nQWZ0ZXJCcmVhazogMCxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG11bHRpX2xldmVsX3R5cGVfMS5NdWx0aUxldmVsVHlwZShcImh5YnJpZE11bHRpbGV2ZWxcIikpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBsZXZlbE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGxldmVsXzEuTGV2ZWwob3B0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQWJzdHJhY3ROdW1iZXJpbmcgPSBBYnN0cmFjdE51bWJlcmluZztcclxuXG5cbi8qKiovIH0pLFxuLyogMTM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGxldmVsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcclxuY2xhc3MgQWJzdHJhY3ROdW1JZCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmFic3RyYWN0TnVtSWRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHhtbF9jb21wb25lbnRzXzEuQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbDogdmFsdWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIE51bUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgbnVtSWQ6IFwidzpudW1JZFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgQ29uY3JldGVOdW1iZXJpbmcgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihudW1JZCwgYWJzdHJhY3ROdW1JZCwgcmVmZXJlbmNlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Om51bVwiKTtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIG51bUlkOiBudW1JZCxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFic3RyYWN0TnVtSWQoYWJzdHJhY3ROdW1JZCkpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBudW1JZDtcclxuICAgIH1cclxuICAgIG92ZXJyaWRlTGV2ZWwobnVtLCBzdGFydCkge1xyXG4gICAgICAgIGNvbnN0IG9sdmwgPSBuZXcgTGV2ZWxPdmVycmlkZShudW0sIHN0YXJ0KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChvbHZsKTtcclxuICAgICAgICByZXR1cm4gb2x2bDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNvbmNyZXRlTnVtYmVyaW5nID0gQ29uY3JldGVOdW1iZXJpbmc7XHJcbmNsYXNzIExldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IGlsdmw6IFwidzppbHZsXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBMZXZlbE92ZXJyaWRlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IobGV2ZWxOdW0sIHN0YXJ0KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Omx2bE92ZXJyaWRlXCIpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxOdW0gPSBsZXZlbE51bTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgTGV2ZWxPdmVycmlkZUF0dHJpYnV0ZXMoeyBpbHZsOiBsZXZlbE51bSB9KSk7XHJcbiAgICAgICAgaWYgKHN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0YXJ0T3ZlcnJpZGUoc3RhcnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sdmwgPSBuZXcgbGV2ZWxfMS5MZXZlbEZvck92ZXJyaWRlKHtcclxuICAgICAgICAgICAgbGV2ZWw6IHRoaXMubGV2ZWxOdW0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5sdmwpO1xyXG4gICAgfVxyXG4gICAgZ2V0IExldmVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmx2bDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxldmVsT3ZlcnJpZGUgPSBMZXZlbE92ZXJyaWRlO1xyXG5jbGFzcyBTdGFydE92ZXJyaWRlQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyB2YWw6IFwidzp2YWxcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFN0YXJ0T3ZlcnJpZGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdGFydCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpzdGFydE92ZXJyaWRlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdGFydE92ZXJyaWRlQXR0cmlidXRlcyh7IHZhbDogc3RhcnQgfSkpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcbi8qIDEzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBVcGRhdGVGaWVsZHNBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IFwidzp2YWxcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVXBkYXRlRmllbGRzQXR0cmlidXRlcyA9IFVwZGF0ZUZpZWxkc0F0dHJpYnV0ZXM7XHJcbmNsYXNzIFVwZGF0ZUZpZWxkcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGVuYWJsZWQgPSB0cnVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnVwZGF0ZUZpZWxkc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVXBkYXRlRmllbGRzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGVuYWJsZWQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVXBkYXRlRmllbGRzID0gVXBkYXRlRmllbGRzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgQ2hhbmdlQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBpZDogXCJ3OmlkXCIsXHJcbiAgICAgICAgICAgIGF1dGhvcjogXCJ3OmF1dGhvclwiLFxyXG4gICAgICAgICAgICBkYXRlOiBcInc6ZGF0ZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5DaGFuZ2VBdHRyaWJ1dGVzID0gQ2hhbmdlQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIsIGdsb2JhbCwgc2V0SW1tZWRpYXRlKSB7dmFyIHJlcXVpcmU7dmFyIHJlcXVpcmU7LyohXG5cbkpTWmlwIHYzLjUuMCAtIEEgSmF2YVNjcmlwdCBjbGFzcyBmb3IgZ2VuZXJhdGluZyBhbmQgcmVhZGluZyB6aXAgZmlsZXNcbjxodHRwOi8vc3R1YXJ0ay5jb20vanN6aXA+XG5cbihjKSAyMDA5LTIwMTYgU3R1YXJ0IEtuaWdodGxleSA8c3R1YXJ0IFthdF0gc3R1YXJ0ay5jb20+XG5EdWFsIGxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBvciBHUEx2My4gU2VlIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vU3R1ay9qc3ppcC9tYXN0ZXIvTElDRU5TRS5tYXJrZG93bi5cblxuSlNaaXAgdXNlcyB0aGUgbGlicmFyeSBwYWtvIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSA6XG5odHRwczovL2dpdGh1Yi5jb20vbm9kZWNhL3Bha28vYmxvYi9tYXN0ZXIvTElDRU5TRVxuKi9cblxuIWZ1bmN0aW9uKHQpe2lmKHRydWUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNleyhcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpLkpTWmlwPXQoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIHMoYSxvLGgpe2Z1bmN0aW9uIHUocix0KXtpZighb1tyXSl7aWYoIWFbcl0pe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIXQmJmUpcmV0dXJuIHJlcXVpcmUociwhMCk7aWYobClyZXR1cm4gbChyLCEwKTt2YXIgaT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3IrXCInXCIpO3Rocm93IGkuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixpfXZhciBuPW9bcl09e2V4cG9ydHM6e319O2Fbcl1bMF0uY2FsbChuLmV4cG9ydHMsZnVuY3Rpb24odCl7dmFyIGU9YVtyXVsxXVt0XTtyZXR1cm4gdShlfHx0KX0sbixuLmV4cG9ydHMscyxhLG8saCl9cmV0dXJuIG9bcl0uZXhwb3J0c31mb3IodmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSx0PTA7dDxoLmxlbmd0aDt0KyspdShoW3RdKTtyZXR1cm4gdX0oezE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYz10KFwiLi91dGlsc1wiKSxkPXQoXCIuL3N1cHBvcnRcIikscD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7ci5lbmNvZGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLHIsaSxuLHMsYSxvLGg9W10sdT0wLGw9dC5sZW5ndGgsZj1sLGQ9XCJzdHJpbmdcIiE9PWMuZ2V0VHlwZU9mKHQpO3U8dC5sZW5ndGg7KWY9bC11LGk9ZD8oZT10W3UrK10scj11PGw/dFt1KytdOjAsdTxsP3RbdSsrXTowKTooZT10LmNoYXJDb2RlQXQodSsrKSxyPXU8bD90LmNoYXJDb2RlQXQodSsrKTowLHU8bD90LmNoYXJDb2RlQXQodSsrKTowKSxuPWU+PjIscz0oMyZlKTw8NHxyPj40LGE9MTxmPygxNSZyKTw8MnxpPj42OjY0LG89MjxmPzYzJmk6NjQsaC5wdXNoKHAuY2hhckF0KG4pK3AuY2hhckF0KHMpK3AuY2hhckF0KGEpK3AuY2hhckF0KG8pKTtyZXR1cm4gaC5qb2luKFwiXCIpfSxyLmRlY29kZT1mdW5jdGlvbih0KXt2YXIgZSxyLGksbixzLGEsbz0wLGg9MCx1PVwiZGF0YTpcIjtpZih0LnN1YnN0cigwLHUubGVuZ3RoKT09PXUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGl0IGxvb2tzIGxpa2UgYSBkYXRhIHVybC5cIik7dmFyIGwsZj0zKih0PXQucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIikpLmxlbmd0aC80O2lmKHQuY2hhckF0KHQubGVuZ3RoLTEpPT09cC5jaGFyQXQoNjQpJiZmLS0sdC5jaGFyQXQodC5sZW5ndGgtMik9PT1wLmNoYXJBdCg2NCkmJmYtLSxmJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGJhZCBjb250ZW50IGxlbmd0aC5cIik7Zm9yKGw9ZC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KDB8Zik6bmV3IEFycmF5KDB8Zik7bzx0Lmxlbmd0aDspZT1wLmluZGV4T2YodC5jaGFyQXQobysrKSk8PDJ8KG49cC5pbmRleE9mKHQuY2hhckF0KG8rKykpKT4+NCxyPSgxNSZuKTw8NHwocz1wLmluZGV4T2YodC5jaGFyQXQobysrKSkpPj4yLGk9KDMmcyk8PDZ8KGE9cC5pbmRleE9mKHQuY2hhckF0KG8rKykpKSxsW2grK109ZSw2NCE9PXMmJihsW2grK109ciksNjQhPT1hJiYobFtoKytdPWkpO3JldHVybiBsfX0se1wiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwyOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vZXh0ZXJuYWxcIiksbj10KFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSxzPXQoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIiksYT10KFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiKTtzPXQoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIik7ZnVuY3Rpb24gbyh0LGUscixpLG4pe3RoaXMuY29tcHJlc3NlZFNpemU9dCx0aGlzLnVuY29tcHJlc3NlZFNpemU9ZSx0aGlzLmNyYzMyPXIsdGhpcy5jb21wcmVzc2lvbj1pLHRoaXMuY29tcHJlc3NlZENvbnRlbnQ9bn1vLnByb3RvdHlwZT17Z2V0Q29udGVudFdvcmtlcjpmdW5jdGlvbigpe3ZhciB0PW5ldyBuKGkuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBzKFwiZGF0YV9sZW5ndGhcIikpLGU9dGhpcztyZXR1cm4gdC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aWYodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoIT09ZS51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IHVuY29tcHJlc3NlZCBkYXRhIHNpemUgbWlzbWF0Y2hcIil9KSx0fSxnZXRDb21wcmVzc2VkV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKGkuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzZWRTaXplXCIsdGhpcy5jb21wcmVzc2VkU2l6ZSkud2l0aFN0cmVhbUluZm8oXCJ1bmNvbXByZXNzZWRTaXplXCIsdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsdGhpcy5jcmMzMikud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHRoaXMuY29tcHJlc3Npb24pfX0sby5jcmVhdGVXb3JrZXJGcm9tPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC5waXBlKG5ldyBhKS5waXBlKG5ldyBzKFwidW5jb21wcmVzc2VkU2l6ZVwiKSkucGlwZShlLmNvbXByZXNzV29ya2VyKHIpKS5waXBlKG5ldyBzKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIixlKX0sZS5leHBvcnRzPW99LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6MjYsXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6Mjd9XSwzOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7ci5TVE9SRT17bWFnaWM6XCJcXDBcXDBcIixjb21wcmVzc1dvcmtlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGkoXCJTVE9SRSBjb21wcmVzc2lvblwiKX0sdW5jb21wcmVzc1dvcmtlcjpmdW5jdGlvbigpe3JldHVybiBuZXcgaShcIlNUT1JFIGRlY29tcHJlc3Npb25cIil9fSxyLkRFRkxBVEU9dChcIi4vZmxhdGVcIil9LHtcIi4vZmxhdGVcIjo3LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4fV0sNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3V0aWxzXCIpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9W10scj0wO3I8MjU2O3IrKyl7dD1yO2Zvcih2YXIgaT0wO2k8ODtpKyspdD0xJnQ/Mzk4ODI5MjM4NF50Pj4+MTp0Pj4+MTtlW3JdPXR9cmV0dXJuIGV9KCk7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMCE9PXQmJnQubGVuZ3RoP1wic3RyaW5nXCIhPT1pLmdldFR5cGVPZih0KT9mdW5jdGlvbih0LGUscixpKXt2YXIgbj1vLHM9aStyO3RePS0xO2Zvcih2YXIgYT1pO2E8czthKyspdD10Pj4+OF5uWzI1NSYodF5lW2FdKV07cmV0dXJuLTFedH0oMHxlLHQsdC5sZW5ndGgsMCk6ZnVuY3Rpb24odCxlLHIsaSl7dmFyIG49byxzPWkrcjt0Xj0tMTtmb3IodmFyIGE9aTthPHM7YSsrKXQ9dD4+PjheblsyNTUmKHReZS5jaGFyQ29kZUF0KGEpKV07cmV0dXJuLTFedH0oMHxlLHQsdC5sZW5ndGgsMCk6MH19LHtcIi4vdXRpbHNcIjozMn1dLDU6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtyLmJhc2U2ND0hMSxyLmJpbmFyeT0hMSxyLmRpcj0hMSxyLmNyZWF0ZUZvbGRlcnM9ITAsci5kYXRlPW51bGwsci5jb21wcmVzc2lvbj1udWxsLHIuY29tcHJlc3Npb25PcHRpb25zPW51bGwsci5jb21tZW50PW51bGwsci51bml4UGVybWlzc2lvbnM9bnVsbCxyLmRvc1Blcm1pc3Npb25zPW51bGx9LHt9XSw2OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9bnVsbDtpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dChcImxpZVwiKSxlLmV4cG9ydHM9e1Byb21pc2U6aX19LHtsaWU6Mzd9XSw3OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MTZBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQzMkFycmF5LG49dChcInBha29cIikscz10KFwiLi91dGlsc1wiKSxhPXQoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLG89aT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCI7ZnVuY3Rpb24gaCh0LGUpe2EuY2FsbCh0aGlzLFwiRmxhdGVXb3JrZXIvXCIrdCksdGhpcy5fcGFrbz1udWxsLHRoaXMuX3Bha29BY3Rpb249dCx0aGlzLl9wYWtvT3B0aW9ucz1lLHRoaXMubWV0YT17fX1yLm1hZ2ljPVwiXFxiXFwwXCIscy5pbmhlcml0cyhoLGEpLGgucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXt0aGlzLm1ldGE9dC5tZXRhLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKHMudHJhbnNmb3JtVG8obyx0LmRhdGEpLCExKX0saC5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXthLnByb3RvdHlwZS5mbHVzaC5jYWxsKHRoaXMpLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKFtdLCEwKX0saC5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe2EucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLl9wYWtvPW51bGx9LGgucHJvdG90eXBlLl9jcmVhdGVQYWtvPWZ1bmN0aW9uKCl7dGhpcy5fcGFrbz1uZXcgblt0aGlzLl9wYWtvQWN0aW9uXSh7cmF3OiEwLGxldmVsOnRoaXMuX3Bha29PcHRpb25zLmxldmVsfHwtMX0pO3ZhciBlPXRoaXM7dGhpcy5fcGFrby5vbkRhdGE9ZnVuY3Rpb24odCl7ZS5wdXNoKHtkYXRhOnQsbWV0YTplLm1ldGF9KX19LHIuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBoKFwiRGVmbGF0ZVwiLHQpfSxyLnVuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGgoXCJJbmZsYXRlXCIse30pfX0se1wiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi91dGlsc1wiOjMyLHBha286Mzh9XSw4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gQSh0LGUpe3ZhciByLGk9XCJcIjtmb3Iocj0wO3I8ZTtyKyspaSs9U3RyaW5nLmZyb21DaGFyQ29kZSgyNTUmdCksdD4+Pj04O3JldHVybiBpfWZ1bmN0aW9uIGkodCxlLHIsaSxuLHMpe3ZhciBhLG8saD10LmZpbGUsdT10LmNvbXByZXNzaW9uLGw9cyE9PU8udXRmOGVuY29kZSxmPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGgubmFtZSkpLGQ9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLE8udXRmOGVuY29kZShoLm5hbWUpKSxjPWguY29tbWVudCxwPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGMpKSxtPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixPLnV0ZjhlbmNvZGUoYykpLF89ZC5sZW5ndGghPT1oLm5hbWUubGVuZ3RoLGc9bS5sZW5ndGghPT1jLmxlbmd0aCxiPVwiXCIsdj1cIlwiLHk9XCJcIix3PWguZGlyLGs9aC5kYXRlLHg9e2NyYzMyOjAsY29tcHJlc3NlZFNpemU6MCx1bmNvbXByZXNzZWRTaXplOjB9O2UmJiFyfHwoeC5jcmMzMj10LmNyYzMyLHguY29tcHJlc3NlZFNpemU9dC5jb21wcmVzc2VkU2l6ZSx4LnVuY29tcHJlc3NlZFNpemU9dC51bmNvbXByZXNzZWRTaXplKTt2YXIgUz0wO2UmJihTfD04KSxsfHwhXyYmIWd8fChTfD0yMDQ4KTt2YXIgej0wLEM9MDt3JiYoenw9MTYpLFwiVU5JWFwiPT09bj8oQz03OTgsenw9ZnVuY3Rpb24odCxlKXt2YXIgcj10O3JldHVybiB0fHwocj1lPzE2ODkzOjMzMjA0KSwoNjU1MzUmcik8PDE2fShoLnVuaXhQZXJtaXNzaW9ucyx3KSk6KEM9MjAsenw9ZnVuY3Rpb24odCl7cmV0dXJuIDYzJih0fHwwKX0oaC5kb3NQZXJtaXNzaW9ucykpLGE9ay5nZXRVVENIb3VycygpLGE8PD02LGF8PWsuZ2V0VVRDTWludXRlcygpLGE8PD01LGF8PWsuZ2V0VVRDU2Vjb25kcygpLzIsbz1rLmdldFVUQ0Z1bGxZZWFyKCktMTk4MCxvPDw9NCxvfD1rLmdldFVUQ01vbnRoKCkrMSxvPDw9NSxvfD1rLmdldFVUQ0RhdGUoKSxfJiYodj1BKDEsMSkrQShCKGYpLDQpK2QsYis9XCJ1cFwiK0Eodi5sZW5ndGgsMikrdiksZyYmKHk9QSgxLDEpK0EoQihwKSw0KSttLGIrPVwidWNcIitBKHkubGVuZ3RoLDIpK3kpO3ZhciBFPVwiXCI7cmV0dXJuIEUrPVwiXFxuXFwwXCIsRSs9QShTLDIpLEUrPXUubWFnaWMsRSs9QShhLDIpLEUrPUEobywyKSxFKz1BKHguY3JjMzIsNCksRSs9QSh4LmNvbXByZXNzZWRTaXplLDQpLEUrPUEoeC51bmNvbXByZXNzZWRTaXplLDQpLEUrPUEoZi5sZW5ndGgsMiksRSs9QShiLmxlbmd0aCwyKSx7ZmlsZVJlY29yZDpSLkxPQ0FMX0ZJTEVfSEVBREVSK0UrZitiLGRpclJlY29yZDpSLkNFTlRSQUxfRklMRV9IRUFERVIrQShDLDIpK0UrQShwLmxlbmd0aCwyKStcIlxcMFxcMFxcMFxcMFwiK0Eoeiw0KStBKGksNCkrZitiK3B9fXZhciBJPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxPPXQoXCIuLi91dGY4XCIpLEI9dChcIi4uL2NyYzMyXCIpLFI9dChcIi4uL3NpZ25hdHVyZVwiKTtmdW5jdGlvbiBzKHQsZSxyLGkpe24uY2FsbCh0aGlzLFwiWmlwRmlsZVdvcmtlclwiKSx0aGlzLmJ5dGVzV3JpdHRlbj0wLHRoaXMuemlwQ29tbWVudD1lLHRoaXMuemlwUGxhdGZvcm09cix0aGlzLmVuY29kZUZpbGVOYW1lPWksdGhpcy5zdHJlYW1GaWxlcz10LHRoaXMuYWNjdW11bGF0ZT0hMSx0aGlzLmNvbnRlbnRCdWZmZXI9W10sdGhpcy5kaXJSZWNvcmRzPVtdLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldD0wLHRoaXMuZW50cmllc0NvdW50PTAsdGhpcy5jdXJyZW50RmlsZT1udWxsLHRoaXMuX3NvdXJjZXM9W119SS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCl7dmFyIGU9dC5tZXRhLnBlcmNlbnR8fDAscj10aGlzLmVudHJpZXNDb3VudCxpPXRoaXMuX3NvdXJjZXMubGVuZ3RoO3RoaXMuYWNjdW11bGF0ZT90aGlzLmNvbnRlbnRCdWZmZXIucHVzaCh0KToodGhpcy5ieXRlc1dyaXR0ZW4rPXQuZGF0YS5sZW5ndGgsbi5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMse2RhdGE6dC5kYXRhLG1ldGE6e2N1cnJlbnRGaWxlOnRoaXMuY3VycmVudEZpbGUscGVyY2VudDpyPyhlKzEwMCooci1pLTEpKS9yOjEwMH19KSl9LHMucHJvdG90eXBlLm9wZW5lZFNvdXJjZT1mdW5jdGlvbih0KXt0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQ9dGhpcy5ieXRlc1dyaXR0ZW4sdGhpcy5jdXJyZW50RmlsZT10LmZpbGUubmFtZTt2YXIgZT10aGlzLnN0cmVhbUZpbGVzJiYhdC5maWxlLmRpcjtpZihlKXt2YXIgcj1pKHQsZSwhMSx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsdGhpcy56aXBQbGF0Zm9ybSx0aGlzLmVuY29kZUZpbGVOYW1lKTt0aGlzLnB1c2goe2RhdGE6ci5maWxlUmVjb3JkLG1ldGE6e3BlcmNlbnQ6MH19KX1lbHNlIHRoaXMuYWNjdW11bGF0ZT0hMH0scy5wcm90b3R5cGUuY2xvc2VkU291cmNlPWZ1bmN0aW9uKHQpe3RoaXMuYWNjdW11bGF0ZT0hMTt2YXIgZT10aGlzLnN0cmVhbUZpbGVzJiYhdC5maWxlLmRpcixyPWkodCxlLCEwLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO2lmKHRoaXMuZGlyUmVjb3Jkcy5wdXNoKHIuZGlyUmVjb3JkKSxlKXRoaXMucHVzaCh7ZGF0YTpmdW5jdGlvbih0KXtyZXR1cm4gUi5EQVRBX0RFU0NSSVBUT1IrQSh0LmNyYzMyLDQpK0EodC5jb21wcmVzc2VkU2l6ZSw0KStBKHQudW5jb21wcmVzc2VkU2l6ZSw0KX0odCksbWV0YTp7cGVyY2VudDoxMDB9fSk7ZWxzZSBmb3IodGhpcy5wdXNoKHtkYXRhOnIuZmlsZVJlY29yZCxtZXRhOntwZXJjZW50OjB9fSk7dGhpcy5jb250ZW50QnVmZmVyLmxlbmd0aDspdGhpcy5wdXNoKHRoaXMuY29udGVudEJ1ZmZlci5zaGlmdCgpKTt0aGlzLmN1cnJlbnRGaWxlPW51bGx9LHMucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuYnl0ZXNXcml0dGVuLGU9MDtlPHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGg7ZSsrKXRoaXMucHVzaCh7ZGF0YTp0aGlzLmRpclJlY29yZHNbZV0sbWV0YTp7cGVyY2VudDoxMDB9fSk7dmFyIHI9dGhpcy5ieXRlc1dyaXR0ZW4tdCxpPWZ1bmN0aW9uKHQsZSxyLGksbil7dmFyIHM9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLG4oaSkpO3JldHVybiBSLkNFTlRSQUxfRElSRUNUT1JZX0VORCtcIlxcMFxcMFxcMFxcMFwiK0EodCwyKStBKHQsMikrQShlLDQpK0Eociw0KStBKHMubGVuZ3RoLDIpK3N9KHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGgscix0LHRoaXMuemlwQ29tbWVudCx0aGlzLmVuY29kZUZpbGVOYW1lKTt0aGlzLnB1c2goe2RhdGE6aSxtZXRhOntwZXJjZW50OjEwMH19KX0scy5wcm90b3R5cGUucHJlcGFyZU5leHRTb3VyY2U9ZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzPXRoaXMuX3NvdXJjZXMuc2hpZnQoKSx0aGlzLm9wZW5lZFNvdXJjZSh0aGlzLnByZXZpb3VzLnN0cmVhbUluZm8pLHRoaXMuaXNQYXVzZWQ/dGhpcy5wcmV2aW91cy5wYXVzZSgpOnRoaXMucHJldmlvdXMucmVzdW1lKCl9LHMucHJvdG90eXBlLnJlZ2lzdGVyUHJldmlvdXM9ZnVuY3Rpb24odCl7dGhpcy5fc291cmNlcy5wdXNoKHQpO3ZhciBlPXRoaXM7cmV0dXJuIHQub24oXCJkYXRhXCIsZnVuY3Rpb24odCl7ZS5wcm9jZXNzQ2h1bmsodCl9KSx0Lm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtlLmNsb3NlZFNvdXJjZShlLnByZXZpb3VzLnN0cmVhbUluZm8pLGUuX3NvdXJjZXMubGVuZ3RoP2UucHJlcGFyZU5leHRTb3VyY2UoKTplLmVuZCgpfSksdC5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZS5lcnJvcih0KX0pLHRoaXN9LHMucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3JldHVybiEhbi5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykmJighdGhpcy5wcmV2aW91cyYmdGhpcy5fc291cmNlcy5sZW5ndGg/KHRoaXMucHJlcGFyZU5leHRTb3VyY2UoKSwhMCk6dGhpcy5wcmV2aW91c3x8dGhpcy5fc291cmNlcy5sZW5ndGh8fHRoaXMuZ2VuZXJhdGVkRXJyb3I/dm9pZCAwOih0aGlzLmVuZCgpLCEwKSl9LHMucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3NvdXJjZXM7aWYoIW4ucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcyx0KSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0cnl7ZVtyXS5lcnJvcih0KX1jYXRjaCh0KXt9cmV0dXJuITB9LHMucHJvdG90eXBlLmxvY2s9ZnVuY3Rpb24oKXtuLnByb3RvdHlwZS5sb2NrLmNhbGwodGhpcyk7Zm9yKHZhciB0PXRoaXMuX3NvdXJjZXMsZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0ubG9jaygpfSxlLmV4cG9ydHM9c30se1wiLi4vY3JjMzJcIjo0LFwiLi4vc2lnbmF0dXJlXCI6MjMsXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi4vdXRmOFwiOjMxLFwiLi4vdXRpbHNcIjozMn1dLDk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgdT10KFwiLi4vY29tcHJlc3Npb25zXCIpLGk9dChcIi4vWmlwRmlsZVdvcmtlclwiKTtyLmdlbmVyYXRlV29ya2VyPWZ1bmN0aW9uKHQsYSxlKXt2YXIgbz1uZXcgaShhLnN0cmVhbUZpbGVzLGUsYS5wbGF0Zm9ybSxhLmVuY29kZUZpbGVOYW1lKSxoPTA7dHJ5e3QuZm9yRWFjaChmdW5jdGlvbih0LGUpe2grKzt2YXIgcj1mdW5jdGlvbih0LGUpe3ZhciByPXR8fGUsaT11W3JdO2lmKCFpKXRocm93IG5ldyBFcnJvcihyK1wiIGlzIG5vdCBhIHZhbGlkIGNvbXByZXNzaW9uIG1ldGhvZCAhXCIpO3JldHVybiBpfShlLm9wdGlvbnMuY29tcHJlc3Npb24sYS5jb21wcmVzc2lvbiksaT1lLm9wdGlvbnMuY29tcHJlc3Npb25PcHRpb25zfHxhLmNvbXByZXNzaW9uT3B0aW9uc3x8e30sbj1lLmRpcixzPWUuZGF0ZTtlLl9jb21wcmVzc1dvcmtlcihyLGkpLndpdGhTdHJlYW1JbmZvKFwiZmlsZVwiLHtuYW1lOnQsZGlyOm4sZGF0ZTpzLGNvbW1lbnQ6ZS5jb21tZW50fHxcIlwiLHVuaXhQZXJtaXNzaW9uczplLnVuaXhQZXJtaXNzaW9ucyxkb3NQZXJtaXNzaW9uczplLmRvc1Blcm1pc3Npb25zfSkucGlwZShvKX0pLG8uZW50cmllc0NvdW50PWh9Y2F0Y2godCl7by5lcnJvcih0KX1yZXR1cm4gb319LHtcIi4uL2NvbXByZXNzaW9uc1wiOjMsXCIuL1ppcEZpbGVXb3JrZXJcIjo4fV0sMTA6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpO2lmKGFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycyBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTt0aGlzLmZpbGVzPXt9LHRoaXMuY29tbWVudD1udWxsLHRoaXMucm9vdD1cIlwiLHRoaXMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgaTtmb3IodmFyIGUgaW4gdGhpcylcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2VdJiYodFtlXT10aGlzW2VdKTtyZXR1cm4gdH19KGkucHJvdG90eXBlPXQoXCIuL29iamVjdFwiKSkubG9hZEFzeW5jPXQoXCIuL2xvYWRcIiksaS5zdXBwb3J0PXQoXCIuL3N1cHBvcnRcIiksaS5kZWZhdWx0cz10KFwiLi9kZWZhdWx0c1wiKSxpLnZlcnNpb249XCIzLjUuMFwiLGkubG9hZEFzeW5jPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKG5ldyBpKS5sb2FkQXN5bmModCxlKX0saS5leHRlcm5hbD10KFwiLi9leHRlcm5hbFwiKSxlLmV4cG9ydHM9aX0se1wiLi9kZWZhdWx0c1wiOjUsXCIuL2V4dGVybmFsXCI6NixcIi4vbG9hZFwiOjExLFwiLi9vYmplY3RcIjoxNSxcIi4vc3VwcG9ydFwiOjMwfV0sMTE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi91dGlsc1wiKSxuPXQoXCIuL2V4dGVybmFsXCIpLG89dChcIi4vdXRmOFwiKSxoPShpPXQoXCIuL3V0aWxzXCIpLHQoXCIuL3ppcEVudHJpZXNcIikpLHM9dChcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksdT10KFwiLi9ub2RlanNVdGlsc1wiKTtmdW5jdGlvbiBsKGkpe3JldHVybiBuZXcgbi5Qcm9taXNlKGZ1bmN0aW9uKHQsZSl7dmFyIHI9aS5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IHMpO3Iub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2UodCl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ci5zdHJlYW1JbmZvLmNyYzMyIT09aS5kZWNvbXByZXNzZWQuY3JjMzI/ZShuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpOnQoKX0pLnJlc3VtZSgpfSl9ZS5leHBvcnRzPWZ1bmN0aW9uKHQscyl7dmFyIGE9dGhpcztyZXR1cm4gcz1pLmV4dGVuZChzfHx7fSx7YmFzZTY0OiExLGNoZWNrQ1JDMzI6ITEsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiExLGNyZWF0ZUZvbGRlcnM6ITEsZGVjb2RlRmlsZU5hbWU6by51dGY4ZGVjb2RlfSksdS5pc05vZGUmJnUuaXNTdHJlYW0odCk/bi5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKTppLnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLHQsITAscy5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcscy5iYXNlNjQpLnRoZW4oZnVuY3Rpb24odCl7dmFyIGU9bmV3IGgocyk7cmV0dXJuIGUubG9hZCh0KSxlfSkudGhlbihmdW5jdGlvbih0KXt2YXIgZT1bbi5Qcm9taXNlLnJlc29sdmUodCldLHI9dC5maWxlcztpZihzLmNoZWNrQ1JDMzIpZm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspZS5wdXNoKGwocltpXSkpO3JldHVybiBuLlByb21pc2UuYWxsKGUpfSkudGhlbihmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5zaGlmdCgpLHI9ZS5maWxlcyxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBuPXJbaV07YS5maWxlKG4uZmlsZU5hbWVTdHIsbi5kZWNvbXByZXNzZWQse2JpbmFyeTohMCxvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6ITAsZGF0ZTpuLmRhdGUsZGlyOm4uZGlyLGNvbW1lbnQ6bi5maWxlQ29tbWVudFN0ci5sZW5ndGg/bi5maWxlQ29tbWVudFN0cjpudWxsLHVuaXhQZXJtaXNzaW9uczpuLnVuaXhQZXJtaXNzaW9ucyxkb3NQZXJtaXNzaW9uczpuLmRvc1Blcm1pc3Npb25zLGNyZWF0ZUZvbGRlcnM6cy5jcmVhdGVGb2xkZXJzfSl9cmV0dXJuIGUuemlwQ29tbWVudC5sZW5ndGgmJihhLmNvbW1lbnQ9ZS56aXBDb21tZW50KSxhfSl9fSx7XCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyaWVzXCI6MzN9XSwxMjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKHQsZSl7bi5jYWxsKHRoaXMsXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiK3QpLHRoaXMuX3Vwc3RyZWFtRW5kZWQ9ITEsdGhpcy5fYmluZFN0cmVhbShlKX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUuX2JpbmRTdHJlYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsodGhpcy5fc3RyZWFtPXQpLnBhdXNlKCksdC5vbihcImRhdGFcIixmdW5jdGlvbih0KXtlLnB1c2goe2RhdGE6dCxtZXRhOntwZXJjZW50OjB9fSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZS5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPXQ6ZS5lcnJvcih0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtlLmlzUGF1c2VkP2UuX3Vwc3RyZWFtRW5kZWQ9ITA6ZS5lbmQoKX0pfSxzLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3JldHVybiEhbi5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSYmKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCEwKX0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKHRoaXMuX3Vwc3RyZWFtRW5kZWQ/dGhpcy5lbmQoKTp0aGlzLl9zdHJlYW0ucmVzdW1lKCksITApfSxlLmV4cG9ydHM9c30se1wiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0aWxzXCI6MzJ9XSwxMzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXQoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7ZnVuY3Rpb24gaSh0LGUscil7bi5jYWxsKHRoaXMsZSksdGhpcy5faGVscGVyPXQ7dmFyIGk9dGhpczt0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQsZSl7aS5wdXNoKHQpfHxpLl9oZWxwZXIucGF1c2UoKSxyJiZyKGUpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2kuZW1pdChcImVycm9yXCIsdCl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aS5wdXNoKG51bGwpfSl9dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt0aGlzLl9oZWxwZXIucmVzdW1lKCl9LGUuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwicmVhZGFibGUtc3RyZWFtXCI6MTZ9XSwxNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17aXNOb2RlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsbmV3QnVmZmVyRnJvbTpmdW5jdGlvbih0LGUpe2lmKEJ1ZmZlci5mcm9tJiZCdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbSlyZXR1cm4gQnVmZmVyLmZyb20odCxlKTtpZihcIm51bWJlclwiPT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImRhdGFcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiBuZXcgQnVmZmVyKHQsZSl9LGFsbG9jQnVmZmVyOmZ1bmN0aW9uKHQpe2lmKEJ1ZmZlci5hbGxvYylyZXR1cm4gQnVmZmVyLmFsbG9jKHQpO3ZhciBlPW5ldyBCdWZmZXIodCk7cmV0dXJuIGUuZmlsbCgwKSxlfSxpc0J1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKHQpfSxpc1N0cmVhbTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5wYXVzZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5yZXN1bWV9fX0se31dLDE1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyh0LGUscil7dmFyIGksbj11LmdldFR5cGVPZihlKSxzPXUuZXh0ZW5kKHJ8fHt9LGYpO3MuZGF0ZT1zLmRhdGV8fG5ldyBEYXRlLG51bGwhPT1zLmNvbXByZXNzaW9uJiYocy5jb21wcmVzc2lvbj1zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLFwic3RyaW5nXCI9PXR5cGVvZiBzLnVuaXhQZXJtaXNzaW9ucyYmKHMudW5peFBlcm1pc3Npb25zPXBhcnNlSW50KHMudW5peFBlcm1pc3Npb25zLDgpKSxzLnVuaXhQZXJtaXNzaW9ucyYmMTYzODQmcy51bml4UGVybWlzc2lvbnMmJihzLmRpcj0hMCkscy5kb3NQZXJtaXNzaW9ucyYmMTYmcy5kb3NQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRpciYmKHQ9Zyh0KSkscy5jcmVhdGVGb2xkZXJzJiYoaT1fKHQpKSYmYi5jYWxsKHRoaXMsaSwhMCk7dmFyIGE9XCJzdHJpbmdcIj09PW4mJiExPT09cy5iaW5hcnkmJiExPT09cy5iYXNlNjQ7ciYmdm9pZCAwIT09ci5iaW5hcnl8fChzLmJpbmFyeT0hYSksKGUgaW5zdGFuY2VvZiBkJiYwPT09ZS51bmNvbXByZXNzZWRTaXplfHxzLmRpcnx8IWV8fDA9PT1lLmxlbmd0aCkmJihzLmJhc2U2ND0hMSxzLmJpbmFyeT0hMCxlPVwiXCIscy5jb21wcmVzc2lvbj1cIlNUT1JFXCIsbj1cInN0cmluZ1wiKTt2YXIgbz1udWxsO289ZSBpbnN0YW5jZW9mIGR8fGUgaW5zdGFuY2VvZiBsP2U6cC5pc05vZGUmJnAuaXNTdHJlYW0oZSk/bmV3IG0odCxlKTp1LnByZXBhcmVDb250ZW50KHQsZSxzLmJpbmFyeSxzLm9wdGltaXplZEJpbmFyeVN0cmluZyxzLmJhc2U2NCk7dmFyIGg9bmV3IGModCxvLHMpO3RoaXMuZmlsZXNbdF09aH12YXIgbj10KFwiLi91dGY4XCIpLHU9dChcIi4vdXRpbHNcIiksbD10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxhPXQoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksZj10KFwiLi9kZWZhdWx0c1wiKSxkPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYz10KFwiLi96aXBPYmplY3RcIiksbz10KFwiLi9nZW5lcmF0ZVwiKSxwPXQoXCIuL25vZGVqc1V0aWxzXCIpLG09dChcIi4vbm9kZWpzL05vZGVqc1N0cmVhbUlucHV0QWRhcHRlclwiKSxfPWZ1bmN0aW9uKHQpe1wiL1wiPT09dC5zbGljZSgtMSkmJih0PXQuc3Vic3RyaW5nKDAsdC5sZW5ndGgtMSkpO3ZhciBlPXQubGFzdEluZGV4T2YoXCIvXCIpO3JldHVybiAwPGU/dC5zdWJzdHJpbmcoMCxlKTpcIlwifSxnPWZ1bmN0aW9uKHQpe3JldHVyblwiL1wiIT09dC5zbGljZSgtMSkmJih0Kz1cIi9cIiksdH0sYj1mdW5jdGlvbih0LGUpe3JldHVybiBlPXZvaWQgMCE9PWU/ZTpmLmNyZWF0ZUZvbGRlcnMsdD1nKHQpLHRoaXMuZmlsZXNbdF18fHMuY2FsbCh0aGlzLHQsbnVsbCx7ZGlyOiEwLGNyZWF0ZUZvbGRlcnM6ZX0pLHRoaXMuZmlsZXNbdF19O2Z1bmN0aW9uIGgodCl7cmV0dXJuXCJbb2JqZWN0IFJlZ0V4cF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX12YXIgaT17bG9hZDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmb3JFYWNoOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaTtmb3IoZSBpbiB0aGlzLmZpbGVzKXRoaXMuZmlsZXMuaGFzT3duUHJvcGVydHkoZSkmJihpPXRoaXMuZmlsZXNbZV0sKHI9ZS5zbGljZSh0aGlzLnJvb3QubGVuZ3RoLGUubGVuZ3RoKSkmJmUuc2xpY2UoMCx0aGlzLnJvb3QubGVuZ3RoKT09PXRoaXMucm9vdCYmdChyLGkpKX0sZmlsdGVyOmZ1bmN0aW9uKHIpe3ZhciBpPVtdO3JldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24odCxlKXtyKHQsZSkmJmkucHVzaChlKX0pLGl9LGZpbGU6ZnVuY3Rpb24odCxlLHIpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0PXRoaXMucm9vdCt0LHMuY2FsbCh0aGlzLHQsZSxyKSx0aGlzO2lmKGgodCkpe3ZhciBpPXQ7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIWUuZGlyJiZpLnRlc3QodCl9KX12YXIgbj10aGlzLmZpbGVzW3RoaXMucm9vdCt0XTtyZXR1cm4gbiYmIW4uZGlyP246bnVsbH0sZm9sZGVyOmZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiB0aGlzO2lmKGgocikpcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuZGlyJiZyLnRlc3QodCl9KTt2YXIgdD10aGlzLnJvb3QrcixlPWIuY2FsbCh0aGlzLHQpLGk9dGhpcy5jbG9uZSgpO3JldHVybiBpLnJvb3Q9ZS5uYW1lLGl9LHJlbW92ZTpmdW5jdGlvbihyKXtyPXRoaXMucm9vdCtyO3ZhciB0PXRoaXMuZmlsZXNbcl07aWYodHx8KFwiL1wiIT09ci5zbGljZSgtMSkmJihyKz1cIi9cIiksdD10aGlzLmZpbGVzW3JdKSx0JiYhdC5kaXIpZGVsZXRlIHRoaXMuZmlsZXNbcl07ZWxzZSBmb3IodmFyIGU9dGhpcy5maWx0ZXIoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5uYW1lLnNsaWNlKDAsci5sZW5ndGgpPT09cn0pLGk9MDtpPGUubGVuZ3RoO2krKylkZWxldGUgdGhpcy5maWxlc1tlW2ldLm5hbWVdO3JldHVybiB0aGlzfSxnZW5lcmF0ZTpmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTpmdW5jdGlvbih0KXt2YXIgZSxyPXt9O3RyeXtpZigocj11LmV4dGVuZCh0fHx7fSx7c3RyZWFtRmlsZXM6ITEsY29tcHJlc3Npb246XCJTVE9SRVwiLGNvbXByZXNzaW9uT3B0aW9uczpudWxsLHR5cGU6XCJcIixwbGF0Zm9ybTpcIkRPU1wiLGNvbW1lbnQ6bnVsbCxtaW1lVHlwZTpcImFwcGxpY2F0aW9uL3ppcFwiLGVuY29kZUZpbGVOYW1lOm4udXRmOGVuY29kZX0pKS50eXBlPXIudHlwZS50b0xvd2VyQ2FzZSgpLHIuY29tcHJlc3Npb249ci5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpLFwiYmluYXJ5c3RyaW5nXCI9PT1yLnR5cGUmJihyLnR5cGU9XCJzdHJpbmdcIiksIXIudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3UuY2hlY2tTdXBwb3J0KHIudHlwZSksXCJkYXJ3aW5cIiE9PXIucGxhdGZvcm0mJlwiZnJlZWJzZFwiIT09ci5wbGF0Zm9ybSYmXCJsaW51eFwiIT09ci5wbGF0Zm9ybSYmXCJzdW5vc1wiIT09ci5wbGF0Zm9ybXx8KHIucGxhdGZvcm09XCJVTklYXCIpLFwid2luMzJcIj09PXIucGxhdGZvcm0mJihyLnBsYXRmb3JtPVwiRE9TXCIpO3ZhciBpPXIuY29tbWVudHx8dGhpcy5jb21tZW50fHxcIlwiO2U9by5nZW5lcmF0ZVdvcmtlcih0aGlzLHIsaSl9Y2F0Y2godCl7KGU9bmV3IGwoXCJlcnJvclwiKSkuZXJyb3IodCl9cmV0dXJuIG5ldyBhKGUsci50eXBlfHxcInN0cmluZ1wiLHIubWltZVR5cGUpfSxnZW5lcmF0ZUFzeW5jOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbSh0KS5hY2N1bXVsYXRlKGUpfSxnZW5lcmF0ZU5vZGVTdHJlYW06ZnVuY3Rpb24odCxlKXtyZXR1cm4odD10fHx7fSkudHlwZXx8KHQudHlwZT1cIm5vZGVidWZmZXJcIiksdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKHQpLnRvTm9kZWpzU3RyZWFtKGUpfX07ZS5leHBvcnRzPWl9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2RlZmF1bHRzXCI6NSxcIi4vZ2VuZXJhdGVcIjo5LFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6MTIsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBPYmplY3RcIjozNX1dLDE2OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPXQoXCJzdHJlYW1cIil9LHtzdHJlYW06dm9pZCAwfV0sMTc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIG4odCl7aS5jYWxsKHRoaXMsdCk7Zm9yKHZhciBlPTA7ZTx0aGlzLmRhdGEubGVuZ3RoO2UrKyl0W2VdPTI1NSZ0W2VdfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLGkpLG4ucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybyt0XX0sbi5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuY2hhckNvZGVBdCgwKSxyPXQuY2hhckNvZGVBdCgxKSxpPXQuY2hhckNvZGVBdCgyKSxuPXQuY2hhckNvZGVBdCgzKSxzPXRoaXMubGVuZ3RoLTQ7MDw9czstLXMpaWYodGhpcy5kYXRhW3NdPT09ZSYmdGhpcy5kYXRhW3MrMV09PT1yJiZ0aGlzLmRhdGFbcysyXT09PWkmJnRoaXMuZGF0YVtzKzNdPT09bilyZXR1cm4gcy10aGlzLnplcm87cmV0dXJuLTF9LG4ucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbih0KXt2YXIgZT10LmNoYXJDb2RlQXQoMCkscj10LmNoYXJDb2RlQXQoMSksaT10LmNoYXJDb2RlQXQoMiksbj10LmNoYXJDb2RlQXQoMykscz10aGlzLnJlYWREYXRhKDQpO3JldHVybiBlPT09c1swXSYmcj09PXNbMV0mJmk9PT1zWzJdJiZuPT09c1szXX0sbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7aWYodGhpcy5jaGVja09mZnNldCh0KSwwPT09dClyZXR1cm5bXTt2YXIgZT10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrdCk7cmV0dXJuIHRoaXMuaW5kZXgrPXQsZX0sZS5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDE4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIG4odCl7dGhpcy5kYXRhPXQsdGhpcy5sZW5ndGg9dC5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMuemVybz0wfW4ucHJvdG90eXBlPXtjaGVja09mZnNldDpmdW5jdGlvbih0KXt0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCt0KX0sY2hlY2tJbmRleDpmdW5jdGlvbih0KXtpZih0aGlzLmxlbmd0aDx0aGlzLnplcm8rdHx8dDwwKXRocm93IG5ldyBFcnJvcihcIkVuZCBvZiBkYXRhIHJlYWNoZWQgKGRhdGEgbGVuZ3RoID0gXCIrdGhpcy5sZW5ndGgrXCIsIGFza2VkIGluZGV4ID0gXCIrdCtcIikuIENvcnJ1cHRlZCB6aXAgP1wiKX0sc2V0SW5kZXg6ZnVuY3Rpb24odCl7dGhpcy5jaGVja0luZGV4KHQpLHRoaXMuaW5kZXg9dH0sc2tpcDpmdW5jdGlvbih0KXt0aGlzLnNldEluZGV4KHRoaXMuaW5kZXgrdCl9LGJ5dGVBdDpmdW5jdGlvbih0KXt9LHJlYWRJbnQ6ZnVuY3Rpb24odCl7dmFyIGUscj0wO2Zvcih0aGlzLmNoZWNrT2Zmc2V0KHQpLGU9dGhpcy5pbmRleCt0LTE7ZT49dGhpcy5pbmRleDtlLS0pcj0ocjw8OCkrdGhpcy5ieXRlQXQoZSk7cmV0dXJuIHRoaXMuaW5kZXgrPXQscn0scmVhZFN0cmluZzpmdW5jdGlvbih0KXtyZXR1cm4gaS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMucmVhZERhdGEodCkpfSxyZWFkRGF0YTpmdW5jdGlvbih0KXt9LGxhc3RJbmRleE9mU2lnbmF0dXJlOmZ1bmN0aW9uKHQpe30scmVhZEFuZENoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKHQpe30scmVhZERhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnJlYWRJbnQoNCk7cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKDE5ODArKHQ+PjI1JjEyNyksKHQ+PjIxJjE1KS0xLHQ+PjE2JjMxLHQ+PjExJjMxLHQ+PjUmNjMsKDMxJnQpPDwxKSl9fSxlLmV4cG9ydHM9bn0se1wiLi4vdXRpbHNcIjozMn1dLDE5OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vVWludDhBcnJheVJlYWRlclwiKTtmdW5jdGlvbiBuKHQpe2kuY2FsbCh0aGlzLHQpfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLGkpLG4ucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2hlY2tPZmZzZXQodCk7dmFyIGU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0RhdGFSZWFkZXJcIik7ZnVuY3Rpb24gbih0KXtpLmNhbGwodGhpcyx0KX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMobixpKSxuLnByb3RvdHlwZS5ieXRlQXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5jaGFyQ29kZUF0KHRoaXMuemVybyt0KX0sbi5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5sYXN0SW5kZXhPZih0KS10aGlzLnplcm99LG4ucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucmVhZERhdGEoNCl9LG4ucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2hlY2tPZmZzZXQodCk7dmFyIGU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9EYXRhUmVhZGVyXCI6MTh9XSwyMTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0FycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIG4odCl7aS5jYWxsKHRoaXMsdCl9dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7aWYodGhpcy5jaGVja09mZnNldCh0KSwwPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7dmFyIGU9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3fV0sMjI6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi4vc3VwcG9ydFwiKSxzPXQoXCIuL0FycmF5UmVhZGVyXCIpLGE9dChcIi4vU3RyaW5nUmVhZGVyXCIpLG89dChcIi4vTm9kZUJ1ZmZlclJlYWRlclwiKSxoPXQoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPWkuZ2V0VHlwZU9mKHQpO3JldHVybiBpLmNoZWNrU3VwcG9ydChlKSxcInN0cmluZ1wiIT09ZXx8bi51aW50OGFycmF5P1wibm9kZWJ1ZmZlclwiPT09ZT9uZXcgbyh0KTpuLnVpbnQ4YXJyYXk/bmV3IGgoaS50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIix0KSk6bmV3IHMoaS50cmFuc2Zvcm1UbyhcImFycmF5XCIsdCkpOm5ldyBhKHQpfX0se1wiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQXJyYXlSZWFkZXJcIjoxNyxcIi4vTm9kZUJ1ZmZlclJlYWRlclwiOjE5LFwiLi9TdHJpbmdSZWFkZXJcIjoyMCxcIi4vVWludDhBcnJheVJlYWRlclwiOjIxfV0sMjM6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtyLkxPQ0FMX0ZJTEVfSEVBREVSPVwiUEtcdTAwMDNcdTAwMDRcIixyLkNFTlRSQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwMVx1MDAwMlwiLHIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDVcdTAwMDZcIixyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1I9XCJQS1x1MDAwNlx1MDAwN1wiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDZcdTAwMDZcIixyLkRBVEFfREVTQ1JJUFRPUj1cIlBLXHUwMDA3XFxiXCJ9LHt9XSwyNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0dlbmVyaWNXb3JrZXJcIiksbj10KFwiLi4vdXRpbHNcIik7ZnVuY3Rpb24gcyh0KXtpLmNhbGwodGhpcyxcIkNvbnZlcnRXb3JrZXIgdG8gXCIrdCksdGhpcy5kZXN0VHlwZT10fW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dGhpcy5wdXNoKHtkYXRhOm4udHJhbnNmb3JtVG8odGhpcy5kZXN0VHlwZSx0LmRhdGEpLG1ldGE6dC5tZXRhfSl9LGUuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0dlbmVyaWNXb3JrZXJcIiksbj10KFwiLi4vY3JjMzJcIik7ZnVuY3Rpb24gcygpe2kuY2FsbCh0aGlzLFwiQ3JjMzJQcm9iZVwiKSx0aGlzLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwwKX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dGhpcy5zdHJlYW1JbmZvLmNyYzMyPW4odC5kYXRhLHRoaXMuc3RyZWFtSW5mby5jcmMzMnx8MCksdGhpcy5wdXNoKHQpfSxlLmV4cG9ydHM9c30se1wiLi4vY3JjMzJcIjo0LFwiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjY6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHModCl7bi5jYWxsKHRoaXMsXCJEYXRhTGVuZ3RoUHJvYmUgZm9yIFwiK3QpLHRoaXMucHJvcE5hbWU9dCx0aGlzLndpdGhTdHJlYW1JbmZvKHQsMCl9aS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT10aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV18fDA7dGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdPWUrdC5kYXRhLmxlbmd0aH1uLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsuY2FsbCh0aGlzLHQpfSxlLmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHModCl7bi5jYWxsKHRoaXMsXCJEYXRhV29ya2VyXCIpO3ZhciBlPXRoaXM7dGhpcy5kYXRhSXNSZWFkeT0hMSx0aGlzLmluZGV4PTAsdGhpcy5tYXg9MCx0aGlzLmRhdGE9bnVsbCx0aGlzLnR5cGU9XCJcIix0aGlzLl90aWNrU2NoZWR1bGVkPSExLHQudGhlbihmdW5jdGlvbih0KXtlLmRhdGFJc1JlYWR5PSEwLGUuZGF0YT10LGUubWF4PXQmJnQubGVuZ3RofHwwLGUudHlwZT1pLmdldFR5cGVPZih0KSxlLmlzUGF1c2VkfHxlLl90aWNrQW5kUmVwZWF0KCl9LGZ1bmN0aW9uKHQpe2UuZXJyb3IodCl9KX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe24ucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLmRhdGE9bnVsbH0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLl90aWNrU2NoZWR1bGVkJiZ0aGlzLmRhdGFJc1JlYWR5JiYodGhpcy5fdGlja1NjaGVkdWxlZD0hMCxpLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcykpLCEwKX0scy5wcm90b3R5cGUuX3RpY2tBbmRSZXBlYXQ9ZnVuY3Rpb24oKXt0aGlzLl90aWNrU2NoZWR1bGVkPSExLHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZHx8KHRoaXMuX3RpY2soKSx0aGlzLmlzRmluaXNoZWR8fChpLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcyksdGhpcy5fdGlja1NjaGVkdWxlZD0hMCkpfSxzLnByb3RvdHlwZS5fdGljaz1mdW5jdGlvbigpe2lmKHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt2YXIgdD1udWxsLGU9TWF0aC5taW4odGhpcy5tYXgsdGhpcy5pbmRleCsxNjM4NCk7aWYodGhpcy5pbmRleD49dGhpcy5tYXgpcmV0dXJuIHRoaXMuZW5kKCk7c3dpdGNoKHRoaXMudHlwZSl7Y2FzZVwic3RyaW5nXCI6dD10aGlzLmRhdGEuc3Vic3RyaW5nKHRoaXMuaW5kZXgsZSk7YnJlYWs7Y2FzZVwidWludDhhcnJheVwiOnQ9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsZSk7YnJlYWs7Y2FzZVwiYXJyYXlcIjpjYXNlXCJub2RlYnVmZmVyXCI6dD10aGlzLmRhdGEuc2xpY2UodGhpcy5pbmRleCxlKX1yZXR1cm4gdGhpcy5pbmRleD1lLHRoaXMucHVzaCh7ZGF0YTp0LG1ldGE6e3BlcmNlbnQ6dGhpcy5tYXg/dGhpcy5pbmRleC90aGlzLm1heCoxMDA6MH19KX0sZS5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXt0aGlzLm5hbWU9dHx8XCJkZWZhdWx0XCIsdGhpcy5zdHJlYW1JbmZvPXt9LHRoaXMuZ2VuZXJhdGVkRXJyb3I9bnVsbCx0aGlzLmV4dHJhU3RyZWFtSW5mbz17fSx0aGlzLmlzUGF1c2VkPSEwLHRoaXMuaXNGaW5pc2hlZD0hMSx0aGlzLmlzTG9ja2VkPSExLHRoaXMuX2xpc3RlbmVycz17ZGF0YTpbXSxlbmQ6W10sZXJyb3I6W119LHRoaXMucHJldmlvdXM9bnVsbH1pLnByb3RvdHlwZT17cHVzaDpmdW5jdGlvbih0KXt0aGlzLmVtaXQoXCJkYXRhXCIsdCl9LGVuZDpmdW5jdGlvbigpe2lmKHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt0aGlzLmZsdXNoKCk7dHJ5e3RoaXMuZW1pdChcImVuZFwiKSx0aGlzLmNsZWFuVXAoKSx0aGlzLmlzRmluaXNoZWQ9ITB9Y2F0Y2godCl7dGhpcy5lbWl0KFwiZXJyb3JcIix0KX1yZXR1cm4hMH0sZXJyb3I6ZnVuY3Rpb24odCl7cmV0dXJuIXRoaXMuaXNGaW5pc2hlZCYmKHRoaXMuaXNQYXVzZWQ/dGhpcy5nZW5lcmF0ZWRFcnJvcj10Oih0aGlzLmlzRmluaXNoZWQ9ITAsdGhpcy5lbWl0KFwiZXJyb3JcIix0KSx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLmVycm9yKHQpLHRoaXMuY2xlYW5VcCgpKSwhMCl9LG9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2xpc3RlbmVyc1t0XS5wdXNoKGUpLHRoaXN9LGNsZWFuVXA6ZnVuY3Rpb24oKXt0aGlzLnN0cmVhbUluZm89dGhpcy5nZW5lcmF0ZWRFcnJvcj10aGlzLmV4dHJhU3RyZWFtSW5mbz1udWxsLHRoaXMuX2xpc3RlbmVycz1bXX0sZW1pdDpmdW5jdGlvbih0LGUpe2lmKHRoaXMuX2xpc3RlbmVyc1t0XSlmb3IodmFyIHI9MDtyPHRoaXMuX2xpc3RlbmVyc1t0XS5sZW5ndGg7cisrKXRoaXMuX2xpc3RlbmVyc1t0XVtyXS5jYWxsKHRoaXMsZSl9LHBpcGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVnaXN0ZXJQcmV2aW91cyh0aGlzKX0scmVnaXN0ZXJQcmV2aW91czpmdW5jdGlvbih0KXtpZih0aGlzLmlzTG9ja2VkKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiK3RoaXMrXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7dGhpcy5zdHJlYW1JbmZvPXQuc3RyZWFtSW5mbyx0aGlzLm1lcmdlU3RyZWFtSW5mbygpLHRoaXMucHJldmlvdXM9dDt2YXIgZT10aGlzO3JldHVybiB0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQpe2UucHJvY2Vzc0NodW5rKHQpfSksdC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ZS5lbmQoKX0pLHQub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2UuZXJyb3IodCl9KSx0aGlzfSxwYXVzZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLmlzUGF1c2VkJiYhdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD0hMCx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLnBhdXNlKCksITApfSxyZXN1bWU6ZnVuY3Rpb24oKXtpZighdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciB0PXRoaXMuaXNQYXVzZWQ9ITE7cmV0dXJuIHRoaXMuZ2VuZXJhdGVkRXJyb3ImJih0aGlzLmVycm9yKHRoaXMuZ2VuZXJhdGVkRXJyb3IpLHQ9ITApLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucmVzdW1lKCksIXR9LGZsdXNoOmZ1bmN0aW9uKCl7fSxwcm9jZXNzQ2h1bms6ZnVuY3Rpb24odCl7dGhpcy5wdXNoKHQpfSx3aXRoU3RyZWFtSW5mbzpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmV4dHJhU3RyZWFtSW5mb1t0XT1lLHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpc30sbWVyZ2VTdHJlYW1JbmZvOmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuZXh0cmFTdHJlYW1JbmZvKXRoaXMuZXh0cmFTdHJlYW1JbmZvLmhhc093blByb3BlcnR5KHQpJiYodGhpcy5zdHJlYW1JbmZvW3RdPXRoaXMuZXh0cmFTdHJlYW1JbmZvW3RdKX0sbG9jazpmdW5jdGlvbigpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLmlzTG9ja2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMubG9jaygpfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciB0PVwiV29ya2VyIFwiK3RoaXMubmFtZTtyZXR1cm4gdGhpcy5wcmV2aW91cz90aGlzLnByZXZpb3VzK1wiIC0+IFwiK3Q6dH19LGUuZXhwb3J0cz1pfSx7fV0sMjk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaD10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9Db252ZXJ0V29ya2VyXCIpLHM9dChcIi4vR2VuZXJpY1dvcmtlclwiKSx1PXQoXCIuLi9iYXNlNjRcIiksaT10KFwiLi4vc3VwcG9ydFwiKSxhPXQoXCIuLi9leHRlcm5hbFwiKSxvPW51bGw7aWYoaS5ub2Rlc3RyZWFtKXRyeXtvPXQoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKX1jYXRjaCh0KXt9ZnVuY3Rpb24gbCh0LG8pe3JldHVybiBuZXcgYS5Qcm9taXNlKGZ1bmN0aW9uKGUscil7dmFyIGk9W10sbj10Ll9pbnRlcm5hbFR5cGUscz10Ll9vdXRwdXRUeXBlLGE9dC5fbWltZVR5cGU7dC5vbihcImRhdGFcIixmdW5jdGlvbih0LGUpe2kucHVzaCh0KSxvJiZvKGUpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2k9W10scih0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0cnl7dmFyIHQ9ZnVuY3Rpb24odCxlLHIpe3N3aXRjaCh0KXtjYXNlXCJibG9iXCI6cmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIixlKSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdS5lbmNvZGUoZSk7ZGVmYXVsdDpyZXR1cm4gaC50cmFuc2Zvcm1Ubyh0LGUpfX0ocyxmdW5jdGlvbih0LGUpe3ZhciByLGk9MCxuPW51bGwscz0wO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspcys9ZVtyXS5sZW5ndGg7c3dpdGNoKHQpe2Nhc2VcInN0cmluZ1wiOnJldHVybiBlLmpvaW4oXCJcIik7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxlKTtjYXNlXCJ1aW50OGFycmF5XCI6Zm9yKG49bmV3IFVpbnQ4QXJyYXkocykscj0wO3I8ZS5sZW5ndGg7cisrKW4uc2V0KGVbcl0saSksaSs9ZVtyXS5sZW5ndGg7cmV0dXJuIG47Y2FzZVwibm9kZWJ1ZmZlclwiOnJldHVybiBCdWZmZXIuY29uY2F0KGUpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIrdCtcIidcIil9fShuLGkpLGEpO2UodCl9Y2F0Y2godCl7cih0KX1pPVtdfSkucmVzdW1lKCl9KX1mdW5jdGlvbiBmKHQsZSxyKXt2YXIgaT1lO3N3aXRjaChlKXtjYXNlXCJibG9iXCI6Y2FzZVwiYXJyYXlidWZmZXJcIjppPVwidWludDhhcnJheVwiO2JyZWFrO2Nhc2VcImJhc2U2NFwiOmk9XCJzdHJpbmdcIn10cnl7dGhpcy5faW50ZXJuYWxUeXBlPWksdGhpcy5fb3V0cHV0VHlwZT1lLHRoaXMuX21pbWVUeXBlPXIsaC5jaGVja1N1cHBvcnQoaSksdGhpcy5fd29ya2VyPXQucGlwZShuZXcgbihpKSksdC5sb2NrKCl9Y2F0Y2godCl7dGhpcy5fd29ya2VyPW5ldyBzKFwiZXJyb3JcIiksdGhpcy5fd29ya2VyLmVycm9yKHQpfX1mLnByb3RvdHlwZT17YWNjdW11bGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gbCh0aGlzLHQpfSxvbjpmdW5jdGlvbih0LGUpe3ZhciByPXRoaXM7cmV0dXJuXCJkYXRhXCI9PT10P3RoaXMuX3dvcmtlci5vbih0LGZ1bmN0aW9uKHQpe2UuY2FsbChyLHQuZGF0YSx0Lm1ldGEpfSk6dGhpcy5fd29ya2VyLm9uKHQsZnVuY3Rpb24oKXtoLmRlbGF5KGUsYXJndW1lbnRzLHIpfSksdGhpc30scmVzdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSxbXSx0aGlzLl93b3JrZXIpLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dvcmtlci5wYXVzZSgpLHRoaXN9LHRvTm9kZWpzU3RyZWFtOmZ1bmN0aW9uKHQpe2lmKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSxcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGUpdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtyZXR1cm4gbmV3IG8odGhpcyx7b2JqZWN0TW9kZTpcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGV9LHQpfX0sZS5leHBvcnRzPWZ9LHtcIi4uL2Jhc2U2NFwiOjEsXCIuLi9leHRlcm5hbFwiOjYsXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOjEzLFwiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQ29udmVydFdvcmtlclwiOjI0LFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwzMDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2lmKHIuYmFzZTY0PSEwLHIuYXJyYXk9ITAsci5zdHJpbmc9ITAsci5hcnJheWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LHIubm9kZWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyLHIudWludDhhcnJheT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSxcInVuZGVmaW5lZFwiPT10eXBlb2YgQXJyYXlCdWZmZXIpci5ibG9iPSExO2Vsc2V7dmFyIGk9bmV3IEFycmF5QnVmZmVyKDApO3RyeXtyLmJsb2I9MD09PW5ldyBCbG9iKFtpXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ppcFwifSkuc2l6ZX1jYXRjaCh0KXt0cnl7dmFyIG49bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7bi5hcHBlbmQoaSksci5ibG9iPTA9PT1uLmdldEJsb2IoXCJhcHBsaWNhdGlvbi96aXBcIikuc2l6ZX1jYXRjaCh0KXtyLmJsb2I9ITF9fX10cnl7ci5ub2Rlc3RyZWFtPSEhdChcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZX1jYXRjaCh0KXtyLm5vZGVzdHJlYW09ITF9fSx7XCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDMxOltmdW5jdGlvbih0LGUscyl7XCJ1c2Ugc3RyaWN0XCI7Zm9yKHZhciBvPXQoXCIuL3V0aWxzXCIpLGg9dChcIi4vc3VwcG9ydFwiKSxyPXQoXCIuL25vZGVqc1V0aWxzXCIpLGk9dChcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksdT1uZXcgQXJyYXkoMjU2KSxuPTA7bjwyNTY7bisrKXVbbl09MjUyPD1uPzY6MjQ4PD1uPzU6MjQwPD1uPzQ6MjI0PD1uPzM6MTkyPD1uPzI6MTt1WzI1NF09dVsyNTRdPTE7ZnVuY3Rpb24gYSgpe2kuY2FsbCh0aGlzLFwidXRmLTggZGVjb2RlXCIpLHRoaXMubGVmdE92ZXI9bnVsbH1mdW5jdGlvbiBsKCl7aS5jYWxsKHRoaXMsXCJ1dGYtOCBlbmNvZGVcIil9cy51dGY4ZW5jb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBoLm5vZGVidWZmZXI/ci5uZXdCdWZmZXJGcm9tKHQsXCJ1dGYtOFwiKTpmdW5jdGlvbih0KXt2YXIgZSxyLGksbixzLGE9dC5sZW5ndGgsbz0wO2ZvcihuPTA7bjxhO24rKyk1NTI5Nj09KDY0NTEyJihyPXQuY2hhckNvZGVBdChuKSkpJiZuKzE8YSYmNTYzMjA9PSg2NDUxMiYoaT10LmNoYXJDb2RlQXQobisxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhpLTU2MzIwKSxuKyspLG8rPXI8MTI4PzE6cjwyMDQ4PzI6cjw2NTUzNj8zOjQ7Zm9yKGU9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KG8pOm5ldyBBcnJheShvKSxuPXM9MDtzPG87bisrKTU1Mjk2PT0oNjQ1MTImKHI9dC5jaGFyQ29kZUF0KG4pKSkmJm4rMTxhJiY1NjMyMD09KDY0NTEyJihpPXQuY2hhckNvZGVBdChuKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKGktNTYzMjApLG4rKykscjwxMjg/ZVtzKytdPXI6KHI8MjA0OD9lW3MrK109MTkyfHI+Pj42OihyPDY1NTM2P2VbcysrXT0yMjR8cj4+PjEyOihlW3MrK109MjQwfHI+Pj4xOCxlW3MrK109MTI4fHI+Pj4xMiY2MyksZVtzKytdPTEyOHxyPj4+NiY2MyksZVtzKytdPTEyOHw2MyZyKTtyZXR1cm4gZX0odCl9LHMudXRmOGRlY29kZT1mdW5jdGlvbih0KXtyZXR1cm4gaC5ub2RlYnVmZmVyP28udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsdCkudG9TdHJpbmcoXCJ1dGYtOFwiKTpmdW5jdGlvbih0KXt2YXIgZSxyLGksbixzPXQubGVuZ3RoLGE9bmV3IEFycmF5KDIqcyk7Zm9yKGU9cj0wO2U8czspaWYoKGk9dFtlKytdKTwxMjgpYVtyKytdPWk7ZWxzZSBpZig0PChuPXVbaV0pKWFbcisrXT02NTUzMyxlKz1uLTE7ZWxzZXtmb3IoaSY9Mj09PW4/MzE6Mz09PW4/MTU6NzsxPG4mJmU8czspaT1pPDw2fDYzJnRbZSsrXSxuLS07MTxuP2FbcisrXT02NTUzMzppPDY1NTM2P2FbcisrXT1pOihpLT02NTUzNixhW3IrK109NTUyOTZ8aT4+MTAmMTAyMyxhW3IrK109NTYzMjB8MTAyMyZpKX1yZXR1cm4gYS5sZW5ndGghPT1yJiYoYS5zdWJhcnJheT9hPWEuc3ViYXJyYXkoMCxyKTphLmxlbmd0aD1yKSxvLmFwcGx5RnJvbUNoYXJDb2RlKGEpfSh0PW8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIix0KSl9LG8uaW5oZXJpdHMoYSxpKSxhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dmFyIGU9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLHQuZGF0YSk7aWYodGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgpe2lmKGgudWludDhhcnJheSl7dmFyIHI9ZTsoZT1uZXcgVWludDhBcnJheShyLmxlbmd0aCt0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLDApLGUuc2V0KHIsdGhpcy5sZWZ0T3Zlci5sZW5ndGgpfWVsc2UgZT10aGlzLmxlZnRPdmVyLmNvbmNhdChlKTt0aGlzLmxlZnRPdmVyPW51bGx9dmFyIGk9ZnVuY3Rpb24odCxlKXt2YXIgcjtmb3IoKGU9ZXx8dC5sZW5ndGgpPnQubGVuZ3RoJiYoZT10Lmxlbmd0aCkscj1lLTE7MDw9ciYmMTI4PT0oMTkyJnRbcl0pOylyLS07cmV0dXJuIHI8MD9lOjA9PT1yP2U6cit1W3Rbcl1dPmU/cjplfShlKSxuPWU7aSE9PWUubGVuZ3RoJiYoaC51aW50OGFycmF5PyhuPWUuc3ViYXJyYXkoMCxpKSx0aGlzLmxlZnRPdmVyPWUuc3ViYXJyYXkoaSxlLmxlbmd0aCkpOihuPWUuc2xpY2UoMCxpKSx0aGlzLmxlZnRPdmVyPWUuc2xpY2UoaSxlLmxlbmd0aCkpKSx0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKG4pLG1ldGE6dC5tZXRhfSl9LGEucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgmJih0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLG1ldGE6e319KSx0aGlzLmxlZnRPdmVyPW51bGwpfSxzLlV0ZjhEZWNvZGVXb3JrZXI9YSxvLmluaGVyaXRzKGwsaSksbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKHQpe3RoaXMucHVzaCh7ZGF0YTpzLnV0ZjhlbmNvZGUodC5kYXRhKSxtZXRhOnQubWV0YX0pfSxzLlV0ZjhFbmNvZGVXb3JrZXI9bH0se1wiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwzMjpbZnVuY3Rpb24odCxlLGEpe1widXNlIHN0cmljdFwiO3ZhciBvPXQoXCIuL3N1cHBvcnRcIiksaD10KFwiLi9iYXNlNjRcIikscj10KFwiLi9ub2RlanNVdGlsc1wiKSxpPXQoXCJzZXQtaW1tZWRpYXRlLXNoaW1cIiksdT10KFwiLi9leHRlcm5hbFwiKTtmdW5jdGlvbiBuKHQpe3JldHVybiB0fWZ1bmN0aW9uIGwodCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrcillW3JdPTI1NSZ0LmNoYXJDb2RlQXQocik7cmV0dXJuIGV9YS5uZXdCbG9iPWZ1bmN0aW9uKGUscil7YS5jaGVja1N1cHBvcnQoXCJibG9iXCIpO3RyeXtyZXR1cm4gbmV3IEJsb2IoW2VdLHt0eXBlOnJ9KX1jYXRjaCh0KXt0cnl7dmFyIGk9bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7cmV0dXJuIGkuYXBwZW5kKGUpLGkuZ2V0QmxvYihyKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiBjYW4ndCBjb25zdHJ1Y3QgdGhlIEJsb2IuXCIpfX19O3ZhciBzPXtzdHJpbmdpZnlCeUNodW5rOmZ1bmN0aW9uKHQsZSxyKXt2YXIgaT1bXSxuPTAscz10Lmxlbmd0aDtpZihzPD1yKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsdCk7Zm9yKDtuPHM7KVwiYXJyYXlcIj09PWV8fFwibm9kZWJ1ZmZlclwiPT09ZT9pLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHQuc2xpY2UobixNYXRoLm1pbihuK3IscykpKSk6aS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCx0LnN1YmFycmF5KG4sTWF0aC5taW4obityLHMpKSkpLG4rPXI7cmV0dXJuIGkuam9pbihcIlwiKX0sc3RyaW5naWZ5QnlDaGFyOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1cIlwiLHI9MDtyPHQubGVuZ3RoO3IrKyllKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbcl0pO3JldHVybiBlfSxhcHBseUNhbkJlVXNlZDp7dWludDhhcnJheTpmdW5jdGlvbigpe3RyeXtyZXR1cm4gby51aW50OGFycmF5JiYxPT09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKS5sZW5ndGh9Y2F0Y2godCl7cmV0dXJuITF9fSgpLG5vZGVidWZmZXI6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8ubm9kZWJ1ZmZlciYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxyLmFsbG9jQnVmZmVyKDEpKS5sZW5ndGh9Y2F0Y2godCl7cmV0dXJuITF9fSgpfX07ZnVuY3Rpb24gZih0KXt2YXIgZT02NTUzNixyPWEuZ2V0VHlwZU9mKHQpLGk9ITA7aWYoXCJ1aW50OGFycmF5XCI9PT1yP2k9cy5hcHBseUNhbkJlVXNlZC51aW50OGFycmF5Olwibm9kZWJ1ZmZlclwiPT09ciYmKGk9cy5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyKSxpKWZvcig7MTxlOyl0cnl7cmV0dXJuIHMuc3RyaW5naWZ5QnlDaHVuayh0LHIsZSl9Y2F0Y2godCl7ZT1NYXRoLmZsb29yKGUvMil9cmV0dXJuIHMuc3RyaW5naWZ5QnlDaGFyKHQpfWZ1bmN0aW9uIGQodCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyllW3JdPXRbcl07cmV0dXJuIGV9YS5hcHBseUZyb21DaGFyQ29kZT1mO3ZhciBjPXt9O2Muc3RyaW5nPXtzdHJpbmc6bixhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gbCh0LG5ldyBBcnJheSh0Lmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gYy5zdHJpbmcudWludDhhcnJheSh0KS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGwodCxuZXcgVWludDhBcnJheSh0Lmxlbmd0aCkpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBsKHQsci5hbGxvY0J1ZmZlcih0Lmxlbmd0aCkpfX0sYy5hcnJheT17c3RyaW5nOmYsYXJyYXk6bixhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgVWludDhBcnJheSh0KX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKHQpfX0sYy5hcnJheWJ1ZmZlcj17c3RyaW5nOmZ1bmN0aW9uKHQpe3JldHVybiBmKG5ldyBVaW50OEFycmF5KHQpKX0sYXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGQobmV3IFVpbnQ4QXJyYXkodCksbmV3IEFycmF5KHQuYnl0ZUxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpuLHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHQpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiByLm5ld0J1ZmZlckZyb20obmV3IFVpbnQ4QXJyYXkodCkpfX0sYy51aW50OGFycmF5PXtzdHJpbmc6ZixhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gZCh0LG5ldyBBcnJheSh0Lmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gdC5idWZmZXJ9LHVpbnQ4YXJyYXk6bixub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiByLm5ld0J1ZmZlckZyb20odCl9fSxjLm5vZGVidWZmZXI9e3N0cmluZzpmLGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBkKHQsbmV3IEFycmF5KHQubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBjLm5vZGVidWZmZXIudWludDhhcnJheSh0KS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGQodCxuZXcgVWludDhBcnJheSh0Lmxlbmd0aCkpfSxub2RlYnVmZmVyOm59LGEudHJhbnNmb3JtVG89ZnVuY3Rpb24odCxlKXtpZihlPWV8fFwiXCIsIXQpcmV0dXJuIGU7YS5jaGVja1N1cHBvcnQodCk7dmFyIHI9YS5nZXRUeXBlT2YoZSk7cmV0dXJuIGNbcl1bdF0oZSl9LGEuZ2V0VHlwZU9mPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P1wic3RyaW5nXCI6XCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpP1wiYXJyYXlcIjpvLm5vZGVidWZmZXImJnIuaXNCdWZmZXIodCk/XCJub2RlYnVmZmVyXCI6by51aW50OGFycmF5JiZ0IGluc3RhbmNlb2YgVWludDhBcnJheT9cInVpbnQ4YXJyYXlcIjpvLmFycmF5YnVmZmVyJiZ0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/XCJhcnJheWJ1ZmZlclwiOnZvaWQgMH0sYS5jaGVja1N1cHBvcnQ9ZnVuY3Rpb24odCl7aWYoIW9bdC50b0xvd2VyQ2FzZSgpXSl0aHJvdyBuZXcgRXJyb3IodCtcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgcGxhdGZvcm1cIil9LGEuTUFYX1ZBTFVFXzE2QklUUz02NTUzNSxhLk1BWF9WQUxVRV8zMkJJVFM9LTEsYS5wcmV0dHk9ZnVuY3Rpb24odCl7dmFyIGUscixpPVwiXCI7Zm9yKHI9MDtyPCh0fHxcIlwiKS5sZW5ndGg7cisrKWkrPVwiXFxcXHhcIisoKGU9dC5jaGFyQ29kZUF0KHIpKTwxNj9cIjBcIjpcIlwiKStlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO3JldHVybiBpfSxhLmRlbGF5PWZ1bmN0aW9uKHQsZSxyKXtpKGZ1bmN0aW9uKCl7dC5hcHBseShyfHxudWxsLGV8fFtdKX0pfSxhLmluaGVyaXRzPWZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcigpe31yLnByb3RvdHlwZT1lLnByb3RvdHlwZSx0LnByb3RvdHlwZT1uZXcgcn0sYS5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgdCxlLHI9e307Zm9yKHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWZvcihlIGluIGFyZ3VtZW50c1t0XSlhcmd1bWVudHNbdF0uaGFzT3duUHJvcGVydHkoZSkmJnZvaWQgMD09PXJbZV0mJihyW2VdPWFyZ3VtZW50c1t0XVtlXSk7cmV0dXJuIHJ9LGEucHJlcGFyZUNvbnRlbnQ9ZnVuY3Rpb24ocix0LGksbixzKXtyZXR1cm4gdS5Qcm9taXNlLnJlc29sdmUodCkudGhlbihmdW5jdGlvbihpKXtyZXR1cm4gby5ibG9iJiYoaSBpbnN0YW5jZW9mIEJsb2J8fC0xIT09W1wiW29iamVjdCBGaWxlXVwiLFwiW29iamVjdCBCbG9iXVwiXS5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpKSkpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcj9uZXcgdS5Qcm9taXNlKGZ1bmN0aW9uKGUscil7dmFyIHQ9bmV3IEZpbGVSZWFkZXI7dC5vbmxvYWQ9ZnVuY3Rpb24odCl7ZSh0LnRhcmdldC5yZXN1bHQpfSx0Lm9uZXJyb3I9ZnVuY3Rpb24odCl7cih0LnRhcmdldC5lcnJvcil9LHQucmVhZEFzQXJyYXlCdWZmZXIoaSl9KTppfSkudGhlbihmdW5jdGlvbih0KXt2YXIgZT1hLmdldFR5cGVPZih0KTtyZXR1cm4gZT8oXCJhcnJheWJ1ZmZlclwiPT09ZT90PWEudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsdCk6XCJzdHJpbmdcIj09PWUmJihzP3Q9aC5kZWNvZGUodCk6aSYmITAhPT1uJiYodD1mdW5jdGlvbih0KXtyZXR1cm4gbCh0LG8udWludDhhcnJheT9uZXcgVWludDhBcnJheSh0Lmxlbmd0aCk6bmV3IEFycmF5KHQubGVuZ3RoKSl9KHQpKSksdCk6dS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCByZWFkIHRoZSBkYXRhIG9mICdcIityK1wiJy4gSXMgaXQgaW4gYSBzdXBwb3J0ZWQgSmF2YVNjcmlwdCB0eXBlIChTdHJpbmcsIEJsb2IsIEFycmF5QnVmZmVyLCBldGMpID9cIikpfSl9fSx7XCIuL2Jhc2U2NFwiOjEsXCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3VwcG9ydFwiOjMwLFwic2V0LWltbWVkaWF0ZS1zaGltXCI6NTR9XSwzMzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksbj10KFwiLi91dGlsc1wiKSxzPXQoXCIuL3NpZ25hdHVyZVwiKSxhPXQoXCIuL3ppcEVudHJ5XCIpLG89KHQoXCIuL3V0ZjhcIiksdChcIi4vc3VwcG9ydFwiKSk7ZnVuY3Rpb24gaCh0KXt0aGlzLmZpbGVzPVtdLHRoaXMubG9hZE9wdGlvbnM9dH1oLnByb3RvdHlwZT17Y2hlY2tTaWduYXR1cmU6ZnVuY3Rpb24odCl7aWYoIXRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZSh0KSl7dGhpcy5yZWFkZXIuaW5kZXgtPTQ7dmFyIGU9dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KTt0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogdW5leHBlY3RlZCBzaWduYXR1cmUgKFwiK24ucHJldHR5KGUpK1wiLCBleHBlY3RlZCBcIituLnByZXR0eSh0KStcIilcIil9fSxpc1NpZ25hdHVyZTpmdW5jdGlvbih0LGUpe3ZhciByPXRoaXMucmVhZGVyLmluZGV4O3RoaXMucmVhZGVyLnNldEluZGV4KHQpO3ZhciBpPXRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk9PT1lO3JldHVybiB0aGlzLnJlYWRlci5zZXRJbmRleChyKSxpfSxyZWFkQmxvY2tFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt0aGlzLmRpc2tOdW1iZXI9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuY2VudHJhbERpck9mZnNldD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuemlwQ29tbWVudExlbmd0aD10aGlzLnJlYWRlci5yZWFkSW50KDIpO3ZhciB0PXRoaXMucmVhZGVyLnJlYWREYXRhKHRoaXMuemlwQ29tbWVudExlbmd0aCksZT1vLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLHI9bi50cmFuc2Zvcm1UbyhlLHQpO3RoaXMuemlwQ29tbWVudD10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKHIpfSxyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5yZWFkZXIuc2tpcCg0KSx0aGlzLmRpc2tOdW1iZXI9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpck9mZnNldD10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuemlwNjRFeHRlbnNpYmxlRGF0YT17fTtmb3IodmFyIHQsZSxyLGk9dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUtNDQ7MDxpOyl0PXRoaXMucmVhZGVyLnJlYWRJbnQoMiksZT10aGlzLnJlYWRlci5yZWFkSW50KDQpLHI9dGhpcy5yZWFkZXIucmVhZERhdGEoZSksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhW3RdPXtpZDp0LGxlbmd0aDplLHZhbHVlOnJ9fSxyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3I6ZnVuY3Rpb24oKXtpZih0aGlzLmRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmRpc2tzQ291bnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSwxPHRoaXMuZGlza3NDb3VudCl0aHJvdyBuZXcgRXJyb3IoXCJNdWx0aS12b2x1bWVzIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKX0scmVhZExvY2FsRmlsZXM6ZnVuY3Rpb24oKXt2YXIgdCxlO2Zvcih0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspZT10aGlzLmZpbGVzW3RdLHRoaXMucmVhZGVyLnNldEluZGV4KGUubG9jYWxIZWFkZXJPZmZzZXQpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5MT0NBTF9GSUxFX0hFQURFUiksZS5yZWFkTG9jYWxQYXJ0KHRoaXMucmVhZGVyKSxlLmhhbmRsZVVURjgoKSxlLnByb2Nlc3NBdHRyaWJ1dGVzKCl9LHJlYWRDZW50cmFsRGlyOmZ1bmN0aW9uKCl7dmFyIHQ7Zm9yKHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7dGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKHMuQ0VOVFJBTF9GSUxFX0hFQURFUik7KSh0PW5ldyBhKHt6aXA2NDp0aGlzLnppcDY0fSx0aGlzLmxvYWRPcHRpb25zKSkucmVhZENlbnRyYWxQYXJ0KHRoaXMucmVhZGVyKSx0aGlzLmZpbGVzLnB1c2godCk7aWYodGhpcy5jZW50cmFsRGlyUmVjb3JkcyE9PXRoaXMuZmlsZXMubGVuZ3RoJiYwIT09dGhpcy5jZW50cmFsRGlyUmVjb3JkcyYmMD09PXRoaXMuZmlsZXMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiBleHBlY3RlZCBcIit0aGlzLmNlbnRyYWxEaXJSZWNvcmRzK1wiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCBcIit0aGlzLmZpbGVzLmxlbmd0aCl9LHJlYWRFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLkNFTlRSQUxfRElSRUNUT1JZX0VORCk7aWYodDwwKXRocm93IXRoaXMuaXNTaWduYXR1cmUoMCxzLkxPQ0FMX0ZJTEVfSEVBREVSKT9uZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSA6IGlzIHRoaXMgYSB6aXAgZmlsZSA/IElmIGl0IGlzLCBzZWUgaHR0cHM6Ly9zdHVrLmdpdGh1Yi5pby9qc3ppcC9kb2N1bWVudGF0aW9uL2hvd3RvL3JlYWRfemlwLmh0bWxcIik6bmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcIik7dGhpcy5yZWFkZXIuc2V0SW5kZXgodCk7dmFyIGU9dDtpZih0aGlzLmNoZWNrU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlYWRCbG9ja0VuZE9mQ2VudHJhbCgpLHRoaXMuZGlza051bWJlcj09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9PT1uLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclJlY29yZHM9PT1uLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclNpemU9PT1uLk1BWF9WQUxVRV8zMkJJVFN8fHRoaXMuY2VudHJhbERpck9mZnNldD09PW4uTUFYX1ZBTFVFXzMyQklUUyl7aWYodGhpcy56aXA2ND0hMCwodD10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpKTwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSBsb2NhdG9yXCIpO2lmKHRoaXMucmVhZGVyLnNldEluZGV4KHQpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKSx0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcigpLCF0aGlzLmlzU2lnbmF0dXJlKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcixzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCkmJih0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcjwwKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcIik7dGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyKSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsKCl9dmFyIHI9dGhpcy5jZW50cmFsRGlyT2Zmc2V0K3RoaXMuY2VudHJhbERpclNpemU7dGhpcy56aXA2NCYmKHIrPTIwLHIrPTEyK3RoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplKTt2YXIgaT1lLXI7aWYoMDxpKXRoaXMuaXNTaWduYXR1cmUoZSxzLkNFTlRSQUxfRklMRV9IRUFERVIpfHwodGhpcy5yZWFkZXIuemVybz1pKTtlbHNlIGlmKGk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBtaXNzaW5nIFwiK01hdGguYWJzKGkpK1wiIGJ5dGVzLlwiKX0scHJlcGFyZVJlYWRlcjpmdW5jdGlvbih0KXt0aGlzLnJlYWRlcj1pKHQpfSxsb2FkOmZ1bmN0aW9uKHQpe3RoaXMucHJlcGFyZVJlYWRlcih0KSx0aGlzLnJlYWRFbmRPZkNlbnRyYWwoKSx0aGlzLnJlYWRDZW50cmFsRGlyKCksdGhpcy5yZWFkTG9jYWxGaWxlcygpfX0sZS5leHBvcnRzPWh9LHtcIi4vcmVhZGVyL3JlYWRlckZvclwiOjIyLFwiLi9zaWduYXR1cmVcIjoyMyxcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJ5XCI6MzR9XSwzNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3JlYWRlci9yZWFkZXJGb3JcIikscz10KFwiLi91dGlsc1wiKSxuPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYT10KFwiLi9jcmMzMlwiKSxvPXQoXCIuL3V0ZjhcIiksaD10KFwiLi9jb21wcmVzc2lvbnNcIiksdT10KFwiLi9zdXBwb3J0XCIpO2Z1bmN0aW9uIGwodCxlKXt0aGlzLm9wdGlvbnM9dCx0aGlzLmxvYWRPcHRpb25zPWV9bC5wcm90b3R5cGU9e2lzRW5jcnlwdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PSgxJnRoaXMuYml0RmxhZyl9LHVzZVVURjg6ZnVuY3Rpb24oKXtyZXR1cm4gMjA0OD09KDIwNDgmdGhpcy5iaXRGbGFnKX0scmVhZExvY2FsUGFydDpmdW5jdGlvbih0KXt2YXIgZSxyO2lmKHQuc2tpcCgyMiksdGhpcy5maWxlTmFtZUxlbmd0aD10LnJlYWRJbnQoMikscj10LnJlYWRJbnQoMiksdGhpcy5maWxlTmFtZT10LnJlYWREYXRhKHRoaXMuZmlsZU5hbWVMZW5ndGgpLHQuc2tpcChyKSwtMT09PXRoaXMuY29tcHJlc3NlZFNpemV8fC0xPT09dGhpcy51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgKGNvbXByZXNzZWRTaXplID09PSAtMSB8fCB1bmNvbXByZXNzZWRTaXplID09PSAtMSlcIik7aWYobnVsbD09PShlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZSkmJmhbZV0ubWFnaWM9PT10KXJldHVybiBoW2VdO3JldHVybiBudWxsfSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSkpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IGNvbXByZXNzaW9uIFwiK3MucHJldHR5KHRoaXMuY29tcHJlc3Npb25NZXRob2QpK1wiIHVua25vd24gKGlubmVyIGZpbGUgOiBcIitzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5maWxlTmFtZSkrXCIpXCIpO3RoaXMuZGVjb21wcmVzc2VkPW5ldyBuKHRoaXMuY29tcHJlc3NlZFNpemUsdGhpcy51bmNvbXByZXNzZWRTaXplLHRoaXMuY3JjMzIsZSx0LnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKX0scmVhZENlbnRyYWxQYXJ0OmZ1bmN0aW9uKHQpe3RoaXMudmVyc2lvbk1hZGVCeT10LnJlYWRJbnQoMiksdC5za2lwKDIpLHRoaXMuYml0RmxhZz10LnJlYWRJbnQoMiksdGhpcy5jb21wcmVzc2lvbk1ldGhvZD10LnJlYWRTdHJpbmcoMiksdGhpcy5kYXRlPXQucmVhZERhdGUoKSx0aGlzLmNyYzMyPXQucmVhZEludCg0KSx0aGlzLmNvbXByZXNzZWRTaXplPXQucmVhZEludCg0KSx0aGlzLnVuY29tcHJlc3NlZFNpemU9dC5yZWFkSW50KDQpO3ZhciBlPXQucmVhZEludCgyKTtpZih0aGlzLmV4dHJhRmllbGRzTGVuZ3RoPXQucmVhZEludCgyKSx0aGlzLmZpbGVDb21tZW50TGVuZ3RoPXQucmVhZEludCgyKSx0aGlzLmRpc2tOdW1iZXJTdGFydD10LnJlYWRJbnQoMiksdGhpcy5pbnRlcm5hbEZpbGVBdHRyaWJ1dGVzPXQucmVhZEludCgyKSx0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM9dC5yZWFkSW50KDQpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9dC5yZWFkSW50KDQpLHRoaXMuaXNFbmNyeXB0ZWQoKSl0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO3Quc2tpcChlKSx0aGlzLnJlYWRFeHRyYUZpZWxkcyh0KSx0aGlzLnBhcnNlWklQNjRFeHRyYUZpZWxkKHQpLHRoaXMuZmlsZUNvbW1lbnQ9dC5yZWFkRGF0YSh0aGlzLmZpbGVDb21tZW50TGVuZ3RoKX0scHJvY2Vzc0F0dHJpYnV0ZXM6ZnVuY3Rpb24oKXt0aGlzLnVuaXhQZXJtaXNzaW9ucz1udWxsLHRoaXMuZG9zUGVybWlzc2lvbnM9bnVsbDt2YXIgdD10aGlzLnZlcnNpb25NYWRlQnk+Pjg7dGhpcy5kaXI9ISEoMTYmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwwPT10JiYodGhpcy5kb3NQZXJtaXNzaW9ucz02MyZ0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMpLDM9PXQmJih0aGlzLnVuaXhQZXJtaXNzaW9ucz10aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM+PjE2JjY1NTM1KSx0aGlzLmRpcnx8XCIvXCIhPT10aGlzLmZpbGVOYW1lU3RyLnNsaWNlKC0xKXx8KHRoaXMuZGlyPSEwKX0scGFyc2VaSVA2NEV4dHJhRmllbGQ6ZnVuY3Rpb24odCl7aWYodGhpcy5leHRyYUZpZWxkc1sxXSl7dmFyIGU9aSh0aGlzLmV4dHJhRmllbGRzWzFdLnZhbHVlKTt0aGlzLnVuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLnVuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDgpKSx0aGlzLmNvbXByZXNzZWRTaXplPT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg4KSksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmRpc2tOdW1iZXJTdGFydD1lLnJlYWRJbnQoNCkpfX0scmVhZEV4dHJhRmllbGRzOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuPXQuaW5kZXgrdGhpcy5leHRyYUZpZWxkc0xlbmd0aDtmb3IodGhpcy5leHRyYUZpZWxkc3x8KHRoaXMuZXh0cmFGaWVsZHM9e30pO3QuaW5kZXgrNDxuOyllPXQucmVhZEludCgyKSxyPXQucmVhZEludCgyKSxpPXQucmVhZERhdGEociksdGhpcy5leHRyYUZpZWxkc1tlXT17aWQ6ZSxsZW5ndGg6cix2YWx1ZTppfTt0LnNldEluZGV4KG4pfSxoYW5kbGVVVEY4OmZ1bmN0aW9uKCl7dmFyIHQ9dS51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIjtpZih0aGlzLnVzZVVURjgoKSl0aGlzLmZpbGVOYW1lU3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVOYW1lKSx0aGlzLmZpbGVDb21tZW50U3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVDb21tZW50KTtlbHNle3ZhciBlPXRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCgpO2lmKG51bGwhPT1lKXRoaXMuZmlsZU5hbWVTdHI9ZTtlbHNle3ZhciByPXMudHJhbnNmb3JtVG8odCx0aGlzLmZpbGVOYW1lKTt0aGlzLmZpbGVOYW1lU3RyPXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9dmFyIGk9dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7aWYobnVsbCE9PWkpdGhpcy5maWxlQ29tbWVudFN0cj1pO2Vsc2V7dmFyIG49cy50cmFuc2Zvcm1Ubyh0LHRoaXMuZmlsZUNvbW1lbnQpO3RoaXMuZmlsZUNvbW1lbnRTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShuKX19fSxmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5leHRyYUZpZWxkc1syODc4OV07aWYodCl7dmFyIGU9aSh0LnZhbHVlKTtyZXR1cm4gMSE9PWUucmVhZEludCgxKT9udWxsOmEodGhpcy5maWxlTmFtZSkhPT1lLnJlYWRJbnQoNCk/bnVsbDpvLnV0ZjhkZWNvZGUoZS5yZWFkRGF0YSh0Lmxlbmd0aC01KSl9cmV0dXJuIG51bGx9LGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmV4dHJhRmllbGRzWzI1NDYxXTtpZih0KXt2YXIgZT1pKHQudmFsdWUpO3JldHVybiAxIT09ZS5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVDb21tZW50KSE9PWUucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZShlLnJlYWREYXRhKHQubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH19LGUuZXhwb3J0cz1sfSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9jb21wcmVzc2lvbnNcIjozLFwiLi9jcmMzMlwiOjQsXCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzJ9XSwzNTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlLHIpe3RoaXMubmFtZT10LHRoaXMuZGlyPXIuZGlyLHRoaXMuZGF0ZT1yLmRhdGUsdGhpcy5jb21tZW50PXIuY29tbWVudCx0aGlzLnVuaXhQZXJtaXNzaW9ucz1yLnVuaXhQZXJtaXNzaW9ucyx0aGlzLmRvc1Blcm1pc3Npb25zPXIuZG9zUGVybWlzc2lvbnMsdGhpcy5fZGF0YT1lLHRoaXMuX2RhdGFCaW5hcnk9ci5iaW5hcnksdGhpcy5vcHRpb25zPXtjb21wcmVzc2lvbjpyLmNvbXByZXNzaW9uLGNvbXByZXNzaW9uT3B0aW9uczpyLmNvbXByZXNzaW9uT3B0aW9uc319dmFyIHM9dChcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxuPXQoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLGE9dChcIi4vdXRmOFwiKSxvPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksaD10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtpLnByb3RvdHlwZT17aW50ZXJuYWxTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9bnVsbCxyPVwic3RyaW5nXCI7dHJ5e2lmKCF0KXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dmFyIGk9XCJzdHJpbmdcIj09PShyPXQudG9Mb3dlckNhc2UoKSl8fFwidGV4dFwiPT09cjtcImJpbmFyeXN0cmluZ1wiIT09ciYmXCJ0ZXh0XCIhPT1yfHwocj1cInN0cmluZ1wiKSxlPXRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTt2YXIgbj0hdGhpcy5fZGF0YUJpbmFyeTtuJiYhaSYmKGU9ZS5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIpKSwhbiYmaSYmKGU9ZS5waXBlKG5ldyBhLlV0ZjhEZWNvZGVXb3JrZXIpKX1jYXRjaCh0KXsoZT1uZXcgaChcImVycm9yXCIpKS5lcnJvcih0KX1yZXR1cm4gbmV3IHMoZSxyLFwiXCIpfSxhc3luYzpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKHQpLmFjY3VtdWxhdGUoZSl9LG5vZGVTdHJlYW06ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbSh0fHxcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0oZSl9LF9jb21wcmVzc1dvcmtlcjpmdW5jdGlvbih0LGUpe2lmKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvJiZ0aGlzLl9kYXRhLmNvbXByZXNzaW9uLm1hZ2ljPT09dC5tYWdpYylyZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7dmFyIHI9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3JldHVybiB0aGlzLl9kYXRhQmluYXJ5fHwocj1yLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLG8uY3JlYXRlV29ya2VyRnJvbShyLHQsZSl9LF9kZWNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvP3RoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpOnRoaXMuX2RhdGEgaW5zdGFuY2VvZiBoP3RoaXMuX2RhdGE6bmV3IG4odGhpcy5fZGF0YSl9fTtmb3IodmFyIHU9W1wiYXNUZXh0XCIsXCJhc0JpbmFyeVwiLFwiYXNOb2RlQnVmZmVyXCIsXCJhc1VpbnQ4QXJyYXlcIixcImFzQXJyYXlCdWZmZXJcIl0sbD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmPTA7Zjx1Lmxlbmd0aDtmKyspaS5wcm90b3R5cGVbdVtmXV09bDtlLmV4cG9ydHM9aX0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyNyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzF9XSwzNjpbZnVuY3Rpb24odCxsLGUpeyhmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgcixpLHQ9ZS5NdXRhdGlvbk9ic2VydmVyfHxlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7aWYodCl7dmFyIG49MCxzPW5ldyB0KHUpLGE9ZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtzLm9ic2VydmUoYSx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXthLmRhdGE9bj0rK24lMn19ZWxzZSBpZihlLnNldEltbWVkaWF0ZXx8dm9pZCAwPT09ZS5NZXNzYWdlQ2hhbm5lbClyPVwiZG9jdW1lbnRcImluIGUmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBlLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ZnVuY3Rpb24oKXt2YXIgdD1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7dC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt1KCksdC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfSxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0KX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHUsMCl9O2Vsc2V7dmFyIG89bmV3IGUuTWVzc2FnZUNoYW5uZWw7by5wb3J0MS5vbm1lc3NhZ2U9dSxyPWZ1bmN0aW9uKCl7by5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19dmFyIGg9W107ZnVuY3Rpb24gdSgpe3ZhciB0LGU7aT0hMDtmb3IodmFyIHI9aC5sZW5ndGg7cjspe2ZvcihlPWgsaD1bXSx0PS0xOysrdDxyOyllW3RdKCk7cj1oLmxlbmd0aH1pPSExfWwuZXhwb3J0cz1mdW5jdGlvbih0KXsxIT09aC5wdXNoKHQpfHxpfHxyKCl9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sMzc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10KFwiaW1tZWRpYXRlXCIpO2Z1bmN0aW9uIHUoKXt9dmFyIGw9e30scz1bXCJSRUpFQ1RFRFwiXSxhPVtcIkZVTEZJTExFRFwiXSxpPVtcIlBFTkRJTkdcIl07ZnVuY3Rpb24gbyh0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7dGhpcy5zdGF0ZT1pLHRoaXMucXVldWU9W10sdGhpcy5vdXRjb21lPXZvaWQgMCx0IT09dSYmYyh0aGlzLHQpfWZ1bmN0aW9uIGgodCxlLHIpe3RoaXMucHJvbWlzZT10LFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJih0aGlzLm9uRnVsZmlsbGVkPWUsdGhpcy5jYWxsRnVsZmlsbGVkPXRoaXMub3RoZXJDYWxsRnVsZmlsbGVkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYodGhpcy5vblJlamVjdGVkPXIsdGhpcy5jYWxsUmVqZWN0ZWQ9dGhpcy5vdGhlckNhbGxSZWplY3RlZCl9ZnVuY3Rpb24gZihlLHIsaSl7bihmdW5jdGlvbigpe3ZhciB0O3RyeXt0PXIoaSl9Y2F0Y2godCl7cmV0dXJuIGwucmVqZWN0KGUsdCl9dD09PWU/bC5yZWplY3QoZSxuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKSk6bC5yZXNvbHZlKGUsdCl9KX1mdW5jdGlvbiBkKHQpe3ZhciBlPXQmJnQudGhlbjtpZih0JiYoXCJvYmplY3RcIj09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBmdW5jdGlvbigpe2UuYXBwbHkodCxhcmd1bWVudHMpfX1mdW5jdGlvbiBjKGUsdCl7dmFyIHI9ITE7ZnVuY3Rpb24gaSh0KXtyfHwocj0hMCxsLnJlamVjdChlLHQpKX1mdW5jdGlvbiBuKHQpe3J8fChyPSEwLGwucmVzb2x2ZShlLHQpKX12YXIgcz1wKGZ1bmN0aW9uKCl7dChuLGkpfSk7XCJlcnJvclwiPT09cy5zdGF0dXMmJmkocy52YWx1ZSl9ZnVuY3Rpb24gcCh0LGUpe3ZhciByPXt9O3RyeXtyLnZhbHVlPXQoZSksci5zdGF0dXM9XCJzdWNjZXNzXCJ9Y2F0Y2godCl7ci5zdGF0dXM9XCJlcnJvclwiLHIudmFsdWU9dH1yZXR1cm4gcn0oZS5leHBvcnRzPW8pLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXM7dmFyIHI9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiByLnJlc29sdmUoZSgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHR9KX0sZnVuY3Rpb24odCl7cmV0dXJuIHIucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyB0fSl9KX0sby5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxvLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmdGhpcy5zdGF0ZT09PWF8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJnRoaXMuc3RhdGU9PT1zKXJldHVybiB0aGlzO3ZhciByPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO3RoaXMuc3RhdGUhPT1pP2Yocix0aGlzLnN0YXRlPT09YT90OmUsdGhpcy5vdXRjb21lKTp0aGlzLnF1ZXVlLnB1c2gobmV3IGgocix0LGUpKTtyZXR1cm4gcn0saC5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZD1mdW5jdGlvbih0KXtsLnJlc29sdmUodGhpcy5wcm9taXNlLHQpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQ9ZnVuY3Rpb24odCl7Zih0aGlzLnByb21pc2UsdGhpcy5vbkZ1bGZpbGxlZCx0KX0saC5wcm90b3R5cGUuY2FsbFJlamVjdGVkPWZ1bmN0aW9uKHQpe2wucmVqZWN0KHRoaXMucHJvbWlzZSx0KX0saC5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24odCl7Zih0aGlzLnByb21pc2UsdGhpcy5vblJlamVjdGVkLHQpfSxsLnJlc29sdmU9ZnVuY3Rpb24odCxlKXt2YXIgcj1wKGQsZSk7aWYoXCJlcnJvclwiPT09ci5zdGF0dXMpcmV0dXJuIGwucmVqZWN0KHQsci52YWx1ZSk7dmFyIGk9ci52YWx1ZTtpZihpKWModCxpKTtlbHNle3Quc3RhdGU9YSx0Lm91dGNvbWU9ZTtmb3IodmFyIG49LTEscz10LnF1ZXVlLmxlbmd0aDsrK248czspdC5xdWV1ZVtuXS5jYWxsRnVsZmlsbGVkKGUpfXJldHVybiB0fSxsLnJlamVjdD1mdW5jdGlvbih0LGUpe3Quc3RhdGU9cyx0Lm91dGNvbWU9ZTtmb3IodmFyIHI9LTEsaT10LnF1ZXVlLmxlbmd0aDsrK3I8aTspdC5xdWV1ZVtyXS5jYWxsUmVqZWN0ZWQoZSk7cmV0dXJuIHR9LG8ucmVzb2x2ZT1mdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgdGhpcylyZXR1cm4gdDtyZXR1cm4gbC5yZXNvbHZlKG5ldyB0aGlzKHUpLHQpfSxvLnJlamVjdD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgdGhpcyh1KTtyZXR1cm4gbC5yZWplY3QoZSx0KX0sby5hbGw9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcztpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgaT10Lmxlbmd0aCxuPSExO2lmKCFpKXJldHVybiB0aGlzLnJlc29sdmUoW10pO3ZhciBzPW5ldyBBcnJheShpKSxhPTAsZT0tMSxvPW5ldyB0aGlzKHUpO2Zvcig7KytlPGk7KWgodFtlXSxlKTtyZXR1cm4gbztmdW5jdGlvbiBoKHQsZSl7ci5yZXNvbHZlKHQpLnRoZW4oZnVuY3Rpb24odCl7c1tlXT10LCsrYSE9PWl8fG58fChuPSEwLGwucmVzb2x2ZShvLHMpKX0sZnVuY3Rpb24odCl7bnx8KG49ITAsbC5yZWplY3Qobyx0KSl9KX19LG8ucmFjZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciByPXQubGVuZ3RoLGk9ITE7aWYoIXIpcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIG49LTEscz1uZXcgdGhpcyh1KTtmb3IoOysrbjxyOylhPXRbbl0sZS5yZXNvbHZlKGEpLnRoZW4oZnVuY3Rpb24odCl7aXx8KGk9ITAsbC5yZXNvbHZlKHMsdCkpfSxmdW5jdGlvbih0KXtpfHwoaT0hMCxsLnJlamVjdChzLHQpKX0pO3ZhciBhO3JldHVybiBzfX0se2ltbWVkaWF0ZTozNn1dLDM4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9e307KDAsdChcIi4vbGliL3V0aWxzL2NvbW1vblwiKS5hc3NpZ24pKGksdChcIi4vbGliL2RlZmxhdGVcIiksdChcIi4vbGliL2luZmxhdGVcIiksdChcIi4vbGliL3psaWIvY29uc3RhbnRzXCIpKSxlLmV4cG9ydHM9aX0se1wiLi9saWIvZGVmbGF0ZVwiOjM5LFwiLi9saWIvaW5mbGF0ZVwiOjQwLFwiLi9saWIvdXRpbHMvY29tbW9uXCI6NDEsXCIuL2xpYi96bGliL2NvbnN0YW50c1wiOjQ0fV0sMzk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10KFwiLi96bGliL2RlZmxhdGVcIiksbz10KFwiLi91dGlscy9jb21tb25cIiksaD10KFwiLi91dGlscy9zdHJpbmdzXCIpLG49dChcIi4vemxpYi9tZXNzYWdlc1wiKSxzPXQoXCIuL3psaWIvenN0cmVhbVwiKSx1PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbD0wLGY9LTEsZD0wLGM9ODtmdW5jdGlvbiBwKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHApKXJldHVybiBuZXcgcCh0KTt0aGlzLm9wdGlvbnM9by5hc3NpZ24oe2xldmVsOmYsbWV0aG9kOmMsY2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MTUsbWVtTGV2ZWw6OCxzdHJhdGVneTpkLHRvOlwiXCJ9LHR8fHt9KTt2YXIgZT10aGlzLm9wdGlvbnM7ZS5yYXcmJjA8ZS53aW5kb3dCaXRzP2Uud2luZG93Qml0cz0tZS53aW5kb3dCaXRzOmUuZ3ppcCYmMDxlLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNiYmKGUud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgcyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9YS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLGUubGV2ZWwsZS5tZXRob2QsZS53aW5kb3dCaXRzLGUubWVtTGV2ZWwsZS5zdHJhdGVneSk7aWYociE9PWwpdGhyb3cgbmV3IEVycm9yKG5bcl0pO2lmKGUuaGVhZGVyJiZhLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLGUuaGVhZGVyKSxlLmRpY3Rpb25hcnkpe3ZhciBpO2lmKGk9XCJzdHJpbmdcIj09dHlwZW9mIGUuZGljdGlvbmFyeT9oLnN0cmluZzJidWYoZS5kaWN0aW9uYXJ5KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwoZS5kaWN0aW9uYXJ5KT9uZXcgVWludDhBcnJheShlLmRpY3Rpb25hcnkpOmUuZGljdGlvbmFyeSwocj1hLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxpKSkhPT1sKXRocm93IG5ldyBFcnJvcihuW3JdKTt0aGlzLl9kaWN0X3NldD0hMH19ZnVuY3Rpb24gaSh0LGUpe3ZhciByPW5ldyBwKGUpO2lmKHIucHVzaCh0LCEwKSxyLmVycil0aHJvdyByLm1zZ3x8bltyLmVycl07cmV0dXJuIHIucmVzdWx0fXAucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG49dGhpcy5zdHJtLHM9dGhpcy5vcHRpb25zLmNodW5rU2l6ZTtpZih0aGlzLmVuZGVkKXJldHVybiExO2k9ZT09PX5+ZT9lOiEwPT09ZT80OjAsXCJzdHJpbmdcIj09dHlwZW9mIHQ/bi5pbnB1dD1oLnN0cmluZzJidWYodCk6XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiPT09dS5jYWxsKHQpP24uaW5wdXQ9bmV3IFVpbnQ4QXJyYXkodCk6bi5pbnB1dD10LG4ubmV4dF9pbj0wLG4uYXZhaWxfaW49bi5pbnB1dC5sZW5ndGg7ZG97aWYoMD09PW4uYXZhaWxfb3V0JiYobi5vdXRwdXQ9bmV3IG8uQnVmOChzKSxuLm5leHRfb3V0PTAsbi5hdmFpbF9vdXQ9cyksMSE9PShyPWEuZGVmbGF0ZShuLGkpKSYmciE9PWwpcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTswIT09bi5hdmFpbF9vdXQmJigwIT09bi5hdmFpbF9pbnx8NCE9PWkmJjIhPT1pKXx8KFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5vbkRhdGEoaC5idWYyYmluc3RyaW5nKG8uc2hyaW5rQnVmKG4ub3V0cHV0LG4ubmV4dF9vdXQpKSk6dGhpcy5vbkRhdGEoby5zaHJpbmtCdWYobi5vdXRwdXQsbi5uZXh0X291dCkpKX13aGlsZSgoMDxuLmF2YWlsX2lufHwwPT09bi5hdmFpbF9vdXQpJiYxIT09cik7cmV0dXJuIDQ9PT1pPyhyPWEuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pLHRoaXMub25FbmQociksdGhpcy5lbmRlZD0hMCxyPT09bCk6MiE9PWl8fCh0aGlzLm9uRW5kKGwpLCEobi5hdmFpbF9vdXQ9MCkpfSxwLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24odCl7dGhpcy5jaHVua3MucHVzaCh0KX0scC5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24odCl7dD09PWwmJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9by5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9dCx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkRlZmxhdGU9cCxyLmRlZmxhdGU9aSxyLmRlZmxhdGVSYXc9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT1lfHx7fSkucmF3PSEwLGkodCxlKX0sci5nemlwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKGU9ZXx8e30pLmd6aXA9ITAsaSh0LGUpfX0se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2RlZmxhdGVcIjo0NixcIi4vemxpYi9tZXNzYWdlc1wiOjUxLFwiLi96bGliL3pzdHJlYW1cIjo1M31dLDQwOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGQ9dChcIi4vemxpYi9pbmZsYXRlXCIpLGM9dChcIi4vdXRpbHMvY29tbW9uXCIpLHA9dChcIi4vdXRpbHMvc3RyaW5nc1wiKSxtPXQoXCIuL3psaWIvY29uc3RhbnRzXCIpLGk9dChcIi4vemxpYi9tZXNzYWdlc1wiKSxuPXQoXCIuL3psaWIvenN0cmVhbVwiKSxzPXQoXCIuL3psaWIvZ3poZWFkZXJcIiksXz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGEodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKHQpO3RoaXMub3B0aW9ucz1jLmFzc2lnbih7Y2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MCx0bzpcIlwifSx0fHx7fSk7dmFyIGU9dGhpcy5vcHRpb25zO2UucmF3JiYwPD1lLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNiYmKGUud2luZG93Qml0cz0tZS53aW5kb3dCaXRzLDA9PT1lLndpbmRvd0JpdHMmJihlLndpbmRvd0JpdHM9LTE1KSksISgwPD1lLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNil8fHQmJnQud2luZG93Qml0c3x8KGUud2luZG93Qml0cys9MzIpLDE1PGUud2luZG93Qml0cyYmZS53aW5kb3dCaXRzPDQ4JiYwPT0oMTUmZS53aW5kb3dCaXRzKSYmKGUud2luZG93Qml0c3w9MTUpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgbix0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9ZC5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLGUud2luZG93Qml0cyk7aWYociE9PW0uWl9PSyl0aHJvdyBuZXcgRXJyb3IoaVtyXSk7dGhpcy5oZWFkZXI9bmV3IHMsZC5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSx0aGlzLmhlYWRlcil9ZnVuY3Rpb24gbyh0LGUpe3ZhciByPW5ldyBhKGUpO2lmKHIucHVzaCh0LCEwKSxyLmVycil0aHJvdyByLm1zZ3x8aVtyLmVycl07cmV0dXJuIHIucmVzdWx0fWEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saD10aGlzLnN0cm0sdT10aGlzLm9wdGlvbnMuY2h1bmtTaXplLGw9dGhpcy5vcHRpb25zLmRpY3Rpb25hcnksZj0hMTtpZih0aGlzLmVuZGVkKXJldHVybiExO2k9ZT09PX5+ZT9lOiEwPT09ZT9tLlpfRklOSVNIOm0uWl9OT19GTFVTSCxcInN0cmluZ1wiPT10eXBlb2YgdD9oLmlucHV0PXAuYmluc3RyaW5nMmJ1Zih0KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwodCk/aC5pbnB1dD1uZXcgVWludDhBcnJheSh0KTpoLmlucHV0PXQsaC5uZXh0X2luPTAsaC5hdmFpbF9pbj1oLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aC5hdmFpbF9vdXQmJihoLm91dHB1dD1uZXcgYy5CdWY4KHUpLGgubmV4dF9vdXQ9MCxoLmF2YWlsX291dD11KSwocj1kLmluZmxhdGUoaCxtLlpfTk9fRkxVU0gpKT09PW0uWl9ORUVEX0RJQ1QmJmwmJihvPVwic3RyaW5nXCI9PXR5cGVvZiBsP3Auc3RyaW5nMmJ1ZihsKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwobCk/bmV3IFVpbnQ4QXJyYXkobCk6bCxyPWQuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG8pKSxyPT09bS5aX0JVRl9FUlJPUiYmITA9PT1mJiYocj1tLlpfT0ssZj0hMSksciE9PW0uWl9TVFJFQU1fRU5EJiZyIT09bS5aX09LKXJldHVybiB0aGlzLm9uRW5kKHIpLCEodGhpcy5lbmRlZD0hMCk7aC5uZXh0X291dCYmKDAhPT1oLmF2YWlsX291dCYmciE9PW0uWl9TVFJFQU1fRU5EJiYoMCE9PWguYXZhaWxfaW58fGkhPT1tLlpfRklOSVNIJiZpIT09bS5aX1NZTkNfRkxVU0gpfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz8obj1wLnV0Zjhib3JkZXIoaC5vdXRwdXQsaC5uZXh0X291dCkscz1oLm5leHRfb3V0LW4sYT1wLmJ1ZjJzdHJpbmcoaC5vdXRwdXQsbiksaC5uZXh0X291dD1zLGguYXZhaWxfb3V0PXUtcyxzJiZjLmFycmF5U2V0KGgub3V0cHV0LGgub3V0cHV0LG4scywwKSx0aGlzLm9uRGF0YShhKSk6dGhpcy5vbkRhdGEoYy5zaHJpbmtCdWYoaC5vdXRwdXQsaC5uZXh0X291dCkpKSksMD09PWguYXZhaWxfaW4mJjA9PT1oLmF2YWlsX291dCYmKGY9ITApfXdoaWxlKCgwPGguYXZhaWxfaW58fDA9PT1oLmF2YWlsX291dCkmJnIhPT1tLlpfU1RSRUFNX0VORCk7cmV0dXJuIHI9PT1tLlpfU1RSRUFNX0VORCYmKGk9bS5aX0ZJTklTSCksaT09PW0uWl9GSU5JU0g/KHI9ZC5pbmZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1tLlpfT0spOmkhPT1tLlpfU1lOQ19GTFVTSHx8KHRoaXMub25FbmQobS5aX09LKSwhKGguYXZhaWxfb3V0PTApKX0sYS5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2h1bmtzLnB1c2godCl9LGEucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKHQpe3Q9PT1tLlpfT0smJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9Yy5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9dCx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkluZmxhdGU9YSxyLmluZmxhdGU9byxyLmluZmxhdGVSYXc9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT1lfHx7fSkucmF3PSEwLG8odCxlKX0sci51bmd6aXA9b30se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2NvbnN0YW50c1wiOjQ0LFwiLi96bGliL2d6aGVhZGVyXCI6NDcsXCIuL3psaWIvaW5mbGF0ZVwiOjQ5LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgSW50MzJBcnJheTtyLmFzc2lnbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2UubGVuZ3RoOyl7dmFyIHI9ZS5zaGlmdCgpO2lmKHIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IocitcIm11c3QgYmUgbm9uLW9iamVjdFwiKTtmb3IodmFyIGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiYodFtpXT1yW2ldKX19cmV0dXJuIHR9LHIuc2hyaW5rQnVmPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQubGVuZ3RoPT09ZT90OnQuc3ViYXJyYXk/dC5zdWJhcnJheSgwLGUpOih0Lmxlbmd0aD1lLHQpfTt2YXIgbj17YXJyYXlTZXQ6ZnVuY3Rpb24odCxlLHIsaSxuKXtpZihlLnN1YmFycmF5JiZ0LnN1YmFycmF5KXQuc2V0KGUuc3ViYXJyYXkocixyK2kpLG4pO2Vsc2UgZm9yKHZhciBzPTA7czxpO3MrKyl0W24rc109ZVtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYTtmb3IoZT1pPTAscj10Lmxlbmd0aDtlPHI7ZSsrKWkrPXRbZV0ubGVuZ3RoO2ZvcihhPW5ldyBVaW50OEFycmF5KGkpLGU9bj0wLHI9dC5sZW5ndGg7ZTxyO2UrKylzPXRbZV0sYS5zZXQocyxuKSxuKz1zLmxlbmd0aDtyZXR1cm4gYX19LHM9e2FycmF5U2V0OmZ1bmN0aW9uKHQsZSxyLGksbil7Zm9yKHZhciBzPTA7czxpO3MrKyl0W24rc109ZVtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKHQpe3JldHVybltdLmNvbmNhdC5hcHBseShbXSx0KX19O3Iuc2V0VHlwZWQ9ZnVuY3Rpb24odCl7dD8oci5CdWY4PVVpbnQ4QXJyYXksci5CdWYxNj1VaW50MTZBcnJheSxyLkJ1ZjMyPUludDMyQXJyYXksci5hc3NpZ24ocixuKSk6KHIuQnVmOD1BcnJheSxyLkJ1ZjE2PUFycmF5LHIuQnVmMzI9QXJyYXksci5hc3NpZ24ocixzKSl9LHIuc2V0VHlwZWQoaSl9LHt9XSw0MjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBoPXQoXCIuL2NvbW1vblwiKSxuPSEwLHM9ITA7dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxbMF0pfWNhdGNoKHQpe249ITF9dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSl9Y2F0Y2godCl7cz0hMX1mb3IodmFyIHU9bmV3IGguQnVmOCgyNTYpLGk9MDtpPDI1NjtpKyspdVtpXT0yNTI8PWk/NjoyNDg8PWk/NToyNDA8PWk/NDoyMjQ8PWk/MzoxOTI8PWk/MjoxO2Z1bmN0aW9uIGwodCxlKXtpZihlPDY1NTM3JiYodC5zdWJhcnJheSYmc3x8IXQuc3ViYXJyYXkmJm4pKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsaC5zaHJpbmtCdWYodCxlKSk7Zm9yKHZhciByPVwiXCIsaT0wO2k8ZTtpKyspcis9U3RyaW5nLmZyb21DaGFyQ29kZSh0W2ldKTtyZXR1cm4gcn11WzI1NF09dVsyNTRdPTEsci5zdHJpbmcyYnVmPWZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYT10Lmxlbmd0aCxvPTA7Zm9yKG49MDtuPGE7bisrKTU1Mjk2PT0oNjQ1MTImKHI9dC5jaGFyQ29kZUF0KG4pKSkmJm4rMTxhJiY1NjMyMD09KDY0NTEyJihpPXQuY2hhckNvZGVBdChuKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKGktNTYzMjApLG4rKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IoZT1uZXcgaC5CdWY4KG8pLG49cz0wO3M8bztuKyspNTUyOTY9PSg2NDUxMiYocj10LmNoYXJDb2RlQXQobikpKSYmbisxPGEmJjU2MzIwPT0oNjQ1MTImKGk9dC5jaGFyQ29kZUF0KG4rMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsoaS01NjMyMCksbisrKSxyPDEyOD9lW3MrK109cjoocjwyMDQ4P2VbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/ZVtzKytdPTIyNHxyPj4+MTI6KGVbcysrXT0yNDB8cj4+PjE4LGVbcysrXT0xMjh8cj4+PjEyJjYzKSxlW3MrK109MTI4fHI+Pj42JjYzKSxlW3MrK109MTI4fDYzJnIpO3JldHVybiBlfSxyLmJ1ZjJiaW5zdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIGwodCx0Lmxlbmd0aCl9LHIuYmluc3RyaW5nMmJ1Zj1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IGguQnVmOCh0Lmxlbmd0aCkscj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyllW3JdPXQuY2hhckNvZGVBdChyKTtyZXR1cm4gZX0sci5idWYyc3RyaW5nPWZ1bmN0aW9uKHQsZSl7dmFyIHIsaSxuLHMsYT1lfHx0Lmxlbmd0aCxvPW5ldyBBcnJheSgyKmEpO2ZvcihyPWk9MDtyPGE7KWlmKChuPXRbcisrXSk8MTI4KW9baSsrXT1uO2Vsc2UgaWYoNDwocz11W25dKSlvW2krK109NjU1MzMscis9cy0xO2Vsc2V7Zm9yKG4mPTI9PT1zPzMxOjM9PT1zPzE1Ojc7MTxzJiZyPGE7KW49bjw8Nnw2MyZ0W3IrK10scy0tOzE8cz9vW2krK109NjU1MzM6bjw2NTUzNj9vW2krK109bjoobi09NjU1MzYsb1tpKytdPTU1Mjk2fG4+PjEwJjEwMjMsb1tpKytdPTU2MzIwfDEwMjMmbil9cmV0dXJuIGwobyxpKX0sci51dGY4Ym9yZGVyPWZ1bmN0aW9uKHQsZSl7dmFyIHI7Zm9yKChlPWV8fHQubGVuZ3RoKT50Lmxlbmd0aCYmKGU9dC5sZW5ndGgpLHI9ZS0xOzA8PXImJjEyOD09KDE5MiZ0W3JdKTspci0tO3JldHVybiByPDA/ZTowPT09cj9lOnIrdVt0W3JdXT5lP3I6ZX19LHtcIi4vY29tbW9uXCI6NDF9XSw0MzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUscixpKXtmb3IodmFyIG49NjU1MzUmdHwwLHM9dD4+PjE2JjY1NTM1fDAsYT0wOzAhPT1yOyl7Zm9yKHItPWE9MmUzPHI/MmUzOnI7cz1zKyhuPW4rZVtpKytdfDApfDAsLS1hOyk7biU9NjU1MjEscyU9NjU1MjF9cmV0dXJuIG58czw8MTZ8MH19LHt9XSw0NDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17Wl9OT19GTFVTSDowLFpfUEFSVElBTF9GTFVTSDoxLFpfU1lOQ19GTFVTSDoyLFpfRlVMTF9GTFVTSDozLFpfRklOSVNIOjQsWl9CTE9DSzo1LFpfVFJFRVM6NixaX09LOjAsWl9TVFJFQU1fRU5EOjEsWl9ORUVEX0RJQ1Q6MixaX0VSUk5POi0xLFpfU1RSRUFNX0VSUk9SOi0yLFpfREFUQV9FUlJPUjotMyxaX0JVRl9FUlJPUjotNSxaX05PX0NPTVBSRVNTSU9OOjAsWl9CRVNUX1NQRUVEOjEsWl9CRVNUX0NPTVBSRVNTSU9OOjksWl9ERUZBVUxUX0NPTVBSRVNTSU9OOi0xLFpfRklMVEVSRUQ6MSxaX0hVRkZNQU5fT05MWToyLFpfUkxFOjMsWl9GSVhFRDo0LFpfREVGQVVMVF9TVFJBVEVHWTowLFpfQklOQVJZOjAsWl9URVhUOjEsWl9VTktOT1dOOjIsWl9ERUZMQVRFRDo4fX0se31dLDQ1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT1bXSxyPTA7cjwyNTY7cisrKXt0PXI7Zm9yKHZhciBpPTA7aTw4O2krKyl0PTEmdD8zOTg4MjkyMzg0XnQ+Pj4xOnQ+Pj4xO2Vbcl09dH1yZXR1cm4gZX0oKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsaSl7dmFyIG49byxzPWkrcjt0Xj0tMTtmb3IodmFyIGE9aTthPHM7YSsrKXQ9dD4+PjheblsyNTUmKHReZVthXSldO3JldHVybi0xXnR9fSx7fV0sNDY6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaCxkPXQoXCIuLi91dGlscy9jb21tb25cIiksdT10KFwiLi90cmVlc1wiKSxjPXQoXCIuL2FkbGVyMzJcIikscD10KFwiLi9jcmMzMlwiKSxpPXQoXCIuL21lc3NhZ2VzXCIpLGw9MCxmPTQsbT0wLF89LTIsZz0tMSxiPTQsbj0yLHY9OCx5PTkscz0yODYsYT0zMCxvPTE5LHc9MipzKzEsaz0xNSx4PTMsUz0yNTgsej1TK3grMSxDPTQyLEU9MTEzLEE9MSxJPTIsTz0zLEI9NDtmdW5jdGlvbiBSKHQsZSl7cmV0dXJuIHQubXNnPWlbZV0sZX1mdW5jdGlvbiBUKHQpe3JldHVybih0PDwxKS0oNDx0Pzk6MCl9ZnVuY3Rpb24gRCh0KXtmb3IodmFyIGU9dC5sZW5ndGg7MDw9LS1lOyl0W2VdPTB9ZnVuY3Rpb24gRih0KXt2YXIgZT10LnN0YXRlLHI9ZS5wZW5kaW5nO3I+dC5hdmFpbF9vdXQmJihyPXQuYXZhaWxfb3V0KSwwIT09ciYmKGQuYXJyYXlTZXQodC5vdXRwdXQsZS5wZW5kaW5nX2J1ZixlLnBlbmRpbmdfb3V0LHIsdC5uZXh0X291dCksdC5uZXh0X291dCs9cixlLnBlbmRpbmdfb3V0Kz1yLHQudG90YWxfb3V0Kz1yLHQuYXZhaWxfb3V0LT1yLGUucGVuZGluZy09ciwwPT09ZS5wZW5kaW5nJiYoZS5wZW5kaW5nX291dD0wKSl9ZnVuY3Rpb24gTih0LGUpe3UuX3RyX2ZsdXNoX2Jsb2NrKHQsMDw9dC5ibG9ja19zdGFydD90LmJsb2NrX3N0YXJ0Oi0xLHQuc3Ryc3RhcnQtdC5ibG9ja19zdGFydCxlKSx0LmJsb2NrX3N0YXJ0PXQuc3Ryc3RhcnQsRih0LnN0cm0pfWZ1bmN0aW9uIFUodCxlKXt0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT1lfWZ1bmN0aW9uIFAodCxlKXt0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT1lPj4+OCYyNTUsdC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109MjU1JmV9ZnVuY3Rpb24gTCh0LGUpe3ZhciByLGksbj10Lm1heF9jaGFpbl9sZW5ndGgscz10LnN0cnN0YXJ0LGE9dC5wcmV2X2xlbmd0aCxvPXQubmljZV9tYXRjaCxoPXQuc3Ryc3RhcnQ+dC53X3NpemUtej90LnN0cnN0YXJ0LSh0Lndfc2l6ZS16KTowLHU9dC53aW5kb3csbD10LndfbWFzayxmPXQucHJldixkPXQuc3Ryc3RhcnQrUyxjPXVbcythLTFdLHA9dVtzK2FdO3QucHJldl9sZW5ndGg+PXQuZ29vZF9tYXRjaCYmKG4+Pj0yKSxvPnQubG9va2FoZWFkJiYobz10Lmxvb2thaGVhZCk7ZG97aWYodVsocj1lKSthXT09PXAmJnVbcithLTFdPT09YyYmdVtyXT09PXVbc10mJnVbKytyXT09PXVbcysxXSl7cys9MixyKys7ZG97fXdoaWxlKHVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZzPGQpO2lmKGk9Uy0oZC1zKSxzPWQtUyxhPGkpe2lmKHQubWF0Y2hfc3RhcnQ9ZSxvPD0oYT1pKSlicmVhaztjPXVbcythLTFdLHA9dVtzK2FdfX19d2hpbGUoKGU9ZltlJmxdKT5oJiYwIT0tLW4pO3JldHVybiBhPD10Lmxvb2thaGVhZD9hOnQubG9va2FoZWFkfWZ1bmN0aW9uIGoodCl7dmFyIGUscixpLG4scyxhLG8saCx1LGwsZj10Lndfc2l6ZTtkb3tpZihuPXQud2luZG93X3NpemUtdC5sb29rYWhlYWQtdC5zdHJzdGFydCx0LnN0cnN0YXJ0Pj1mKyhmLXopKXtmb3IoZC5hcnJheVNldCh0LndpbmRvdyx0LndpbmRvdyxmLGYsMCksdC5tYXRjaF9zdGFydC09Zix0LnN0cnN0YXJ0LT1mLHQuYmxvY2tfc3RhcnQtPWYsZT1yPXQuaGFzaF9zaXplO2k9dC5oZWFkWy0tZV0sdC5oZWFkW2VdPWY8PWk/aS1mOjAsLS1yOyk7Zm9yKGU9cj1mO2k9dC5wcmV2Wy0tZV0sdC5wcmV2W2VdPWY8PWk/aS1mOjAsLS1yOyk7bis9Zn1pZigwPT09dC5zdHJtLmF2YWlsX2luKWJyZWFrO2lmKGE9dC5zdHJtLG89dC53aW5kb3csaD10LnN0cnN0YXJ0K3QubG9va2FoZWFkLHU9bixsPXZvaWQgMCxsPWEuYXZhaWxfaW4sdTxsJiYobD11KSxyPTA9PT1sPzA6KGEuYXZhaWxfaW4tPWwsZC5hcnJheVNldChvLGEuaW5wdXQsYS5uZXh0X2luLGwsaCksMT09PWEuc3RhdGUud3JhcD9hLmFkbGVyPWMoYS5hZGxlcixvLGwsaCk6Mj09PWEuc3RhdGUud3JhcCYmKGEuYWRsZXI9cChhLmFkbGVyLG8sbCxoKSksYS5uZXh0X2luKz1sLGEudG90YWxfaW4rPWwsbCksdC5sb29rYWhlYWQrPXIsdC5sb29rYWhlYWQrdC5pbnNlcnQ+PXgpZm9yKHM9dC5zdHJzdGFydC10Lmluc2VydCx0Lmluc19oPXQud2luZG93W3NdLHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1tzKzFdKSZ0Lmhhc2hfbWFzazt0Lmluc2VydCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1tzK3gtMV0pJnQuaGFzaF9tYXNrLHQucHJldltzJnQud19tYXNrXT10LmhlYWRbdC5pbnNfaF0sdC5oZWFkW3QuaW5zX2hdPXMscysrLHQuaW5zZXJ0LS0sISh0Lmxvb2thaGVhZCt0Lmluc2VydDx4KSk7KTt9d2hpbGUodC5sb29rYWhlYWQ8eiYmMCE9PXQuc3RybS5hdmFpbF9pbil9ZnVuY3Rpb24gWih0LGUpe2Zvcih2YXIgcixpOzspe2lmKHQubG9va2FoZWFkPHope2lmKGoodCksdC5sb29rYWhlYWQ8eiYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfWlmKHI9MCx0Lmxvb2thaGVhZD49eCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1t0LnN0cnN0YXJ0K3gtMV0pJnQuaGFzaF9tYXNrLHI9dC5wcmV2W3Quc3Ryc3RhcnQmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09dC5zdHJzdGFydCksMCE9PXImJnQuc3Ryc3RhcnQtcjw9dC53X3NpemUteiYmKHQubWF0Y2hfbGVuZ3RoPUwodCxyKSksdC5tYXRjaF9sZW5ndGg+PXgpaWYoaT11Ll90cl90YWxseSh0LHQuc3Ryc3RhcnQtdC5tYXRjaF9zdGFydCx0Lm1hdGNoX2xlbmd0aC14KSx0Lmxvb2thaGVhZC09dC5tYXRjaF9sZW5ndGgsdC5tYXRjaF9sZW5ndGg8PXQubWF4X2xhenlfbWF0Y2gmJnQubG9va2FoZWFkPj14KXtmb3IodC5tYXRjaF9sZW5ndGgtLTt0LnN0cnN0YXJ0KyssdC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQreC0xXSkmdC5oYXNoX21hc2sscj10LnByZXZbdC5zdHJzdGFydCZ0LndfbWFza109dC5oZWFkW3QuaW5zX2hdLHQuaGVhZFt0Lmluc19oXT10LnN0cnN0YXJ0LDAhPS0tdC5tYXRjaF9sZW5ndGg7KTt0LnN0cnN0YXJ0Kyt9ZWxzZSB0LnN0cnN0YXJ0Kz10Lm1hdGNoX2xlbmd0aCx0Lm1hdGNoX2xlbmd0aD0wLHQuaW5zX2g9dC53aW5kb3dbdC5zdHJzdGFydF0sdC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQrMV0pJnQuaGFzaF9tYXNrO2Vsc2UgaT11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydF0pLHQubG9va2FoZWFkLS0sdC5zdHJzdGFydCsrO2lmKGkmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gdC5pbnNlcnQ9dC5zdHJzdGFydDx4LTE/dC5zdHJzdGFydDp4LTEsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIFcodCxlKXtmb3IodmFyIHIsaSxuOzspe2lmKHQubG9va2FoZWFkPHope2lmKGoodCksdC5sb29rYWhlYWQ8eiYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfWlmKHI9MCx0Lmxvb2thaGVhZD49eCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1t0LnN0cnN0YXJ0K3gtMV0pJnQuaGFzaF9tYXNrLHI9dC5wcmV2W3Quc3Ryc3RhcnQmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09dC5zdHJzdGFydCksdC5wcmV2X2xlbmd0aD10Lm1hdGNoX2xlbmd0aCx0LnByZXZfbWF0Y2g9dC5tYXRjaF9zdGFydCx0Lm1hdGNoX2xlbmd0aD14LTEsMCE9PXImJnQucHJldl9sZW5ndGg8dC5tYXhfbGF6eV9tYXRjaCYmdC5zdHJzdGFydC1yPD10Lndfc2l6ZS16JiYodC5tYXRjaF9sZW5ndGg9TCh0LHIpLHQubWF0Y2hfbGVuZ3RoPD01JiYoMT09PXQuc3RyYXRlZ3l8fHQubWF0Y2hfbGVuZ3RoPT09eCYmNDA5Njx0LnN0cnN0YXJ0LXQubWF0Y2hfc3RhcnQpJiYodC5tYXRjaF9sZW5ndGg9eC0xKSksdC5wcmV2X2xlbmd0aD49eCYmdC5tYXRjaF9sZW5ndGg8PXQucHJldl9sZW5ndGgpe2ZvcihuPXQuc3Ryc3RhcnQrdC5sb29rYWhlYWQteCxpPXUuX3RyX3RhbGx5KHQsdC5zdHJzdGFydC0xLXQucHJldl9tYXRjaCx0LnByZXZfbGVuZ3RoLXgpLHQubG9va2FoZWFkLT10LnByZXZfbGVuZ3RoLTEsdC5wcmV2X2xlbmd0aC09MjsrK3Quc3Ryc3RhcnQ8PW4mJih0Lmluc19oPSh0Lmluc19oPDx0Lmhhc2hfc2hpZnRedC53aW5kb3dbdC5zdHJzdGFydCt4LTFdKSZ0Lmhhc2hfbWFzayxyPXQucHJldlt0LnN0cnN0YXJ0JnQud19tYXNrXT10LmhlYWRbdC5pbnNfaF0sdC5oZWFkW3QuaW5zX2hdPXQuc3Ryc3RhcnQpLDAhPS0tdC5wcmV2X2xlbmd0aDspO2lmKHQubWF0Y2hfYXZhaWxhYmxlPTAsdC5tYXRjaF9sZW5ndGg9eC0xLHQuc3Ryc3RhcnQrKyxpJiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9ZWxzZSBpZih0Lm1hdGNoX2F2YWlsYWJsZSl7aWYoKGk9dS5fdHJfdGFsbHkodCwwLHQud2luZG93W3Quc3Ryc3RhcnQtMV0pKSYmTih0LCExKSx0LnN0cnN0YXJ0KyssdC5sb29rYWhlYWQtLSwwPT09dC5zdHJtLmF2YWlsX291dClyZXR1cm4gQX1lbHNlIHQubWF0Y2hfYXZhaWxhYmxlPTEsdC5zdHJzdGFydCsrLHQubG9va2FoZWFkLS19cmV0dXJuIHQubWF0Y2hfYXZhaWxhYmxlJiYoaT11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydC0xXSksdC5tYXRjaF9hdmFpbGFibGU9MCksdC5pbnNlcnQ9dC5zdHJzdGFydDx4LTE/dC5zdHJzdGFydDp4LTEsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIE0odCxlLHIsaSxuKXt0aGlzLmdvb2RfbGVuZ3RoPXQsdGhpcy5tYXhfbGF6eT1lLHRoaXMubmljZV9sZW5ndGg9cix0aGlzLm1heF9jaGFpbj1pLHRoaXMuZnVuYz1ufWZ1bmN0aW9uIEgoKXt0aGlzLnN0cm09bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMucGVuZGluZ19idWY9bnVsbCx0aGlzLnBlbmRpbmdfYnVmX3NpemU9MCx0aGlzLnBlbmRpbmdfb3V0PTAsdGhpcy5wZW5kaW5nPTAsdGhpcy53cmFwPTAsdGhpcy5nemhlYWQ9bnVsbCx0aGlzLmd6aW5kZXg9MCx0aGlzLm1ldGhvZD12LHRoaXMubGFzdF9mbHVzaD0tMSx0aGlzLndfc2l6ZT0wLHRoaXMud19iaXRzPTAsdGhpcy53X21hc2s9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMud2luZG93X3NpemU9MCx0aGlzLnByZXY9bnVsbCx0aGlzLmhlYWQ9bnVsbCx0aGlzLmluc19oPTAsdGhpcy5oYXNoX3NpemU9MCx0aGlzLmhhc2hfYml0cz0wLHRoaXMuaGFzaF9tYXNrPTAsdGhpcy5oYXNoX3NoaWZ0PTAsdGhpcy5ibG9ja19zdGFydD0wLHRoaXMubWF0Y2hfbGVuZ3RoPTAsdGhpcy5wcmV2X21hdGNoPTAsdGhpcy5tYXRjaF9hdmFpbGFibGU9MCx0aGlzLnN0cnN0YXJ0PTAsdGhpcy5tYXRjaF9zdGFydD0wLHRoaXMubG9va2FoZWFkPTAsdGhpcy5wcmV2X2xlbmd0aD0wLHRoaXMubWF4X2NoYWluX2xlbmd0aD0wLHRoaXMubWF4X2xhenlfbWF0Y2g9MCx0aGlzLmxldmVsPTAsdGhpcy5zdHJhdGVneT0wLHRoaXMuZ29vZF9tYXRjaD0wLHRoaXMubmljZV9tYXRjaD0wLHRoaXMuZHluX2x0cmVlPW5ldyBkLkJ1ZjE2KDIqdyksdGhpcy5keW5fZHRyZWU9bmV3IGQuQnVmMTYoMiooMiphKzEpKSx0aGlzLmJsX3RyZWU9bmV3IGQuQnVmMTYoMiooMipvKzEpKSxEKHRoaXMuZHluX2x0cmVlKSxEKHRoaXMuZHluX2R0cmVlKSxEKHRoaXMuYmxfdHJlZSksdGhpcy5sX2Rlc2M9bnVsbCx0aGlzLmRfZGVzYz1udWxsLHRoaXMuYmxfZGVzYz1udWxsLHRoaXMuYmxfY291bnQ9bmV3IGQuQnVmMTYoaysxKSx0aGlzLmhlYXA9bmV3IGQuQnVmMTYoMipzKzEpLEQodGhpcy5oZWFwKSx0aGlzLmhlYXBfbGVuPTAsdGhpcy5oZWFwX21heD0wLHRoaXMuZGVwdGg9bmV3IGQuQnVmMTYoMipzKzEpLEQodGhpcy5kZXB0aCksdGhpcy5sX2J1Zj0wLHRoaXMubGl0X2J1ZnNpemU9MCx0aGlzLmxhc3RfbGl0PTAsdGhpcy5kX2J1Zj0wLHRoaXMub3B0X2xlbj0wLHRoaXMuc3RhdGljX2xlbj0wLHRoaXMubWF0Y2hlcz0wLHRoaXMuaW5zZXJ0PTAsdGhpcy5iaV9idWY9MCx0aGlzLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gRyh0KXt2YXIgZTtyZXR1cm4gdCYmdC5zdGF0ZT8odC50b3RhbF9pbj10LnRvdGFsX291dD0wLHQuZGF0YV90eXBlPW4sKGU9dC5zdGF0ZSkucGVuZGluZz0wLGUucGVuZGluZ19vdXQ9MCxlLndyYXA8MCYmKGUud3JhcD0tZS53cmFwKSxlLnN0YXR1cz1lLndyYXA/QzpFLHQuYWRsZXI9Mj09PWUud3JhcD8wOjEsZS5sYXN0X2ZsdXNoPWwsdS5fdHJfaW5pdChlKSxtKTpSKHQsXyl9ZnVuY3Rpb24gSyh0KXt2YXIgZT1HKHQpO3JldHVybiBlPT09bSYmZnVuY3Rpb24odCl7dC53aW5kb3dfc2l6ZT0yKnQud19zaXplLEQodC5oZWFkKSx0Lm1heF9sYXp5X21hdGNoPWhbdC5sZXZlbF0ubWF4X2xhenksdC5nb29kX21hdGNoPWhbdC5sZXZlbF0uZ29vZF9sZW5ndGgsdC5uaWNlX21hdGNoPWhbdC5sZXZlbF0ubmljZV9sZW5ndGgsdC5tYXhfY2hhaW5fbGVuZ3RoPWhbdC5sZXZlbF0ubWF4X2NoYWluLHQuc3Ryc3RhcnQ9MCx0LmJsb2NrX3N0YXJ0PTAsdC5sb29rYWhlYWQ9MCx0Lmluc2VydD0wLHQubWF0Y2hfbGVuZ3RoPXQucHJldl9sZW5ndGg9eC0xLHQubWF0Y2hfYXZhaWxhYmxlPTAsdC5pbnNfaD0wfSh0LnN0YXRlKSxlfWZ1bmN0aW9uIFkodCxlLHIsaSxuLHMpe2lmKCF0KXJldHVybiBfO3ZhciBhPTE7aWYoZT09PWcmJihlPTYpLGk8MD8oYT0wLGk9LWkpOjE1PGkmJihhPTIsaS09MTYpLG48MXx8eTxufHxyIT09dnx8aTw4fHwxNTxpfHxlPDB8fDk8ZXx8czwwfHxiPHMpcmV0dXJuIFIodCxfKTs4PT09aSYmKGk9OSk7dmFyIG89bmV3IEg7cmV0dXJuKHQuc3RhdGU9bykuc3RybT10LG8ud3JhcD1hLG8uZ3poZWFkPW51bGwsby53X2JpdHM9aSxvLndfc2l6ZT0xPDxvLndfYml0cyxvLndfbWFzaz1vLndfc2l6ZS0xLG8uaGFzaF9iaXRzPW4rNyxvLmhhc2hfc2l6ZT0xPDxvLmhhc2hfYml0cyxvLmhhc2hfbWFzaz1vLmhhc2hfc2l6ZS0xLG8uaGFzaF9zaGlmdD1+figoby5oYXNoX2JpdHMreC0xKS94KSxvLndpbmRvdz1uZXcgZC5CdWY4KDIqby53X3NpemUpLG8uaGVhZD1uZXcgZC5CdWYxNihvLmhhc2hfc2l6ZSksby5wcmV2PW5ldyBkLkJ1ZjE2KG8ud19zaXplKSxvLmxpdF9idWZzaXplPTE8PG4rNixvLnBlbmRpbmdfYnVmX3NpemU9NCpvLmxpdF9idWZzaXplLG8ucGVuZGluZ19idWY9bmV3IGQuQnVmOChvLnBlbmRpbmdfYnVmX3NpemUpLG8uZF9idWY9MSpvLmxpdF9idWZzaXplLG8ubF9idWY9MypvLmxpdF9idWZzaXplLG8ubGV2ZWw9ZSxvLnN0cmF0ZWd5PXMsby5tZXRob2Q9cixLKHQpfWg9W25ldyBNKDAsMCwwLDAsZnVuY3Rpb24odCxlKXt2YXIgcj02NTUzNTtmb3Iocj50LnBlbmRpbmdfYnVmX3NpemUtNSYmKHI9dC5wZW5kaW5nX2J1Zl9zaXplLTUpOzspe2lmKHQubG9va2FoZWFkPD0xKXtpZihqKHQpLDA9PT10Lmxvb2thaGVhZCYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfXQuc3Ryc3RhcnQrPXQubG9va2FoZWFkLHQubG9va2FoZWFkPTA7dmFyIGk9dC5ibG9ja19zdGFydCtyO2lmKCgwPT09dC5zdHJzdGFydHx8dC5zdHJzdGFydD49aSkmJih0Lmxvb2thaGVhZD10LnN0cnN0YXJ0LWksdC5zdHJzdGFydD1pLE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBO2lmKHQuc3Ryc3RhcnQtdC5ibG9ja19zdGFydD49dC53X3NpemUteiYmKE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiB0Lmluc2VydD0wLGU9PT1mPyhOKHQsITApLDA9PT10LnN0cm0uYXZhaWxfb3V0P086Qik6KHQuc3Ryc3RhcnQ+dC5ibG9ja19zdGFydCYmKE4odCwhMSksdC5zdHJtLmF2YWlsX291dCksQSl9KSxuZXcgTSg0LDQsOCw0LFopLG5ldyBNKDQsNSwxNiw4LFopLG5ldyBNKDQsNiwzMiwzMixaKSxuZXcgTSg0LDQsMTYsMTYsVyksbmV3IE0oOCwxNiwzMiwzMixXKSxuZXcgTSg4LDE2LDEyOCwxMjgsVyksbmV3IE0oOCwzMiwxMjgsMjU2LFcpLG5ldyBNKDMyLDEyOCwyNTgsMTAyNCxXKSxuZXcgTSgzMiwyNTgsMjU4LDQwOTYsVyldLHIuZGVmbGF0ZUluaXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gWSh0LGUsdiwxNSw4LDApfSxyLmRlZmxhdGVJbml0Mj1ZLHIuZGVmbGF0ZVJlc2V0PUssci5kZWZsYXRlUmVzZXRLZWVwPUcsci5kZWZsYXRlU2V0SGVhZGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQmJnQuc3RhdGU/MiE9PXQuc3RhdGUud3JhcD9fOih0LnN0YXRlLmd6aGVhZD1lLG0pOl99LHIuZGVmbGF0ZT1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzO2lmKCF0fHwhdC5zdGF0ZXx8NTxlfHxlPDApcmV0dXJuIHQ/Uih0LF8pOl87aWYoaT10LnN0YXRlLCF0Lm91dHB1dHx8IXQuaW5wdXQmJjAhPT10LmF2YWlsX2lufHw2NjY9PT1pLnN0YXR1cyYmZSE9PWYpcmV0dXJuIFIodCwwPT09dC5hdmFpbF9vdXQ/LTU6Xyk7aWYoaS5zdHJtPXQscj1pLmxhc3RfZmx1c2gsaS5sYXN0X2ZsdXNoPWUsaS5zdGF0dXM9PT1DKWlmKDI9PT1pLndyYXApdC5hZGxlcj0wLFUoaSwzMSksVShpLDEzOSksVShpLDgpLGkuZ3poZWFkPyhVKGksKGkuZ3poZWFkLnRleHQ/MTowKSsoaS5nemhlYWQuaGNyYz8yOjApKyhpLmd6aGVhZC5leHRyYT80OjApKyhpLmd6aGVhZC5uYW1lPzg6MCkrKGkuZ3poZWFkLmNvbW1lbnQ/MTY6MCkpLFUoaSwyNTUmaS5nemhlYWQudGltZSksVShpLGkuZ3poZWFkLnRpbWU+PjgmMjU1KSxVKGksaS5nemhlYWQudGltZT4+MTYmMjU1KSxVKGksaS5nemhlYWQudGltZT4+MjQmMjU1KSxVKGksOT09PWkubGV2ZWw/MjoyPD1pLnN0cmF0ZWd5fHxpLmxldmVsPDI/NDowKSxVKGksMjU1JmkuZ3poZWFkLm9zKSxpLmd6aGVhZC5leHRyYSYmaS5nemhlYWQuZXh0cmEubGVuZ3RoJiYoVShpLDI1NSZpLmd6aGVhZC5leHRyYS5sZW5ndGgpLFUoaSxpLmd6aGVhZC5leHRyYS5sZW5ndGg+PjgmMjU1KSksaS5nemhlYWQuaGNyYyYmKHQuYWRsZXI9cCh0LmFkbGVyLGkucGVuZGluZ19idWYsaS5wZW5kaW5nLDApKSxpLmd6aW5kZXg9MCxpLnN0YXR1cz02OSk6KFUoaSwwKSxVKGksMCksVShpLDApLFUoaSwwKSxVKGksMCksVShpLDk9PT1pLmxldmVsPzI6Mjw9aS5zdHJhdGVneXx8aS5sZXZlbDwyPzQ6MCksVShpLDMpLGkuc3RhdHVzPUUpO2Vsc2V7dmFyIGE9disoaS53X2JpdHMtODw8NCk8PDg7YXw9KDI8PWkuc3RyYXRlZ3l8fGkubGV2ZWw8Mj8wOmkubGV2ZWw8Nj8xOjY9PT1pLmxldmVsPzI6Myk8PDYsMCE9PWkuc3Ryc3RhcnQmJihhfD0zMiksYSs9MzEtYSUzMSxpLnN0YXR1cz1FLFAoaSxhKSwwIT09aS5zdHJzdGFydCYmKFAoaSx0LmFkbGVyPj4+MTYpLFAoaSw2NTUzNSZ0LmFkbGVyKSksdC5hZGxlcj0xfWlmKDY5PT09aS5zdGF0dXMpaWYoaS5nemhlYWQuZXh0cmEpe2ZvcihuPWkucGVuZGluZztpLmd6aW5kZXg8KDY1NTM1JmkuZ3poZWFkLmV4dHJhLmxlbmd0aCkmJihpLnBlbmRpbmchPT1pLnBlbmRpbmdfYnVmX3NpemV8fChpLmd6aGVhZC5oY3JjJiZpLnBlbmRpbmc+biYmKHQuYWRsZXI9cCh0LmFkbGVyLGkucGVuZGluZ19idWYsaS5wZW5kaW5nLW4sbikpLEYodCksbj1pLnBlbmRpbmcsaS5wZW5kaW5nIT09aS5wZW5kaW5nX2J1Zl9zaXplKSk7KVUoaSwyNTUmaS5nemhlYWQuZXh0cmFbaS5nemluZGV4XSksaS5nemluZGV4Kys7aS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSxpLmd6aW5kZXg9PT1pLmd6aGVhZC5leHRyYS5sZW5ndGgmJihpLmd6aW5kZXg9MCxpLnN0YXR1cz03Myl9ZWxzZSBpLnN0YXR1cz03MztpZig3Mz09PWkuc3RhdHVzKWlmKGkuZ3poZWFkLm5hbWUpe249aS5wZW5kaW5nO2Rve2lmKGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSYmKGkuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksRih0KSxuPWkucGVuZGluZyxpLnBlbmRpbmc9PT1pLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1pLmd6aW5kZXg8aS5nemhlYWQubmFtZS5sZW5ndGg/MjU1JmkuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChpLmd6aW5kZXgrKyk6MCxVKGkscyl9d2hpbGUoMCE9PXMpO2kuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksMD09PXMmJihpLmd6aW5kZXg9MCxpLnN0YXR1cz05MSl9ZWxzZSBpLnN0YXR1cz05MTtpZig5MT09PWkuc3RhdHVzKWlmKGkuZ3poZWFkLmNvbW1lbnQpe249aS5wZW5kaW5nO2Rve2lmKGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSYmKGkuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksRih0KSxuPWkucGVuZGluZyxpLnBlbmRpbmc9PT1pLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1pLmd6aW5kZXg8aS5nemhlYWQuY29tbWVudC5sZW5ndGg/MjU1JmkuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChpLmd6aW5kZXgrKyk6MCxVKGkscyl9d2hpbGUoMCE9PXMpO2kuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksMD09PXMmJihpLnN0YXR1cz0xMDMpfWVsc2UgaS5zdGF0dXM9MTAzO2lmKDEwMz09PWkuc3RhdHVzJiYoaS5nemhlYWQuaGNyYz8oaS5wZW5kaW5nKzI+aS5wZW5kaW5nX2J1Zl9zaXplJiZGKHQpLGkucGVuZGluZysyPD1pLnBlbmRpbmdfYnVmX3NpemUmJihVKGksMjU1JnQuYWRsZXIpLFUoaSx0LmFkbGVyPj44JjI1NSksdC5hZGxlcj0wLGkuc3RhdHVzPUUpKTppLnN0YXR1cz1FKSwwIT09aS5wZW5kaW5nKXtpZihGKHQpLDA9PT10LmF2YWlsX291dClyZXR1cm4gaS5sYXN0X2ZsdXNoPS0xLG19ZWxzZSBpZigwPT09dC5hdmFpbF9pbiYmVChlKTw9VChyKSYmZSE9PWYpcmV0dXJuIFIodCwtNSk7aWYoNjY2PT09aS5zdGF0dXMmJjAhPT10LmF2YWlsX2luKXJldHVybiBSKHQsLTUpO2lmKDAhPT10LmF2YWlsX2lufHwwIT09aS5sb29rYWhlYWR8fGUhPT1sJiY2NjYhPT1pLnN0YXR1cyl7dmFyIG89Mj09PWkuc3RyYXRlZ3k/ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI7Oyl7aWYoMD09PXQubG9va2FoZWFkJiYoaih0KSwwPT09dC5sb29rYWhlYWQpKXtpZihlPT09bClyZXR1cm4gQTticmVha31pZih0Lm1hdGNoX2xlbmd0aD0wLHI9dS5fdHJfdGFsbHkodCwwLHQud2luZG93W3Quc3Ryc3RhcnRdKSx0Lmxvb2thaGVhZC0tLHQuc3Ryc3RhcnQrKyxyJiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIHQuaW5zZXJ0PTAsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfShpLGUpOjM9PT1pLnN0cmF0ZWd5P2Z1bmN0aW9uKHQsZSl7Zm9yKHZhciByLGksbixzLGE9dC53aW5kb3c7Oyl7aWYodC5sb29rYWhlYWQ8PVMpe2lmKGoodCksdC5sb29rYWhlYWQ8PVMmJmU9PT1sKXJldHVybiBBO2lmKDA9PT10Lmxvb2thaGVhZClicmVha31pZih0Lm1hdGNoX2xlbmd0aD0wLHQubG9va2FoZWFkPj14JiYwPHQuc3Ryc3RhcnQmJihpPWFbbj10LnN0cnN0YXJ0LTFdKT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSl7cz10LnN0cnN0YXJ0K1M7ZG97fXdoaWxlKGk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJm48cyk7dC5tYXRjaF9sZW5ndGg9Uy0ocy1uKSx0Lm1hdGNoX2xlbmd0aD50Lmxvb2thaGVhZCYmKHQubWF0Y2hfbGVuZ3RoPXQubG9va2FoZWFkKX1pZih0Lm1hdGNoX2xlbmd0aD49eD8ocj11Ll90cl90YWxseSh0LDEsdC5tYXRjaF9sZW5ndGgteCksdC5sb29rYWhlYWQtPXQubWF0Y2hfbGVuZ3RoLHQuc3Ryc3RhcnQrPXQubWF0Y2hfbGVuZ3RoLHQubWF0Y2hfbGVuZ3RoPTApOihyPXUuX3RyX3RhbGx5KHQsMCx0LndpbmRvd1t0LnN0cnN0YXJ0XSksdC5sb29rYWhlYWQtLSx0LnN0cnN0YXJ0KyspLHImJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gdC5pbnNlcnQ9MCxlPT09Zj8oTih0LCEwKSwwPT09dC5zdHJtLmF2YWlsX291dD9POkIpOnQubGFzdF9saXQmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KT9BOkl9KGksZSk6aFtpLmxldmVsXS5mdW5jKGksZSk7aWYobyE9PU8mJm8hPT1CfHwoaS5zdGF0dXM9NjY2KSxvPT09QXx8bz09PU8pcmV0dXJuIDA9PT10LmF2YWlsX291dCYmKGkubGFzdF9mbHVzaD0tMSksbTtpZihvPT09SSYmKDE9PT1lP3UuX3RyX2FsaWduKGkpOjUhPT1lJiYodS5fdHJfc3RvcmVkX2Jsb2NrKGksMCwwLCExKSwzPT09ZSYmKEQoaS5oZWFkKSwwPT09aS5sb29rYWhlYWQmJihpLnN0cnN0YXJ0PTAsaS5ibG9ja19zdGFydD0wLGkuaW5zZXJ0PTApKSksRih0KSwwPT09dC5hdmFpbF9vdXQpKXJldHVybiBpLmxhc3RfZmx1c2g9LTEsbX1yZXR1cm4gZSE9PWY/bTppLndyYXA8PTA/MTooMj09PWkud3JhcD8oVShpLDI1NSZ0LmFkbGVyKSxVKGksdC5hZGxlcj4+OCYyNTUpLFUoaSx0LmFkbGVyPj4xNiYyNTUpLFUoaSx0LmFkbGVyPj4yNCYyNTUpLFUoaSwyNTUmdC50b3RhbF9pbiksVShpLHQudG90YWxfaW4+PjgmMjU1KSxVKGksdC50b3RhbF9pbj4+MTYmMjU1KSxVKGksdC50b3RhbF9pbj4+MjQmMjU1KSk6KFAoaSx0LmFkbGVyPj4+MTYpLFAoaSw2NTUzNSZ0LmFkbGVyKSksRih0KSwwPGkud3JhcCYmKGkud3JhcD0taS53cmFwKSwwIT09aS5wZW5kaW5nP206MSl9LHIuZGVmbGF0ZUVuZD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gdCYmdC5zdGF0ZT8oZT10LnN0YXRlLnN0YXR1cykhPT1DJiY2OSE9PWUmJjczIT09ZSYmOTEhPT1lJiYxMDMhPT1lJiZlIT09RSYmNjY2IT09ZT9SKHQsXyk6KHQuc3RhdGU9bnVsbCxlPT09RT9SKHQsLTMpOm0pOl99LHIuZGVmbGF0ZVNldERpY3Rpb25hcnk9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGw9ZS5sZW5ndGg7aWYoIXR8fCF0LnN0YXRlKXJldHVybiBfO2lmKDI9PT0ocz0ocj10LnN0YXRlKS53cmFwKXx8MT09PXMmJnIuc3RhdHVzIT09Q3x8ci5sb29rYWhlYWQpcmV0dXJuIF87Zm9yKDE9PT1zJiYodC5hZGxlcj1jKHQuYWRsZXIsZSxsLDApKSxyLndyYXA9MCxsPj1yLndfc2l6ZSYmKDA9PT1zJiYoRChyLmhlYWQpLHIuc3Ryc3RhcnQ9MCxyLmJsb2NrX3N0YXJ0PTAsci5pbnNlcnQ9MCksdT1uZXcgZC5CdWY4KHIud19zaXplKSxkLmFycmF5U2V0KHUsZSxsLXIud19zaXplLHIud19zaXplLDApLGU9dSxsPXIud19zaXplKSxhPXQuYXZhaWxfaW4sbz10Lm5leHRfaW4saD10LmlucHV0LHQuYXZhaWxfaW49bCx0Lm5leHRfaW49MCx0LmlucHV0PWUsaihyKTtyLmxvb2thaGVhZD49eDspe2ZvcihpPXIuc3Ryc3RhcnQsbj1yLmxvb2thaGVhZC0oeC0xKTtyLmluc19oPShyLmluc19oPDxyLmhhc2hfc2hpZnReci53aW5kb3dbaSt4LTFdKSZyLmhhc2hfbWFzayxyLnByZXZbaSZyLndfbWFza109ci5oZWFkW3IuaW5zX2hdLHIuaGVhZFtyLmluc19oXT1pLGkrKywtLW47KTtyLnN0cnN0YXJ0PWksci5sb29rYWhlYWQ9eC0xLGoocil9cmV0dXJuIHIuc3Ryc3RhcnQrPXIubG9va2FoZWFkLHIuYmxvY2tfc3RhcnQ9ci5zdHJzdGFydCxyLmluc2VydD1yLmxvb2thaGVhZCxyLmxvb2thaGVhZD0wLHIubWF0Y2hfbGVuZ3RoPXIucHJldl9sZW5ndGg9eC0xLHIubWF0Y2hfYXZhaWxhYmxlPTAsdC5uZXh0X2luPW8sdC5pbnB1dD1oLHQuYXZhaWxfaW49YSxyLndyYXA9cyxtfSxyLmRlZmxhdGVJbmZvPVwicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9tZXNzYWdlc1wiOjUxLFwiLi90cmVlc1wiOjUyfV0sNDc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLnRleHQ9MCx0aGlzLnRpbWU9MCx0aGlzLnhmbGFncz0wLHRoaXMub3M9MCx0aGlzLmV4dHJhPW51bGwsdGhpcy5leHRyYV9sZW49MCx0aGlzLm5hbWU9XCJcIix0aGlzLmNvbW1lbnQ9XCJcIix0aGlzLmhjcmM9MCx0aGlzLmRvbmU9ITF9fSx7fV0sNDg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGwsZixkLGMscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQztyPXQuc3RhdGUsaT10Lm5leHRfaW4sej10LmlucHV0LG49aSsodC5hdmFpbF9pbi01KSxzPXQubmV4dF9vdXQsQz10Lm91dHB1dCxhPXMtKGUtdC5hdmFpbF9vdXQpLG89cysodC5hdmFpbF9vdXQtMjU3KSxoPXIuZG1heCx1PXIud3NpemUsbD1yLndoYXZlLGY9ci53bmV4dCxkPXIud2luZG93LGM9ci5ob2xkLHA9ci5iaXRzLG09ci5sZW5jb2RlLF89ci5kaXN0Y29kZSxnPSgxPDxyLmxlbmJpdHMpLTEsYj0oMTw8ci5kaXN0Yml0cyktMTt0OmRve3A8MTUmJihjKz16W2krK108PHAscCs9OCxjKz16W2krK108PHAscCs9OCksdj1tW2MmZ107ZTpmb3IoOzspe2lmKGM+Pj49eT12Pj4+MjQscC09eSwwPT09KHk9dj4+PjE2JjI1NSkpQ1tzKytdPTY1NTM1JnY7ZWxzZXtpZighKDE2JnkpKXtpZigwPT0oNjQmeSkpe3Y9bVsoNjU1MzUmdikrKGMmKDE8PHkpLTEpXTtjb250aW51ZSBlfWlmKDMyJnkpe3IubW9kZT0xMjticmVhayB0fXQubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIHR9dz02NTUzNSZ2LCh5Jj0xNSkmJihwPHkmJihjKz16W2krK108PHAscCs9OCksdys9YyYoMTw8eSktMSxjPj4+PXkscC09eSkscDwxNSYmKGMrPXpbaSsrXTw8cCxwKz04LGMrPXpbaSsrXTw8cCxwKz04KSx2PV9bYyZiXTtyOmZvcig7Oyl7aWYoYz4+Pj15PXY+Pj4yNCxwLT15LCEoMTYmKHk9dj4+PjE2JjI1NSkpKXtpZigwPT0oNjQmeSkpe3Y9X1soNjU1MzUmdikrKGMmKDE8PHkpLTEpXTtjb250aW51ZSByfXQubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIHR9aWYoaz02NTUzNSZ2LHA8KHkmPTE1KSYmKGMrPXpbaSsrXTw8cCwocCs9OCk8eSYmKGMrPXpbaSsrXTw8cCxwKz04KSksaDwoays9YyYoMTw8eSktMSkpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgdH1pZihjPj4+PXkscC09eSwoeT1zLWEpPGspe2lmKGw8KHk9ay15KSYmci5zYW5lKXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPTMwO2JyZWFrIHR9aWYoUz1kLCh4PTApPT09Zil7aWYoeCs9dS15LHk8dyl7Zm9yKHctPXk7Q1tzKytdPWRbeCsrXSwtLXk7KTt4PXMtayxTPUN9fWVsc2UgaWYoZjx5KXtpZih4Kz11K2YteSwoeS09Zik8dyl7Zm9yKHctPXk7Q1tzKytdPWRbeCsrXSwtLXk7KTtpZih4PTAsZjx3KXtmb3Iody09eT1mO0NbcysrXT1kW3grK10sLS15Oyk7eD1zLWssUz1DfX19ZWxzZSBpZih4Kz1mLXkseTx3KXtmb3Iody09eTtDW3MrK109ZFt4KytdLC0teTspO3g9cy1rLFM9Q31mb3IoOzI8dzspQ1tzKytdPVNbeCsrXSxDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sdy09Mzt3JiYoQ1tzKytdPVNbeCsrXSwxPHcmJihDW3MrK109U1t4KytdKSl9ZWxzZXtmb3IoeD1zLWs7Q1tzKytdPUNbeCsrXSxDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sMjwody09Myk7KTt3JiYoQ1tzKytdPUNbeCsrXSwxPHcmJihDW3MrK109Q1t4KytdKSl9YnJlYWt9fWJyZWFrfX13aGlsZShpPG4mJnM8byk7aS09dz1wPj4zLGMmPSgxPDwocC09dzw8MykpLTEsdC5uZXh0X2luPWksdC5uZXh0X291dD1zLHQuYXZhaWxfaW49aTxuP24taSs1OjUtKGktbiksdC5hdmFpbF9vdXQ9czxvP28tcysyNTc6MjU3LShzLW8pLHIuaG9sZD1jLHIuYml0cz1wfX0se31dLDQ5OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEk9dChcIi4uL3V0aWxzL2NvbW1vblwiKSxPPXQoXCIuL2FkbGVyMzJcIiksQj10KFwiLi9jcmMzMlwiKSxSPXQoXCIuL2luZmZhc3RcIiksVD10KFwiLi9pbmZ0cmVlc1wiKSxEPTEsRj0yLE49MCxVPS0yLFA9MSxpPTg1MixuPTU5MjtmdW5jdGlvbiBMKHQpe3JldHVybih0Pj4+MjQmMjU1KSsodD4+PjgmNjUyODApKygoNjUyODAmdCk8PDgpKygoMjU1JnQpPDwyNCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgSS5CdWYxNigzMjApLHRoaXMud29yaz1uZXcgSS5CdWYxNigyODgpLHRoaXMubGVuZHluPW51bGwsdGhpcy5kaXN0ZHluPW51bGwsdGhpcy5zYW5lPTAsdGhpcy5iYWNrPTAsdGhpcy53YXM9MH1mdW5jdGlvbiBhKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPyhlPXQuc3RhdGUsdC50b3RhbF9pbj10LnRvdGFsX291dD1lLnRvdGFsPTAsdC5tc2c9XCJcIixlLndyYXAmJih0LmFkbGVyPTEmZS53cmFwKSxlLm1vZGU9UCxlLmxhc3Q9MCxlLmhhdmVkaWN0PTAsZS5kbWF4PTMyNzY4LGUuaGVhZD1udWxsLGUuaG9sZD0wLGUuYml0cz0wLGUubGVuY29kZT1lLmxlbmR5bj1uZXcgSS5CdWYzMihpKSxlLmRpc3Rjb2RlPWUuZGlzdGR5bj1uZXcgSS5CdWYzMihuKSxlLnNhbmU9MSxlLmJhY2s9LTEsTik6VX1mdW5jdGlvbiBvKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPygoZT10LnN0YXRlKS53c2l6ZT0wLGUud2hhdmU9MCxlLnduZXh0PTAsYSh0KSk6VX1mdW5jdGlvbiBoKHQsZSl7dmFyIHIsaTtyZXR1cm4gdCYmdC5zdGF0ZT8oaT10LnN0YXRlLGU8MD8ocj0wLGU9LWUpOihyPTErKGU+PjQpLGU8NDgmJihlJj0xNSkpLGUmJihlPDh8fDE1PGUpP1U6KG51bGwhPT1pLndpbmRvdyYmaS53Yml0cyE9PWUmJihpLndpbmRvdz1udWxsKSxpLndyYXA9cixpLndiaXRzPWUsbyh0KSkpOlV9ZnVuY3Rpb24gdSh0LGUpe3ZhciByLGk7cmV0dXJuIHQ/KGk9bmV3IHMsKHQuc3RhdGU9aSkud2luZG93PW51bGwsKHI9aCh0LGUpKSE9PU4mJih0LnN0YXRlPW51bGwpLHIpOlV9dmFyIGwsZixkPSEwO2Z1bmN0aW9uIGoodCl7aWYoZCl7dmFyIGU7Zm9yKGw9bmV3IEkuQnVmMzIoNTEyKSxmPW5ldyBJLkJ1ZjMyKDMyKSxlPTA7ZTwxNDQ7KXQubGVuc1tlKytdPTg7Zm9yKDtlPDI1NjspdC5sZW5zW2UrK109OTtmb3IoO2U8MjgwOyl0LmxlbnNbZSsrXT03O2Zvcig7ZTwyODg7KXQubGVuc1tlKytdPTg7Zm9yKFQoRCx0LmxlbnMsMCwyODgsbCwwLHQud29yayx7Yml0czo5fSksZT0wO2U8MzI7KXQubGVuc1tlKytdPTU7VChGLHQubGVucywwLDMyLGYsMCx0Lndvcmsse2JpdHM6NX0pLGQ9ITF9dC5sZW5jb2RlPWwsdC5sZW5iaXRzPTksdC5kaXN0Y29kZT1mLHQuZGlzdGJpdHM9NX1mdW5jdGlvbiBaKHQsZSxyLGkpe3ZhciBuLHM9dC5zdGF0ZTtyZXR1cm4gbnVsbD09PXMud2luZG93JiYocy53c2l6ZT0xPDxzLndiaXRzLHMud25leHQ9MCxzLndoYXZlPTAscy53aW5kb3c9bmV3IEkuQnVmOChzLndzaXplKSksaT49cy53c2l6ZT8oSS5hcnJheVNldChzLndpbmRvdyxlLHItcy53c2l6ZSxzLndzaXplLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihpPChuPXMud3NpemUtcy53bmV4dCkmJihuPWkpLEkuYXJyYXlTZXQocy53aW5kb3csZSxyLWksbixzLnduZXh0KSwoaS09bik/KEkuYXJyYXlTZXQocy53aW5kb3csZSxyLWksaSwwKSxzLnduZXh0PWkscy53aGF2ZT1zLndzaXplKToocy53bmV4dCs9bixzLnduZXh0PT09cy53c2l6ZSYmKHMud25leHQ9MCkscy53aGF2ZTxzLndzaXplJiYocy53aGF2ZSs9bikpKSwwfXIuaW5mbGF0ZVJlc2V0PW8sci5pbmZsYXRlUmVzZXQyPWgsci5pbmZsYXRlUmVzZXRLZWVwPWEsci5pbmZsYXRlSW5pdD1mdW5jdGlvbih0KXtyZXR1cm4gdSh0LDE1KX0sci5pbmZsYXRlSW5pdDI9dSxyLmluZmxhdGU9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGwsZixkLGMscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQz0wLEU9bmV3IEkuQnVmOCg0KSxBPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtpZighdHx8IXQuc3RhdGV8fCF0Lm91dHB1dHx8IXQuaW5wdXQmJjAhPT10LmF2YWlsX2luKXJldHVybiBVOzEyPT09KHI9dC5zdGF0ZSkubW9kZSYmKHIubW9kZT0xMyksYT10Lm5leHRfb3V0LG49dC5vdXRwdXQsaD10LmF2YWlsX291dCxzPXQubmV4dF9pbixpPXQuaW5wdXQsbz10LmF2YWlsX2luLHU9ci5ob2xkLGw9ci5iaXRzLGY9byxkPWgseD1OO3Q6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgUDppZigwPT09ci53cmFwKXtyLm1vZGU9MTM7YnJlYWt9Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoMiZyLndyYXAmJjM1NjE1PT09dSl7RVtyLmNoZWNrPTBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSxsPXU9MCxyLm1vZGU9MjticmVha31pZihyLmZsYWdzPTAsci5oZWFkJiYoci5oZWFkLmRvbmU9ITEpLCEoMSZyLndyYXApfHwoKCgyNTUmdSk8PDgpKyh1Pj44KSklMzEpe3QubXNnPVwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLHIubW9kZT0zMDticmVha31pZig4IT0oMTUmdSkpe3QubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYobC09NCxrPTgrKDE1Jih1Pj4+PTQpKSwwPT09ci53Yml0cylyLndiaXRzPWs7ZWxzZSBpZihrPnIud2JpdHMpe3QubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiLHIubW9kZT0zMDticmVha31yLmRtYXg9MTw8ayx0LmFkbGVyPXIuY2hlY2s9MSxyLm1vZGU9NTEyJnU/MTA6MTIsbD11PTA7YnJlYWs7Y2FzZSAyOmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHIuZmxhZ3M9dSw4IT0oMjU1JnIuZmxhZ3MpKXt0Lm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsci5tb2RlPTMwO2JyZWFrfWlmKDU3MzQ0JnIuZmxhZ3Mpe3QubXNnPVwidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0XCIsci5tb2RlPTMwO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PXU+PjgmMSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTM7Y2FzZSAzOmZvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC50aW1lPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxFWzJdPXU+Pj4xNiYyNTUsRVszXT11Pj4+MjQmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsNCwwKSksbD11PTAsci5tb2RlPTQ7Y2FzZSA0OmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1JnUsci5oZWFkLm9zPXU+PjgpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wLHIubW9kZT01O2Nhc2UgNTppZigxMDI0JnIuZmxhZ3Mpe2Zvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIubGVuZ3RoPXUsci5oZWFkJiYoci5oZWFkLmV4dHJhX2xlbj11KSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5leHRyYT1udWxsKTtyLm1vZGU9NjtjYXNlIDY6aWYoMTAyNCZyLmZsYWdzJiYobzwoYz1yLmxlbmd0aCkmJihjPW8pLGMmJihyLmhlYWQmJihrPXIuaGVhZC5leHRyYV9sZW4tci5sZW5ndGgsci5oZWFkLmV4dHJhfHwoci5oZWFkLmV4dHJhPW5ldyBBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksSS5hcnJheVNldChyLmhlYWQuZXh0cmEsaSxzLGMsaykpLDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssaSxjLHMpKSxvLT1jLHMrPWMsci5sZW5ndGgtPWMpLHIubGVuZ3RoKSlicmVhayB0O3IubGVuZ3RoPTAsci5tb2RlPTc7Y2FzZSA3OmlmKDIwNDgmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgdDtmb3IoYz0wO2s9aVtzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLGksYyxzKSksby09YyxzKz1jLGspYnJlYWsgdH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5uYW1lPW51bGwpO3IubGVuZ3RoPTAsci5tb2RlPTg7Y2FzZSA4OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgdDtmb3IoYz0wO2s9aVtzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLGksYyxzKSksby09YyxzKz1jLGspYnJlYWsgdH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5jb21tZW50PW51bGwpO3IubW9kZT05O2Nhc2UgOTppZig1MTImci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYodSE9PSg2NTUzNSZyLmNoZWNrKSl7dC5tc2c9XCJoZWFkZXIgY3JjIG1pc21hdGNoXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksdC5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPTEyO2JyZWFrO2Nhc2UgMTA6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dC5hZGxlcj1yLmNoZWNrPUwodSksbD11PTAsci5tb2RlPTExO2Nhc2UgMTE6aWYoMD09PXIuaGF2ZWRpY3QpcmV0dXJuIHQubmV4dF9vdXQ9YSx0LmF2YWlsX291dD1oLHQubmV4dF9pbj1zLHQuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwyO3QuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT0xMjtjYXNlIDEyOmlmKDU9PT1lfHw2PT09ZSlicmVhayB0O2Nhc2UgMTM6aWYoci5sYXN0KXt1Pj4+PTcmbCxsLT03Jmwsci5tb2RlPTI3O2JyZWFrfWZvcig7bDwzOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9c3dpdGNoKHIubGFzdD0xJnUsbC09MSwzJih1Pj4+PTEpKXtjYXNlIDA6ci5tb2RlPTE0O2JyZWFrO2Nhc2UgMTppZihqKHIpLHIubW9kZT0yMCw2IT09ZSlicmVhazt1Pj4+PTIsbC09MjticmVhayB0O2Nhc2UgMjpyLm1vZGU9MTc7YnJlYWs7Y2FzZSAzOnQubXNnPVwiaW52YWxpZCBibG9jayB0eXBlXCIsci5tb2RlPTMwfXU+Pj49MixsLT0yO2JyZWFrO2Nhc2UgMTQ6Zm9yKHU+Pj49NyZsLGwtPTcmbDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoKDY1NTM1JnUpIT0odT4+PjE2XjY1NTM1KSl7dC5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubGVuZ3RoPTY1NTM1JnUsbD11PTAsci5tb2RlPTE1LDY9PT1lKWJyZWFrIHQ7Y2FzZSAxNTpyLm1vZGU9MTY7Y2FzZSAxNjppZihjPXIubGVuZ3RoKXtpZihvPGMmJihjPW8pLGg8YyYmKGM9aCksMD09PWMpYnJlYWsgdDtJLmFycmF5U2V0KG4saSxzLGMsYSksby09YyxzKz1jLGgtPWMsYSs9YyxyLmxlbmd0aC09YzticmVha31yLm1vZGU9MTI7YnJlYWs7Y2FzZSAxNzpmb3IoO2w8MTQ7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZihyLm5sZW49MjU3KygzMSZ1KSx1Pj4+PTUsbC09NSxyLm5kaXN0PTErKDMxJnUpLHU+Pj49NSxsLT01LHIubmNvZGU9NCsoMTUmdSksdT4+Pj00LGwtPTQsMjg2PHIubmxlbnx8MzA8ci5uZGlzdCl7dC5tc2c9XCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTg7Y2FzZSAxODpmb3IoO3IuaGF2ZTxyLm5jb2RlOyl7Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1yLmxlbnNbQVtyLmhhdmUrK11dPTcmdSx1Pj4+PTMsbC09M31mb3IoO3IuaGF2ZTwxOTspci5sZW5zW0Fbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9NyxTPXtiaXRzOnIubGVuYml0c30seD1UKDAsci5sZW5zLDAsMTksci5sZW5jb2RlLDAsci53b3JrLFMpLHIubGVuYml0cz1TLmJpdHMseCl7dC5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE5O2Nhc2UgMTk6Zm9yKDtyLmhhdmU8ci5ubGVuK3IubmRpc3Q7KXtmb3IoO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoYjwxNil1Pj4+PV8sbC09XyxyLmxlbnNbci5oYXZlKytdPWI7ZWxzZXtpZigxNj09PWIpe2Zvcih6PV8rMjtsPHo7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZih1Pj4+PV8sbC09XywwPT09ci5oYXZlKXt0Lm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9az1yLmxlbnNbci5oYXZlLTFdLGM9MysoMyZ1KSx1Pj4+PTIsbC09Mn1lbHNlIGlmKDE3PT09Yil7Zm9yKHo9XyszO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWwtPV8saz0wLGM9MysoNyYodT4+Pj1fKSksdT4+Pj0zLGwtPTN9ZWxzZXtmb3Ioej1fKzc7bDx6Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9bC09XyxrPTAsYz0xMSsoMTI3Jih1Pj4+PV8pKSx1Pj4+PTcsbC09N31pZihyLmhhdmUrYz5yLm5sZW4rci5uZGlzdCl7dC5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPTMwO2JyZWFrfWZvcig7Yy0tOylyLmxlbnNbci5oYXZlKytdPWt9fWlmKDMwPT09ci5tb2RlKWJyZWFrO2lmKDA9PT1yLmxlbnNbMjU2XSl7dC5tc2c9XCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5iaXRzPTksUz17Yml0czpyLmxlbmJpdHN9LHg9VChELHIubGVucywwLHIubmxlbixyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXt0Lm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sUz17Yml0czpyLmRpc3RiaXRzfSx4PVQoRixyLmxlbnMsci5ubGVuLHIubmRpc3Qsci5kaXN0Y29kZSwwLHIud29yayxTKSxyLmRpc3RiaXRzPVMuYml0cyx4KXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLm1vZGU9MjAsNj09PWUpYnJlYWsgdDtjYXNlIDIwOnIubW9kZT0yMTtjYXNlIDIxOmlmKDY8PW8mJjI1ODw9aCl7dC5uZXh0X291dD1hLHQuYXZhaWxfb3V0PWgsdC5uZXh0X2luPXMsdC5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLFIodCxkKSxhPXQubmV4dF9vdXQsbj10Lm91dHB1dCxoPXQuYXZhaWxfb3V0LHM9dC5uZXh0X2luLGk9dC5pbnB1dCxvPXQuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsMTI9PT1yLm1vZGUmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDtnPShDPXIubGVuY29kZVt1JigxPDxyLmxlbmJpdHMpLTFdKT4+PjE2JjI1NSxiPTY1NTM1JkMsISgoXz1DPj4+MjQpPD1sKTspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKGcmJjA9PSgyNDAmZykpe2Zvcih2PV8seT1nLHc9YjtnPShDPXIubGVuY29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9XyxyLmxlbmd0aD1iLDA9PT1nKXtyLm1vZGU9MjY7YnJlYWt9aWYoMzImZyl7ci5iYWNrPS0xLHIubW9kZT0xMjticmVha31pZig2NCZnKXt0Lm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLHIubW9kZT0zMDticmVha31yLmV4dHJhPTE1Jmcsci5tb2RlPTIyO2Nhc2UgMjI6aWYoci5leHRyYSl7Zm9yKHo9ci5leHRyYTtsPHo7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1yLmxlbmd0aCs9dSYoMTw8ci5leHRyYSktMSx1Pj4+PXIuZXh0cmEsbC09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTIzO2Nhc2UgMjM6Zm9yKDtnPShDPXIuZGlzdGNvZGVbdSYoMTw8ci5kaXN0Yml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5kaXN0Y29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9Xyw2NCZnKXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT0zMDticmVha31yLm9mZnNldD1iLHIuZXh0cmE9MTUmZyxyLm1vZGU9MjQ7Y2FzZSAyNDppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIub2Zmc2V0Kz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1pZihyLm9mZnNldD5yLmRtYXgpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9ci5tb2RlPTI1O2Nhc2UgMjU6aWYoMD09PWgpYnJlYWsgdDtpZihjPWQtaCxyLm9mZnNldD5jKXtpZigoYz1yLm9mZnNldC1jKT5yLndoYXZlJiZyLnNhbmUpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9cD1jPnIud25leHQ/KGMtPXIud25leHQsci53c2l6ZS1jKTpyLnduZXh0LWMsYz5yLmxlbmd0aCYmKGM9ci5sZW5ndGgpLG09ci53aW5kb3d9ZWxzZSBtPW4scD1hLXIub2Zmc2V0LGM9ci5sZW5ndGg7Zm9yKGg8YyYmKGM9aCksaC09YyxyLmxlbmd0aC09YztuW2ErK109bVtwKytdLC0tYzspOzA9PT1yLmxlbmd0aCYmKHIubW9kZT0yMSk7YnJlYWs7Y2FzZSAyNjppZigwPT09aClicmVhayB0O25bYSsrXT1yLmxlbmd0aCxoLS0sci5tb2RlPTIxO2JyZWFrO2Nhc2UgMjc6aWYoci53cmFwKXtmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayB0O28tLSx1fD1pW3MrK108PGwsbCs9OH1pZihkLT1oLHQudG90YWxfb3V0Kz1kLHIudG90YWwrPWQsZCYmKHQuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP0Ioci5jaGVjayxuLGQsYS1kKTpPKHIuY2hlY2ssbixkLGEtZCkpLGQ9aCwoci5mbGFncz91OkwodSkpIT09ci5jaGVjayl7dC5tc2c9XCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiLHIubW9kZT0zMDticmVha31sPXU9MH1yLm1vZGU9Mjg7Y2FzZSAyODppZihyLndyYXAmJnIuZmxhZ3Mpe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHUhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7dC5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yOTtjYXNlIDI5Ong9MTticmVhayB0O2Nhc2UgMzA6eD0tMzticmVhayB0O2Nhc2UgMzE6cmV0dXJuLTQ7Y2FzZSAzMjpkZWZhdWx0OnJldHVybiBVfXJldHVybiB0Lm5leHRfb3V0PWEsdC5hdmFpbF9vdXQ9aCx0Lm5leHRfaW49cyx0LmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsKHIud3NpemV8fGQhPT10LmF2YWlsX291dCYmci5tb2RlPDMwJiYoci5tb2RlPDI3fHw0IT09ZSkpJiZaKHQsdC5vdXRwdXQsdC5uZXh0X291dCxkLXQuYXZhaWxfb3V0KT8oci5tb2RlPTMxLC00KTooZi09dC5hdmFpbF9pbixkLT10LmF2YWlsX291dCx0LnRvdGFsX2luKz1mLHQudG90YWxfb3V0Kz1kLHIudG90YWwrPWQsci53cmFwJiZkJiYodC5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLG4sZCx0Lm5leHRfb3V0LWQpOk8oci5jaGVjayxuLGQsdC5uZXh0X291dC1kKSksdC5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKDEyPT09ci5tb2RlPzEyODowKSsoMjA9PT1yLm1vZGV8fDE1PT09ci5tb2RlPzI1NjowKSwoMD09ZiYmMD09PWR8fDQ9PT1lKSYmeD09PU4mJih4PS01KSx4KX0sci5pbmZsYXRlRW5kPWZ1bmN0aW9uKHQpe2lmKCF0fHwhdC5zdGF0ZSlyZXR1cm4gVTt2YXIgZT10LnN0YXRlO3JldHVybiBlLndpbmRvdyYmKGUud2luZG93PW51bGwpLHQuc3RhdGU9bnVsbCxOfSxyLmluZmxhdGVHZXRIZWFkZXI9ZnVuY3Rpb24odCxlKXt2YXIgcjtyZXR1cm4gdCYmdC5zdGF0ZT8wPT0oMiYocj10LnN0YXRlKS53cmFwKT9VOigoci5oZWFkPWUpLmRvbmU9ITEsTik6VX0sci5pbmZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbih0LGUpe3ZhciByLGk9ZS5sZW5ndGg7cmV0dXJuIHQmJnQuc3RhdGU/MCE9PShyPXQuc3RhdGUpLndyYXAmJjExIT09ci5tb2RlP1U6MTE9PT1yLm1vZGUmJk8oMSxlLGksMCkhPT1yLmNoZWNrPy0zOloodCxlLGksaSk/KHIubW9kZT0zMSwtNCk6KHIuaGF2ZWRpY3Q9MSxOKTpVfSxyLmluZmxhdGVJbmZvPVwicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9pbmZmYXN0XCI6NDgsXCIuL2luZnRyZWVzXCI6NTB9XSw1MDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBEPXQoXCIuLi91dGlscy9jb21tb25cIiksRj1bMyw0LDUsNiw3LDgsOSwxMCwxMSwxMywxNSwxNywxOSwyMywyNywzMSwzNSw0Myw1MSw1OSw2Nyw4Myw5OSwxMTUsMTMxLDE2MywxOTUsMjI3LDI1OCwwLDBdLE49WzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSxVPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzcsMCwwXSxQPVsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF07ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGksbixzLGEsbyl7dmFyIGgsdSxsLGYsZCxjLHAsbSxfLGc9by5iaXRzLGI9MCx2PTAseT0wLHc9MCxrPTAseD0wLFM9MCx6PTAsQz0wLEU9MCxBPW51bGwsST0wLE89bmV3IEQuQnVmMTYoMTYpLEI9bmV3IEQuQnVmMTYoMTYpLFI9bnVsbCxUPTA7Zm9yKGI9MDtiPD0xNTtiKyspT1tiXT0wO2Zvcih2PTA7djxpO3YrKylPW2Vbcit2XV0rKztmb3Ioaz1nLHc9MTU7MTw9dyYmMD09PU9bd107dy0tKTtpZih3PGsmJihrPXcpLDA9PT13KXJldHVybiBuW3MrK109MjA5NzE1MjAsbltzKytdPTIwOTcxNTIwLG8uYml0cz0xLDA7Zm9yKHk9MTt5PHcmJjA9PT1PW3ldO3krKyk7Zm9yKGs8eSYmKGs9eSksYj16PTE7Yjw9MTU7YisrKWlmKHo8PD0xLCh6LT1PW2JdKTwwKXJldHVybi0xO2lmKDA8eiYmKDA9PT10fHwxIT09dykpcmV0dXJuLTE7Zm9yKEJbMV09MCxiPTE7YjwxNTtiKyspQltiKzFdPUJbYl0rT1tiXTtmb3Iodj0wO3Y8aTt2KyspMCE9PWVbcit2XSYmKGFbQltlW3Irdl1dKytdPXYpO2lmKGM9MD09PXQ/KEE9Uj1hLDE5KToxPT09dD8oQT1GLEktPTI1NyxSPU4sVC09MjU3LDI1Nik6KEE9VSxSPVAsLTEpLGI9eSxkPXMsUz12PUU9MCxsPS0xLGY9KEM9MTw8KHg9aykpLTEsMT09PXQmJjg1MjxDfHwyPT09dCYmNTkyPEMpcmV0dXJuIDE7Zm9yKDs7KXtmb3IocD1iLVMsXz1hW3ZdPGM/KG09MCxhW3ZdKTphW3ZdPmM/KG09UltUK2Fbdl1dLEFbSSthW3ZdXSk6KG09OTYsMCksaD0xPDxiLVMseT11PTE8PHg7bltkKyhFPj5TKSsodS09aCldPXA8PDI0fG08PDE2fF98MCwwIT09dTspO2ZvcihoPTE8PGItMTtFJmg7KWg+Pj0xO2lmKDAhPT1oPyhFJj1oLTEsRSs9aCk6RT0wLHYrKywwPT0tLU9bYl0pe2lmKGI9PT13KWJyZWFrO2I9ZVtyK2Fbdl1dfWlmKGs8YiYmKEUmZikhPT1sKXtmb3IoMD09PVMmJihTPWspLGQrPXksej0xPDwoeD1iLVMpO3grUzx3JiYhKCh6LT1PW3grU10pPD0wKTspeCsrLHo8PD0xO2lmKEMrPTE8PHgsMT09PXQmJjg1MjxDfHwyPT09dCYmNTkyPEMpcmV0dXJuIDE7bltsPUUmZl09azw8MjR8eDw8MTZ8ZC1zfDB9fXJldHVybiAwIT09RSYmKG5bZCtFXT1iLVM8PDI0fDY0PDwxNnwwKSxvLmJpdHM9aywwfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17MjpcIm5lZWQgZGljdGlvbmFyeVwiLDE6XCJzdHJlYW0gZW5kXCIsMDpcIlwiLFwiLTFcIjpcImZpbGUgZXJyb3JcIixcIi0yXCI6XCJzdHJlYW0gZXJyb3JcIixcIi0zXCI6XCJkYXRhIGVycm9yXCIsXCItNFwiOlwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLFwiLTVcIjpcImJ1ZmZlciBlcnJvclwiLFwiLTZcIjpcImluY29tcGF0aWJsZSB2ZXJzaW9uXCJ9fSx7fV0sNTI6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10KFwiLi4vdXRpbHMvY29tbW9uXCIpLG89MCxoPTE7ZnVuY3Rpb24gaSh0KXtmb3IodmFyIGU9dC5sZW5ndGg7MDw9LS1lOyl0W2VdPTB9dmFyIHM9MCxhPTI5LHU9MjU2LGw9dSsxK2EsZj0zMCxkPTE5LF89MipsKzEsZz0xNSxjPTE2LHA9NyxtPTI1NixiPTE2LHY9MTcseT0xOCx3PVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdLGs9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdLHg9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLFM9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLHo9bmV3IEFycmF5KDIqKGwrMikpO2koeik7dmFyIEM9bmV3IEFycmF5KDIqZik7aShDKTt2YXIgRT1uZXcgQXJyYXkoNTEyKTtpKEUpO3ZhciBBPW5ldyBBcnJheSgyNTYpO2koQSk7dmFyIEk9bmV3IEFycmF5KGEpO2koSSk7dmFyIE8sQixSLFQ9bmV3IEFycmF5KGYpO2Z1bmN0aW9uIEQodCxlLHIsaSxuKXt0aGlzLnN0YXRpY190cmVlPXQsdGhpcy5leHRyYV9iaXRzPWUsdGhpcy5leHRyYV9iYXNlPXIsdGhpcy5lbGVtcz1pLHRoaXMubWF4X2xlbmd0aD1uLHRoaXMuaGFzX3N0cmVlPXQmJnQubGVuZ3RofWZ1bmN0aW9uIEYodCxlKXt0aGlzLmR5bl90cmVlPXQsdGhpcy5tYXhfY29kZT0wLHRoaXMuc3RhdF9kZXNjPWV9ZnVuY3Rpb24gTih0KXtyZXR1cm4gdDwyNTY/RVt0XTpFWzI1NisodD4+PjcpXX1mdW5jdGlvbiBVKHQsZSl7dC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109MjU1JmUsdC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109ZT4+PjgmMjU1fWZ1bmN0aW9uIFAodCxlLHIpe3QuYmlfdmFsaWQ+Yy1yPyh0LmJpX2J1Znw9ZTw8dC5iaV92YWxpZCY2NTUzNSxVKHQsdC5iaV9idWYpLHQuYmlfYnVmPWU+PmMtdC5iaV92YWxpZCx0LmJpX3ZhbGlkKz1yLWMpOih0LmJpX2J1Znw9ZTw8dC5iaV92YWxpZCY2NTUzNSx0LmJpX3ZhbGlkKz1yKX1mdW5jdGlvbiBMKHQsZSxyKXtQKHQsclsyKmVdLHJbMiplKzFdKX1mdW5jdGlvbiBqKHQsZSl7Zm9yKHZhciByPTA7cnw9MSZ0LHQ+Pj49MSxyPDw9MSwwPC0tZTspO3JldHVybiByPj4+MX1mdW5jdGlvbiBaKHQsZSxyKXt2YXIgaSxuLHM9bmV3IEFycmF5KGcrMSksYT0wO2ZvcihpPTE7aTw9ZztpKyspc1tpXT1hPWErcltpLTFdPDwxO2ZvcihuPTA7bjw9ZTtuKyspe3ZhciBvPXRbMipuKzFdOzAhPT1vJiYodFsyKm5dPWooc1tvXSsrLG8pKX19ZnVuY3Rpb24gVyh0KXt2YXIgZTtmb3IoZT0wO2U8bDtlKyspdC5keW5fbHRyZWVbMiplXT0wO2ZvcihlPTA7ZTxmO2UrKyl0LmR5bl9kdHJlZVsyKmVdPTA7Zm9yKGU9MDtlPGQ7ZSsrKXQuYmxfdHJlZVsyKmVdPTA7dC5keW5fbHRyZWVbMiptXT0xLHQub3B0X2xlbj10LnN0YXRpY19sZW49MCx0Lmxhc3RfbGl0PXQubWF0Y2hlcz0wfWZ1bmN0aW9uIE0odCl7ODx0LmJpX3ZhbGlkP1UodCx0LmJpX2J1Zik6MDx0LmJpX3ZhbGlkJiYodC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109dC5iaV9idWYpLHQuYmlfYnVmPTAsdC5iaV92YWxpZD0wfWZ1bmN0aW9uIEgodCxlLHIsaSl7dmFyIG49MiplLHM9MipyO3JldHVybiB0W25dPHRbc118fHRbbl09PT10W3NdJiZpW2VdPD1pW3JdfWZ1bmN0aW9uIEcodCxlLHIpe2Zvcih2YXIgaT10LmhlYXBbcl0sbj1yPDwxO248PXQuaGVhcF9sZW4mJihuPHQuaGVhcF9sZW4mJkgoZSx0LmhlYXBbbisxXSx0LmhlYXBbbl0sdC5kZXB0aCkmJm4rKywhSChlLGksdC5oZWFwW25dLHQuZGVwdGgpKTspdC5oZWFwW3JdPXQuaGVhcFtuXSxyPW4sbjw8PTE7dC5oZWFwW3JdPWl9ZnVuY3Rpb24gSyh0LGUscil7dmFyIGksbixzLGEsbz0wO2lmKDAhPT10Lmxhc3RfbGl0KWZvcig7aT10LnBlbmRpbmdfYnVmW3QuZF9idWYrMipvXTw8OHx0LnBlbmRpbmdfYnVmW3QuZF9idWYrMipvKzFdLG49dC5wZW5kaW5nX2J1Zlt0LmxfYnVmK29dLG8rKywwPT09aT9MKHQsbixlKTooTCh0LChzPUFbbl0pK3UrMSxlKSwwIT09KGE9d1tzXSkmJlAodCxuLT1JW3NdLGEpLEwodCxzPU4oLS1pKSxyKSwwIT09KGE9a1tzXSkmJlAodCxpLT1UW3NdLGEpKSxvPHQubGFzdF9saXQ7KTtMKHQsbSxlKX1mdW5jdGlvbiBZKHQsZSl7dmFyIHIsaSxuLHM9ZS5keW5fdHJlZSxhPWUuc3RhdF9kZXNjLnN0YXRpY190cmVlLG89ZS5zdGF0X2Rlc2MuaGFzX3N0cmVlLGg9ZS5zdGF0X2Rlc2MuZWxlbXMsdT0tMTtmb3IodC5oZWFwX2xlbj0wLHQuaGVhcF9tYXg9XyxyPTA7cjxoO3IrKykwIT09c1syKnJdPyh0LmhlYXBbKyt0LmhlYXBfbGVuXT11PXIsdC5kZXB0aFtyXT0wKTpzWzIqcisxXT0wO2Zvcig7dC5oZWFwX2xlbjwyOylzWzIqKG49dC5oZWFwWysrdC5oZWFwX2xlbl09dTwyPysrdTowKV09MSx0LmRlcHRoW25dPTAsdC5vcHRfbGVuLS0sbyYmKHQuc3RhdGljX2xlbi09YVsyKm4rMV0pO2ZvcihlLm1heF9jb2RlPXUscj10LmhlYXBfbGVuPj4xOzE8PXI7ci0tKUcodCxzLHIpO2ZvcihuPWg7cj10LmhlYXBbMV0sdC5oZWFwWzFdPXQuaGVhcFt0LmhlYXBfbGVuLS1dLEcodCxzLDEpLGk9dC5oZWFwWzFdLHQuaGVhcFstLXQuaGVhcF9tYXhdPXIsdC5oZWFwWy0tdC5oZWFwX21heF09aSxzWzIqbl09c1syKnJdK3NbMippXSx0LmRlcHRoW25dPSh0LmRlcHRoW3JdPj10LmRlcHRoW2ldP3QuZGVwdGhbcl06dC5kZXB0aFtpXSkrMSxzWzIqcisxXT1zWzIqaSsxXT1uLHQuaGVhcFsxXT1uKyssRyh0LHMsMSksMjw9dC5oZWFwX2xlbjspO3QuaGVhcFstLXQuaGVhcF9tYXhdPXQuaGVhcFsxXSxmdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoPWUuZHluX3RyZWUsdT1lLm1heF9jb2RlLGw9ZS5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsZj1lLnN0YXRfZGVzYy5oYXNfc3RyZWUsZD1lLnN0YXRfZGVzYy5leHRyYV9iaXRzLGM9ZS5zdGF0X2Rlc2MuZXh0cmFfYmFzZSxwPWUuc3RhdF9kZXNjLm1heF9sZW5ndGgsbT0wO2ZvcihzPTA7czw9ZztzKyspdC5ibF9jb3VudFtzXT0wO2ZvcihoWzIqdC5oZWFwW3QuaGVhcF9tYXhdKzFdPTAscj10LmhlYXBfbWF4KzE7cjxfO3IrKylwPChzPWhbMipoWzIqKGk9dC5oZWFwW3JdKSsxXSsxXSsxKSYmKHM9cCxtKyspLGhbMippKzFdPXMsdTxpfHwodC5ibF9jb3VudFtzXSsrLGE9MCxjPD1pJiYoYT1kW2ktY10pLG89aFsyKmldLHQub3B0X2xlbis9byoocythKSxmJiYodC5zdGF0aWNfbGVuKz1vKihsWzIqaSsxXSthKSkpO2lmKDAhPT1tKXtkb3tmb3Iocz1wLTE7MD09PXQuYmxfY291bnRbc107KXMtLTt0LmJsX2NvdW50W3NdLS0sdC5ibF9jb3VudFtzKzFdKz0yLHQuYmxfY291bnRbcF0tLSxtLT0yfXdoaWxlKDA8bSk7Zm9yKHM9cDswIT09cztzLS0pZm9yKGk9dC5ibF9jb3VudFtzXTswIT09aTspdTwobj10LmhlYXBbLS1yXSl8fChoWzIqbisxXSE9PXMmJih0Lm9wdF9sZW4rPShzLWhbMipuKzFdKSpoWzIqbl0saFsyKm4rMV09cyksaS0tKX19KHQsZSksWihzLHUsdC5ibF9jb3VudCl9ZnVuY3Rpb24gWCh0LGUscil7dmFyIGksbixzPS0xLGE9ZVsxXSxvPTAsaD03LHU9NDtmb3IoMD09PWEmJihoPTEzOCx1PTMpLGVbMioocisxKSsxXT02NTUzNSxpPTA7aTw9cjtpKyspbj1hLGE9ZVsyKihpKzEpKzFdLCsrbzxoJiZuPT09YXx8KG88dT90LmJsX3RyZWVbMipuXSs9bzowIT09bj8obiE9PXMmJnQuYmxfdHJlZVsyKm5dKyssdC5ibF90cmVlWzIqYl0rKyk6bzw9MTA/dC5ibF90cmVlWzIqdl0rKzp0LmJsX3RyZWVbMip5XSsrLHM9bix1PShvPTApPT09YT8oaD0xMzgsMyk6bj09PWE/KGg9NiwzKTooaD03LDQpKX1mdW5jdGlvbiBWKHQsZSxyKXt2YXIgaSxuLHM9LTEsYT1lWzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9MyksaT0wO2k8PXI7aSsrKWlmKG49YSxhPWVbMiooaSsxKSsxXSwhKCsrbzxoJiZuPT09YSkpe2lmKG88dSlmb3IoO0wodCxuLHQuYmxfdHJlZSksMCE9LS1vOyk7ZWxzZSAwIT09bj8obiE9PXMmJihMKHQsbix0LmJsX3RyZWUpLG8tLSksTCh0LGIsdC5ibF90cmVlKSxQKHQsby0zLDIpKTpvPD0xMD8oTCh0LHYsdC5ibF90cmVlKSxQKHQsby0zLDMpKTooTCh0LHksdC5ibF90cmVlKSxQKHQsby0xMSw3KSk7cz1uLHU9KG89MCk9PT1hPyhoPTEzOCwzKTpuPT09YT8oaD02LDMpOihoPTcsNCl9fWkoVCk7dmFyIHE9ITE7ZnVuY3Rpb24gSih0LGUscixpKXtQKHQsKHM8PDEpKyhpPzE6MCksMyksZnVuY3Rpb24odCxlLHIsaSl7TSh0KSxpJiYoVSh0LHIpLFUodCx+cikpLG4uYXJyYXlTZXQodC5wZW5kaW5nX2J1Zix0LndpbmRvdyxlLHIsdC5wZW5kaW5nKSx0LnBlbmRpbmcrPXJ9KHQsZSxyLCEwKX1yLl90cl9pbml0PWZ1bmN0aW9uKHQpe3F8fChmdW5jdGlvbigpe3ZhciB0LGUscixpLG4scz1uZXcgQXJyYXkoZysxKTtmb3IoaT1yPTA7aTxhLTE7aSsrKWZvcihJW2ldPXIsdD0wO3Q8MTw8d1tpXTt0KyspQVtyKytdPWk7Zm9yKEFbci0xXT1pLGk9bj0wO2k8MTY7aSsrKWZvcihUW2ldPW4sdD0wO3Q8MTw8a1tpXTt0KyspRVtuKytdPWk7Zm9yKG4+Pj03O2k8ZjtpKyspZm9yKFRbaV09bjw8Nyx0PTA7dDwxPDxrW2ldLTc7dCsrKUVbMjU2K24rK109aTtmb3IoZT0wO2U8PWc7ZSsrKXNbZV09MDtmb3IodD0wO3Q8PTE0MzspelsyKnQrMV09OCx0Kyssc1s4XSsrO2Zvcig7dDw9MjU1Oyl6WzIqdCsxXT05LHQrKyxzWzldKys7Zm9yKDt0PD0yNzk7KXpbMip0KzFdPTcsdCsrLHNbN10rKztmb3IoO3Q8PTI4NzspelsyKnQrMV09OCx0Kyssc1s4XSsrO2ZvcihaKHosbCsxLHMpLHQ9MDt0PGY7dCsrKUNbMip0KzFdPTUsQ1syKnRdPWoodCw1KTtPPW5ldyBEKHosdyx1KzEsbCxnKSxCPW5ldyBEKEMsaywwLGYsZyksUj1uZXcgRChuZXcgQXJyYXkoMCkseCwwLGQscCl9KCkscT0hMCksdC5sX2Rlc2M9bmV3IEYodC5keW5fbHRyZWUsTyksdC5kX2Rlc2M9bmV3IEYodC5keW5fZHRyZWUsQiksdC5ibF9kZXNjPW5ldyBGKHQuYmxfdHJlZSxSKSx0LmJpX2J1Zj0wLHQuYmlfdmFsaWQ9MCxXKHQpfSxyLl90cl9zdG9yZWRfYmxvY2s9SixyLl90cl9mbHVzaF9ibG9jaz1mdW5jdGlvbih0LGUscixpKXt2YXIgbixzLGE9MDswPHQubGV2ZWw/KDI9PT10LnN0cm0uZGF0YV90eXBlJiYodC5zdHJtLmRhdGFfdHlwZT1mdW5jdGlvbih0KXt2YXIgZSxyPTQwOTM2MjQ0NDc7Zm9yKGU9MDtlPD0zMTtlKysscj4+Pj0xKWlmKDEmciYmMCE9PXQuZHluX2x0cmVlWzIqZV0pcmV0dXJuIG87aWYoMCE9PXQuZHluX2x0cmVlWzE4XXx8MCE9PXQuZHluX2x0cmVlWzIwXXx8MCE9PXQuZHluX2x0cmVlWzI2XSlyZXR1cm4gaDtmb3IoZT0zMjtlPHU7ZSsrKWlmKDAhPT10LmR5bl9sdHJlZVsyKmVdKXJldHVybiBoO3JldHVybiBvfSh0KSksWSh0LHQubF9kZXNjKSxZKHQsdC5kX2Rlc2MpLGE9ZnVuY3Rpb24odCl7dmFyIGU7Zm9yKFgodCx0LmR5bl9sdHJlZSx0LmxfZGVzYy5tYXhfY29kZSksWCh0LHQuZHluX2R0cmVlLHQuZF9kZXNjLm1heF9jb2RlKSxZKHQsdC5ibF9kZXNjKSxlPWQtMTszPD1lJiYwPT09dC5ibF90cmVlWzIqU1tlXSsxXTtlLS0pO3JldHVybiB0Lm9wdF9sZW4rPTMqKGUrMSkrNSs1KzQsZX0odCksbj10Lm9wdF9sZW4rMys3Pj4+Mywocz10LnN0YXRpY19sZW4rMys3Pj4+Myk8PW4mJihuPXMpKTpuPXM9cis1LHIrNDw9biYmLTEhPT1lP0oodCxlLHIsaSk6ND09PXQuc3RyYXRlZ3l8fHM9PT1uPyhQKHQsMisoaT8xOjApLDMpLEsodCx6LEMpKTooUCh0LDQrKGk/MTowKSwzKSxmdW5jdGlvbih0LGUscixpKXt2YXIgbjtmb3IoUCh0LGUtMjU3LDUpLFAodCxyLTEsNSksUCh0LGktNCw0KSxuPTA7bjxpO24rKylQKHQsdC5ibF90cmVlWzIqU1tuXSsxXSwzKTtWKHQsdC5keW5fbHRyZWUsZS0xKSxWKHQsdC5keW5fZHRyZWUsci0xKX0odCx0LmxfZGVzYy5tYXhfY29kZSsxLHQuZF9kZXNjLm1heF9jb2RlKzEsYSsxKSxLKHQsdC5keW5fbHRyZWUsdC5keW5fZHRyZWUpKSxXKHQpLGkmJk0odCl9LHIuX3RyX3RhbGx5PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC5wZW5kaW5nX2J1Zlt0LmRfYnVmKzIqdC5sYXN0X2xpdF09ZT4+PjgmMjU1LHQucGVuZGluZ19idWZbdC5kX2J1ZisyKnQubGFzdF9saXQrMV09MjU1JmUsdC5wZW5kaW5nX2J1Zlt0LmxfYnVmK3QubGFzdF9saXRdPTI1NSZyLHQubGFzdF9saXQrKywwPT09ZT90LmR5bl9sdHJlZVsyKnJdKys6KHQubWF0Y2hlcysrLGUtLSx0LmR5bl9sdHJlZVsyKihBW3JdK3UrMSldKyssdC5keW5fZHRyZWVbMipOKGUpXSsrKSx0Lmxhc3RfbGl0PT09dC5saXRfYnVmc2l6ZS0xfSxyLl90cl9hbGlnbj1mdW5jdGlvbih0KXtQKHQsMiwzKSxMKHQsbSx6KSxmdW5jdGlvbih0KXsxNj09PXQuYmlfdmFsaWQ/KFUodCx0LmJpX2J1ZiksdC5iaV9idWY9MCx0LmJpX3ZhbGlkPTApOjg8PXQuYmlfdmFsaWQmJih0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT0yNTUmdC5iaV9idWYsdC5iaV9idWY+Pj04LHQuYmlfdmFsaWQtPTgpfSh0KX19LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxfV0sNTM6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmlucHV0PW51bGwsdGhpcy5uZXh0X2luPTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLm91dHB1dD1udWxsLHRoaXMubmV4dF9vdXQ9MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTAsdGhpcy5tc2c9XCJcIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9fSx7fV0sNTQ6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpmdW5jdGlvbigpe3ZhciB0PVtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7dC5zcGxpY2UoMSwwLDApLHNldFRpbWVvdXQuYXBwbHkobnVsbCx0KX19LHt9XX0se30sWzEwXSkoMTApfSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg2KS5CdWZmZXIsIF9fd2VicGFja19yZXF1aXJlX18oNCksIF9fd2VicGFja19yZXF1aXJlX18oNTkpLnNldEltbWVkaWF0ZSkpXG5cbi8qKiovIH0pLFxuLyogMTM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBmaWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcclxuZXhwb3J0cy5Eb2N1bWVudCA9IGZpbGVfMS5GaWxlO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzUxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzU5KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGJhc2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xyXG5leHBvcnRzLkVNUFRZX09CSkVDVCA9IE9iamVjdC5zZWFsKHt9KTtcclxuY2xhc3MgWG1sQ29tcG9uZW50IGV4dGVuZHMgYmFzZV8xLkJhc2VYbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iocm9vdEtleSkge1xyXG4gICAgICAgIHN1cGVyKHJvb3RLZXkpO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG4gICAgcHJlcEZvclhtbChmaWxlKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLnJvb3RcclxuICAgICAgICAgICAgLmZpbHRlcigoYykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIGJhc2VfMS5CYXNlWG1sQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWMuSXNEZWxldGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm1hcCgoY29tcCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29tcCBpbnN0YW5jZW9mIGJhc2VfMS5CYXNlWG1sQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcC5wcmVwRm9yWG1sKGZpbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGNvbXApID0+IGNvbXAgIT09IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qgb25seUF0dHJzID0gKGMpID0+IHR5cGVvZiBjID09PSBcIm9iamVjdFwiICYmIGMuX2F0dHI7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgW3RoaXMucm9vdEtleV06IGNoaWxkcmVuLmxlbmd0aCA/IChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgb25seUF0dHJzKGNoaWxkcmVuWzBdKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW4pIDogZXhwb3J0cy5FTVBUWV9PQkpFQ1QsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFkZENoaWxkRWxlbWVudChjaGlsZCkge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGRlbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLmRlbGV0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuWG1sQ29tcG9uZW50ID0gWG1sQ29tcG9uZW50O1xyXG5jbGFzcyBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcclxuICAgIHByZXBGb3JYbWwoKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucHJlcEZvclhtbCgpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgJiYgKHR5cGVvZiByZXN1bHRbdGhpcy5yb290S2V5XSAhPT0gXCJvYmplY3RcIiB8fCBPYmplY3Qua2V5cyhyZXN1bHRbdGhpcy5yb290S2V5XSkubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLklnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQgPSBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBkZWZhdWx0X2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xyXG5jbGFzcyBBdHRyaWJ1dGVzIGV4dGVuZHMgZGVmYXVsdF9hdHRyaWJ1dGVzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB2YWw6IFwidzp2YWxcIixcclxuICAgICAgICAgICAgY29sb3I6IFwidzpjb2xvclwiLFxyXG4gICAgICAgICAgICBmaWxsOiBcInc6ZmlsbFwiLFxyXG4gICAgICAgICAgICBzcGFjZTogXCJ3OnNwYWNlXCIsXHJcbiAgICAgICAgICAgIHN6OiBcInc6c3pcIixcclxuICAgICAgICAgICAgdHlwZTogXCJ3OnR5cGVcIixcclxuICAgICAgICAgICAgcnNpZFI6IFwidzpyc2lkUlwiLFxyXG4gICAgICAgICAgICByc2lkUlByOiBcInc6cnNpZFJQclwiLFxyXG4gICAgICAgICAgICByc2lkU2VjdDogXCJ3OnJzaWRTZWN0XCIsXHJcbiAgICAgICAgICAgIHc6IFwidzp3XCIsXHJcbiAgICAgICAgICAgIGg6IFwidzpoXCIsXHJcbiAgICAgICAgICAgIHRvcDogXCJ3OnRvcFwiLFxyXG4gICAgICAgICAgICByaWdodDogXCJ3OnJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGJvdHRvbTogXCJ3OmJvdHRvbVwiLFxyXG4gICAgICAgICAgICBsZWZ0OiBcInc6bGVmdFwiLFxyXG4gICAgICAgICAgICBoZWFkZXI6IFwidzpoZWFkZXJcIixcclxuICAgICAgICAgICAgZm9vdGVyOiBcInc6Zm9vdGVyXCIsXHJcbiAgICAgICAgICAgIGd1dHRlcjogXCJ3Omd1dHRlclwiLFxyXG4gICAgICAgICAgICBsaW5lUGl0Y2g6IFwidzpsaW5lUGl0Y2hcIixcclxuICAgICAgICAgICAgcG9zOiBcInc6cG9zXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkF0dHJpYnV0ZXMgPSBBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfanNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xyXG5jb25zdCBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmZ1bmN0aW9uIGNvbnZlcnRUb1htbENvbXBvbmVudChlbGVtZW50KSB7XHJcbiAgICBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xyXG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxyXG4gICAgICAgIGNhc2UgXCJlbGVtZW50XCI6XHJcbiAgICAgICAgICAgIGNvbnN0IHhtbENvbXBvbmVudCA9IG5ldyBJbXBvcnRlZFhtbENvbXBvbmVudChlbGVtZW50Lm5hbWUsIGVsZW1lbnQuYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxtZW50cyA9IGVsZW1lbnQuZWxlbWVudHMgfHwgW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGRFbG0gb2YgY2hpbGRFbG1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNvbnZlcnRUb1htbENvbXBvbmVudChjaGlsZEVsbSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHhtbENvbXBvbmVudC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4geG1sQ29tcG9uZW50O1xyXG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnRleHQ7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmNvbnZlcnRUb1htbENvbXBvbmVudCA9IGNvbnZlcnRUb1htbENvbXBvbmVudDtcclxuY2xhc3MgSW1wb3J0ZWRYbWxDb21wb25lbnRBdHRyaWJ1dGVzIGV4dGVuZHMgXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxufVxyXG5jbGFzcyBJbXBvcnRlZFhtbENvbXBvbmVudCBleHRlbmRzIF8xLlhtbENvbXBvbmVudCB7XHJcbiAgICBzdGF0aWMgZnJvbVhtbFN0cmluZyhpbXBvcnRlZENvbnRlbnQpIHtcclxuICAgICAgICBjb25zdCB4bWxPYmogPSB4bWxfanNfMS54bWwyanMoaW1wb3J0ZWRDb250ZW50LCB7IGNvbXBhY3Q6IGZhbHNlIH0pO1xyXG4gICAgICAgIHJldHVybiBjb252ZXJ0VG9YbWxDb21wb25lbnQoeG1sT2JqKTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKHJvb3RLZXksIF9hdHRyKSB7XHJcbiAgICAgICAgc3VwZXIocm9vdEtleSk7XHJcbiAgICAgICAgaWYgKF9hdHRyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBJbXBvcnRlZFhtbENvbXBvbmVudEF0dHJpYnV0ZXMoX2F0dHIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdXNoKHhtbENvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHhtbENvbXBvbmVudCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JbXBvcnRlZFhtbENvbXBvbmVudCA9IEltcG9ydGVkWG1sQ29tcG9uZW50O1xyXG5jbGFzcyBJbXBvcnRlZFJvb3RFbGVtZW50QXR0cmlidXRlcyBleHRlbmRzIF8xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihfYXR0cikge1xyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG4gICAgICAgIHRoaXMuX2F0dHIgPSBfYXR0cjtcclxuICAgIH1cclxuICAgIHByZXBGb3JYbWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgX2F0dHI6IHRoaXMuX2F0dHIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzID0gSW1wb3J0ZWRSb290RWxlbWVudEF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oQnVmZmVyKSB7OyhmdW5jdGlvbiAoc2F4KSB7IC8vIHdyYXBwZXIgZm9yIG5vbi1ub2RlIGVudnNcbiAgc2F4LnBhcnNlciA9IGZ1bmN0aW9uIChzdHJpY3QsIG9wdCkgeyByZXR1cm4gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdCkgfVxuICBzYXguU0FYUGFyc2VyID0gU0FYUGFyc2VyXG4gIHNheC5TQVhTdHJlYW0gPSBTQVhTdHJlYW1cbiAgc2F4LmNyZWF0ZVN0cmVhbSA9IGNyZWF0ZVN0cmVhbVxuXG4gIC8vIFdoZW4gd2UgcGFzcyB0aGUgTUFYX0JVRkZFUl9MRU5HVEggcG9zaXRpb24sIHN0YXJ0IGNoZWNraW5nIGZvciBidWZmZXIgb3ZlcnJ1bnMuXG4gIC8vIFdoZW4gd2UgY2hlY2ssIHNjaGVkdWxlIHRoZSBuZXh0IGNoZWNrIGZvciBNQVhfQlVGRkVSX0xFTkdUSCAtIChtYXgoYnVmZmVyIGxlbmd0aHMpKSxcbiAgLy8gc2luY2UgdGhhdCdzIHRoZSBlYXJsaWVzdCB0aGF0IGEgYnVmZmVyIG92ZXJydW4gY291bGQgb2NjdXIuICBUaGlzIHdheSwgY2hlY2tzIGFyZVxuICAvLyBhcyByYXJlIGFzIHJlcXVpcmVkLCBidXQgYXMgb2Z0ZW4gYXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBuZXZlciBjcm9zc2luZyB0aGlzIGJvdW5kLlxuICAvLyBGdXJ0aGVybW9yZSwgYnVmZmVycyBhcmUgb25seSB0ZXN0ZWQgYXQgbW9zdCBvbmNlIHBlciB3cml0ZSgpLCBzbyBwYXNzaW5nIGEgdmVyeVxuICAvLyBsYXJnZSBzdHJpbmcgaW50byB3cml0ZSgpIG1pZ2h0IGhhdmUgdW5kZXNpcmFibGUgZWZmZWN0cywgYnV0IHRoaXMgaXMgbWFuYWdlYWJsZSBieVxuICAvLyB0aGUgY2FsbGVyLCBzbyBpdCBpcyBhc3N1bWVkIHRvIGJlIHNhZmUuICBUaHVzLCBhIGNhbGwgdG8gd3JpdGUoKSBtYXksIGluIHRoZSBleHRyZW1lXG4gIC8vIGVkZ2UgY2FzZSwgcmVzdWx0IGluIGNyZWF0aW5nIGF0IG1vc3Qgb25lIGNvbXBsZXRlIGNvcHkgb2YgdGhlIHN0cmluZyBwYXNzZWQgaW4uXG4gIC8vIFNldCB0byBJbmZpbml0eSB0byBoYXZlIHVubGltaXRlZCBidWZmZXJzLlxuICBzYXguTUFYX0JVRkZFUl9MRU5HVEggPSA2NCAqIDEwMjRcblxuICB2YXIgYnVmZmVycyA9IFtcbiAgICAnY29tbWVudCcsICdzZ21sRGVjbCcsICd0ZXh0Tm9kZScsICd0YWdOYW1lJywgJ2RvY3R5cGUnLFxuICAgICdwcm9jSW5zdE5hbWUnLCAncHJvY0luc3RCb2R5JywgJ2VudGl0eScsICdhdHRyaWJOYW1lJyxcbiAgICAnYXR0cmliVmFsdWUnLCAnY2RhdGEnLCAnc2NyaXB0J1xuICBdXG5cbiAgc2F4LkVWRU5UUyA9IFtcbiAgICAndGV4dCcsXG4gICAgJ3Byb2Nlc3NpbmdpbnN0cnVjdGlvbicsXG4gICAgJ3NnbWxkZWNsYXJhdGlvbicsXG4gICAgJ2RvY3R5cGUnLFxuICAgICdjb21tZW50JyxcbiAgICAnb3BlbnRhZ3N0YXJ0JyxcbiAgICAnYXR0cmlidXRlJyxcbiAgICAnb3BlbnRhZycsXG4gICAgJ2Nsb3NldGFnJyxcbiAgICAnb3BlbmNkYXRhJyxcbiAgICAnY2RhdGEnLFxuICAgICdjbG9zZWNkYXRhJyxcbiAgICAnZXJyb3InLFxuICAgICdlbmQnLFxuICAgICdyZWFkeScsXG4gICAgJ3NjcmlwdCcsXG4gICAgJ29wZW5uYW1lc3BhY2UnLFxuICAgICdjbG9zZW5hbWVzcGFjZSdcbiAgXVxuXG4gIGZ1bmN0aW9uIFNBWFBhcnNlciAoc3RyaWN0LCBvcHQpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0FYUGFyc2VyKSkge1xuICAgICAgcmV0dXJuIG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpXG4gICAgfVxuXG4gICAgdmFyIHBhcnNlciA9IHRoaXNcbiAgICBjbGVhckJ1ZmZlcnMocGFyc2VyKVxuICAgIHBhcnNlci5xID0gcGFyc2VyLmMgPSAnJ1xuICAgIHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uID0gc2F4Lk1BWF9CVUZGRVJfTEVOR1RIXG4gICAgcGFyc2VyLm9wdCA9IG9wdCB8fCB7fVxuICAgIHBhcnNlci5vcHQubG93ZXJjYXNlID0gcGFyc2VyLm9wdC5sb3dlcmNhc2UgfHwgcGFyc2VyLm9wdC5sb3dlcmNhc2V0YWdzXG4gICAgcGFyc2VyLmxvb3NlQ2FzZSA9IHBhcnNlci5vcHQubG93ZXJjYXNlID8gJ3RvTG93ZXJDYXNlJyA6ICd0b1VwcGVyQ2FzZSdcbiAgICBwYXJzZXIudGFncyA9IFtdXG4gICAgcGFyc2VyLmNsb3NlZCA9IHBhcnNlci5jbG9zZWRSb290ID0gcGFyc2VyLnNhd1Jvb3QgPSBmYWxzZVxuICAgIHBhcnNlci50YWcgPSBwYXJzZXIuZXJyb3IgPSBudWxsXG4gICAgcGFyc2VyLnN0cmljdCA9ICEhc3RyaWN0XG4gICAgcGFyc2VyLm5vc2NyaXB0ID0gISEoc3RyaWN0IHx8IHBhcnNlci5vcHQubm9zY3JpcHQpXG4gICAgcGFyc2VyLnN0YXRlID0gUy5CRUdJTlxuICAgIHBhcnNlci5zdHJpY3RFbnRpdGllcyA9IHBhcnNlci5vcHQuc3RyaWN0RW50aXRpZXNcbiAgICBwYXJzZXIuRU5USVRJRVMgPSBwYXJzZXIuc3RyaWN0RW50aXRpZXMgPyBPYmplY3QuY3JlYXRlKHNheC5YTUxfRU5USVRJRVMpIDogT2JqZWN0LmNyZWF0ZShzYXguRU5USVRJRVMpXG4gICAgcGFyc2VyLmF0dHJpYkxpc3QgPSBbXVxuXG4gICAgLy8gbmFtZXNwYWNlcyBmb3JtIGEgcHJvdG90eXBlIGNoYWluLlxuICAgIC8vIGl0IGFsd2F5cyBwb2ludHMgYXQgdGhlIGN1cnJlbnQgdGFnLFxuICAgIC8vIHdoaWNoIHByb3RvcyB0byBpdHMgcGFyZW50IHRhZy5cbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgcGFyc2VyLm5zID0gT2JqZWN0LmNyZWF0ZShyb290TlMpXG4gICAgfVxuXG4gICAgLy8gbW9zdGx5IGp1c3QgZm9yIGVycm9yIHJlcG9ydGluZ1xuICAgIHBhcnNlci50cmFja1Bvc2l0aW9uID0gcGFyc2VyLm9wdC5wb3NpdGlvbiAhPT0gZmFsc2VcbiAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgIHBhcnNlci5wb3NpdGlvbiA9IHBhcnNlci5saW5lID0gcGFyc2VyLmNvbHVtbiA9IDBcbiAgICB9XG4gICAgZW1pdChwYXJzZXIsICdvbnJlYWR5JylcbiAgfVxuXG4gIGlmICghT2JqZWN0LmNyZWF0ZSkge1xuICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAobykge1xuICAgICAgZnVuY3Rpb24gRiAoKSB7fVxuICAgICAgRi5wcm90b3R5cGUgPSBvXG4gICAgICB2YXIgbmV3ZiA9IG5ldyBGKClcbiAgICAgIHJldHVybiBuZXdmXG4gICAgfVxuICB9XG5cbiAgaWYgKCFPYmplY3Qua2V5cykge1xuICAgIE9iamVjdC5rZXlzID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgIHZhciBhID0gW11cbiAgICAgIGZvciAodmFyIGkgaW4gbykgaWYgKG8uaGFzT3duUHJvcGVydHkoaSkpIGEucHVzaChpKVxuICAgICAgcmV0dXJuIGFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0J1ZmZlckxlbmd0aCAocGFyc2VyKSB7XG4gICAgdmFyIG1heEFsbG93ZWQgPSBNYXRoLm1heChzYXguTUFYX0JVRkZFUl9MRU5HVEgsIDEwKVxuICAgIHZhciBtYXhBY3R1YWwgPSAwXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGxlbiA9IHBhcnNlcltidWZmZXJzW2ldXS5sZW5ndGhcbiAgICAgIGlmIChsZW4gPiBtYXhBbGxvd2VkKSB7XG4gICAgICAgIC8vIFRleHQvY2RhdGEgbm9kZXMgY2FuIGdldCBiaWcsIGFuZCBzaW5jZSB0aGV5J3JlIGJ1ZmZlcmVkLFxuICAgICAgICAvLyB3ZSBjYW4gZ2V0IGhlcmUgdW5kZXIgbm9ybWFsIGNvbmRpdGlvbnMuXG4gICAgICAgIC8vIEF2b2lkIGlzc3VlcyBieSBlbWl0dGluZyB0aGUgdGV4dCBub2RlIG5vdyxcbiAgICAgICAgLy8gc28gYXQgbGVhc3QgaXQgd29uJ3QgZ2V0IGFueSBiaWdnZXIuXG4gICAgICAgIHN3aXRjaCAoYnVmZmVyc1tpXSkge1xuICAgICAgICAgIGNhc2UgJ3RleHROb2RlJzpcbiAgICAgICAgICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnY2RhdGEnOlxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jZGF0YScsIHBhcnNlci5jZGF0YSlcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSA9ICcnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnc2NyaXB0JzpcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2NyaXB0JywgcGFyc2VyLnNjcmlwdClcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgPSAnJ1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBlcnJvcihwYXJzZXIsICdNYXggYnVmZmVyIGxlbmd0aCBleGNlZWRlZDogJyArIGJ1ZmZlcnNbaV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1heEFjdHVhbCA9IE1hdGgubWF4KG1heEFjdHVhbCwgbGVuKVxuICAgIH1cbiAgICAvLyBzY2hlZHVsZSB0aGUgbmV4dCBjaGVjayBmb3IgdGhlIGVhcmxpZXN0IHBvc3NpYmxlIGJ1ZmZlciBvdmVycnVuLlxuICAgIHZhciBtID0gc2F4Lk1BWF9CVUZGRVJfTEVOR1RIIC0gbWF4QWN0dWFsXG4gICAgcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24gPSBtICsgcGFyc2VyLnBvc2l0aW9uXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhckJ1ZmZlcnMgKHBhcnNlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYnVmZmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHBhcnNlcltidWZmZXJzW2ldXSA9ICcnXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hCdWZmZXJzIChwYXJzZXIpIHtcbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIGlmIChwYXJzZXIuY2RhdGEgIT09ICcnKSB7XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNkYXRhJywgcGFyc2VyLmNkYXRhKVxuICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICB9XG4gICAgaWYgKHBhcnNlci5zY3JpcHQgIT09ICcnKSB7XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNjcmlwdCcsIHBhcnNlci5zY3JpcHQpXG4gICAgICBwYXJzZXIuc2NyaXB0ID0gJydcbiAgICB9XG4gIH1cblxuICBTQVhQYXJzZXIucHJvdG90eXBlID0ge1xuICAgIGVuZDogZnVuY3Rpb24gKCkgeyBlbmQodGhpcykgfSxcbiAgICB3cml0ZTogd3JpdGUsXG4gICAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7IHRoaXMuZXJyb3IgPSBudWxsOyByZXR1cm4gdGhpcyB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLndyaXRlKG51bGwpIH0sXG4gICAgZmx1c2g6IGZ1bmN0aW9uICgpIHsgZmx1c2hCdWZmZXJzKHRoaXMpIH1cbiAgfVxuXG4gIHZhciBTdHJlYW1cbiAgdHJ5IHtcbiAgICBTdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KS5TdHJlYW1cbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBTdHJlYW0gPSBmdW5jdGlvbiAoKSB7fVxuICB9XG5cbiAgdmFyIHN0cmVhbVdyYXBzID0gc2F4LkVWRU5UUy5maWx0ZXIoZnVuY3Rpb24gKGV2KSB7XG4gICAgcmV0dXJuIGV2ICE9PSAnZXJyb3InICYmIGV2ICE9PSAnZW5kJ1xuICB9KVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSAoc3RyaWN0LCBvcHQpIHtcbiAgICByZXR1cm4gbmV3IFNBWFN0cmVhbShzdHJpY3QsIG9wdClcbiAgfVxuXG4gIGZ1bmN0aW9uIFNBWFN0cmVhbSAoc3RyaWN0LCBvcHQpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0FYU3RyZWFtKSkge1xuICAgICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpXG4gICAgfVxuXG4gICAgU3RyZWFtLmFwcGx5KHRoaXMpXG5cbiAgICB0aGlzLl9wYXJzZXIgPSBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KVxuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlXG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWVcblxuICAgIHZhciBtZSA9IHRoaXNcblxuICAgIHRoaXMuX3BhcnNlci5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1lLmVtaXQoJ2VuZCcpXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICAgIG1lLmVtaXQoJ2Vycm9yJywgZXIpXG5cbiAgICAgIC8vIGlmIGRpZG4ndCB0aHJvdywgdGhlbiBtZWFucyBlcnJvciB3YXMgaGFuZGxlZC5cbiAgICAgIC8vIGdvIGFoZWFkIGFuZCBjbGVhciBlcnJvciwgc28gd2UgY2FuIHdyaXRlIGFnYWluLlxuICAgICAgbWUuX3BhcnNlci5lcnJvciA9IG51bGxcbiAgICB9XG5cbiAgICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuXG4gICAgc3RyZWFtV3JhcHMuZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZSwgJ29uJyArIGV2LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtZS5fcGFyc2VyWydvbicgKyBldl1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaCkge1xuICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgbWUucmVtb3ZlQWxsTGlzdGVuZXJzKGV2KVxuICAgICAgICAgICAgbWUuX3BhcnNlclsnb24nICsgZXZdID0gaFxuICAgICAgICAgICAgcmV0dXJuIGhcbiAgICAgICAgICB9XG4gICAgICAgICAgbWUub24oZXYsIGgpXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIFNBWFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN0cmVhbS5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IFNBWFN0cmVhbVxuICAgIH1cbiAgfSlcblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICAgICAgdmFyIFNEID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkuU3RyaW5nRGVjb2RlclxuICAgICAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFNEKCd1dGY4JylcbiAgICAgIH1cbiAgICAgIGRhdGEgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGRhdGEpXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VyLndyaXRlKGRhdGEudG9TdHJpbmcoKSlcbiAgICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHRoaXMud3JpdGUoY2h1bmspXG4gICAgfVxuICAgIHRoaXMuX3BhcnNlci5lbmQoKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBoYW5kbGVyKSB7XG4gICAgdmFyIG1lID0gdGhpc1xuICAgIGlmICghbWUuX3BhcnNlclsnb24nICsgZXZdICYmIHN0cmVhbVdyYXBzLmluZGV4T2YoZXYpICE9PSAtMSkge1xuICAgICAgbWUuX3BhcnNlclsnb24nICsgZXZdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBbYXJndW1lbnRzWzBdXSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgYXJncy5zcGxpY2UoMCwgMCwgZXYpXG4gICAgICAgIG1lLmVtaXQuYXBwbHkobWUsIGFyZ3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmVhbS5wcm90b3R5cGUub24uY2FsbChtZSwgZXYsIGhhbmRsZXIpXG4gIH1cblxuICAvLyB0aGlzIHJlYWxseSBuZWVkcyB0byBiZSByZXBsYWNlZCB3aXRoIGNoYXJhY3RlciBjbGFzc2VzLlxuICAvLyBYTUwgYWxsb3dzIGFsbCBtYW5uZXIgb2YgcmlkaWN1bG91cyBudW1iZXJzIGFuZCBkaWdpdHMuXG4gIHZhciBDREFUQSA9ICdbQ0RBVEFbJ1xuICB2YXIgRE9DVFlQRSA9ICdET0NUWVBFJ1xuICB2YXIgWE1MX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnXG4gIHZhciBYTUxOU19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nXG4gIHZhciByb290TlMgPSB7IHhtbDogWE1MX05BTUVTUEFDRSwgeG1sbnM6IFhNTE5TX05BTUVTUEFDRSB9XG5cbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVN0YXJ0Q2hhclxuICAvLyBUaGlzIGltcGxlbWVudGF0aW9uIHdvcmtzIG9uIHN0cmluZ3MsIGEgc2luZ2xlIGNoYXJhY3RlciBhdCBhIHRpbWVcbiAgLy8gYXMgc3VjaCwgaXQgY2Fubm90IGV2ZXIgc3VwcG9ydCBhc3RyYWwtcGxhbmUgY2hhcmFjdGVycyAoMTAwMDAtRUZGRkYpXG4gIC8vIHdpdGhvdXQgYSBzaWduaWZpY2FudCBicmVha2luZyBjaGFuZ2UgdG8gZWl0aGVyIHRoaXMgIHBhcnNlciwgb3IgdGhlXG4gIC8vIEphdmFTY3JpcHQgbGFuZ3VhZ2UuICBJbXBsZW1lbnRhdGlvbiBvZiBhbiBlbW9qaS1jYXBhYmxlIHhtbCBwYXJzZXJcbiAgLy8gaXMgbGVmdCBhcyBhbiBleGVyY2lzZSBmb3IgdGhlIHJlYWRlci5cbiAgdmFyIG5hbWVTdGFydCA9IC9bOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdL1xuXG4gIHZhciBuYW1lQm9keSA9IC9bOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwLlxcZC1dL1xuXG4gIHZhciBlbnRpdHlTdGFydCA9IC9bIzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS9cbiAgdmFyIGVudGl0eUJvZHkgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDAuXFxkLV0vXG5cbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChjKSB7XG4gICAgcmV0dXJuIGMgPT09ICcgJyB8fCBjID09PSAnXFxuJyB8fCBjID09PSAnXFxyJyB8fCBjID09PSAnXFx0J1xuICB9XG5cbiAgZnVuY3Rpb24gaXNRdW90ZSAoYykge1xuICAgIHJldHVybiBjID09PSAnXCInIHx8IGMgPT09ICdcXCcnXG4gIH1cblxuICBmdW5jdGlvbiBpc0F0dHJpYkVuZCAoYykge1xuICAgIHJldHVybiBjID09PSAnPicgfHwgaXNXaGl0ZXNwYWNlKGMpXG4gIH1cblxuICBmdW5jdGlvbiBpc01hdGNoIChyZWdleCwgYykge1xuICAgIHJldHVybiByZWdleC50ZXN0KGMpXG4gIH1cblxuICBmdW5jdGlvbiBub3RNYXRjaCAocmVnZXgsIGMpIHtcbiAgICByZXR1cm4gIWlzTWF0Y2gocmVnZXgsIGMpXG4gIH1cblxuICB2YXIgUyA9IDBcbiAgc2F4LlNUQVRFID0ge1xuICAgIEJFR0lOOiBTKyssIC8vIGxlYWRpbmcgYnl0ZSBvcmRlciBtYXJrIG9yIHdoaXRlc3BhY2VcbiAgICBCRUdJTl9XSElURVNQQUNFOiBTKyssIC8vIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgIFRFWFQ6IFMrKywgLy8gZ2VuZXJhbCBzdHVmZlxuICAgIFRFWFRfRU5USVRZOiBTKyssIC8vICZhbXAgYW5kIHN1Y2guXG4gICAgT1BFTl9XQUtBOiBTKyssIC8vIDxcbiAgICBTR01MX0RFQ0w6IFMrKywgLy8gPCFCTEFSR1xuICAgIFNHTUxfREVDTF9RVU9URUQ6IFMrKywgLy8gPCFCTEFSRyBmb28gXCJiYXJcbiAgICBET0NUWVBFOiBTKyssIC8vIDwhRE9DVFlQRVxuICAgIERPQ1RZUEVfUVVPVEVEOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFxuICAgIERPQ1RZUEVfRFREOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFwiIFsgLi4uXG4gICAgRE9DVFlQRV9EVERfUVVPVEVEOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFwiIFsgXCJmb29cbiAgICBDT01NRU5UX1NUQVJUSU5HOiBTKyssIC8vIDwhLVxuICAgIENPTU1FTlQ6IFMrKywgLy8gPCEtLVxuICAgIENPTU1FTlRfRU5ESU5HOiBTKyssIC8vIDwhLS0gYmxhaCAtXG4gICAgQ09NTUVOVF9FTkRFRDogUysrLCAvLyA8IS0tIGJsYWggLS1cbiAgICBDREFUQTogUysrLCAvLyA8IVtDREFUQVsgc29tZXRoaW5nXG4gICAgQ0RBVEFfRU5ESU5HOiBTKyssIC8vIF1cbiAgICBDREFUQV9FTkRJTkdfMjogUysrLCAvLyBdXVxuICAgIFBST0NfSU5TVDogUysrLCAvLyA8P2hpXG4gICAgUFJPQ19JTlNUX0JPRFk6IFMrKywgLy8gPD9oaSB0aGVyZVxuICAgIFBST0NfSU5TVF9FTkRJTkc6IFMrKywgLy8gPD9oaSBcInRoZXJlXCIgP1xuICAgIE9QRU5fVEFHOiBTKyssIC8vIDxzdHJvbmdcbiAgICBPUEVOX1RBR19TTEFTSDogUysrLCAvLyA8c3Ryb25nIC9cbiAgICBBVFRSSUI6IFMrKywgLy8gPGFcbiAgICBBVFRSSUJfTkFNRTogUysrLCAvLyA8YSBmb29cbiAgICBBVFRSSUJfTkFNRV9TQVdfV0hJVEU6IFMrKywgLy8gPGEgZm9vIF9cbiAgICBBVFRSSUJfVkFMVUU6IFMrKywgLy8gPGEgZm9vPVxuICAgIEFUVFJJQl9WQUxVRV9RVU9URUQ6IFMrKywgLy8gPGEgZm9vPVwiYmFyXG4gICAgQVRUUklCX1ZBTFVFX0NMT1NFRDogUysrLCAvLyA8YSBmb289XCJiYXJcIlxuICAgIEFUVFJJQl9WQUxVRV9VTlFVT1RFRDogUysrLCAvLyA8YSBmb289YmFyXG4gICAgQVRUUklCX1ZBTFVFX0VOVElUWV9ROiBTKyssIC8vIDxmb28gYmFyPVwiJnF1b3Q7XCJcbiAgICBBVFRSSUJfVkFMVUVfRU5USVRZX1U6IFMrKywgLy8gPGZvbyBiYXI9JnF1b3RcbiAgICBDTE9TRV9UQUc6IFMrKywgLy8gPC9hXG4gICAgQ0xPU0VfVEFHX1NBV19XSElURTogUysrLCAvLyA8L2EgICA+XG4gICAgU0NSSVBUOiBTKyssIC8vIDxzY3JpcHQ+IC4uLlxuICAgIFNDUklQVF9FTkRJTkc6IFMrKyAvLyA8c2NyaXB0PiAuLi4gPFxuICB9XG5cbiAgc2F4LlhNTF9FTlRJVElFUyA9IHtcbiAgICAnYW1wJzogJyYnLFxuICAgICdndCc6ICc+JyxcbiAgICAnbHQnOiAnPCcsXG4gICAgJ3F1b3QnOiAnXCInLFxuICAgICdhcG9zJzogXCInXCJcbiAgfVxuXG4gIHNheC5FTlRJVElFUyA9IHtcbiAgICAnYW1wJzogJyYnLFxuICAgICdndCc6ICc+JyxcbiAgICAnbHQnOiAnPCcsXG4gICAgJ3F1b3QnOiAnXCInLFxuICAgICdhcG9zJzogXCInXCIsXG4gICAgJ0FFbGlnJzogMTk4LFxuICAgICdBYWN1dGUnOiAxOTMsXG4gICAgJ0FjaXJjJzogMTk0LFxuICAgICdBZ3JhdmUnOiAxOTIsXG4gICAgJ0FyaW5nJzogMTk3LFxuICAgICdBdGlsZGUnOiAxOTUsXG4gICAgJ0F1bWwnOiAxOTYsXG4gICAgJ0NjZWRpbCc6IDE5OSxcbiAgICAnRVRIJzogMjA4LFxuICAgICdFYWN1dGUnOiAyMDEsXG4gICAgJ0VjaXJjJzogMjAyLFxuICAgICdFZ3JhdmUnOiAyMDAsXG4gICAgJ0V1bWwnOiAyMDMsXG4gICAgJ0lhY3V0ZSc6IDIwNSxcbiAgICAnSWNpcmMnOiAyMDYsXG4gICAgJ0lncmF2ZSc6IDIwNCxcbiAgICAnSXVtbCc6IDIwNyxcbiAgICAnTnRpbGRlJzogMjA5LFxuICAgICdPYWN1dGUnOiAyMTEsXG4gICAgJ09jaXJjJzogMjEyLFxuICAgICdPZ3JhdmUnOiAyMTAsXG4gICAgJ09zbGFzaCc6IDIxNixcbiAgICAnT3RpbGRlJzogMjEzLFxuICAgICdPdW1sJzogMjE0LFxuICAgICdUSE9STic6IDIyMixcbiAgICAnVWFjdXRlJzogMjE4LFxuICAgICdVY2lyYyc6IDIxOSxcbiAgICAnVWdyYXZlJzogMjE3LFxuICAgICdVdW1sJzogMjIwLFxuICAgICdZYWN1dGUnOiAyMjEsXG4gICAgJ2FhY3V0ZSc6IDIyNSxcbiAgICAnYWNpcmMnOiAyMjYsXG4gICAgJ2FlbGlnJzogMjMwLFxuICAgICdhZ3JhdmUnOiAyMjQsXG4gICAgJ2FyaW5nJzogMjI5LFxuICAgICdhdGlsZGUnOiAyMjcsXG4gICAgJ2F1bWwnOiAyMjgsXG4gICAgJ2NjZWRpbCc6IDIzMSxcbiAgICAnZWFjdXRlJzogMjMzLFxuICAgICdlY2lyYyc6IDIzNCxcbiAgICAnZWdyYXZlJzogMjMyLFxuICAgICdldGgnOiAyNDAsXG4gICAgJ2V1bWwnOiAyMzUsXG4gICAgJ2lhY3V0ZSc6IDIzNyxcbiAgICAnaWNpcmMnOiAyMzgsXG4gICAgJ2lncmF2ZSc6IDIzNixcbiAgICAnaXVtbCc6IDIzOSxcbiAgICAnbnRpbGRlJzogMjQxLFxuICAgICdvYWN1dGUnOiAyNDMsXG4gICAgJ29jaXJjJzogMjQ0LFxuICAgICdvZ3JhdmUnOiAyNDIsXG4gICAgJ29zbGFzaCc6IDI0OCxcbiAgICAnb3RpbGRlJzogMjQ1LFxuICAgICdvdW1sJzogMjQ2LFxuICAgICdzemxpZyc6IDIyMyxcbiAgICAndGhvcm4nOiAyNTQsXG4gICAgJ3VhY3V0ZSc6IDI1MCxcbiAgICAndWNpcmMnOiAyNTEsXG4gICAgJ3VncmF2ZSc6IDI0OSxcbiAgICAndXVtbCc6IDI1MixcbiAgICAneWFjdXRlJzogMjUzLFxuICAgICd5dW1sJzogMjU1LFxuICAgICdjb3B5JzogMTY5LFxuICAgICdyZWcnOiAxNzQsXG4gICAgJ25ic3AnOiAxNjAsXG4gICAgJ2lleGNsJzogMTYxLFxuICAgICdjZW50JzogMTYyLFxuICAgICdwb3VuZCc6IDE2MyxcbiAgICAnY3VycmVuJzogMTY0LFxuICAgICd5ZW4nOiAxNjUsXG4gICAgJ2JydmJhcic6IDE2NixcbiAgICAnc2VjdCc6IDE2NyxcbiAgICAndW1sJzogMTY4LFxuICAgICdvcmRmJzogMTcwLFxuICAgICdsYXF1byc6IDE3MSxcbiAgICAnbm90JzogMTcyLFxuICAgICdzaHknOiAxNzMsXG4gICAgJ21hY3InOiAxNzUsXG4gICAgJ2RlZyc6IDE3NixcbiAgICAncGx1c21uJzogMTc3LFxuICAgICdzdXAxJzogMTg1LFxuICAgICdzdXAyJzogMTc4LFxuICAgICdzdXAzJzogMTc5LFxuICAgICdhY3V0ZSc6IDE4MCxcbiAgICAnbWljcm8nOiAxODEsXG4gICAgJ3BhcmEnOiAxODIsXG4gICAgJ21pZGRvdCc6IDE4MyxcbiAgICAnY2VkaWwnOiAxODQsXG4gICAgJ29yZG0nOiAxODYsXG4gICAgJ3JhcXVvJzogMTg3LFxuICAgICdmcmFjMTQnOiAxODgsXG4gICAgJ2ZyYWMxMic6IDE4OSxcbiAgICAnZnJhYzM0JzogMTkwLFxuICAgICdpcXVlc3QnOiAxOTEsXG4gICAgJ3RpbWVzJzogMjE1LFxuICAgICdkaXZpZGUnOiAyNDcsXG4gICAgJ09FbGlnJzogMzM4LFxuICAgICdvZWxpZyc6IDMzOSxcbiAgICAnU2Nhcm9uJzogMzUyLFxuICAgICdzY2Fyb24nOiAzNTMsXG4gICAgJ1l1bWwnOiAzNzYsXG4gICAgJ2Zub2YnOiA0MDIsXG4gICAgJ2NpcmMnOiA3MTAsXG4gICAgJ3RpbGRlJzogNzMyLFxuICAgICdBbHBoYSc6IDkxMyxcbiAgICAnQmV0YSc6IDkxNCxcbiAgICAnR2FtbWEnOiA5MTUsXG4gICAgJ0RlbHRhJzogOTE2LFxuICAgICdFcHNpbG9uJzogOTE3LFxuICAgICdaZXRhJzogOTE4LFxuICAgICdFdGEnOiA5MTksXG4gICAgJ1RoZXRhJzogOTIwLFxuICAgICdJb3RhJzogOTIxLFxuICAgICdLYXBwYSc6IDkyMixcbiAgICAnTGFtYmRhJzogOTIzLFxuICAgICdNdSc6IDkyNCxcbiAgICAnTnUnOiA5MjUsXG4gICAgJ1hpJzogOTI2LFxuICAgICdPbWljcm9uJzogOTI3LFxuICAgICdQaSc6IDkyOCxcbiAgICAnUmhvJzogOTI5LFxuICAgICdTaWdtYSc6IDkzMSxcbiAgICAnVGF1JzogOTMyLFxuICAgICdVcHNpbG9uJzogOTMzLFxuICAgICdQaGknOiA5MzQsXG4gICAgJ0NoaSc6IDkzNSxcbiAgICAnUHNpJzogOTM2LFxuICAgICdPbWVnYSc6IDkzNyxcbiAgICAnYWxwaGEnOiA5NDUsXG4gICAgJ2JldGEnOiA5NDYsXG4gICAgJ2dhbW1hJzogOTQ3LFxuICAgICdkZWx0YSc6IDk0OCxcbiAgICAnZXBzaWxvbic6IDk0OSxcbiAgICAnemV0YSc6IDk1MCxcbiAgICAnZXRhJzogOTUxLFxuICAgICd0aGV0YSc6IDk1MixcbiAgICAnaW90YSc6IDk1MyxcbiAgICAna2FwcGEnOiA5NTQsXG4gICAgJ2xhbWJkYSc6IDk1NSxcbiAgICAnbXUnOiA5NTYsXG4gICAgJ251JzogOTU3LFxuICAgICd4aSc6IDk1OCxcbiAgICAnb21pY3Jvbic6IDk1OSxcbiAgICAncGknOiA5NjAsXG4gICAgJ3Jobyc6IDk2MSxcbiAgICAnc2lnbWFmJzogOTYyLFxuICAgICdzaWdtYSc6IDk2MyxcbiAgICAndGF1JzogOTY0LFxuICAgICd1cHNpbG9uJzogOTY1LFxuICAgICdwaGknOiA5NjYsXG4gICAgJ2NoaSc6IDk2NyxcbiAgICAncHNpJzogOTY4LFxuICAgICdvbWVnYSc6IDk2OSxcbiAgICAndGhldGFzeW0nOiA5NzcsXG4gICAgJ3Vwc2loJzogOTc4LFxuICAgICdwaXYnOiA5ODIsXG4gICAgJ2Vuc3AnOiA4MTk0LFxuICAgICdlbXNwJzogODE5NSxcbiAgICAndGhpbnNwJzogODIwMSxcbiAgICAnenduaic6IDgyMDQsXG4gICAgJ3p3aic6IDgyMDUsXG4gICAgJ2xybSc6IDgyMDYsXG4gICAgJ3JsbSc6IDgyMDcsXG4gICAgJ25kYXNoJzogODIxMSxcbiAgICAnbWRhc2gnOiA4MjEyLFxuICAgICdsc3F1byc6IDgyMTYsXG4gICAgJ3JzcXVvJzogODIxNyxcbiAgICAnc2JxdW8nOiA4MjE4LFxuICAgICdsZHF1byc6IDgyMjAsXG4gICAgJ3JkcXVvJzogODIyMSxcbiAgICAnYmRxdW8nOiA4MjIyLFxuICAgICdkYWdnZXInOiA4MjI0LFxuICAgICdEYWdnZXInOiA4MjI1LFxuICAgICdidWxsJzogODIyNixcbiAgICAnaGVsbGlwJzogODIzMCxcbiAgICAncGVybWlsJzogODI0MCxcbiAgICAncHJpbWUnOiA4MjQyLFxuICAgICdQcmltZSc6IDgyNDMsXG4gICAgJ2xzYXF1byc6IDgyNDksXG4gICAgJ3JzYXF1byc6IDgyNTAsXG4gICAgJ29saW5lJzogODI1NCxcbiAgICAnZnJhc2wnOiA4MjYwLFxuICAgICdldXJvJzogODM2NCxcbiAgICAnaW1hZ2UnOiA4NDY1LFxuICAgICd3ZWllcnAnOiA4NDcyLFxuICAgICdyZWFsJzogODQ3NixcbiAgICAndHJhZGUnOiA4NDgyLFxuICAgICdhbGVmc3ltJzogODUwMSxcbiAgICAnbGFycic6IDg1OTIsXG4gICAgJ3VhcnInOiA4NTkzLFxuICAgICdyYXJyJzogODU5NCxcbiAgICAnZGFycic6IDg1OTUsXG4gICAgJ2hhcnInOiA4NTk2LFxuICAgICdjcmFycic6IDg2MjksXG4gICAgJ2xBcnInOiA4NjU2LFxuICAgICd1QXJyJzogODY1NyxcbiAgICAnckFycic6IDg2NTgsXG4gICAgJ2RBcnInOiA4NjU5LFxuICAgICdoQXJyJzogODY2MCxcbiAgICAnZm9yYWxsJzogODcwNCxcbiAgICAncGFydCc6IDg3MDYsXG4gICAgJ2V4aXN0JzogODcwNyxcbiAgICAnZW1wdHknOiA4NzA5LFxuICAgICduYWJsYSc6IDg3MTEsXG4gICAgJ2lzaW4nOiA4NzEyLFxuICAgICdub3Rpbic6IDg3MTMsXG4gICAgJ25pJzogODcxNSxcbiAgICAncHJvZCc6IDg3MTksXG4gICAgJ3N1bSc6IDg3MjEsXG4gICAgJ21pbnVzJzogODcyMixcbiAgICAnbG93YXN0JzogODcyNyxcbiAgICAncmFkaWMnOiA4NzMwLFxuICAgICdwcm9wJzogODczMyxcbiAgICAnaW5maW4nOiA4NzM0LFxuICAgICdhbmcnOiA4NzM2LFxuICAgICdhbmQnOiA4NzQzLFxuICAgICdvcic6IDg3NDQsXG4gICAgJ2NhcCc6IDg3NDUsXG4gICAgJ2N1cCc6IDg3NDYsXG4gICAgJ2ludCc6IDg3NDcsXG4gICAgJ3RoZXJlNCc6IDg3NTYsXG4gICAgJ3NpbSc6IDg3NjQsXG4gICAgJ2NvbmcnOiA4NzczLFxuICAgICdhc3ltcCc6IDg3NzYsXG4gICAgJ25lJzogODgwMCxcbiAgICAnZXF1aXYnOiA4ODAxLFxuICAgICdsZSc6IDg4MDQsXG4gICAgJ2dlJzogODgwNSxcbiAgICAnc3ViJzogODgzNCxcbiAgICAnc3VwJzogODgzNSxcbiAgICAnbnN1Yic6IDg4MzYsXG4gICAgJ3N1YmUnOiA4ODM4LFxuICAgICdzdXBlJzogODgzOSxcbiAgICAnb3BsdXMnOiA4ODUzLFxuICAgICdvdGltZXMnOiA4ODU1LFxuICAgICdwZXJwJzogODg2OSxcbiAgICAnc2RvdCc6IDg5MDEsXG4gICAgJ2xjZWlsJzogODk2OCxcbiAgICAncmNlaWwnOiA4OTY5LFxuICAgICdsZmxvb3InOiA4OTcwLFxuICAgICdyZmxvb3InOiA4OTcxLFxuICAgICdsYW5nJzogOTAwMSxcbiAgICAncmFuZyc6IDkwMDIsXG4gICAgJ2xveic6IDk2NzQsXG4gICAgJ3NwYWRlcyc6IDk4MjQsXG4gICAgJ2NsdWJzJzogOTgyNyxcbiAgICAnaGVhcnRzJzogOTgyOSxcbiAgICAnZGlhbXMnOiA5ODMwXG4gIH1cblxuICBPYmplY3Qua2V5cyhzYXguRU5USVRJRVMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlID0gc2F4LkVOVElUSUVTW2tleV1cbiAgICB2YXIgcyA9IHR5cGVvZiBlID09PSAnbnVtYmVyJyA/IFN0cmluZy5mcm9tQ2hhckNvZGUoZSkgOiBlXG4gICAgc2F4LkVOVElUSUVTW2tleV0gPSBzXG4gIH0pXG5cbiAgZm9yICh2YXIgcyBpbiBzYXguU1RBVEUpIHtcbiAgICBzYXguU1RBVEVbc2F4LlNUQVRFW3NdXSA9IHNcbiAgfVxuXG4gIC8vIHNob3J0aGFuZFxuICBTID0gc2F4LlNUQVRFXG5cbiAgZnVuY3Rpb24gZW1pdCAocGFyc2VyLCBldmVudCwgZGF0YSkge1xuICAgIHBhcnNlcltldmVudF0gJiYgcGFyc2VyW2V2ZW50XShkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdE5vZGUgKHBhcnNlciwgbm9kZVR5cGUsIGRhdGEpIHtcbiAgICBpZiAocGFyc2VyLnRleHROb2RlKSBjbG9zZVRleHQocGFyc2VyKVxuICAgIGVtaXQocGFyc2VyLCBub2RlVHlwZSwgZGF0YSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlVGV4dCAocGFyc2VyKSB7XG4gICAgcGFyc2VyLnRleHROb2RlID0gdGV4dG9wdHMocGFyc2VyLm9wdCwgcGFyc2VyLnRleHROb2RlKVxuICAgIGlmIChwYXJzZXIudGV4dE5vZGUpIGVtaXQocGFyc2VyLCAnb250ZXh0JywgcGFyc2VyLnRleHROb2RlKVxuICAgIHBhcnNlci50ZXh0Tm9kZSA9ICcnXG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0b3B0cyAob3B0LCB0ZXh0KSB7XG4gICAgaWYgKG9wdC50cmltKSB0ZXh0ID0gdGV4dC50cmltKClcbiAgICBpZiAob3B0Lm5vcm1hbGl6ZSkgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yIChwYXJzZXIsIGVyKSB7XG4gICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgIGVyICs9ICdcXG5MaW5lOiAnICsgcGFyc2VyLmxpbmUgK1xuICAgICAgICAnXFxuQ29sdW1uOiAnICsgcGFyc2VyLmNvbHVtbiArXG4gICAgICAgICdcXG5DaGFyOiAnICsgcGFyc2VyLmNcbiAgICB9XG4gICAgZXIgPSBuZXcgRXJyb3IoZXIpXG4gICAgcGFyc2VyLmVycm9yID0gZXJcbiAgICBlbWl0KHBhcnNlciwgJ29uZXJyb3InLCBlcilcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBmdW5jdGlvbiBlbmQgKHBhcnNlcikge1xuICAgIGlmIChwYXJzZXIuc2F3Um9vdCAmJiAhcGFyc2VyLmNsb3NlZFJvb3QpIHN0cmljdEZhaWwocGFyc2VyLCAnVW5jbG9zZWQgcm9vdCB0YWcnKVxuICAgIGlmICgocGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOKSAmJlxuICAgICAgKHBhcnNlci5zdGF0ZSAhPT0gUy5CRUdJTl9XSElURVNQQUNFKSAmJlxuICAgICAgKHBhcnNlci5zdGF0ZSAhPT0gUy5URVhUKSkge1xuICAgICAgZXJyb3IocGFyc2VyLCAnVW5leHBlY3RlZCBlbmQnKVxuICAgIH1cbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIHBhcnNlci5jID0gJydcbiAgICBwYXJzZXIuY2xvc2VkID0gdHJ1ZVxuICAgIGVtaXQocGFyc2VyLCAnb25lbmQnKVxuICAgIFNBWFBhcnNlci5jYWxsKHBhcnNlciwgcGFyc2VyLnN0cmljdCwgcGFyc2VyLm9wdClcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBmdW5jdGlvbiBzdHJpY3RGYWlsIChwYXJzZXIsIG1lc3NhZ2UpIHtcbiAgICBpZiAodHlwZW9mIHBhcnNlciAhPT0gJ29iamVjdCcgfHwgIShwYXJzZXIgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBjYWxsIHRvIHN0cmljdEZhaWwnKVxuICAgIH1cbiAgICBpZiAocGFyc2VyLnN0cmljdCkge1xuICAgICAgZXJyb3IocGFyc2VyLCBtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1RhZyAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIuc3RyaWN0KSBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci50YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKClcbiAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgdmFyIHRhZyA9IHBhcnNlci50YWcgPSB7IG5hbWU6IHBhcnNlci50YWdOYW1lLCBhdHRyaWJ1dGVzOiB7fSB9XG5cbiAgICAvLyB3aWxsIGJlIG92ZXJyaWRkZW4gaWYgdGFnIGNvbnRhaWxzIGFuIHhtbG5zPVwiZm9vXCIgb3IgeG1sbnM6Zm9vPVwiYmFyXCJcbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgdGFnLm5zID0gcGFyZW50Lm5zXG4gICAgfVxuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW50YWdzdGFydCcsIHRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIHFuYW1lIChuYW1lLCBhdHRyaWJ1dGUpIHtcbiAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZignOicpXG4gICAgdmFyIHF1YWxOYW1lID0gaSA8IDAgPyBbICcnLCBuYW1lIF0gOiBuYW1lLnNwbGl0KCc6JylcbiAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWVbMF1cbiAgICB2YXIgbG9jYWwgPSBxdWFsTmFtZVsxXVxuXG4gICAgLy8gPHggXCJ4bWxuc1wiPVwiaHR0cDovL2Zvb1wiPlxuICAgIGlmIChhdHRyaWJ1dGUgJiYgbmFtZSA9PT0gJ3htbG5zJykge1xuICAgICAgcHJlZml4ID0gJ3htbG5zJ1xuICAgICAgbG9jYWwgPSAnJ1xuICAgIH1cblxuICAgIHJldHVybiB7IHByZWZpeDogcHJlZml4LCBsb2NhbDogbG9jYWwgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cmliIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHtcbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYk5hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKVxuICAgIH1cblxuICAgIGlmIChwYXJzZXIuYXR0cmliTGlzdC5pbmRleE9mKHBhcnNlci5hdHRyaWJOYW1lKSAhPT0gLTEgfHxcbiAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShwYXJzZXIuYXR0cmliTmFtZSkpIHtcbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIuYXR0cmliTmFtZSwgdHJ1ZSlcbiAgICAgIHZhciBwcmVmaXggPSBxbi5wcmVmaXhcbiAgICAgIHZhciBsb2NhbCA9IHFuLmxvY2FsXG5cbiAgICAgIGlmIChwcmVmaXggPT09ICd4bWxucycpIHtcbiAgICAgICAgLy8gbmFtZXNwYWNlIGJpbmRpbmcgYXR0cmlidXRlLiBwdXNoIHRoZSBiaW5kaW5nIGludG8gc2NvcGVcbiAgICAgICAgaWYgKGxvY2FsID09PSAneG1sJyAmJiBwYXJzZXIuYXR0cmliVmFsdWUgIT09IFhNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlcixcbiAgICAgICAgICAgICd4bWw6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvICcgKyBYTUxfTkFNRVNQQUNFICsgJ1xcbicgK1xuICAgICAgICAgICAgJ0FjdHVhbDogJyArIHBhcnNlci5hdHRyaWJWYWx1ZSlcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbCA9PT0gJ3htbG5zJyAmJiBwYXJzZXIuYXR0cmliVmFsdWUgIT09IFhNTE5TX05BTUVTUEFDRSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgJ3htbG5zOiBwcmVmaXggbXVzdCBiZSBib3VuZCB0byAnICsgWE1MTlNfTkFNRVNQQUNFICsgJ1xcbicgK1xuICAgICAgICAgICAgJ0FjdHVhbDogJyArIHBhcnNlci5hdHRyaWJWYWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZ1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgICAgICBpZiAodGFnLm5zID09PSBwYXJlbnQubnMpIHtcbiAgICAgICAgICAgIHRhZy5ucyA9IE9iamVjdC5jcmVhdGUocGFyZW50Lm5zKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0YWcubnNbbG9jYWxdID0gcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZGVmZXIgb25hdHRyaWJ1dGUgZXZlbnRzIHVudGlsIGFsbCBhdHRyaWJ1dGVzIGhhdmUgYmVlbiBzZWVuXG4gICAgICAvLyBzbyBhbnkgbmV3IGJpbmRpbmdzIGNhbiB0YWtlIGVmZmVjdC4gcHJlc2VydmUgYXR0cmlidXRlIG9yZGVyXG4gICAgICAvLyBzbyBkZWZlcnJlZCBldmVudHMgY2FuIGJlIGVtaXR0ZWQgaW4gZG9jdW1lbnQgb3JkZXJcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0LnB1c2goW3BhcnNlci5hdHRyaWJOYW1lLCBwYXJzZXIuYXR0cmliVmFsdWVdKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBub24teG1sbnMgbW9kZSwgd2UgY2FuIGVtaXQgdGhlIGV2ZW50IHJpZ2h0IGF3YXlcbiAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1twYXJzZXIuYXR0cmliTmFtZV0gPSBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywge1xuICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgdmFsdWU6IHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuVGFnIChwYXJzZXIsIHNlbGZDbG9zaW5nKSB7XG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIC8vIGVtaXQgbmFtZXNwYWNlIGJpbmRpbmcgZXZlbnRzXG4gICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZ1xuXG4gICAgICAvLyBhZGQgbmFtZXNwYWNlIGluZm8gdG8gdGFnXG4gICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIudGFnTmFtZSlcbiAgICAgIHRhZy5wcmVmaXggPSBxbi5wcmVmaXhcbiAgICAgIHRhZy5sb2NhbCA9IHFuLmxvY2FsXG4gICAgICB0YWcudXJpID0gdGFnLm5zW3FuLnByZWZpeF0gfHwgJydcblxuICAgICAgaWYgKHRhZy5wcmVmaXggJiYgIXRhZy51cmkpIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICcgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHBhcnNlci50YWdOYW1lKSlcbiAgICAgICAgdGFnLnVyaSA9IHFuLnByZWZpeFxuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgICBpZiAodGFnLm5zICYmIHBhcmVudC5ucyAhPT0gdGFnLm5zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3Blbm5hbWVzcGFjZScsIHtcbiAgICAgICAgICAgIHByZWZpeDogcCxcbiAgICAgICAgICAgIHVyaTogdGFnLm5zW3BdXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIGRlZmVycmVkIG9uYXR0cmlidXRlIGV2ZW50c1xuICAgICAgLy8gTm90ZTogZG8gbm90IGFwcGx5IGRlZmF1bHQgbnMgdG8gYXR0cmlidXRlczpcbiAgICAgIC8vICAgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC1uYW1lcy8jZGVmYXVsdGluZ1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIG52ID0gcGFyc2VyLmF0dHJpYkxpc3RbaV1cbiAgICAgICAgdmFyIG5hbWUgPSBudlswXVxuICAgICAgICB2YXIgdmFsdWUgPSBudlsxXVxuICAgICAgICB2YXIgcXVhbE5hbWUgPSBxbmFtZShuYW1lLCB0cnVlKVxuICAgICAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWUucHJlZml4XG4gICAgICAgIHZhciBsb2NhbCA9IHF1YWxOYW1lLmxvY2FsXG4gICAgICAgIHZhciB1cmkgPSBwcmVmaXggPT09ICcnID8gJycgOiAodGFnLm5zW3ByZWZpeF0gfHwgJycpXG4gICAgICAgIHZhciBhID0ge1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgIGxvY2FsOiBsb2NhbCxcbiAgICAgICAgICB1cmk6IHVyaVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUncyBhbnkgYXR0cmlidXRlcyB3aXRoIGFuIHVuZGVmaW5lZCBuYW1lc3BhY2UsXG4gICAgICAgIC8vIHRoZW4gZmFpbCBvbiB0aGVtIG5vdy5cbiAgICAgICAgaWYgKHByZWZpeCAmJiBwcmVmaXggIT09ICd4bWxucycgJiYgIXVyaSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5ib3VuZCBuYW1lc3BhY2UgcHJlZml4OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByZWZpeCkpXG4gICAgICAgICAgYS51cmkgPSBwcmVmaXhcbiAgICAgICAgfVxuICAgICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbbmFtZV0gPSBhXG4gICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywgYSlcbiAgICAgIH1cbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICB9XG5cbiAgICBwYXJzZXIudGFnLmlzU2VsZkNsb3NpbmcgPSAhIXNlbGZDbG9zaW5nXG5cbiAgICAvLyBwcm9jZXNzIHRoZSB0YWdcbiAgICBwYXJzZXIuc2F3Um9vdCA9IHRydWVcbiAgICBwYXJzZXIudGFncy5wdXNoKHBhcnNlci50YWcpXG4gICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVudGFnJywgcGFyc2VyLnRhZylcbiAgICBpZiAoIXNlbGZDbG9zaW5nKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxzY3JpcHQ+IGluIG5vbi1zdHJpY3QgbW9kZS5cbiAgICAgIGlmICghcGFyc2VyLm5vc2NyaXB0ICYmIHBhcnNlci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzY3JpcHQnKSB7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIH1cbiAgICAgIHBhcnNlci50YWcgPSBudWxsXG4gICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgfVxuICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZVRhZyAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdXZWlyZCBlbXB0eSBjbG9zZSB0YWcuJylcbiAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSAnPC8+J1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgaWYgKHBhcnNlci50YWdOYW1lICE9PSAnc2NyaXB0Jykge1xuICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZSArICc+J1xuICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zY3JpcHQnLCBwYXJzZXIuc2NyaXB0KVxuICAgICAgcGFyc2VyLnNjcmlwdCA9ICcnXG4gICAgfVxuXG4gICAgLy8gZmlyc3QgbWFrZSBzdXJlIHRoYXQgdGhlIGNsb3NpbmcgdGFnIGFjdHVhbGx5IGV4aXN0cy5cbiAgICAvLyA8YT48Yj48L2M+PC9iPjwvYT4gd2lsbCBjbG9zZSBldmVyeXRoaW5nLCBvdGhlcndpc2UuXG4gICAgdmFyIHQgPSBwYXJzZXIudGFncy5sZW5ndGhcbiAgICB2YXIgdGFnTmFtZSA9IHBhcnNlci50YWdOYW1lXG4gICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICB0YWdOYW1lID0gdGFnTmFtZVtwYXJzZXIubG9vc2VDYXNlXSgpXG4gICAgfVxuICAgIHZhciBjbG9zZVRvID0gdGFnTmFtZVxuICAgIHdoaWxlICh0LS0pIHtcbiAgICAgIHZhciBjbG9zZSA9IHBhcnNlci50YWdzW3RdXG4gICAgICBpZiAoY2xvc2UubmFtZSAhPT0gY2xvc2VUbykge1xuICAgICAgICAvLyBmYWlsIHRoZSBmaXJzdCB0aW1lIGluIHN0cmljdCBtb2RlXG4gICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5leHBlY3RlZCBjbG9zZSB0YWcnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkaWRuJ3QgZmluZCBpdC4gIHdlIGFscmVhZHkgZmFpbGVkIGZvciBzdHJpY3QsIHNvIGp1c3QgYWJvcnQuXG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VubWF0Y2hlZCBjbG9zaW5nIHRhZzogJyArIHBhcnNlci50YWdOYW1lKVxuICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZSArICc+J1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcGFyc2VyLnRhZ05hbWUgPSB0YWdOYW1lXG4gICAgdmFyIHMgPSBwYXJzZXIudGFncy5sZW5ndGhcbiAgICB3aGlsZSAocy0tID4gdCkge1xuICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWcgPSBwYXJzZXIudGFncy5wb3AoKVxuICAgICAgcGFyc2VyLnRhZ05hbWUgPSBwYXJzZXIudGFnLm5hbWVcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2xvc2V0YWcnLCBwYXJzZXIudGFnTmFtZSlcblxuICAgICAgdmFyIHggPSB7fVxuICAgICAgZm9yICh2YXIgaSBpbiB0YWcubnMpIHtcbiAgICAgICAgeFtpXSA9IHRhZy5uc1tpXVxuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgICBpZiAocGFyc2VyLm9wdC54bWxucyAmJiB0YWcubnMgIT09IHBhcmVudC5ucykge1xuICAgICAgICAvLyByZW1vdmUgbmFtZXNwYWNlIGJpbmRpbmdzIGludHJvZHVjZWQgYnkgdGFnXG4gICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHZhciBuID0gdGFnLm5zW3BdXG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jbG9zZW5hbWVzcGFjZScsIHsgcHJlZml4OiBwLCB1cmk6IG4gfSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHQgPT09IDApIHBhcnNlci5jbG9zZWRSb290ID0gdHJ1ZVxuICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gcGFyc2VyLmF0dHJpYk5hbWUgPSAnJ1xuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW50aXR5IChwYXJzZXIpIHtcbiAgICB2YXIgZW50aXR5ID0gcGFyc2VyLmVudGl0eVxuICAgIHZhciBlbnRpdHlMQyA9IGVudGl0eS50b0xvd2VyQ2FzZSgpXG4gICAgdmFyIG51bVxuICAgIHZhciBudW1TdHIgPSAnJ1xuXG4gICAgaWYgKHBhcnNlci5FTlRJVElFU1tlbnRpdHldKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eV1cbiAgICB9XG4gICAgaWYgKHBhcnNlci5FTlRJVElFU1tlbnRpdHlMQ10pIHtcbiAgICAgIHJldHVybiBwYXJzZXIuRU5USVRJRVNbZW50aXR5TENdXG4gICAgfVxuICAgIGVudGl0eSA9IGVudGl0eUxDXG4gICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMSkgPT09ICd4Jykge1xuICAgICAgICBlbnRpdHkgPSBlbnRpdHkuc2xpY2UoMilcbiAgICAgICAgbnVtID0gcGFyc2VJbnQoZW50aXR5LCAxNilcbiAgICAgICAgbnVtU3RyID0gbnVtLnRvU3RyaW5nKDE2KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50aXR5ID0gZW50aXR5LnNsaWNlKDEpXG4gICAgICAgIG51bSA9IHBhcnNlSW50KGVudGl0eSwgMTApXG4gICAgICAgIG51bVN0ciA9IG51bS50b1N0cmluZygxMClcbiAgICAgIH1cbiAgICB9XG4gICAgZW50aXR5ID0gZW50aXR5LnJlcGxhY2UoL14wKy8sICcnKVxuICAgIGlmIChpc05hTihudW0pIHx8IG51bVN0ci50b0xvd2VyQ2FzZSgpICE9PSBlbnRpdHkpIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXIgZW50aXR5JylcbiAgICAgIHJldHVybiAnJicgKyBwYXJzZXIuZW50aXR5ICsgJzsnXG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KG51bSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZ2luV2hpdGVTcGFjZSAocGFyc2VyLCBjKSB7XG4gICAgaWYgKGMgPT09ICc8Jykge1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgfSBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAvLyBoYXZlIHRvIHByb2Nlc3MgdGhpcyBhcyBhIHRleHQgbm9kZS5cbiAgICAgIC8vIHdlaXJkLCBidXQgaGFwcGVucy5cbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTm9uLXdoaXRlc3BhY2UgYmVmb3JlIGZpcnN0IHRhZy4nKVxuICAgICAgcGFyc2VyLnRleHROb2RlID0gY1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hhckF0IChjaHVuaywgaSkge1xuICAgIHZhciByZXN1bHQgPSAnJ1xuICAgIGlmIChpIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBjaHVuay5jaGFyQXQoaSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gd3JpdGUgKGNodW5rKSB7XG4gICAgdmFyIHBhcnNlciA9IHRoaXNcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5lcnJvclxuICAgIH1cbiAgICBpZiAocGFyc2VyLmNsb3NlZCkge1xuICAgICAgcmV0dXJuIGVycm9yKHBhcnNlcixcbiAgICAgICAgJ0Nhbm5vdCB3cml0ZSBhZnRlciBjbG9zZS4gQXNzaWduIGFuIG9ucmVhZHkgaGFuZGxlci4nKVxuICAgIH1cbiAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbmQocGFyc2VyKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnb2JqZWN0Jykge1xuICAgICAgY2h1bmsgPSBjaHVuay50b1N0cmluZygpXG4gICAgfVxuICAgIHZhciBpID0gMFxuICAgIHZhciBjID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgYyA9IGNoYXJBdChjaHVuaywgaSsrKVxuICAgICAgcGFyc2VyLmMgPSBjXG5cbiAgICAgIGlmICghYykge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgcGFyc2VyLnBvc2l0aW9uKytcbiAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgICAgcGFyc2VyLmxpbmUrK1xuICAgICAgICAgIHBhcnNlci5jb2x1bW4gPSAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VyLmNvbHVtbisrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChwYXJzZXIuc3RhdGUpIHtcbiAgICAgICAgY2FzZSBTLkJFR0lOOlxuICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQkVHSU5fV0hJVEVTUEFDRVxuICAgICAgICAgIGlmIChjID09PSAnXFx1RkVGRicpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQkVHSU5fV0hJVEVTUEFDRTpcbiAgICAgICAgICBiZWdpbldoaXRlU3BhY2UocGFyc2VyLCBjKVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlRFWFQ6XG4gICAgICAgICAgaWYgKHBhcnNlci5zYXdSb290ICYmICFwYXJzZXIuY2xvc2VkUm9vdCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0aSA9IGkgLSAxXG4gICAgICAgICAgICB3aGlsZSAoYyAmJiBjICE9PSAnPCcgJiYgYyAhPT0gJyYnKSB7XG4gICAgICAgICAgICAgIGMgPSBjaGFyQXQoY2h1bmssIGkrKylcbiAgICAgICAgICAgICAgaWYgKGMgJiYgcGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIucG9zaXRpb24rK1xuICAgICAgICAgICAgICAgIGlmIChjID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmxpbmUrK1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbisrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gY2h1bmsuc3Vic3RyaW5nKHN0YXJ0aSwgaSAtIDEpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjID09PSAnPCcgJiYgIShwYXJzZXIuc2F3Um9vdCAmJiBwYXJzZXIuY2xvc2VkUm9vdCAmJiAhcGFyc2VyLnN0cmljdCkpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9XQUtBXG4gICAgICAgICAgICBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvbiA9IHBhcnNlci5wb3NpdGlvblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSAmJiAoIXBhcnNlci5zYXdSb290IHx8IHBhcnNlci5jbG9zZWRSb290KSkge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1RleHQgZGF0YSBvdXRzaWRlIG9mIHJvb3Qgbm9kZS4nKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICcmJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRfRU5USVRZXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TQ1JJUFQ6XG4gICAgICAgICAgLy8gb25seSBub24tc3RyaWN0XG4gICAgICAgICAgaWYgKGMgPT09ICc8Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TQ1JJUFRfRU5ESU5HOlxuICAgICAgICAgIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwnICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9XQUtBOlxuICAgICAgICAgIC8vIGVpdGhlciBhIC8sID8sICEsIG9yIHRleHQgaXMgY29taW5nIG5leHQuXG4gICAgICAgICAgaWYgKGMgPT09ICchJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGl0Li4uXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gY1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR1xuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVFxuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSA9IHBhcnNlci5wcm9jSW5zdEJvZHkgPSAnJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuZW5jb2RlZCA8JylcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBzb21lIHdoaXRlc3BhY2UsIHRoZW4gYWRkIHRoYXQgaW4uXG4gICAgICAgICAgICBpZiAocGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gKyAxIDwgcGFyc2VyLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciBwYWQgPSBwYXJzZXIucG9zaXRpb24gLSBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvblxuICAgICAgICAgICAgICBjID0gbmV3IEFycmF5KHBhZCkuam9pbignICcpICsgY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TR01MX0RFQ0w6XG4gICAgICAgICAgaWYgKChwYXJzZXIuc2dtbERlY2wgKyBjKS50b1VwcGVyQ2FzZSgpID09PSBDREFUQSkge1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVuY2RhdGEnKVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuc2dtbERlY2wgKyBjID09PSAnLS0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gRE9DVFlQRSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFXG4gICAgICAgICAgICBpZiAocGFyc2VyLmRvY3R5cGUgfHwgcGFyc2VyLnNhd1Jvb3QpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsXG4gICAgICAgICAgICAgICAgJ0luYXBwcm9wcmlhdGVseSBsb2NhdGVkIGRvY3R5cGUgZGVjbGFyYXRpb24nKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zZ21sZGVjbGFyYXRpb24nLCBwYXJzZXIuc2dtbERlY2wpXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNHTUxfREVDTF9RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlNHTUxfREVDTF9RVU9URUQ6XG4gICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNHTUxfREVDTFxuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEU6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmRvY3R5cGUnLCBwYXJzZXIuZG9jdHlwZSlcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gdHJ1ZSAvLyBqdXN0IHJlbWVtYmVyIHRoYXQgd2Ugc2F3IGl0LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1snKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfUVVPVEVEXG4gICAgICAgICAgICAgIHBhcnNlci5xID0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFX1FVT1RFRDpcbiAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICBwYXJzZXIucSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9EVEQ6XG4gICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURF9RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5xID0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFX0RURF9RVU9URUQ6XG4gICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURFxuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UOlxuICAgICAgICAgIGlmIChjID09PSAnLScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRfRU5ERURcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ID0gdGV4dG9wdHMocGFyc2VyLm9wdCwgcGFyc2VyLmNvbW1lbnQpXG4gICAgICAgICAgICBpZiAocGFyc2VyLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jb21tZW50JywgcGFyc2VyLmNvbW1lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9ICcnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9ICctJyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UX0VOREVEOlxuICAgICAgICAgIGlmIChjICE9PSAnPicpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTWFsZm9ybWVkIGNvbW1lbnQnKVxuICAgICAgICAgICAgLy8gYWxsb3cgPCEtLSBibGFoIC0tIGJsb28gLS0+IGluIG5vbi1zdHJpY3QgbW9kZSxcbiAgICAgICAgICAgIC8vIHdoaWNoIGlzIGEgY29tbWVudCBvZiBcIiBibGFoIC0tIGJsb28gXCJcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9ICctLScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNEQVRBOlxuICAgICAgICAgIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNEQVRBX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElOR18yXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSAnXScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNEQVRBX0VORElOR18yOlxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZXIuY2RhdGEpIHtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jZGF0YScsIHBhcnNlci5jZGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2xvc2VjZGF0YScpXG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSAnXSdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9ICddXScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlBST0NfSU5TVDpcbiAgICAgICAgICBpZiAoYyA9PT0gJz8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfQk9EWVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0JPRFk6XG4gICAgICAgICAgaWYgKCFwYXJzZXIucHJvY0luc3RCb2R5ICYmIGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdEJvZHkgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5QUk9DX0lOU1RfRU5ESU5HOlxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ucHJvY2Vzc2luZ2luc3RydWN0aW9uJywge1xuICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIucHJvY0luc3ROYW1lLFxuICAgICAgICAgICAgICBib2R5OiBwYXJzZXIucHJvY0luc3RCb2R5XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSA9IHBhcnNlci5wcm9jSW5zdEJvZHkgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdEJvZHkgKz0gJz8nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfQk9EWVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5PUEVOX1RBRzpcbiAgICAgICAgICBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGFnKHBhcnNlcilcbiAgICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXIgaW4gdGFnIG5hbWUnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLk9QRU5fVEFHX1NMQVNIOlxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyLCB0cnVlKVxuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ZvcndhcmQtc2xhc2ggaW4gb3BlbmluZyB0YWcgbm90IGZvbGxvd2VkIGJ5ID4nKVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCOlxuICAgICAgICAgIC8vIGhhdmVuJ3QgcmVhZCB0aGUgYXR0cmlidXRlIG5hbWUgeWV0LlxuICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gY1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX05BTUU6XG4gICAgICAgICAgaWYgKGMgPT09ICc9Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdBdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZScpXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSBwYXJzZXIuYXR0cmliTmFtZVxuICAgICAgICAgICAgYXR0cmliKHBhcnNlcilcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FX1NBV19XSElURVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX05BTUVfU0FXX1dISVRFOlxuICAgICAgICAgIGlmIChjID09PSAnPScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnQXR0cmlidXRlIHdpdGhvdXQgdmFsdWUnKVxuICAgICAgICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW3BhcnNlci5hdHRyaWJOYW1lXSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25hdHRyaWJ1dGUnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHBhcnNlci5hdHRyaWJOYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogJydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9ICcnXG4gICAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZScpXG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRTpcbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnEgPSBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9RVU9URURcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUnKVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfVU5RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1FVT1RFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1FcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9DTE9TRURcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfQ0xPU0VEOlxuICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXMnKVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfVU5RVU9URUQ6XG4gICAgICAgICAgaWYgKCFpc0F0dHJpYkVuZChjKSkge1xuICAgICAgICAgICAgaWYgKGMgPT09ICcmJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlICs9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dHJpYihwYXJzZXIpXG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNMT1NFX1RBRzpcbiAgICAgICAgICBpZiAoIXBhcnNlci50YWdOYW1lKSB7XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vdE1hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBjXG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZy4nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR19TQVdfV0hJVEVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0xPU0VfVEFHX1NBV19XSElURTpcbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXJzIGluIGNsb3NpbmcgdGFnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E6XG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1U6XG4gICAgICAgICAgdmFyIHJldHVyblN0YXRlXG4gICAgICAgICAgdmFyIGJ1ZmZlclxuICAgICAgICAgIHN3aXRjaCAocGFyc2VyLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5URVhUXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICd0ZXh0Tm9kZSdcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfUTpcbiAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9RVU9URURcbiAgICAgICAgICAgICAgYnVmZmVyID0gJ2F0dHJpYlZhbHVlJ1xuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICdhdHRyaWJWYWx1ZSdcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYyA9PT0gJzsnKSB7XG4gICAgICAgICAgICBwYXJzZXJbYnVmZmVyXSArPSBwYXJzZUVudGl0eShwYXJzZXIpXG4gICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IHJldHVyblN0YXRlXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKHBhcnNlci5lbnRpdHkubGVuZ3RoID8gZW50aXR5Qm9keSA6IGVudGl0eVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLmVudGl0eSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXIgaW4gZW50aXR5IG5hbWUnKVxuICAgICAgICAgICAgcGFyc2VyW2J1ZmZlcl0gKz0gJyYnICsgcGFyc2VyLmVudGl0eSArIGNcbiAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gcmV0dXJuU3RhdGVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHBhcnNlciwgJ1Vua25vd24gc3RhdGU6ICcgKyBwYXJzZXIuc3RhdGUpXG4gICAgICB9XG4gICAgfSAvLyB3aGlsZVxuXG4gICAgaWYgKHBhcnNlci5wb3NpdGlvbiA+PSBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbikge1xuICAgICAgY2hlY2tCdWZmZXJMZW5ndGgocGFyc2VyKVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICAvKiEgaHR0cDovL210aHMuYmUvZnJvbWNvZGVwb2ludCB2MC4xLjAgYnkgQG1hdGhpYXMgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFTdHJpbmcuZnJvbUNvZGVQb2ludCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vclxuICAgICAgdmFyIGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNQVhfU0laRSA9IDB4NDAwMFxuICAgICAgICB2YXIgY29kZVVuaXRzID0gW11cbiAgICAgICAgdmFyIGhpZ2hTdXJyb2dhdGVcbiAgICAgICAgdmFyIGxvd1N1cnJvZ2F0ZVxuICAgICAgICB2YXIgaW5kZXggPSAtMVxuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSAnJ1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBOdW1iZXIoYXJndW1lbnRzW2luZGV4XSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaXNGaW5pdGUoY29kZVBvaW50KSB8fCAvLyBgTmFOYCwgYCtJbmZpbml0eWAsIG9yIGAtSW5maW5pdHlgXG4gICAgICAgICAgICBjb2RlUG9pbnQgPCAwIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgICAgICAgY29kZVBvaW50ID4gMHgxMEZGRkYgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBmbG9vcihjb2RlUG9pbnQpICE9PSBjb2RlUG9pbnQgLy8gbm90IGFuIGludGVnZXJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludDogJyArIGNvZGVQb2ludClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvZGVQb2ludCA8PSAweEZGRkYpIHsgLy8gQk1QIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGNvZGVVbml0cy5wdXNoKGNvZGVQb2ludClcbiAgICAgICAgICB9IGVsc2UgeyAvLyBBc3RyYWwgY29kZSBwb2ludDsgc3BsaXQgaW4gc3Vycm9nYXRlIGhhbHZlc1xuICAgICAgICAgICAgLy8gaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICAgICAgICBoaWdoU3Vycm9nYXRlID0gKGNvZGVQb2ludCA+PiAxMCkgKyAweEQ4MDBcbiAgICAgICAgICAgIGxvd1N1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgJSAweDQwMCkgKyAweERDMDBcbiAgICAgICAgICAgIGNvZGVVbml0cy5wdXNoKGhpZ2hTdXJyb2dhdGUsIGxvd1N1cnJvZ2F0ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gbGVuZ3RoIHx8IGNvZGVVbml0cy5sZW5ndGggPiBNQVhfU0laRSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShudWxsLCBjb2RlVW5pdHMpXG4gICAgICAgICAgICBjb2RlVW5pdHMubGVuZ3RoID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsIHtcbiAgICAgICAgICB2YWx1ZTogZnJvbUNvZGVQb2ludCxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFN0cmluZy5mcm9tQ29kZVBvaW50ID0gZnJvbUNvZGVQb2ludFxuICAgICAgfVxuICAgIH0oKSlcbiAgfVxufSkoIGZhbHNlID8gdGhpcy5zYXggPSB7fSA6IGV4cG9ydHMpXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuLyogMTQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cblxuLyoqKi8gfSksXG4vKiAxNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cbi8qKiovIH0pLFxuLyogMTQ1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIChpZ25vcmVkKSAqL1xuXG4vKioqLyB9KSxcbi8qIDE0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikuQnVmZmVyO1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0Nyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufVxuXG4vKioqLyB9KSxcbi8qIDE0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKiAoaWdub3JlZCkgKi9cblxuLyoqKi8gfSksXG4vKiAxNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCwgcHJvY2VzcykgeyhmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNCksIF9fd2VicGFja19yZXF1aXJlX18oMTMpKSlcblxuLyoqKi8gfSksXG4vKiAxNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNCkpKVxuXG4vKioqLyB9KSxcbi8qIDE1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG51dGlsLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTtcblxuLyoqKi8gfSksXG4vKiAxNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxuXG4vKioqLyB9KSxcbi8qIDE1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblxuLyoqKi8gfSksXG4vKiAxNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KS5UcmFuc2Zvcm1cblxuXG4vKioqLyB9KSxcbi8qIDE1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpLlBhc3NUaHJvdWdoXG5cblxuLyoqKi8gfSksXG4vKiAxNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGhlbHBlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xyXG52YXIgeG1sMmpzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMgKHVzZXJPcHRpb25zKSB7XHJcbiAgdmFyIG9wdGlvbnMgPSBoZWxwZXIuY29weU9wdGlvbnModXNlck9wdGlvbnMpO1xyXG4gIGhlbHBlci5lbnN1cmVTcGFjZXNFeGlzdHMob3B0aW9ucyk7XHJcbiAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oeG1sLCB1c2VyT3B0aW9ucykge1xyXG4gIHZhciBvcHRpb25zLCBqcywganNvbiwgcGFyZW50S2V5O1xyXG4gIG9wdGlvbnMgPSB2YWxpZGF0ZU9wdGlvbnModXNlck9wdGlvbnMpO1xyXG4gIGpzID0geG1sMmpzKHhtbCwgb3B0aW9ucyk7XHJcbiAgcGFyZW50S2V5ID0gJ2NvbXBhY3QnIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21wYWN0ID8gJ19wYXJlbnQnIDogJ3BhcmVudCc7XHJcbiAgLy8gcGFyZW50S2V5ID0gcHRpb25zLmNvbXBhY3QgPyAnX3BhcmVudCcgOiAncGFyZW50JzsgLy8gY29uc2lkZXIgdGhpc1xyXG4gIGlmICgnYWRkUGFyZW50JyBpbiBvcHRpb25zICYmIG9wdGlvbnMuYWRkUGFyZW50KSB7XHJcbiAgICBqc29uID0gSlNPTi5zdHJpbmdpZnkoanMsIGZ1bmN0aW9uIChrLCB2KSB7IHJldHVybiBrID09PSBwYXJlbnRLZXk/ICdfJyA6IHY7IH0sIG9wdGlvbnMuc3BhY2VzKTtcclxuICB9IGVsc2Uge1xyXG4gICAganNvbiA9IEpTT04uc3RyaW5naWZ5KGpzLCBudWxsLCBvcHRpb25zLnNwYWNlcyk7XHJcbiAgfVxyXG4gIHJldHVybiBqc29uLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpO1xyXG59O1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlcikge3ZhciBqczJ4bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGpzb24sIG9wdGlvbnMpIHtcclxuICBpZiAoanNvbiBpbnN0YW5jZW9mIEJ1ZmZlcikge1xyXG4gICAganNvbiA9IGpzb24udG9TdHJpbmcoKTtcclxuICB9XHJcbiAgdmFyIGpzID0gbnVsbDtcclxuICBpZiAodHlwZW9mIChqc29uKSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGpzID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgSlNPTiBzdHJ1Y3R1cmUgaXMgaW52YWxpZCcpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBqcyA9IGpzb247XHJcbiAgfVxyXG4gIHJldHVybiBqczJ4bWwoanMsIG9wdGlvbnMpO1xyXG59O1xyXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuLyogMTU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5XT1JLQVJPVU5EMyA9IFwiXCI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBJbml0aWFsaXphYmxlWG1sQ29tcG9uZW50IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iocm9vdEtleSwgaW5pdENvbXBvbmVudCkge1xyXG4gICAgICAgIHN1cGVyKHJvb3RLZXkpO1xyXG4gICAgICAgIGlmIChpbml0Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IGluaXRDb21wb25lbnQucm9vdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Jbml0aWFsaXphYmxlWG1sQ29tcG9uZW50ID0gSW5pdGlhbGl6YWJsZVhtbENvbXBvbmVudDtcclxuXG5cbi8qKiovIH0pLFxuLyogMTU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEJvcmRlckF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgdmFsOiBcInc6dmFsXCIsXHJcbiAgICAgICAgICAgIGNvbG9yOiBcInc6Y29sb3JcIixcclxuICAgICAgICAgICAgc3BhY2U6IFwidzpzcGFjZVwiLFxyXG4gICAgICAgICAgICBzejogXCJ3OnN6XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJvcmRlckF0dHJpYnV0ZXMgPSBCb3JkZXJBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzcGFjZV90eXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGV4dEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgc3BhY2U6IFwieG1sOnNwYWNlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBQYWdlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogc3BhY2VfdHlwZV8xLlNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goXCJQQUdFXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGFnZSA9IFBhZ2U7XHJcbmNsYXNzIE51bWJlck9mUGFnZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBzcGFjZV90eXBlXzEuU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChcIk5VTVBBR0VTXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTnVtYmVyT2ZQYWdlcyA9IE51bWJlck9mUGFnZXM7XHJcbmNsYXNzIE51bWJlck9mUGFnZXNTZWN0aW9uIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogc3BhY2VfdHlwZV8xLlNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goXCJTRUNUSU9OUEFHRVNcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5OdW1iZXJPZlBhZ2VzU2VjdGlvbiA9IE51bWJlck9mUGFnZXNTZWN0aW9uO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xyXG5jb25zdCB0ZXh0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcclxuY2xhc3MgVGV4dFJ1biBleHRlbmRzIHJ1bl8xLlJ1biB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKHt9KTtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRleHRfMS5UZXh0KG9wdGlvbnMpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRleHRSdW4gPSBUZXh0UnVuO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xyXG5jb25zdCBzeW1ib2xfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYzKTtcclxuY2xhc3MgU3ltYm9sUnVuIGV4dGVuZHMgcnVuXzEuUnVuIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgc3VwZXIoe30pO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc3ltYm9sXzEuU3ltYm9sKG9wdGlvbnMpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc3ltYm9sXzEuU3ltYm9sKG9wdGlvbnMuY2hhciwgb3B0aW9ucy5zeW1ib2xmb250KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TeW1ib2xSdW4gPSBTeW1ib2xSdW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDE2MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBTeW1ib2xBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGNoYXI6IFwidzpjaGFyXCIsXHJcbiAgICAgICAgICAgIHN5bWJvbGZvbnQ6IFwidzpmb250XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBTeW1ib2wgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGFyID0gXCJcIiwgc3ltYm9sZm9udCA9IFwiV2luZ2RpbmdzXCIpIHtcclxuICAgICAgICBzdXBlcihcInc6c3ltXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTeW1ib2xBdHRyaWJ1dGVzKHsgY2hhcjogY2hhciwgc3ltYm9sZm9udDogc3ltYm9sZm9udCB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TeW1ib2wgPSBTeW1ib2w7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGRyYXdpbmdfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcbmNsYXNzIFBpY3R1cmVSdW4gZXh0ZW5kcyBydW5fMS5SdW4ge1xyXG4gICAgY29uc3RydWN0b3IoaW1hZ2VEYXRhLCBkcmF3aW5nT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKHt9KTtcclxuICAgICAgICBjb25zdCBkcmF3aW5nID0gbmV3IGRyYXdpbmdfMS5EcmF3aW5nKGltYWdlRGF0YSwgZHJhd2luZ09wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGRyYXdpbmcpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGljdHVyZVJ1biA9IFBpY3R1cmVSdW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDE2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBhbmNob3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY2KTtcclxuY29uc3QgaW5saW5lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOSk7XHJcbmNsYXNzIERyYXdpbmcgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbWFnZURhdGEsIGRyYXdpbmdPcHRpb25zID0ge30pIHtcclxuICAgICAgICBzdXBlcihcInc6ZHJhd2luZ1wiKTtcclxuICAgICAgICBpZiAoIWRyYXdpbmdPcHRpb25zLmZsb2F0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5saW5lID0gbmV3IGlubGluZV8xLklubGluZShpbWFnZURhdGEsIGltYWdlRGF0YS5kaW1lbnNpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5pbmxpbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGFuY2hvcl8xLkFuY2hvcihpbWFnZURhdGEsIGltYWdlRGF0YS5kaW1lbnNpb25zLCBkcmF3aW5nT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNjYWxlKGZhY3RvclgsIGZhY3RvclkpIHtcclxuICAgICAgICB0aGlzLmlubGluZS5zY2FsZShmYWN0b3JYLCBmYWN0b3JZKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRyYXdpbmcgPSBEcmF3aW5nO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxNjcpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg4MCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZmxvYXRpbmdfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpO1xyXG5jb25zdCBncmFwaGljXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcclxuY29uc3QgdGV4dF93cmFwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcclxuY29uc3QgZG9jX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpO1xyXG5jb25zdCBlZmZlY3RfZXh0ZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTtcclxuY29uc3QgZXh0ZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KTtcclxuY29uc3QgZ3JhcGhpY19mcmFtZV9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KTtcclxuY29uc3QgYW5jaG9yX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xyXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgIGFsbG93T3ZlcmxhcDogdHJ1ZSxcclxuICAgIGJlaGluZERvY3VtZW50OiBmYWxzZSxcclxuICAgIGxvY2tBbmNob3I6IGZhbHNlLFxyXG4gICAgbGF5b3V0SW5DZWxsOiB0cnVlLFxyXG4gICAgdmVydGljYWxQb3NpdGlvbjoge30sXHJcbiAgICBob3Jpem9udGFsUG9zaXRpb246IHt9LFxyXG59O1xyXG5jbGFzcyBBbmNob3IgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZWRpYURhdGEsIGRpbWVuc2lvbnMsIGRyYXdpbmdPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDphbmNob3JcIik7XHJcbiAgICAgICAgY29uc3QgZmxvYXRpbmcgPSBPYmplY3QuYXNzaWduKHsgbWFyZ2luczoge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgICAgICAgICB9IH0sIGRlZmF1bHRPcHRpb25zLCBkcmF3aW5nT3B0aW9ucy5mbG9hdGluZyk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGFuY2hvcl9hdHRyaWJ1dGVzXzEuQW5jaG9yQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGRpc3RUOiBmbG9hdGluZy5tYXJnaW5zLnRvcCB8fCAwLFxyXG4gICAgICAgICAgICBkaXN0QjogZmxvYXRpbmcubWFyZ2lucy5ib3R0b20gfHwgMCxcclxuICAgICAgICAgICAgZGlzdEw6IGZsb2F0aW5nLm1hcmdpbnMubGVmdCB8fCAwLFxyXG4gICAgICAgICAgICBkaXN0UjogZmxvYXRpbmcubWFyZ2lucy5yaWdodCB8fCAwLFxyXG4gICAgICAgICAgICBzaW1wbGVQb3M6IFwiMFwiLFxyXG4gICAgICAgICAgICBhbGxvd092ZXJsYXA6IGZsb2F0aW5nLmFsbG93T3ZlcmxhcCA9PT0gdHJ1ZSA/IFwiMVwiIDogXCIwXCIsXHJcbiAgICAgICAgICAgIGJlaGluZERvYzogZmxvYXRpbmcuYmVoaW5kRG9jdW1lbnQgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxyXG4gICAgICAgICAgICBsb2NrZWQ6IGZsb2F0aW5nLmxvY2tBbmNob3IgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxyXG4gICAgICAgICAgICBsYXlvdXRJbkNlbGw6IGZsb2F0aW5nLmxheW91dEluQ2VsbCA9PT0gdHJ1ZSA/IFwiMVwiIDogXCIwXCIsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlSGVpZ2h0OiBkaW1lbnNpb25zLmVtdXMueSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZsb2F0aW5nXzEuU2ltcGxlUG9zKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmbG9hdGluZ18xLkhvcml6b250YWxQb3NpdGlvbihmbG9hdGluZy5ob3Jpem9udGFsUG9zaXRpb24pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmxvYXRpbmdfMS5WZXJ0aWNhbFBvc2l0aW9uKGZsb2F0aW5nLnZlcnRpY2FsUG9zaXRpb24pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZXh0ZW50XzEuRXh0ZW50KGRpbWVuc2lvbnMuZW11cy54LCBkaW1lbnNpb25zLmVtdXMueSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBlZmZlY3RfZXh0ZW50XzEuRWZmZWN0RXh0ZW50KCkpO1xyXG4gICAgICAgIGlmIChkcmF3aW5nT3B0aW9ucy5mbG9hdGluZyAhPT0gdW5kZWZpbmVkICYmIGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nLndyYXAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nLndyYXAudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0ZXh0X3dyYXBfMS5UZXh0V3JhcHBpbmdUeXBlLlNRVUFSRTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdGV4dF93cmFwXzEuV3JhcFNxdWFyZShkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy53cmFwLCBkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy5tYXJnaW5zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRleHRfd3JhcF8xLlRleHRXcmFwcGluZ1R5cGUuVElHSFQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRleHRfd3JhcF8xLldyYXBUaWdodChkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy5tYXJnaW5zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRleHRfd3JhcF8xLlRleHRXcmFwcGluZ1R5cGUuVE9QX0FORF9CT1RUT006XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRleHRfd3JhcF8xLldyYXBUb3BBbmRCb3R0b20oZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcubWFyZ2lucykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0ZXh0X3dyYXBfMS5UZXh0V3JhcHBpbmdUeXBlLk5PTkU6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0ZXh0X3dyYXBfMS5XcmFwTm9uZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRleHRfd3JhcF8xLldyYXBOb25lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZG9jX3Byb3BlcnRpZXNfMS5Eb2NQcm9wZXJ0aWVzKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBncmFwaGljX2ZyYW1lX3Byb3BlcnRpZXNfMS5HcmFwaGljRnJhbWVQcm9wZXJ0aWVzKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBncmFwaGljXzEuR3JhcGhpYyhtZWRpYURhdGEsIGRpbWVuc2lvbnMuZW11cy54LCBkaW1lbnNpb25zLmVtdXMueSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQW5jaG9yID0gQW5jaG9yO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgU2ltcGxlUG9zQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB4OiBcInhcIixcclxuICAgICAgICAgICAgeTogXCJ5XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBTaW1wbGVQb3MgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIndwOnNpbXBsZVBvc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2ltcGxlUG9zQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2ltcGxlUG9zID0gU2ltcGxlUG9zO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgYWxpZ25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpO1xyXG5jb25zdCBmbG9hdGluZ19wb3NpdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XHJcbmNvbnN0IHBvc2l0aW9uX29mZnNldF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XHJcbmNsYXNzIEhvcml6b250YWxQb3NpdGlvbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgcmVsYXRpdmVGcm9tOiBcInJlbGF0aXZlRnJvbVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgSG9yaXpvbnRhbFBvc2l0aW9uIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoaG9yaXpvbnRhbFBvc2l0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDpwb3NpdGlvbkhcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEhvcml6b250YWxQb3NpdGlvbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUZyb206IGhvcml6b250YWxQb3NpdGlvbi5yZWxhdGl2ZSB8fCBmbG9hdGluZ19wb3NpdGlvbl8xLkhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbS5QQUdFLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoaG9yaXpvbnRhbFBvc2l0aW9uLmFsaWduKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBhbGlnbl8xLkFsaWduKGhvcml6b250YWxQb3NpdGlvbi5hbGlnbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChob3Jpem9udGFsUG9zaXRpb24ub2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHBvc2l0aW9uX29mZnNldF8xLlBvc2l0aW9uT2Zmc2V0KGhvcml6b250YWxQb3NpdGlvbi5vZmZzZXQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZXJlIGlzIG5vIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWQgZm9yIGZsb2F0aW5nIHBvc2l0aW9uIChBbGlnbiBvciBvZmZzZXQpXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhvcml6b250YWxQb3NpdGlvbiA9IEhvcml6b250YWxQb3NpdGlvbjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTcwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGFsaWduXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKTtcclxuY29uc3QgZmxvYXRpbmdfcG9zaXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xyXG5jb25zdCBwb3NpdGlvbl9vZmZzZXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xyXG5jbGFzcyBWZXJ0aWNhbFBvc2l0aW9uQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICByZWxhdGl2ZUZyb206IFwicmVsYXRpdmVGcm9tXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBWZXJ0aWNhbFBvc2l0aW9uIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmVydGljYWxQb3NpdGlvbikge1xyXG4gICAgICAgIHN1cGVyKFwid3A6cG9zaXRpb25WXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbFBvc2l0aW9uQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlRnJvbTogdmVydGljYWxQb3NpdGlvbi5yZWxhdGl2ZSB8fCBmbG9hdGluZ19wb3NpdGlvbl8xLlZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb20uUEFHRSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKHZlcnRpY2FsUG9zaXRpb24uYWxpZ24pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGFsaWduXzEuQWxpZ24odmVydGljYWxQb3NpdGlvbi5hbGlnbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2ZXJ0aWNhbFBvc2l0aW9uLm9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwb3NpdGlvbl9vZmZzZXRfMS5Qb3NpdGlvbk9mZnNldCh2ZXJ0aWNhbFBvc2l0aW9uLm9mZnNldCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlcmUgaXMgbm8gY29uZmlndXJhdGlvbiBwcm92aWRlZCBmb3IgZmxvYXRpbmcgcG9zaXRpb24gKEFsaWduIG9yIG9mZnNldClcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVmVydGljYWxQb3NpdGlvbiA9IFZlcnRpY2FsUG9zaXRpb247XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBncmFwaGljX2RhdGFfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcyKTtcclxuY2xhc3MgR3JhcGhpY0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgYTogXCJ4bWxuczphXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBHcmFwaGljIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhLCB4LCB5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmdyYXBoaWNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEdyYXBoaWNBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgYTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvbWFpblwiLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgZ3JhcGhpY19kYXRhXzEuR3JhcGhpY0RhdGEobWVkaWFEYXRhLCB4LCB5KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2V0WFkoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5zZXRYWSh4LCB5KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdyYXBoaWMgPSBHcmFwaGljO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxNzMpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGdyYXBoaWNfZGF0YV9hdHRyaWJ1dGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc0KTtcclxuY29uc3QgcGljXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NSk7XHJcbmNsYXNzIEdyYXBoaWNEYXRhIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhLCB4LCB5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmdyYXBoaWNEYXRhXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBncmFwaGljX2RhdGFfYXR0cmlidXRlXzEuR3JhcGhpY0RhdGFBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdXJpOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9waWN0dXJlXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucGljID0gbmV3IHBpY18xLlBpYyhtZWRpYURhdGEsIHgsIHkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGljKTtcclxuICAgIH1cclxuICAgIHNldFhZKHgsIHkpIHtcclxuICAgICAgICB0aGlzLnBpYy5zZXRYWSh4LCB5KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdyYXBoaWNEYXRhID0gR3JhcGhpY0RhdGE7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBHcmFwaGljRGF0YUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgdXJpOiBcInVyaVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5HcmFwaGljRGF0YUF0dHJpYnV0ZXMgPSBHcmFwaGljRGF0YUF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NikpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgYmxpcF9maWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Nyk7XHJcbmNvbnN0IG5vbl92aXN1YWxfcGljX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgxKTtcclxuY29uc3QgcGljX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg3KTtcclxuY29uc3Qgc2hhcGVfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODgpO1xyXG5jbGFzcyBQaWMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZWRpYURhdGEsIHgsIHkpIHtcclxuICAgICAgICBzdXBlcihcInBpYzpwaWNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHBpY19hdHRyaWJ1dGVzXzEuUGljQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9waWN0dXJlXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMuc2hhcGVQcm9wZXJ0aWVzID0gbmV3IHNoYXBlX3Byb3BlcnRpZXNfMS5TaGFwZVByb3BlcnRpZXMoeCwgeSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG5vbl92aXN1YWxfcGljX3Byb3BlcnRpZXNfMS5Ob25WaXN1YWxQaWNQcm9wZXJ0aWVzKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBibGlwX2ZpbGxfMS5CbGlwRmlsbChtZWRpYURhdGEpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc2hhcGVfcHJvcGVydGllc18xLlNoYXBlUHJvcGVydGllcyh4LCB5KSk7XHJcbiAgICB9XHJcbiAgICBzZXRYWSh4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5zaGFwZVByb3BlcnRpZXMuc2V0WFkoeCwgeSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QaWMgPSBQaWM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBibGlwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OCk7XHJcbmNvbnN0IHNvdXJjZV9yZWN0YW5nbGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc5KTtcclxuY29uc3Qgc3RyZXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODApO1xyXG5jbGFzcyBCbGlwRmlsbCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG1lZGlhRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKFwicGljOmJsaXBGaWxsXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBibGlwXzEuQmxpcChtZWRpYURhdGEpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc291cmNlX3JlY3RhbmdsZV8xLlNvdXJjZVJlY3RhbmdsZSgpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc3RyZXRjaF8xLlN0cmV0Y2goKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CbGlwRmlsbCA9IEJsaXBGaWxsO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgQmxpcEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgZW1iZWQ6IFwicjplbWJlZFwiLFxyXG4gICAgICAgICAgICBjc3RhdGU6IFwiY3N0YXRlXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBCbGlwIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmJsaXBcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJsaXBBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgZW1iZWQ6IGBySWR7JHttZWRpYURhdGEuZmlsZU5hbWV9fWAsXHJcbiAgICAgICAgICAgIGNzdGF0ZTogXCJub25lXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQmxpcCA9IEJsaXA7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBTb3VyY2VSZWN0YW5nbGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImE6c3JjUmVjdFwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNvdXJjZVJlY3RhbmdsZSA9IFNvdXJjZVJlY3RhbmdsZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTgwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEZpbGxSZWN0YW5nbGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImE6ZmlsbFJlY3RcIik7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgU3RyZXRjaCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiYTpzdHJldGNoXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGaWxsUmVjdGFuZ2xlKCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RyZXRjaCA9IFN0cmV0Y2g7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBjaGlsZF9ub25fdmlzdWFsX3BpY19wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Mik7XHJcbmNvbnN0IG5vbl92aXN1YWxfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODUpO1xyXG5jbGFzcyBOb25WaXN1YWxQaWNQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJwaWM6bnZQaWNQclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbm9uX3Zpc3VhbF9wcm9wZXJ0aWVzXzEuTm9uVmlzdWFsUHJvcGVydGllcygpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY2hpbGRfbm9uX3Zpc3VhbF9waWNfcHJvcGVydGllc18xLkNoaWxkTm9uVmlzdWFsUHJvcGVydGllcygpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk5vblZpc3VhbFBpY1Byb3BlcnRpZXMgPSBOb25WaXN1YWxQaWNQcm9wZXJ0aWVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgcGljX2xvY2tzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Myk7XHJcbmNsYXNzIENoaWxkTm9uVmlzdWFsUHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwicGljOmNOdlBpY1ByXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwaWNfbG9ja3NfMS5QaWNMb2NrcygpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNoaWxkTm9uVmlzdWFsUHJvcGVydGllcyA9IENoaWxkTm9uVmlzdWFsUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHBpY19sb2Nrc19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NCk7XHJcbmNsYXNzIFBpY0xvY2tzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOnBpY0xvY2tzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwaWNfbG9ja3NfYXR0cmlidXRlc18xLlBpY0xvY2tzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIG5vQ2hhbmdlQXNwZWN0OiAxLFxyXG4gICAgICAgICAgICBub0NoYW5nZUFycm93aGVhZHM6IDEsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGljTG9ja3MgPSBQaWNMb2NrcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTg0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFBpY0xvY2tzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBub0NoYW5nZUFzcGVjdDogXCJub0NoYW5nZUFzcGVjdFwiLFxyXG4gICAgICAgICAgICBub0NoYW5nZUFycm93aGVhZHM6IFwibm9DaGFuZ2VBcnJvd2hlYWRzXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBpY0xvY2tzQXR0cmlidXRlcyA9IFBpY0xvY2tzQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IG5vbl92aXN1YWxfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nik7XHJcbmNsYXNzIE5vblZpc3VhbFByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInBpYzpjTnZQclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbm9uX3Zpc3VhbF9wcm9wZXJ0aWVzX2F0dHJpYnV0ZXNfMS5Ob25WaXN1YWxQcm9wZXJ0aWVzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGlkOiAwLFxyXG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBkZXNjcjogXCJcIixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Ob25WaXN1YWxQcm9wZXJ0aWVzID0gTm9uVmlzdWFsUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE5vblZpc3VhbFByb3BlcnRpZXNBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGlkOiBcImlkXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwibmFtZVwiLFxyXG4gICAgICAgICAgICBkZXNjcjogXCJkZXNjXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk5vblZpc3VhbFByb3BlcnRpZXNBdHRyaWJ1dGVzID0gTm9uVmlzdWFsUHJvcGVydGllc0F0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBQaWNBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcInhtbG5zOnBpY1wiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QaWNBdHRyaWJ1dGVzID0gUGljQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTg4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGZvcm1fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg5KTtcclxuY29uc3QgcHJlc2V0X2dlb21ldHJ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5NSk7XHJcbmNvbnN0IHNoYXBlX3Byb3BlcnRpZXNfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTgpO1xyXG5jbGFzcyBTaGFwZVByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJwaWM6c3BQclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc2hhcGVfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEuU2hhcGVQcm9wZXJ0aWVzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGJ3TW9kZTogXCJhdXRvXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IG5ldyBmb3JtXzEuRm9ybSh4LCB5KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmZvcm0pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBwcmVzZXRfZ2VvbWV0cnlfMS5QcmVzZXRHZW9tZXRyeSgpKTtcclxuICAgIH1cclxuICAgIHNldFhZKHgsIHkpIHtcclxuICAgICAgICB0aGlzLmZvcm0uc2V0WFkoeCwgeSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaGFwZVByb3BlcnRpZXMgPSBTaGFwZVByb3BlcnRpZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE4OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZXh0ZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTEpO1xyXG5jb25zdCBvZmZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkzKTtcclxuY2xhc3MgRm9ybSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcclxuICAgICAgICBzdXBlcihcImE6eGZybVwiKTtcclxuICAgICAgICB0aGlzLmV4dGVudHMgPSBuZXcgZXh0ZW50c18xLkV4dGVudHMoeCwgeSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5leHRlbnRzKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb2ZmXzEuT2Zmc2V0KCkpO1xyXG4gICAgfVxyXG4gICAgc2V0WFkoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuZXh0ZW50cy5zZXRYWSh4LCB5KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvcm0gPSBGb3JtO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZXh0ZW50c19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5Mik7XHJcbmNsYXNzIEV4dGVudHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmV4dFwiKTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBuZXcgZXh0ZW50c19hdHRyaWJ1dGVzXzEuRXh0ZW50c0F0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBjeDogeCxcclxuICAgICAgICAgICAgY3k6IHksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5hdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuICAgIHNldFhZKHgsIHkpIHtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuc2V0KHtcclxuICAgICAgICAgICAgY3g6IHgsXHJcbiAgICAgICAgICAgIGN5OiB5LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRXh0ZW50cyA9IEV4dGVudHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBFeHRlbnRzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBjeDogXCJjeFwiLFxyXG4gICAgICAgICAgICBjeTogXCJjeVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FeHRlbnRzQXR0cmlidXRlcyA9IEV4dGVudHNBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgb2ZmX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTk0KTtcclxuY2xhc3MgT2Zmc2V0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOm9mZlwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb2ZmX2F0dHJpYnV0ZXNfMS5PZmZzZXRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5PZmZzZXQgPSBPZmZzZXQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBPZmZzZXRBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHg6IFwieFwiLFxyXG4gICAgICAgICAgICB5OiBcInlcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuT2Zmc2V0QXR0cmlidXRlcyA9IE9mZnNldEF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBhZGp1c3RtZW50X3ZhbHVlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTYpO1xyXG5jb25zdCBwcmVzZXRfZ2VvbWV0cnlfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTcpO1xyXG5jbGFzcyBQcmVzZXRHZW9tZXRyeSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiYTpwcnN0R2VvbVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcHJlc2V0X2dlb21ldHJ5X2F0dHJpYnV0ZXNfMS5QcmVzZXRHZW9tZXRyeUF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBwcnN0OiBcInJlY3RcIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGFkanVzdG1lbnRfdmFsdWVzXzEuQWRqdXN0bWVudFZhbHVlcygpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlByZXNldEdlb21ldHJ5ID0gUHJlc2V0R2VvbWV0cnk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBBZGp1c3RtZW50VmFsdWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmF2THN0XCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQWRqdXN0bWVudFZhbHVlcyA9IEFkanVzdG1lbnRWYWx1ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBQcmVzZXRHZW9tZXRyeUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgcHJzdDogXCJwcnN0XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlByZXNldEdlb21ldHJ5QXR0cmlidXRlcyA9IFByZXNldEdlb21ldHJ5QXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTk4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFNoYXBlUHJvcGVydGllc0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgYndNb2RlOiBcImJ3TW9kZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaGFwZVByb3BlcnRpZXNBdHRyaWJ1dGVzID0gU2hhcGVQcm9wZXJ0aWVzQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMTk5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFRleHRXcmFwcGluZ1R5cGU7XHJcbihmdW5jdGlvbiAoVGV4dFdyYXBwaW5nVHlwZSkge1xyXG4gICAgVGV4dFdyYXBwaW5nVHlwZVtUZXh0V3JhcHBpbmdUeXBlW1wiTk9ORVwiXSA9IDBdID0gXCJOT05FXCI7XHJcbiAgICBUZXh0V3JhcHBpbmdUeXBlW1RleHRXcmFwcGluZ1R5cGVbXCJTUVVBUkVcIl0gPSAxXSA9IFwiU1FVQVJFXCI7XHJcbiAgICBUZXh0V3JhcHBpbmdUeXBlW1RleHRXcmFwcGluZ1R5cGVbXCJUSUdIVFwiXSA9IDJdID0gXCJUSUdIVFwiO1xyXG4gICAgVGV4dFdyYXBwaW5nVHlwZVtUZXh0V3JhcHBpbmdUeXBlW1wiVE9QX0FORF9CT1RUT01cIl0gPSAzXSA9IFwiVE9QX0FORF9CT1RUT01cIjtcclxufSkoVGV4dFdyYXBwaW5nVHlwZSA9IGV4cG9ydHMuVGV4dFdyYXBwaW5nVHlwZSB8fCAoZXhwb3J0cy5UZXh0V3JhcHBpbmdUeXBlID0ge30pKTtcclxudmFyIFRleHRXcmFwcGluZ1NpZGU7XHJcbihmdW5jdGlvbiAoVGV4dFdyYXBwaW5nU2lkZSkge1xyXG4gICAgVGV4dFdyYXBwaW5nU2lkZVtcIkJPVEhfU0lERVNcIl0gPSBcImJvdGhTaWRlc1wiO1xyXG4gICAgVGV4dFdyYXBwaW5nU2lkZVtcIkxFRlRcIl0gPSBcImxlZnRcIjtcclxuICAgIFRleHRXcmFwcGluZ1NpZGVbXCJSSUdIVFwiXSA9IFwicmlnaHRcIjtcclxuICAgIFRleHRXcmFwcGluZ1NpZGVbXCJMQVJHRVNUXCJdID0gXCJsYXJnZXN0XCI7XHJcbn0pKFRleHRXcmFwcGluZ1NpZGUgPSBleHBvcnRzLlRleHRXcmFwcGluZ1NpZGUgfHwgKGV4cG9ydHMuVGV4dFdyYXBwaW5nU2lkZSA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIwMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBXcmFwTm9uZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwid3A6d3JhcE5vbmVcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5XcmFwTm9uZSA9IFdyYXBOb25lO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcclxuY2xhc3MgV3JhcFNxdWFyZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcclxuICAgICAgICAgICAgZGlzdEI6IFwiZGlzdEJcIixcclxuICAgICAgICAgICAgZGlzdEw6IFwiZGlzdExcIixcclxuICAgICAgICAgICAgZGlzdFI6IFwiZGlzdFJcIixcclxuICAgICAgICAgICAgd3JhcFRleHQ6IFwid3JhcFRleHRcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFdyYXBTcXVhcmUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0V3JhcHBpbmcsIG1hcmdpbnMgPSB7XHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIGJvdHRvbTogMCxcclxuICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgfSkge1xyXG4gICAgICAgIHN1cGVyKFwid3A6d3JhcFNxdWFyZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgV3JhcFNxdWFyZUF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB3cmFwVGV4dDogdGV4dFdyYXBwaW5nLnNpZGUgfHwgXzEuVGV4dFdyYXBwaW5nU2lkZS5CT1RIX1NJREVTLFxyXG4gICAgICAgICAgICBkaXN0VDogbWFyZ2lucy50b3AsXHJcbiAgICAgICAgICAgIGRpc3RCOiBtYXJnaW5zLmJvdHRvbSxcclxuICAgICAgICAgICAgZGlzdEw6IG1hcmdpbnMubGVmdCxcclxuICAgICAgICAgICAgZGlzdFI6IG1hcmdpbnMucmlnaHQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuV3JhcFNxdWFyZSA9IFdyYXBTcXVhcmU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBXcmFwVGlnaHRBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGRpc3RUOiBcImRpc3RUXCIsXHJcbiAgICAgICAgICAgIGRpc3RCOiBcImRpc3RCXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBXcmFwVGlnaHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihtYXJnaW5zID0ge1xyXG4gICAgICAgIHRvcDogMCxcclxuICAgICAgICBib3R0b206IDAsXHJcbiAgICB9KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDp3cmFwVGlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBUaWdodEF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBkaXN0VDogbWFyZ2lucy50b3AsXHJcbiAgICAgICAgICAgIGRpc3RCOiBtYXJnaW5zLmJvdHRvbSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5XcmFwVGlnaHQgPSBXcmFwVGlnaHQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBXcmFwVG9wQW5kQm90dG9tQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBkaXN0VDogXCJkaXN0VFwiLFxyXG4gICAgICAgICAgICBkaXN0QjogXCJkaXN0QlwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgV3JhcFRvcEFuZEJvdHRvbSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG1hcmdpbnMgPSB7XHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIGJvdHRvbTogMCxcclxuICAgIH0pIHtcclxuICAgICAgICBzdXBlcihcIndwOndyYXBUb3BBbmRCb3R0b21cIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBUb3BBbmRCb3R0b21BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgZGlzdFQ6IG1hcmdpbnMudG9wLFxyXG4gICAgICAgICAgICBkaXN0QjogbWFyZ2lucy5ib3R0b20sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuV3JhcFRvcEFuZEJvdHRvbSA9IFdyYXBUb3BBbmRCb3R0b207XHJcblxuXG4vKioqLyB9KSxcbi8qIDIwNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBEb2NQcm9wZXJ0aWVzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBpZDogXCJpZFwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgZGVzY3I6IFwiZGVzY3JcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRG9jUHJvcGVydGllc0F0dHJpYnV0ZXMgPSBEb2NQcm9wZXJ0aWVzQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEVmZmVjdEV4dGVudEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgYjogXCJiXCIsXHJcbiAgICAgICAgICAgIGw6IFwibFwiLFxyXG4gICAgICAgICAgICByOiBcInJcIixcclxuICAgICAgICAgICAgdDogXCJ0XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkVmZmVjdEV4dGVudEF0dHJpYnV0ZXMgPSBFZmZlY3RFeHRlbnRBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRXh0ZW50QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBjeDogXCJjeFwiLFxyXG4gICAgICAgICAgICBjeTogXCJjeVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FeHRlbnRBdHRyaWJ1dGVzID0gRXh0ZW50QXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGdyYXBoaWNfZnJhbWVfbG9ja19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOCk7XHJcbmNsYXNzIEdyYXBoaWNGcmFtZUxvY2tzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhOmdyYXBoaWNGcmFtZUxvY2tzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBncmFwaGljX2ZyYW1lX2xvY2tfYXR0cmlidXRlc18xLkdyYXBoaWNGcmFtZUxvY2tBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgeG1sbnM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIixcclxuICAgICAgICAgICAgbm9DaGFuZ2VBc3BlY3Q6IDEsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuR3JhcGhpY0ZyYW1lTG9ja3MgPSBHcmFwaGljRnJhbWVMb2NrcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEdyYXBoaWNGcmFtZUxvY2tBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcInhtbG5zOmFcIixcclxuICAgICAgICAgICAgbm9DaGFuZ2VBc3BlY3Q6IFwibm9DaGFuZ2VBc3BlY3RcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuR3JhcGhpY0ZyYW1lTG9ja0F0dHJpYnV0ZXMgPSBHcmFwaGljRnJhbWVMb2NrQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjEwKSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBkb2NfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nik7XHJcbmNvbnN0IGVmZmVjdF9leHRlbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpO1xyXG5jb25zdCBleHRlbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpO1xyXG5jb25zdCBncmFwaGljX2ZyYW1lX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xyXG5jb25zdCBncmFwaGljXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcclxuY29uc3QgaW5saW5lX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjExKTtcclxuY2xhc3MgSW5saW5lIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhLCBkaW1lbnNpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3cDppbmxpbmVcIik7XHJcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gZGltZW5zaW9ucztcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgaW5saW5lX2F0dHJpYnV0ZXNfMS5JbmxpbmVBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgZGlzdFQ6IDAsXHJcbiAgICAgICAgICAgIGRpc3RCOiAwLFxyXG4gICAgICAgICAgICBkaXN0TDogMCxcclxuICAgICAgICAgICAgZGlzdFI6IDAsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMuZXh0ZW50ID0gbmV3IGV4dGVudF8xLkV4dGVudChkaW1lbnNpb25zLmVtdXMueCwgZGltZW5zaW9ucy5lbXVzLnkpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpYyA9IG5ldyBncmFwaGljXzEuR3JhcGhpYyhtZWRpYURhdGEsIGRpbWVuc2lvbnMuZW11cy54LCBkaW1lbnNpb25zLmVtdXMueSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5leHRlbnQpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBlZmZlY3RfZXh0ZW50XzEuRWZmZWN0RXh0ZW50KCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkb2NfcHJvcGVydGllc18xLkRvY1Byb3BlcnRpZXMoKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGdyYXBoaWNfZnJhbWVfcHJvcGVydGllc18xLkdyYXBoaWNGcmFtZVByb3BlcnRpZXMoKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5ncmFwaGljKTtcclxuICAgIH1cclxuICAgIHNjYWxlKGZhY3RvclgsIGZhY3RvclkpIHtcclxuICAgICAgICBjb25zdCBuZXdYID0gTWF0aC5yb3VuZCh0aGlzLmRpbWVuc2lvbnMuZW11cy54ICogZmFjdG9yWCk7XHJcbiAgICAgICAgY29uc3QgbmV3WSA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLmVtdXMueSAqIGZhY3RvclkpO1xyXG4gICAgICAgIHRoaXMuZXh0ZW50LnNldFhZKG5ld1gsIG5ld1kpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpYy5zZXRYWShuZXdYLCBuZXdZKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLklubGluZSA9IElubGluZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIElubGluZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcclxuICAgICAgICAgICAgZGlzdEI6IFwiZGlzdEJcIixcclxuICAgICAgICAgICAgZGlzdEw6IFwiZGlzdExcIixcclxuICAgICAgICAgICAgZGlzdFI6IFwiZGlzdFJcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSW5saW5lQXR0cmlidXRlcyA9IElubGluZUF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHJ1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuY29uc3QgZmllbGRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5jb25zdCBzZXF1ZW50aWFsX2lkZW50aWZpZXJfaW5zdHJ1Y3Rpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEzKTtcclxuY2xhc3MgU2VxdWVudGlhbElkZW50aWZpZXIgZXh0ZW5kcyBydW5fMS5SdW4ge1xyXG4gICAgY29uc3RydWN0b3IoaWRlbnRpZmllcikge1xyXG4gICAgICAgIHN1cGVyKHt9KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5CZWdpbih0cnVlKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHNlcXVlbnRpYWxfaWRlbnRpZmllcl9pbnN0cnVjdGlvbl8xLlNlcXVlbnRpYWxJZGVudGlmaWVySW5zdHJ1Y3Rpb24oaWRlbnRpZmllcikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLlNlcGFyYXRlKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmaWVsZF8xLkVuZCgpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNlcXVlbnRpYWxJZGVudGlmaWVyID0gU2VxdWVudGlhbElkZW50aWZpZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHNwYWNlX3R5cGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBUZXh0QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBzcGFjZTogXCJ4bWw6c3BhY2VcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFNlcXVlbnRpYWxJZGVudGlmaWVySW5zdHJ1Y3Rpb24gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogc3BhY2VfdHlwZV8xLlNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goYFNFUSAke2lkZW50aWZpZXJ9YCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TZXF1ZW50aWFsSWRlbnRpZmllckluc3RydWN0aW9uID0gU2VxdWVudGlhbElkZW50aWZpZXJJbnN0cnVjdGlvbjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFRhYiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YWJcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWIgPSBUYWI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBsaW5rc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XHJcbmNvbnN0IHByb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcbmNsYXNzIFBhcmFncmFwaCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6cFwiKTtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbmV3IHByb3BlcnRpZXNfMS5QYXJhZ3JhcGhQcm9wZXJ0aWVzKHt9KTtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5wcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHJ1bl8xLlRleHRSdW4ob3B0aW9ucykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgcnVuXzEuUGljdHVyZVJ1bikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgcHJvcGVydGllc18xLlBhcmFncmFwaFByb3BlcnRpZXMoe30pO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChvcHRpb25zKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgcHJvcGVydGllc18xLlBhcmFncmFwaFByb3BlcnRpZXMob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5wcm9wZXJ0aWVzKTtcclxuICAgICAgICBpZiAob3B0aW9ucy50ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBydW5fMS5UZXh0UnVuKG9wdGlvbnMudGV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG9wdGlvbnMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIGxpbmtzXzEuQm9va21hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZC5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQudGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQuZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByZXBGb3JYbWwoZmlsZSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLnJvb3QpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBsaW5rc18xLkh5cGVybGlua1JlZikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnJvb3QuaW5kZXhPZihlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdFtpbmRleF0gPSBmaWxlLkh5cGVybGlua0NhY2hlW2VsZW1lbnQuaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5wcmVwRm9yWG1sKCk7XHJcbiAgICB9XHJcbiAgICBhZGRSdW5Ub0Zyb250KHJ1bikge1xyXG4gICAgICAgIHRoaXMucm9vdC5zcGxpY2UoMSwgMCwgcnVuKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBhcmFncmFwaCA9IFBhcmFncmFwaDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHJ1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuY29uc3QgaHlwZXJsaW5rX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjE3KTtcclxudmFyIEh5cGVybGlua1R5cGU7XHJcbihmdW5jdGlvbiAoSHlwZXJsaW5rVHlwZSkge1xyXG4gICAgSHlwZXJsaW5rVHlwZVtcIklOVEVSTkFMXCJdID0gXCJJTlRFUk5BTFwiO1xyXG4gICAgSHlwZXJsaW5rVHlwZVtcIkVYVEVSTkFMXCJdID0gXCJFWFRFUk5BTFwiO1xyXG59KShIeXBlcmxpbmtUeXBlID0gZXhwb3J0cy5IeXBlcmxpbmtUeXBlIHx8IChleHBvcnRzLkh5cGVybGlua1R5cGUgPSB7fSkpO1xyXG5jbGFzcyBIeXBlcmxpbmtSZWYge1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IeXBlcmxpbmtSZWYgPSBIeXBlcmxpbmtSZWY7XHJcbmNsYXNzIEh5cGVybGluayBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHRleHQsIHJlbGF0aW9uc2hpcElkLCBhbmNob3IpIHtcclxuICAgICAgICBzdXBlcihcInc6aHlwZXJsaW5rXCIpO1xyXG4gICAgICAgIHRoaXMubGlua0lkID0gcmVsYXRpb25zaGlwSWQ7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XHJcbiAgICAgICAgICAgIGhpc3Rvcnk6IDEsXHJcbiAgICAgICAgICAgIGFuY2hvcjogYW5jaG9yID8gYW5jaG9yIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBpZDogIWFuY2hvciA/IGBySWQke3RoaXMubGlua0lkfWAgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IGh5cGVybGlua19hdHRyaWJ1dGVzXzEuSHlwZXJsaW5rQXR0cmlidXRlcyhwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goYXR0cmlidXRlcyk7XHJcbiAgICAgICAgdGhpcy50ZXh0UnVuID0gbmV3IHJ1bl8xLlRleHRSdW4oe1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICBzdHlsZTogXCJIeXBlcmxpbmtcIixcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnRleHRSdW4pO1xyXG4gICAgfVxyXG4gICAgZ2V0IFRleHRSdW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dFJ1bjtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkh5cGVybGluayA9IEh5cGVybGluaztcclxuXG5cbi8qKiovIH0pLFxuLyogMjE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEh5cGVybGlua0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgaWQ6IFwicjppZFwiLFxyXG4gICAgICAgICAgICBoaXN0b3J5OiBcInc6aGlzdG9yeVwiLFxyXG4gICAgICAgICAgICBhbmNob3I6IFwidzphbmNob3JcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSHlwZXJsaW5rQXR0cmlidXRlcyA9IEh5cGVybGlua0F0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBzaG9ydGlkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XHJcbmNvbnN0IHJ1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuY29uc3QgYm9va21hcmtfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjcpO1xyXG5jbGFzcyBCb29rbWFyayB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgbGlua0lkID0gc2hvcnRpZC5nZW5lcmF0ZSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydCA9IG5ldyBCb29rbWFya1N0YXJ0KG5hbWUsIGxpbmtJZCk7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gbmV3IHJ1bl8xLlRleHRSdW4odGV4dCk7XHJcbiAgICAgICAgdGhpcy5lbmQgPSBuZXcgQm9va21hcmtFbmQobGlua0lkKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJvb2ttYXJrID0gQm9va21hcms7XHJcbmNsYXNzIEJvb2ttYXJrU3RhcnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBsaW5rSWQpIHtcclxuICAgICAgICBzdXBlcihcInc6Ym9va21hcmtTdGFydFwiKTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IGJvb2ttYXJrX2F0dHJpYnV0ZXNfMS5Cb29rbWFya1N0YXJ0QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIGlkOiBsaW5rSWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Cb29rbWFya1N0YXJ0ID0gQm9va21hcmtTdGFydDtcclxuY2xhc3MgQm9va21hcmtFbmQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihsaW5rSWQpIHtcclxuICAgICAgICBzdXBlcihcInc6Ym9va21hcmtFbmRcIik7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBib29rbWFya19hdHRyaWJ1dGVzXzEuQm9va21hcmtFbmRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgaWQ6IGxpbmtJZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJvb2ttYXJrRW5kID0gQm9va21hcmtFbmQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYWxwaGFiZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcbnZhciBidWlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjIxKTtcbnZhciBpc1ZhbGlkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjUpO1xuXG4vLyBpZiB5b3UgYXJlIHVzaW5nIGNsdXN0ZXIgb3IgbXVsdGlwbGUgc2VydmVycyB1c2UgdGhpcyB0byBtYWtlIGVhY2ggaW5zdGFuY2Vcbi8vIGhhcyBhIHVuaXF1ZSB2YWx1ZSBmb3Igd29ya2VyXG4vLyBOb3RlOiBJIGRvbid0IGtub3cgaWYgdGhpcyBpcyBhdXRvbWF0aWNhbGx5IHNldCB3aGVuIHVzaW5nIHRoaXJkXG4vLyBwYXJ0eSBjbHVzdGVyIHNvbHV0aW9ucyBzdWNoIGFzIHBtMi5cbnZhciBjbHVzdGVyV29ya2VySWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNikgfHwgMDtcblxuLyoqXG4gKiBTZXQgdGhlIHNlZWQuXG4gKiBIaWdobHkgcmVjb21tZW5kZWQgaWYgeW91IGRvbid0IHdhbnQgcGVvcGxlIHRvIHRyeSB0byBmaWd1cmUgb3V0IHlvdXIgaWQgc2NoZW1hLlxuICogZXhwb3NlZCBhcyBzaG9ydGlkLnNlZWQoaW50KVxuICogQHBhcmFtIHNlZWQgSW50ZWdlciB2YWx1ZSB0byBzZWVkIHRoZSByYW5kb20gYWxwaGFiZXQuICBBTFdBWVMgVVNFIFRIRSBTQU1FIFNFRUQgb3IgeW91IG1pZ2h0IGdldCBvdmVybGFwcy5cbiAqL1xuZnVuY3Rpb24gc2VlZChzZWVkVmFsdWUpIHtcbiAgICBhbHBoYWJldC5zZWVkKHNlZWRWYWx1ZSk7XG4gICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vKipcbiAqIFNldCB0aGUgY2x1c3RlciB3b3JrZXIgb3IgbWFjaGluZSBpZFxuICogZXhwb3NlZCBhcyBzaG9ydGlkLndvcmtlcihpbnQpXG4gKiBAcGFyYW0gd29ya2VySWQgd29ya2VyIG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlci4gIE51bWJlciBsZXNzIHRoYW4gMTYgaXMgcmVjb21tZW5kZWQuXG4gKiByZXR1cm5zIHNob3J0aWQgbW9kdWxlIHNvIGl0IGNhbiBiZSBjaGFpbmVkLlxuICovXG5mdW5jdGlvbiB3b3JrZXIod29ya2VySWQpIHtcbiAgICBjbHVzdGVyV29ya2VySWQgPSB3b3JrZXJJZDtcbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8qKlxuICpcbiAqIHNldHMgbmV3IGNoYXJhY3RlcnMgdG8gdXNlIGluIHRoZSBhbHBoYWJldFxuICogcmV0dXJucyB0aGUgc2h1ZmZsZWQgYWxwaGFiZXRcbiAqL1xuZnVuY3Rpb24gY2hhcmFjdGVycyhuZXdDaGFyYWN0ZXJzKSB7XG4gICAgaWYgKG5ld0NoYXJhY3RlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhbHBoYWJldC5jaGFyYWN0ZXJzKG5ld0NoYXJhY3RlcnMpO1xuICAgIH1cblxuICAgIHJldHVybiBhbHBoYWJldC5zaHVmZmxlZCgpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIHVuaXF1ZSBpZFxuICogUmV0dXJucyBzdHJpbmcgaWRcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG4gIHJldHVybiBidWlsZChjbHVzdGVyV29ya2VySWQpO1xufVxuXG4vLyBFeHBvcnQgYWxsIG90aGVyIGZ1bmN0aW9ucyBhcyBwcm9wZXJ0aWVzIG9mIHRoZSBnZW5lcmF0ZSBmdW5jdGlvblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZTtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5tb2R1bGUuZXhwb3J0cy5zZWVkID0gc2VlZDtcbm1vZHVsZS5leHBvcnRzLndvcmtlciA9IHdvcmtlcjtcbm1vZHVsZS5leHBvcnRzLmNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzO1xubW9kdWxlLmV4cG9ydHMuaXNWYWxpZCA9IGlzVmFsaWQ7XG5cblxuLyoqKi8gfSksXG4vKiAyMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gRm91bmQgdGhpcyBzZWVkLWJhc2VkIHJhbmRvbSBnZW5lcmF0b3Igc29tZXdoZXJlXG4vLyBCYXNlZCBvbiBUaGUgQ2VudHJhbCBSYW5kb21pemVyIDEuMyAoQykgMTk5NyBieSBQYXVsIEhvdWxlIChob3VsZUBtc2MuY29ybmVsbC5lZHUpXG5cbnZhciBzZWVkID0gMTtcblxuLyoqXG4gKiByZXR1cm4gYSByYW5kb20gbnVtYmVyIGJhc2VkIG9uIGEgc2VlZFxuICogQHBhcmFtIHNlZWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldE5leHRWYWx1ZSgpIHtcbiAgICBzZWVkID0gKHNlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xuICAgIHJldHVybiBzZWVkLygyMzMyODAuMCk7XG59XG5cbmZ1bmN0aW9uIHNldFNlZWQoX3NlZWRfKSB7XG4gICAgc2VlZCA9IF9zZWVkXztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmV4dFZhbHVlOiBnZXROZXh0VmFsdWUsXG4gICAgc2VlZDogc2V0U2VlZFxufTtcblxuXG4vKioqLyB9KSxcbi8qIDIyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2VuZXJhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMik7XG52YXIgYWxwaGFiZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxuLy8gSWdub3JlIGFsbCBtaWxsaXNlY29uZHMgYmVmb3JlIGEgY2VydGFpbiB0aW1lIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiB0aGUgZGF0ZSBlbnRyb3B5IHdpdGhvdXQgc2FjcmlmaWNpbmcgdW5pcXVlbmVzcy5cbi8vIFRoaXMgbnVtYmVyIHNob3VsZCBiZSB1cGRhdGVkIGV2ZXJ5IHllYXIgb3Igc28gdG8ga2VlcCB0aGUgZ2VuZXJhdGVkIGlkIHNob3J0LlxuLy8gVG8gcmVnZW5lcmF0ZSBgbmV3IERhdGUoKSAtIDBgIGFuZCBidW1wIHRoZSB2ZXJzaW9uLiBBbHdheXMgYnVtcCB0aGUgdmVyc2lvbiFcbnZhciBSRURVQ0VfVElNRSA9IDE1Njc3NTI4MDIwNjI7XG5cbi8vIGRvbid0IGNoYW5nZSB1bmxlc3Mgd2UgY2hhbmdlIHRoZSBhbGdvcyBvciBSRURVQ0VfVElNRVxuLy8gbXVzdCBiZSBhbiBpbnRlZ2VyIGFuZCBsZXNzIHRoYW4gMTZcbnZhciB2ZXJzaW9uID0gNztcblxuLy8gQ291bnRlciBpcyB1c2VkIHdoZW4gc2hvcnRpZCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgaW4gb25lIHNlY29uZC5cbnZhciBjb3VudGVyO1xuXG4vLyBSZW1lbWJlciB0aGUgbGFzdCB0aW1lIHNob3J0aWQgd2FzIGNhbGxlZCBpbiBjYXNlIGNvdW50ZXIgaXMgbmVlZGVkLlxudmFyIHByZXZpb3VzU2Vjb25kcztcblxuLyoqXG4gKiBHZW5lcmF0ZSB1bmlxdWUgaWRcbiAqIFJldHVybnMgc3RyaW5nIGlkXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkKGNsdXN0ZXJXb3JrZXJJZCkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIFJFRFVDRV9USU1FKSAqIDAuMDAxKTtcblxuICAgIGlmIChzZWNvbmRzID09PSBwcmV2aW91c1NlY29uZHMpIHtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgICBwcmV2aW91c1NlY29uZHMgPSBzZWNvbmRzO1xuICAgIH1cblxuICAgIHN0ciA9IHN0ciArIGdlbmVyYXRlKHZlcnNpb24pO1xuICAgIHN0ciA9IHN0ciArIGdlbmVyYXRlKGNsdXN0ZXJXb3JrZXJJZCk7XG4gICAgaWYgKGNvdW50ZXIgPiAwKSB7XG4gICAgICAgIHN0ciA9IHN0ciArIGdlbmVyYXRlKGNvdW50ZXIpO1xuICAgIH1cbiAgICBzdHIgPSBzdHIgKyBnZW5lcmF0ZShzZWNvbmRzKTtcbiAgICByZXR1cm4gc3RyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkO1xuXG5cbi8qKiovIH0pLFxuLyogMjIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhbHBoYWJldCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xudmFyIHJhbmRvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIzKTtcbnZhciBmb3JtYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNCk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG51bWJlcikge1xuICAgIHZhciBsb29wQ291bnRlciA9IDA7XG4gICAgdmFyIGRvbmU7XG5cbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgICAgc3RyID0gc3RyICsgZm9ybWF0KHJhbmRvbSwgYWxwaGFiZXQuZ2V0KCksIDEpO1xuICAgICAgICBkb25lID0gbnVtYmVyIDwgKE1hdGgucG93KDE2LCBsb29wQ291bnRlciArIDEgKSApO1xuICAgICAgICBsb29wQ291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlO1xuXG5cbi8qKiovIH0pLFxuLyogMjIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjcnlwdG8gPSB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiAod2luZG93LmNyeXB0byB8fCB3aW5kb3cubXNDcnlwdG8pOyAvLyBJRSAxMSB1c2VzIHdpbmRvdy5tc0NyeXB0b1xuXG52YXIgcmFuZG9tQnl0ZTtcblxuaWYgKCFjcnlwdG8gfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICByYW5kb21CeXRlID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH07XG59IGVsc2Uge1xuICAgIHJhbmRvbUJ5dGUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGU7XG5cblxuLyoqKi8gfSksXG4vKiAyMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmFuZG9tLCBhbHBoYWJldCwgc2l6ZSkge1xuICB2YXIgbWFzayA9ICgyIDw8IE1hdGgubG9nKGFscGhhYmV0Lmxlbmd0aCAtIDEpIC8gTWF0aC5MTjIpIC0gMVxuICB2YXIgc3RlcCA9IE1hdGguY2VpbCgxLjYgKiBtYXNrICogc2l6ZSAvIGFscGhhYmV0Lmxlbmd0aClcbiAgdmFyIGlkID0gJydcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBpID0gc3RlcFxuICAgIHZhciBieXRlcyA9IHJhbmRvbShpKVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlkICs9IGFscGhhYmV0W2J5dGVzW2ldICYgbWFza10gfHwgJydcbiAgICAgIGlmIChpZC5sZW5ndGggPT09ICtzaXplKSByZXR1cm4gaWRcbiAgICB9XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcbi8qIDIyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFscGhhYmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbmZ1bmN0aW9uIGlzU2hvcnRJZChpZCkge1xuICAgIGlmICghaWQgfHwgdHlwZW9mIGlkICE9PSAnc3RyaW5nJyB8fCBpZC5sZW5ndGggPCA2ICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG5vbkFscGhhYmV0aWMgPSBuZXcgUmVnRXhwKCdbXicgK1xuICAgICAgYWxwaGFiZXQuZ2V0KCkucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy4tXS9nLCAnXFxcXCQmJykgK1xuICAgICddJyk7XG4gICAgcmV0dXJuICFub25BbHBoYWJldGljLnRlc3QoaWQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2hvcnRJZDtcblxuXG4vKioqLyB9KSxcbi8qIDIyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IDA7XG5cblxuLyoqKi8gfSksXG4vKiAyMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgQm9va21hcmtTdGFydEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgaWQ6IFwidzppZFwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcInc6bmFtZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Cb29rbWFya1N0YXJ0QXR0cmlidXRlcyA9IEJvb2ttYXJrU3RhcnRBdHRyaWJ1dGVzO1xyXG5jbGFzcyBCb29rbWFya0VuZEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgaWQ6IFwidzppZFwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Cb29rbWFya0VuZEF0dHJpYnV0ZXMgPSBCb29rbWFya0VuZEF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBPdXRsaW5lTGV2ZWwgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihsZXZlbCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpvdXRsaW5lTHZsXCIpO1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiBsZXZlbCxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5PdXRsaW5lTGV2ZWwgPSBPdXRsaW5lTGV2ZWw7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBCaWRpcmVjdGlvbmFsIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmJpZGlcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CaWRpcmVjdGlvbmFsID0gQmlkaXJlY3Rpb25hbDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjMxKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjMyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjM0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIzOSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI0OCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI0OSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1MikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1NCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgTWF0aCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcIm06b01hdGhcIik7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoID0gTWF0aDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IG1hdGhfdGV4dF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzMpO1xyXG5jbGFzcyBNYXRoUnVuIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodGV4dCkge1xyXG4gICAgICAgIHN1cGVyKFwibTpyXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX3RleHRfMS5NYXRoVGV4dCh0ZXh0KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoUnVuID0gTWF0aFJ1bjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhUZXh0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodGV4dCkge1xyXG4gICAgICAgIHN1cGVyKFwibTp0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRleHQpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aFRleHQgPSBNYXRoVGV4dDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjM1KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oODYpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg4NykpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgbWF0aF9kZW5vbWluYXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nik7XHJcbmNvbnN0IG1hdGhfbnVtZXJhdG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KTtcclxuY2xhc3MgTWF0aEZyYWN0aW9uIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpmXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX251bWVyYXRvcl8xLk1hdGhOdW1lcmF0b3Iob3B0aW9ucy5udW1lcmF0b3IpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9kZW5vbWluYXRvcl8xLk1hdGhEZW5vbWluYXRvcihvcHRpb25zLmRlbm9taW5hdG9yKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoRnJhY3Rpb24gPSBNYXRoRnJhY3Rpb247XHJcblxuXG4vKioqLyB9KSxcbi8qIDIzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoU3ViU2NyaXB0SGlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgaGlkZTogXCJtOnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWF0aFN1YlNjcmlwdEhpZGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIm06c3ViSGlkZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1YlNjcmlwdEhpZGVBdHRyaWJ1dGVzKHsgaGlkZTogMSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoU3ViU2NyaXB0SGlkZSA9IE1hdGhTdWJTY3JpcHRIaWRlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgTWF0aFN1cGVyU2NyaXB0SGlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgaGlkZTogXCJtOnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWF0aFN1cGVyU2NyaXB0SGlkZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwibTpzdXBIaWRlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRIaWRlQXR0cmlidXRlcyh7IGhpZGU6IDEgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aFN1cGVyU2NyaXB0SGlkZSA9IE1hdGhTdXBlclNjcmlwdEhpZGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBtYXRoX2Jhc2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODkpO1xyXG5jb25zdCBtYXRoX25hcmF5X3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpO1xyXG5jb25zdCBtYXRoX3N1Yl9zY3JpcHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTIpO1xyXG5jb25zdCBtYXRoX3N1cGVyX3NjcmlwdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7XHJcbmNsYXNzIE1hdGhTdW0gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOm5hcnlcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfbmFyYXlfcHJvcGVydGllc18xLk1hdGhOQXJheVByb3BlcnRpZXMoXCLiiJFcIiwgISFvcHRpb25zLnN1cGVyU2NyaXB0LCAhIW9wdGlvbnMuc3ViU2NyaXB0KSk7XHJcbiAgICAgICAgaWYgKCEhb3B0aW9ucy5zdWJTY3JpcHQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfc3ViX3NjcmlwdF8xLk1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMuc3ViU2NyaXB0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghIW9wdGlvbnMuc3VwZXJTY3JpcHQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfc3VwZXJfc2NyaXB0XzEuTWF0aFN1cGVyU2NyaXB0RWxlbWVudChvcHRpb25zLnN1cGVyU2NyaXB0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX2Jhc2VfMS5NYXRoQmFzZShvcHRpb25zLmNoaWxkcmVuKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoU3VtID0gTWF0aFN1bTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjM5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQwKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQ0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQ2KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI0MSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBuX2FyeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuY29uc3QgbWF0aF9zdXBlcl9zY3JpcHRfZnVuY3Rpb25fcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XHJcbmNsYXNzIE1hdGhTdXBlclNjcmlwdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcIm06c1N1cFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9zdXBlcl9zY3JpcHRfZnVuY3Rpb25fcHJvcGVydGllc18xLk1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMoKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG5fYXJ5XzEuTWF0aEJhc2Uob3B0aW9ucy5jaGlsZHJlbikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9ucy5zdXBlclNjcmlwdCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aFN1cGVyU2NyaXB0ID0gTWF0aFN1cGVyU2NyaXB0O1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNDMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5NSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgbl9hcnlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbmNvbnN0IG1hdGhfc3ViX3NjcmlwdF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1KTtcclxuY2xhc3MgTWF0aFN1YlNjcmlwdCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcIm06c1N1YlwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9zdWJfc2NyaXB0X2Z1bmN0aW9uX3Byb3BlcnRpZXNfMS5NYXRoU3ViU2NyaXB0UHJvcGVydGllcygpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbl9hcnlfMS5NYXRoQmFzZShvcHRpb25zLmNoaWxkcmVuKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG5fYXJ5XzEuTWF0aFN1YlNjcmlwdEVsZW1lbnQob3B0aW9ucy5zdWJTY3JpcHQpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhTdWJTY3JpcHQgPSBNYXRoU3ViU2NyaXB0O1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNDUpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5NikpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgbl9hcnlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbmNvbnN0IG1hdGhfc3ViX3N1cGVyX3NjcmlwdF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KTtcclxuY2xhc3MgTWF0aFN1YlN1cGVyU2NyaXB0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpzU3ViU3VwXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX3N1Yl9zdXBlcl9zY3JpcHRfZnVuY3Rpb25fcHJvcGVydGllc18xLk1hdGhTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMoKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG5fYXJ5XzEuTWF0aEJhc2Uob3B0aW9ucy5jaGlsZHJlbikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMuc3ViU2NyaXB0KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG5fYXJ5XzEuTWF0aFN1cGVyU2NyaXB0RWxlbWVudChvcHRpb25zLnN1cGVyU2NyaXB0KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoU3ViU3VwZXJTY3JpcHQgPSBNYXRoU3ViU3VwZXJTY3JpcHQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBuX2FyeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuY29uc3QgbWF0aF9wcmVfc3ViX3N1cGVyX3NjcmlwdF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KTtcclxuY2xhc3MgTWF0aFByZVN1YlN1cGVyU2NyaXB0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpzUHJlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX3ByZV9zdWJfc3VwZXJfc2NyaXB0X2Z1bmN0aW9uX3Byb3BlcnRpZXNfMS5NYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbl9hcnlfMS5NYXRoU3ViU2NyaXB0RWxlbWVudChvcHRpb25zLnN1YlNjcmlwdCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9ucy5zdXBlclNjcmlwdCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWF0aFByZVN1YlN1cGVyU2NyaXB0ID0gTWF0aFByZVN1YlN1cGVyU2NyaXB0O1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLldPUktBUk9VTkQ0ID0gXCJcIjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oOTgpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNTApKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg5OSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgbl9hcnlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbmNvbnN0IG1hdGhfZGVncmVlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KTtcclxuY29uc3QgbWF0aF9yYWRpY2FsX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xyXG5jbGFzcyBNYXRoUmFkaWNhbCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcIm06cmFkXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX3JhZGljYWxfcHJvcGVydGllc18xLk1hdGhSYWRpY2FsUHJvcGVydGllcyghIW9wdGlvbnMuZGVncmVlKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfZGVncmVlXzEuTWF0aERlZ3JlZShvcHRpb25zLmRlZ3JlZSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhSYWRpY2FsID0gTWF0aFJhZGljYWw7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoRGVncmVlSGlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgaGlkZTogXCJtOnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWF0aERlZ3JlZUhpZGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIm06ZGVnSGlkZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aERlZ3JlZUhpZGVBdHRyaWJ1dGVzKHsgaGlkZTogMSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoRGVncmVlSGlkZSA9IE1hdGhEZWdyZWVIaWRlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNTMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMDApKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjUzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IG5fYXJ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG5jb25zdCBtYXRoX2Z1bmN0aW9uX25hbWVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcclxuY29uc3QgbWF0aF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7XHJcbmNsYXNzIE1hdGhGdW5jdGlvbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcIm06ZnVuY1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9mdW5jdGlvbl9wcm9wZXJ0aWVzXzEuTWF0aEZ1bmN0aW9uUHJvcGVydGllcygpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbWF0aF9mdW5jdGlvbl9uYW1lXzEuTWF0aEZ1bmN0aW9uTmFtZShvcHRpb25zLm5hbWUpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgbl9hcnlfMS5NYXRoQmFzZShvcHRpb25zLmNoaWxkcmVuKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoRnVuY3Rpb24gPSBNYXRoRnVuY3Rpb247XHJcblxuXG4vKioqLyB9KSxcbi8qIDI1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1NSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1OCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1OSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgbl9hcnlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbmNvbnN0IG1hdGhfYnJhY2tldF9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcclxuY2xhc3MgTWF0aFJvdW5kQnJhY2tldHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOmRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfYnJhY2tldF9wcm9wZXJ0aWVzXzEuTWF0aEJyYWNrZXRQcm9wZXJ0aWVzKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhSb3VuZEJyYWNrZXRzID0gTWF0aFJvdW5kQnJhY2tldHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBjaGFyYWN0ZXI6IFwibTp2YWxcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIE1hdGhCZWdpbm5pbmdDaGFyYWN0ZXIgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXIpIHtcclxuICAgICAgICBzdXBlcihcIm06YmVnQ2hyXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyh7IGNoYXJhY3RlciB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NYXRoQmVnaW5uaW5nQ2hhcmFjdGVyID0gTWF0aEJlZ2lubmluZ0NoYXJhY3RlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIE1hdGhFbmRpbmdDaGFyYWN0ZXJBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IGNoYXJhY3RlcjogXCJtOnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWF0aEVuZGluZ0NoYXJhY3RlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoYXJhY3Rlcikge1xyXG4gICAgICAgIHN1cGVyKFwibTplbmRDaHJcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhFbmRpbmdDaGFyYWN0ZXJBdHRyaWJ1dGVzKHsgY2hhcmFjdGVyIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhFbmRpbmdDaGFyYWN0ZXIgPSBNYXRoRW5kaW5nQ2hhcmFjdGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgbl9hcnlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbmNvbnN0IG1hdGhfYnJhY2tldF9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcclxuY2xhc3MgTWF0aFNxdWFyZUJyYWNrZXRzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpkXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX2JyYWNrZXRfcHJvcGVydGllc18xLk1hdGhCcmFja2V0UHJvcGVydGllcyh7XHJcbiAgICAgICAgICAgIGJlZ2lubmluZ0NoYXJhY3RlcjogXCJbXCIsXHJcbiAgICAgICAgICAgIGVuZGluZ0NoYXJhY3RlcjogXCJdXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhTcXVhcmVCcmFja2V0cyA9IE1hdGhTcXVhcmVCcmFja2V0cztcclxuXG5cbi8qKiovIH0pLFxuLyogMjU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IG5fYXJ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG5jb25zdCBtYXRoX2JyYWNrZXRfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XHJcbmNsYXNzIE1hdGhDdXJseUJyYWNrZXRzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwibTpkXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBtYXRoX2JyYWNrZXRfcHJvcGVydGllc18xLk1hdGhCcmFja2V0UHJvcGVydGllcyh7XHJcbiAgICAgICAgICAgIGJlZ2lubmluZ0NoYXJhY3RlcjogXCJ7XCIsXHJcbiAgICAgICAgICAgIGVuZGluZ0NoYXJhY3RlcjogXCJ9XCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhDdXJseUJyYWNrZXRzID0gTWF0aEN1cmx5QnJhY2tldHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBuX2FyeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuY29uc3QgbWF0aF9icmFja2V0X3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xyXG5jbGFzcyBNYXRoQW5nbGVkQnJhY2tldHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJtOmRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG1hdGhfYnJhY2tldF9wcm9wZXJ0aWVzXzEuTWF0aEJyYWNrZXRQcm9wZXJ0aWVzKHtcclxuICAgICAgICAgICAgYmVnaW5uaW5nQ2hhcmFjdGVyOiBcIuKMqVwiLFxyXG4gICAgICAgICAgICBlbmRpbmdDaGFyYWN0ZXI6IFwi4oyqXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBuX2FyeV8xLk1hdGhCYXNlKG9wdGlvbnMuY2hpbGRyZW4pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hdGhBbmdsZWRCcmFja2V0cyA9IE1hdGhBbmdsZWRCcmFja2V0cztcclxuXG5cbi8qKiovIH0pLFxuLyogMjYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjYyKSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMDIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzOCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI3NykpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZ3JpZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjMpO1xyXG5jb25zdCB0YWJsZV9jZWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcclxuY29uc3QgdGFibGVfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDIpO1xyXG5jbGFzcyBUYWJsZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgcm93cywgd2lkdGgsIGNvbHVtbldpZHRocyA9IEFycmF5KE1hdGgubWF4KC4uLnJvd3MubWFwKChyb3cpID0+IHJvdy5DZWxsQ291bnQpKSkuZmlsbCgxMDApLCBtYXJnaW5zOiB7IG1hcmdpblVuaXRUeXBlLCB0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnQgfSA9IHsgbWFyZ2luVW5pdFR5cGU6IHRhYmxlX2NlbGxfMS5XaWR0aFR5cGUuQVVUTywgdG9wOiAwLCBib3R0b206IDAsIHJpZ2h0OiAwLCBsZWZ0OiAwIH0sIGZsb2F0LCBsYXlvdXQsIGJvcmRlcnMsIGFsaWdubWVudCwgfSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxcIik7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbmV3IHRhYmxlX3Byb3BlcnRpZXNfMS5UYWJsZVByb3BlcnRpZXMoKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xyXG4gICAgICAgIGlmIChib3JkZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRCb3JkZXIoYm9yZGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuc2V0Qm9yZGVyKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRXaWR0aCh3aWR0aC5zaXplLCB3aWR0aC50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRXaWR0aCgxMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuQ2VsbE1hcmdpbi5hZGRCb3R0b21NYXJnaW4oYm90dG9tIHx8IDAsIG1hcmdpblVuaXRUeXBlKTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuQ2VsbE1hcmdpbi5hZGRUb3BNYXJnaW4odG9wIHx8IDAsIG1hcmdpblVuaXRUeXBlKTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuQ2VsbE1hcmdpbi5hZGRMZWZ0TWFyZ2luKGxlZnQgfHwgMCwgbWFyZ2luVW5pdFR5cGUpO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcy5DZWxsTWFyZ2luLmFkZFJpZ2h0TWFyZ2luKHJpZ2h0IHx8IDAsIG1hcmdpblVuaXRUeXBlKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZ3JpZF8xLlRhYmxlR3JpZChjb2x1bW5XaWR0aHMpKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKHJvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvd3MuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocm93SW5kZXggPT09IHJvd3MubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjb2x1bW5JbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHJvdy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5vcHRpb25zLnJvd1NwYW4gJiYgY2VsbC5vcHRpb25zLnJvd1NwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGludWVDZWxsID0gbmV3IHRhYmxlX2NlbGxfMS5UYWJsZUNlbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTcGFuOiBjZWxsLm9wdGlvbnMucm93U3BhbiAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtblNwYW46IGNlbGwub3B0aW9ucy5jb2x1bW5TcGFuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJzOiBjZWxsLm9wdGlvbnMuYm9yZGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE1lcmdlOiB0YWJsZV9jZWxsXzEuVmVydGljYWxNZXJnZVR5cGUuQ09OVElOVUUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93c1tyb3dJbmRleCArIDFdLmFkZENlbGxUb0NvbHVtbkluZGV4KGNvbnRpbnVlQ2VsbCwgY29sdW1uSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXggKz0gY2VsbC5vcHRpb25zLmNvbHVtblNwYW4gfHwgMTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGZsb2F0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRUYWJsZUZsb2F0UHJvcGVydGllcyhmbG9hdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXlvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldExheW91dChsYXlvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRBbGlnbm1lbnQoYWxpZ25tZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZSA9IFRhYmxlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGFibGVHcmlkIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGhzKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnRibEdyaWRcIik7XHJcbiAgICAgICAgZm9yIChjb25zdCB3aWR0aCBvZiB3aWR0aHMpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEdyaWRDb2wod2lkdGgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZUdyaWQgPSBUYWJsZUdyaWQ7XHJcbmNsYXNzIEdyaWRDb2xBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7IHc6IFwidzp3XCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBHcmlkQ29sIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgpIHtcclxuICAgICAgICBzdXBlcihcInc6Z3JpZENvbFwiKTtcclxuICAgICAgICBpZiAod2lkdGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgR3JpZENvbEF0dHJpYnV0ZXMoeyB3OiB3aWR0aCB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuR3JpZENvbCA9IEdyaWRDb2w7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHBhcmFncmFwaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHRhYmxlX2NlbGxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XHJcbmNvbnN0IHRhYmxlX2NlbGxfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUpO1xyXG5jbGFzcyBUYWJsZUNlbGwgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnRjXCIpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbmV3IHRhYmxlX2NlbGxfcHJvcGVydGllc18xLlRhYmxlQ2VsbFByb3BlcnRpZXMoKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnZlcnRpY2FsQWxpZ24pIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFZlcnRpY2FsQWxpZ24ob3B0aW9ucy52ZXJ0aWNhbEFsaWduKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudGV4dERpcmVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuc2V0VGV4dERpcmVjdGlvbihvcHRpb25zLnRleHREaXJlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy52ZXJ0aWNhbE1lcmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5hZGRWZXJ0aWNhbE1lcmdlKG9wdGlvbnMudmVydGljYWxNZXJnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMucm93U3BhbiAmJiBvcHRpb25zLnJvd1NwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5hZGRWZXJ0aWNhbE1lcmdlKHRhYmxlX2NlbGxfY29tcG9uZW50c18xLlZlcnRpY2FsTWVyZ2VUeXBlLlJFU1RBUlQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5tYXJnaW5zKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5hZGRNYXJnaW5zKG9wdGlvbnMubWFyZ2lucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNoYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFNoYWRpbmcob3B0aW9ucy5zaGFkaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29sdW1uU3Bhbikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuYWRkR3JpZFNwYW4ob3B0aW9ucy5jb2x1bW5TcGFuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFdpZHRoKG9wdGlvbnMud2lkdGguc2l6ZSwgb3B0aW9ucy53aWR0aC50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVycykge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXJzLnRvcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLkJvcmRlcnMuYWRkVG9wQm9yZGVyKG9wdGlvbnMuYm9yZGVycy50b3Auc3R5bGUsIG9wdGlvbnMuYm9yZGVycy50b3Auc2l6ZSwgb3B0aW9ucy5ib3JkZXJzLnRvcC5jb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVycy5ib3R0b20pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5Cb3JkZXJzLmFkZEJvdHRvbUJvcmRlcihvcHRpb25zLmJvcmRlcnMuYm90dG9tLnN0eWxlLCBvcHRpb25zLmJvcmRlcnMuYm90dG9tLnNpemUsIG9wdGlvbnMuYm9yZGVycy5ib3R0b20uY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJvcmRlcnMubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLkJvcmRlcnMuYWRkTGVmdEJvcmRlcihvcHRpb25zLmJvcmRlcnMubGVmdC5zdHlsZSwgb3B0aW9ucy5ib3JkZXJzLmxlZnQuc2l6ZSwgb3B0aW9ucy5ib3JkZXJzLmxlZnQuY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJvcmRlcnMucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5Cb3JkZXJzLmFkZFJpZ2h0Qm9yZGVyKG9wdGlvbnMuYm9yZGVycy5yaWdodC5zdHlsZSwgb3B0aW9ucy5ib3JkZXJzLnJpZ2h0LnNpemUsIG9wdGlvbnMuYm9yZGVycy5yaWdodC5jb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcmVwRm9yWG1sKGZpbGUpIHtcclxuICAgICAgICBpZiAoISh0aGlzLnJvb3RbdGhpcy5yb290Lmxlbmd0aCAtIDFdIGluc3RhbmNlb2YgcGFyYWdyYXBoXzEuUGFyYWdyYXBoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcGFyYWdyYXBoXzEuUGFyYWdyYXBoKHt9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5wcmVwRm9yWG1sKGZpbGUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFibGVDZWxsID0gVGFibGVDZWxsO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3Qgc2hhZGluZ18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XHJcbmNvbnN0IHRhYmxlX2NlbGxfbWFyZ2luc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjcpO1xyXG5jb25zdCB0YWJsZV9jZWxsX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xyXG5jbGFzcyBUYWJsZUNlbGxQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5JZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0Y1ByXCIpO1xyXG4gICAgICAgIHRoaXMuY2VsbEJvcmRlciA9IG5ldyB0YWJsZV9jZWxsX2NvbXBvbmVudHNfMS5UYWJsZUNlbGxCb3JkZXJzKCk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5jZWxsQm9yZGVyKTtcclxuICAgIH1cclxuICAgIGdldCBCb3JkZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNlbGxCb3JkZXI7XHJcbiAgICB9XHJcbiAgICBhZGRHcmlkU3BhbihjZWxsU3Bhbikge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0YWJsZV9jZWxsX2NvbXBvbmVudHNfMS5HcmlkU3BhbihjZWxsU3BhbikpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYWRkVmVydGljYWxNZXJnZSh0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRhYmxlX2NlbGxfY29tcG9uZW50c18xLlZlcnRpY2FsTWVyZ2UodHlwZSkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0VmVydGljYWxBbGlnbih0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRhYmxlX2NlbGxfY29tcG9uZW50c18xLlZBbGlnbih0eXBlKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRXaWR0aCh3aWR0aCwgdHlwZSA9IHRhYmxlX2NlbGxfY29tcG9uZW50c18xLldpZHRoVHlwZS5BVVRPKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRhYmxlX2NlbGxfY29tcG9uZW50c18xLlRhYmxlQ2VsbFdpZHRoKHdpZHRoLCB0eXBlKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRTaGFkaW5nKGF0dHJzKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHNoYWRpbmdfMS5UYWJsZVNoYWRpbmcoYXR0cnMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZE1hcmdpbnMob3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0YWJsZV9jZWxsX21hcmdpbnNfMS5UYWJsZUNlbGxNYXJnaW4ob3B0aW9ucykpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0VGV4dERpcmVjdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IHRhYmxlX2NlbGxfY29tcG9uZW50c18xLlREaXJlY3Rpb24odHlwZSkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFibGVDZWxsUHJvcGVydGllcyA9IFRhYmxlQ2VsbFByb3BlcnRpZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI2NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBUYWJsZVNoYWRpbmdBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGZpbGw6IFwidzpmaWxsXCIsXHJcbiAgICAgICAgICAgIGNvbG9yOiBcInc6Y29sb3JcIixcclxuICAgICAgICAgICAgdmFsOiBcInc6dmFsXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBUYWJsZVNoYWRpbmcgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihhdHRycykge1xyXG4gICAgICAgIHN1cGVyKFwidzpzaGRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlU2hhZGluZ0F0dHJpYnV0ZXMoYXR0cnMpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlU2hhZGluZyA9IFRhYmxlU2hhZGluZztcclxudmFyIFNoYWRpbmdUeXBlO1xyXG4oZnVuY3Rpb24gKFNoYWRpbmdUeXBlKSB7XHJcbiAgICBTaGFkaW5nVHlwZVtcIkNMRUFSXCJdID0gXCJjbGVhclwiO1xyXG4gICAgU2hhZGluZ1R5cGVbXCJESUFHT05BTF9DUk9TU1wiXSA9IFwiZGlhZ0Nyb3NzXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIkRJQUdPTkFMX1NUUklQRVwiXSA9IFwiZGlhZ1N0cmlwZVwiO1xyXG4gICAgU2hhZGluZ1R5cGVbXCJIT1JJWk9OVEFMX0NST1NTXCJdID0gXCJob3J6Q3Jvc3NcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiSE9SSVpPTlRBTF9TVFJJUEVcIl0gPSBcImhvcnpTdHJpcGVcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiTklMXCJdID0gXCJuaWxcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiUEVSQ0VOVF81XCJdID0gXCJwY3Q1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMTBcIl0gPSBcInBjdDEwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMTJcIl0gPSBcInBjdDEyXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMTVcIl0gPSBcInBjdDE1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMjBcIl0gPSBcInBjdDIwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMjVcIl0gPSBcInBjdDI1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMzBcIl0gPSBcInBjdDMwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMzVcIl0gPSBcInBjdDM1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfMzdcIl0gPSBcInBjdDM3XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNDBcIl0gPSBcInBjdDQwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNDVcIl0gPSBcInBjdDQ1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNTBcIl0gPSBcInBjdDUwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNTVcIl0gPSBcInBjdDU1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNjBcIl0gPSBcInBjdDYwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNjJcIl0gPSBcInBjdDYyXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNjVcIl0gPSBcInBjdDY1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNzBcIl0gPSBcInBjdDcwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfNzVcIl0gPSBcInBjdDc1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfODBcIl0gPSBcInBjdDgwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfODVcIl0gPSBcInBjdDg1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfODdcIl0gPSBcInBjdDg3XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfOTBcIl0gPSBcInBjdDkwXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlBFUkNFTlRfOTVcIl0gPSBcInBjdDk1XCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlJFVkVSU0VfRElBR09OQUxfU1RSSVBFXCJdID0gXCJyZXZlcnNlRGlhZ1N0cmlwZVwiO1xyXG4gICAgU2hhZGluZ1R5cGVbXCJTT0xJRFwiXSA9IFwic29saWRcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiVEhJTl9ESUFHT05BTF9DUk9TU1wiXSA9IFwidGhpbkRpYWdDcm9zc1wiO1xyXG4gICAgU2hhZGluZ1R5cGVbXCJUSElOX0RJQUdPTkFMX1NUUklQRVwiXSA9IFwidGhpbkRpYWdTdHJpcGVcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiVEhJTl9IT1JJWk9OVEFMX0NST1NTXCJdID0gXCJ0aGluSG9yekNyb3NzXCI7XHJcbiAgICBTaGFkaW5nVHlwZVtcIlRISU5fUkVWRVJTRV9ESUFHT05BTF9TVFJJUEVcIl0gPSBcInRoaW5SZXZlcnNlRGlhZ1N0cmlwZVwiO1xyXG4gICAgU2hhZGluZ1R5cGVbXCJUSElOX1ZFUlRJQ0FMX1NUUklQRVwiXSA9IFwidGhpblZlcnRTdHJpcGVcIjtcclxuICAgIFNoYWRpbmdUeXBlW1wiVkVSVElDQUxfU1RSSVBFXCJdID0gXCJ2ZXJ0U3RyaXBlXCI7XHJcbn0pKFNoYWRpbmdUeXBlID0gZXhwb3J0cy5TaGFkaW5nVHlwZSB8fCAoZXhwb3J0cy5TaGFkaW5nVHlwZSA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBjZWxsX21hcmdpbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjgpO1xyXG5jbGFzcyBUYWJsZUNlbGxNYXJnaW4gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHRvcCA9IDAsIGxlZnQgPSAwLCByaWdodCA9IDAsIGJvdHRvbSA9IDAgfSkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0Y01hclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY2VsbF9tYXJnaW5fMS5Ub3BDZWxsTWFyZ2luKHRvcCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjZWxsX21hcmdpbl8xLkJvdHRvbUNlbGxNYXJnaW4oYm90dG9tKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNlbGxfbWFyZ2luXzEuUmlnaHRDZWxsTWFyZ2luKHJpZ2h0KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNlbGxfbWFyZ2luXzEuTGVmdENlbGxNYXJnaW4obGVmdCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGFibGVDZWxsTWFyZ2luID0gVGFibGVDZWxsTWFyZ2luO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgQ2VsbE1hcmdpbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgd2lkdGg6IFwidzp3XCIsIHR5cGU6IFwidzp0eXBlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBUb3BDZWxsTWFyZ2luIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6dG9wXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDZWxsTWFyZ2luQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHdpZHRoOiB2YWx1ZSxcclxuICAgICAgICAgICAgdHlwZTogXCJkeGFcIixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Ub3BDZWxsTWFyZ2luID0gVG9wQ2VsbE1hcmdpbjtcclxuY2xhc3MgQm90dG9tQ2VsbE1hcmdpbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmJvdHRvbVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2VsbE1hcmdpbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB3aWR0aDogdmFsdWUsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZHhhXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQm90dG9tQ2VsbE1hcmdpbiA9IEJvdHRvbUNlbGxNYXJnaW47XHJcbmNsYXNzIExlZnRDZWxsTWFyZ2luIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcInc6c3RhcnRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IENlbGxNYXJnaW5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgd2lkdGg6IHZhbHVlLFxyXG4gICAgICAgICAgICB0eXBlOiBcImR4YVwiLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxlZnRDZWxsTWFyZ2luID0gTGVmdENlbGxNYXJnaW47XHJcbmNsYXNzIFJpZ2h0Q2VsbE1hcmdpbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmVuZFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2VsbE1hcmdpbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB3aWR0aDogdmFsdWUsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiZHhhXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUmlnaHRDZWxsTWFyZ2luID0gUmlnaHRDZWxsTWFyZ2luO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgcGFyYWdyYXBoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5jb25zdCBzaGFkaW5nXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcclxuY29uc3QgdGFibGVfY2VsbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcbmNvbnN0IHRhYmxlX2JvcmRlcnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAzKTtcclxuY29uc3QgdGFibGVfY2VsbF9tYXJnaW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjc1KTtcclxuY29uc3QgdGFibGVfZmxvYXRfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xyXG5jb25zdCB0YWJsZV9sYXlvdXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcclxuY29uc3QgdGFibGVfd2lkdGhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjc2KTtcclxuY2xhc3MgVGFibGVQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5JZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0YmxQclwiKTtcclxuICAgICAgICB0aGlzLmNlbGxNYXJnaW4gPSBuZXcgdGFibGVfY2VsbF9tYXJnaW5fMS5UYWJsZUNlbGxNYXJnaW4oKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmNlbGxNYXJnaW4pO1xyXG4gICAgfVxyXG4gICAgc2V0V2lkdGgod2lkdGgsIHR5cGUgPSB0YWJsZV9jZWxsXzEuV2lkdGhUeXBlLkFVVE8pIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdGFibGVfd2lkdGhfMS5QcmVmZXJyZWRUYWJsZVdpZHRoKHR5cGUsIHdpZHRoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRMYXlvdXQodHlwZSkge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0YWJsZV9sYXlvdXRfMS5UYWJsZUxheW91dCh0eXBlKSk7XHJcbiAgICB9XHJcbiAgICBzZXRCb3JkZXIoYm9yZGVyT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0YWJsZV9ib3JkZXJzXzEuVGFibGVCb3JkZXJzKGJvcmRlck9wdGlvbnMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldCBDZWxsTWFyZ2luKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNlbGxNYXJnaW47XHJcbiAgICB9XHJcbiAgICBzZXRUYWJsZUZsb2F0UHJvcGVydGllcyh0YWJsZUZsb2F0T3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0YWJsZV9mbG9hdF9wcm9wZXJ0aWVzXzEuVGFibGVGbG9hdFByb3BlcnRpZXModGFibGVGbG9hdE9wdGlvbnMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHNldFNoYWRpbmcoYXR0cnMpIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc2hhZGluZ18xLlRhYmxlU2hhZGluZyhhdHRycykpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0QWxpZ25tZW50KHR5cGUpIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcGFyYWdyYXBoXzEuQWxpZ25tZW50KHR5cGUpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlUHJvcGVydGllcyA9IFRhYmxlUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjcwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MikpO1xyXG5jbGFzcyBTdHlsZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnN0eWxlc1wiKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5pbml0aWFsU3R5bGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG9wdGlvbnMuaW5pdGlhbFN0eWxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmltcG9ydGVkU3R5bGVzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3R5bGUgb2Ygb3B0aW9ucy5pbXBvcnRlZFN0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2goc3R5bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnBhcmFncmFwaFN0eWxlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIG9wdGlvbnMucGFyYWdyYXBoU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc3R5bGVfMS5TdHlsZUZvclBhcmFncmFwaChzdHlsZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJhY3RlclN0eWxlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIG9wdGlvbnMuY2hhcmFjdGVyU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc3R5bGVfMS5TdHlsZUZvckNoYXJhY3RlcihzdHlsZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3R5bGVzID0gU3R5bGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1bmRlcmxpbmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xyXG5jb25zdCBjaGFyYWN0ZXJfc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xyXG5jb25zdCBwYXJhZ3JhcGhfc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xyXG5jbGFzcyBIZWFkaW5nU3R5bGUgZXh0ZW5kcyBwYXJhZ3JhcGhfc3R5bGVfMS5TdHlsZUZvclBhcmFncmFwaCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBiYXNlZE9uOiBcIk5vcm1hbFwiLCBuZXh0OiBcIk5vcm1hbFwiLCBxdWlja0Zvcm1hdDogdHJ1ZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IZWFkaW5nU3R5bGUgPSBIZWFkaW5nU3R5bGU7XHJcbmNsYXNzIFRpdGxlU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgaWQ6IFwiVGl0bGVcIiwgbmFtZTogXCJUaXRsZVwiIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRpdGxlU3R5bGUgPSBUaXRsZVN0eWxlO1xyXG5jbGFzcyBIZWFkaW5nMVN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGlkOiBcIkhlYWRpbmcxXCIsIG5hbWU6IFwiSGVhZGluZyAxXCIgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSGVhZGluZzFTdHlsZSA9IEhlYWRpbmcxU3R5bGU7XHJcbmNsYXNzIEhlYWRpbmcyU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgaWQ6IFwiSGVhZGluZzJcIiwgbmFtZTogXCJIZWFkaW5nIDJcIiB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IZWFkaW5nMlN0eWxlID0gSGVhZGluZzJTdHlsZTtcclxuY2xhc3MgSGVhZGluZzNTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBpZDogXCJIZWFkaW5nM1wiLCBuYW1lOiBcIkhlYWRpbmcgM1wiIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRpbmczU3R5bGUgPSBIZWFkaW5nM1N0eWxlO1xyXG5jbGFzcyBIZWFkaW5nNFN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGlkOiBcIkhlYWRpbmc0XCIsIG5hbWU6IFwiSGVhZGluZyA0XCIgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSGVhZGluZzRTdHlsZSA9IEhlYWRpbmc0U3R5bGU7XHJcbmNsYXNzIEhlYWRpbmc1U3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgaWQ6IFwiSGVhZGluZzVcIiwgbmFtZTogXCJIZWFkaW5nIDVcIiB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5IZWFkaW5nNVN0eWxlID0gSGVhZGluZzVTdHlsZTtcclxuY2xhc3MgSGVhZGluZzZTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBpZDogXCJIZWFkaW5nNlwiLCBuYW1lOiBcIkhlYWRpbmcgNlwiIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRpbmc2U3R5bGUgPSBIZWFkaW5nNlN0eWxlO1xyXG5jbGFzcyBMaXN0UGFyYWdyYXBoIGV4dGVuZHMgcGFyYWdyYXBoX3N0eWxlXzEuU3R5bGVGb3JQYXJhZ3JhcGgge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgaWQ6IFwiTGlzdFBhcmFncmFwaFwiLCBuYW1lOiBcIkxpc3QgUGFyYWdyYXBoXCIsIGJhc2VkT246IFwiTm9ybWFsXCIsIHF1aWNrRm9ybWF0OiB0cnVlIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxpc3RQYXJhZ3JhcGggPSBMaXN0UGFyYWdyYXBoO1xyXG5jbGFzcyBGb290bm90ZVRleHQgZXh0ZW5kcyBwYXJhZ3JhcGhfc3R5bGVfMS5TdHlsZUZvclBhcmFncmFwaCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBpZDogXCJGb290bm90ZVRleHRcIiwgbmFtZTogXCJmb290bm90ZSB0ZXh0XCIsIGxpbms6IFwiRm9vdG5vdGVUZXh0Q2hhclwiLCBiYXNlZE9uOiBcIk5vcm1hbFwiLCB1aVByaW9yaXR5OiA5OSwgc2VtaUhpZGRlbjogdHJ1ZSwgdW5oaWRlV2hlblVzZWQ6IHRydWUsIHBhcmFncmFwaDoge1xyXG4gICAgICAgICAgICAgICAgc3BhY2luZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IDI0MCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUnVsZTogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LCBydW46IHtcclxuICAgICAgICAgICAgICAgIHNpemU6IDIwLFxyXG4gICAgICAgICAgICB9IH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3Rub3RlVGV4dCA9IEZvb3Rub3RlVGV4dDtcclxuY2xhc3MgRm9vdG5vdGVSZWZlcmVuY2VTdHlsZSBleHRlbmRzIGNoYXJhY3Rlcl9zdHlsZV8xLlN0eWxlRm9yQ2hhcmFjdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGlkOiBcIkZvb3Rub3RlUmVmZXJlbmNlXCIsIG5hbWU6IFwiZm9vdG5vdGUgcmVmZXJlbmNlXCIsIGJhc2VkT246IFwiRGVmYXVsdFBhcmFncmFwaEZvbnRcIiwgc2VtaUhpZGRlbjogdHJ1ZSwgcnVuOiB7XHJcbiAgICAgICAgICAgICAgICBzdXBlclNjcmlwdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Gb290bm90ZVJlZmVyZW5jZVN0eWxlID0gRm9vdG5vdGVSZWZlcmVuY2VTdHlsZTtcclxuY2xhc3MgRm9vdG5vdGVUZXh0Q2hhciBleHRlbmRzIGNoYXJhY3Rlcl9zdHlsZV8xLlN0eWxlRm9yQ2hhcmFjdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGlkOiBcIkZvb3Rub3RlVGV4dENoYXJcIiwgbmFtZTogXCJGb290bm90ZSBUZXh0IENoYXJcIiwgYmFzZWRPbjogXCJEZWZhdWx0UGFyYWdyYXBoRm9udFwiLCBsaW5rOiBcIkZvb3Rub3RlVGV4dFwiLCBzZW1pSGlkZGVuOiB0cnVlLCBydW46IHtcclxuICAgICAgICAgICAgICAgIHNpemU6IDIwLFxyXG4gICAgICAgICAgICB9IH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3Rub3RlVGV4dENoYXIgPSBGb290bm90ZVRleHRDaGFyO1xyXG5jbGFzcyBIeXBlcmxpbmtTdHlsZSBleHRlbmRzIGNoYXJhY3Rlcl9zdHlsZV8xLlN0eWxlRm9yQ2hhcmFjdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGlkOiBcIkh5cGVybGlua1wiLCBuYW1lOiBcIkh5cGVybGlua1wiLCBiYXNlZE9uOiBcIkRlZmF1bHRQYXJhZ3JhcGhGb250XCIsIHJ1bjoge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiMDU2M0MxXCIsXHJcbiAgICAgICAgICAgICAgICB1bmRlcmxpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB1bmRlcmxpbmVfMS5VbmRlcmxpbmVUeXBlLlNJTkdMRSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0gfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSHlwZXJsaW5rU3R5bGUgPSBIeXBlcmxpbmtTdHlsZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjcyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjczKSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBCb3JkZXJTdHlsZTtcclxuKGZ1bmN0aW9uIChCb3JkZXJTdHlsZSkge1xyXG4gICAgQm9yZGVyU3R5bGVbXCJTSU5HTEVcIl0gPSBcInNpbmdsZVwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJEQVNIX0RPVF9TVFJPS0VEXCJdID0gXCJkYXNoRG90U3Ryb2tlZFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJEQVNIRURcIl0gPSBcImRhc2hlZFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJEQVNIX1NNQUxMX0dBUFwiXSA9IFwiZGFzaFNtYWxsR2FwXCI7XHJcbiAgICBCb3JkZXJTdHlsZVtcIkRPVF9EQVNIXCJdID0gXCJkb3REYXNoXCI7XHJcbiAgICBCb3JkZXJTdHlsZVtcIkRPVF9ET1RfREFTSFwiXSA9IFwiZG90RG90RGFzaFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJET1RURURcIl0gPSBcImRvdHRlZFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJET1VCTEVcIl0gPSBcImRvdWJsZVwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJET1VCTEVfV0FWRVwiXSA9IFwiZG91YmxlV2F2ZVwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJJTlNFVFwiXSA9IFwiaW5zZXRcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiTklMXCJdID0gXCJuaWxcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiTk9ORVwiXSA9IFwibm9uZVwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJPVVRTRVRcIl0gPSBcIm91dHNldFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJUSElDS1wiXSA9IFwidGhpY2tcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiVEhJQ0tfVEhJTl9MQVJHRV9HQVBcIl0gPSBcInRoaWNrVGhpbkxhcmdlR2FwXCI7XHJcbiAgICBCb3JkZXJTdHlsZVtcIlRISUNLX1RISU5fTUVESVVNX0dBUFwiXSA9IFwidGhpY2tUaGluTWVkaXVtR2FwXCI7XHJcbiAgICBCb3JkZXJTdHlsZVtcIlRISUNLX1RISU5fU01BTExfR0FQXCJdID0gXCJ0aGlja1RoaW5TbWFsbEdhcFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJUSElOX1RISUNLX0xBUkdFX0dBUFwiXSA9IFwidGhpblRoaWNrTGFyZ2VHYXBcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiVEhJTl9USElDS19NRURJVU1fR0FQXCJdID0gXCJ0aGluVGhpY2tNZWRpdW1HYXBcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiVEhJTl9USElDS19TTUFMTF9HQVBcIl0gPSBcInRoaW5UaGlja1NtYWxsR2FwXCI7XHJcbiAgICBCb3JkZXJTdHlsZVtcIlRISU5fVEhJQ0tfVEhJTl9MQVJHRV9HQVBcIl0gPSBcInRoaW5UaGlja1RoaW5MYXJnZUdhcFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJUSElOX1RISUNLX1RISU5fTUVESVVNX0dBUFwiXSA9IFwidGhpblRoaWNrVGhpbk1lZGl1bUdhcFwiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJUSElOX1RISUNLX1RISU5fU01BTExfR0FQXCJdID0gXCJ0aGluVGhpY2tUaGluU21hbGxHYXBcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiVEhSRUVfRF9FTUJPU1NcIl0gPSBcInRocmVlREVtYm9zc1wiO1xyXG4gICAgQm9yZGVyU3R5bGVbXCJUSFJFRV9EX0VOR1JBVkVcIl0gPSBcInRocmVlREVuZ3JhdmVcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiVFJJUExFXCJdID0gXCJ0cmlwbGVcIjtcclxuICAgIEJvcmRlclN0eWxlW1wiV0FWRVwiXSA9IFwid2F2ZVwiO1xyXG59KShCb3JkZXJTdHlsZSA9IGV4cG9ydHMuQm9yZGVyU3R5bGUgfHwgKGV4cG9ydHMuQm9yZGVyU3R5bGUgPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgcGFyYWdyYXBoX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KTtcclxuY29uc3QgcnVuX3Byb3BlcnRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTtcclxuY2xhc3MgRG9jdW1lbnREZWZhdWx0cyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6ZG9jRGVmYXVsdHNcIik7XHJcbiAgICAgICAgdGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgcnVuX3Byb3BlcnRpZXNfMS5SdW5Qcm9wZXJ0aWVzRGVmYXVsdHMob3B0aW9ucyAmJiBvcHRpb25zLnJ1bik7XHJcbiAgICAgICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgcGFyYWdyYXBoX3Byb3BlcnRpZXNfMS5QYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMob3B0aW9ucyAmJiBvcHRpb25zLnBhcmFncmFwaCk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvY3VtZW50RGVmYXVsdHMgPSBEb2N1bWVudERlZmF1bHRzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgdGFibGVfY2VsbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcbmNsYXNzIFRhYmxlQ2VsbE1hcmdpbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgdmFsdWU6IFwidzp3XCIsIHR5cGU6IFwidzp0eXBlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBCYXNlVGFibGVDZWxsTWFyZ2luIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgc2V0UHJvcGVydGllcyh2YWx1ZSwgdHlwZSA9IHRhYmxlX2NlbGxfMS5XaWR0aFR5cGUuRFhBKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQ2VsbE1hcmdpbkF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFRhYmxlQ2VsbE1hcmdpbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6dGJsQ2VsbE1hclwiKTtcclxuICAgIH1cclxuICAgIGFkZFRvcE1hcmdpbih2YWx1ZSwgdHlwZSA9IHRhYmxlX2NlbGxfMS5XaWR0aFR5cGUuRFhBKSB7XHJcbiAgICAgICAgY29uc3QgdG9wID0gbmV3IEJhc2VUYWJsZUNlbGxNYXJnaW4oXCJ3OnRvcFwiKTtcclxuICAgICAgICB0b3Auc2V0UHJvcGVydGllcyh2YWx1ZSwgdHlwZSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godG9wKTtcclxuICAgIH1cclxuICAgIGFkZExlZnRNYXJnaW4odmFsdWUsIHR5cGUgPSB0YWJsZV9jZWxsXzEuV2lkdGhUeXBlLkRYQSkge1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBuZXcgQmFzZVRhYmxlQ2VsbE1hcmdpbihcInc6bGVmdFwiKTtcclxuICAgICAgICBsZWZ0LnNldFByb3BlcnRpZXModmFsdWUsIHR5cGUpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGxlZnQpO1xyXG4gICAgfVxyXG4gICAgYWRkQm90dG9tTWFyZ2luKHZhbHVlLCB0eXBlID0gdGFibGVfY2VsbF8xLldpZHRoVHlwZS5EWEEpIHtcclxuICAgICAgICBjb25zdCBib3R0b20gPSBuZXcgQmFzZVRhYmxlQ2VsbE1hcmdpbihcInc6Ym90dG9tXCIpO1xyXG4gICAgICAgIGJvdHRvbS5zZXRQcm9wZXJ0aWVzKHZhbHVlLCB0eXBlKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChib3R0b20pO1xyXG4gICAgfVxyXG4gICAgYWRkUmlnaHRNYXJnaW4odmFsdWUsIHR5cGUgPSB0YWJsZV9jZWxsXzEuV2lkdGhUeXBlLkRYQSkge1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gbmV3IEJhc2VUYWJsZUNlbGxNYXJnaW4oXCJ3OnJpZ2h0XCIpO1xyXG4gICAgICAgIHJpZ2h0LnNldFByb3BlcnRpZXModmFsdWUsIHR5cGUpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHJpZ2h0KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRhYmxlQ2VsbE1hcmdpbiA9IFRhYmxlQ2VsbE1hcmdpbjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHRhYmxlX2NlbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xyXG5jbGFzcyBUYWJsZVdpZHRoQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyB0eXBlOiBcInc6dHlwZVwiLCB3OiBcInc6d1wiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgUHJlZmVycmVkVGFibGVXaWR0aCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHcpIHtcclxuICAgICAgICBzdXBlcihcInc6dGJsV1wiKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHR5cGUgPT09IHRhYmxlX2NlbGxfMS5XaWR0aFR5cGUuUEVSQ0VOVEFHRSA/IGAke3d9JWAgOiB3O1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoQXR0cmlidXRlcyh7IHR5cGU6IHR5cGUsIHc6IHdpZHRoIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlByZWZlcnJlZFRhYmxlV2lkdGggPSBQcmVmZXJyZWRUYWJsZVdpZHRoO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyNzgpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMTIpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHRhYmxlX2NlbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xyXG5jb25zdCB0YWJsZV9yb3dfcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xyXG5jbGFzcyBUYWJsZVJvdyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6dHJcIik7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgdGFibGVfcm93X3Byb3BlcnRpZXNfMS5UYWJsZVJvd1Byb3BlcnRpZXMoKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmNhbnRTcGxpdCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuc2V0Q2FudFNwbGl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnRhYmxlSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRUYWJsZUhlYWRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldEhlaWdodChvcHRpb25zLmhlaWdodC5oZWlnaHQsIG9wdGlvbnMuaGVpZ2h0LnJ1bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBDZWxsQ291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBnZXQgQ2hpbGRyZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jaGlsZHJlbjtcclxuICAgIH1cclxuICAgIGdldCBjZWxscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290LmZpbHRlcigoeG1sQ29tcG9uZW50KSA9PiB4bWxDb21wb25lbnQgaW5zdGFuY2VvZiB0YWJsZV9jZWxsXzEuVGFibGVDZWxsKTtcclxuICAgIH1cclxuICAgIGFkZENlbGxUb0luZGV4KGNlbGwsIGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5yb290LnNwbGljZShpbmRleCArIDEsIDAsIGNlbGwpO1xyXG4gICAgfVxyXG4gICAgYWRkQ2VsbFRvQ29sdW1uSW5kZXgoY2VsbCwgY29sdW1uSW5kZXgpIHtcclxuICAgICAgICBjb25zdCByb290SW5kZXggPSB0aGlzLmNvbHVtbkluZGV4VG9Sb290SW5kZXgoY29sdW1uSW5kZXgsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuYWRkQ2VsbFRvSW5kZXgoY2VsbCwgcm9vdEluZGV4IC0gMSk7XHJcbiAgICB9XHJcbiAgICByb290SW5kZXhUb0NvbHVtbkluZGV4KHJvb3RJbmRleCkge1xyXG4gICAgICAgIGlmIChyb290SW5kZXggPCAxIHx8IHJvb3RJbmRleCA+PSB0aGlzLnJvb3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2VsbCAncm9vdEluZGV4JyBzaG91bGQgYmV0d2VlbiAxIHRvICR7dGhpcy5yb290Lmxlbmd0aCAtIDF9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjb2xJZHggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHJvb3RJZHggPSAxOyByb290SWR4IDwgcm9vdEluZGV4OyByb290SWR4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMucm9vdFtyb290SWR4XTtcclxuICAgICAgICAgICAgY29sSWR4ICs9IGNlbGwub3B0aW9ucy5jb2x1bW5TcGFuIHx8IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb2xJZHg7XHJcbiAgICB9XHJcbiAgICBjb2x1bW5JbmRleFRvUm9vdEluZGV4KGNvbHVtbkluZGV4LCBhbGxvd0VuZE5ld0NlbGwgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChjb2x1bW5JbmRleCA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjZWxsICdjb2x1bW5JbmRleCcgc2hvdWxkIG5vdCBsZXNzIHRoYW4gemVyb2ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29sSWR4ID0gMDtcclxuICAgICAgICBsZXQgcm9vdElkeCA9IDE7XHJcbiAgICAgICAgd2hpbGUgKGNvbElkeCA8PSBjb2x1bW5JbmRleCkge1xyXG4gICAgICAgICAgICBpZiAocm9vdElkeCA+PSB0aGlzLnJvb3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxsb3dFbmROZXdDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNlbGwgJ2NvbHVtbkluZGV4JyBzaG91bGQgbm90IGdyZWF0IHRoYW4gJHtjb2xJZHggLSAxfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnJvb3Rbcm9vdElkeF07XHJcbiAgICAgICAgICAgIHJvb3RJZHggKz0gMTtcclxuICAgICAgICAgICAgY29sSWR4ICs9IChjZWxsICYmIGNlbGwub3B0aW9ucy5jb2x1bW5TcGFuKSB8fCAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcm9vdElkeCAtIDE7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZVJvdyA9IFRhYmxlUm93O1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzaG9ydGlkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XHJcbmNvbnN0IGFwcF9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MCk7XHJcbmNvbnN0IGNvbnRlbnRfdHlwZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgyKTtcclxuY29uc3QgY29yZV9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XHJcbmNvbnN0IGRvY3VtZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XHJcbmNvbnN0IHNlY3Rpb25fcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjgpO1xyXG5jb25zdCBmb290ZXJfd3JhcHBlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XHJcbmNvbnN0IGZvb3Rub3Rlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzApO1xyXG5jb25zdCBoZWFkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMxKTtcclxuY29uc3QgaGVhZGVyX3dyYXBwZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xyXG5jb25zdCBtZWRpYV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XHJcbmNvbnN0IG51bWJlcmluZ18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIpO1xyXG5jb25zdCBwYXJhZ3JhcGhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbmNvbnN0IHJlbGF0aW9uc2hpcHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xyXG5jb25zdCByZWxhdGlvbnNoaXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzEpO1xyXG5jb25zdCBzdHlsZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xyXG5jb25zdCBleHRlcm5hbF9zdHlsZXNfZmFjdG9yeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzYpO1xyXG5jb25zdCBmYWN0b3J5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzNyk7XHJcbmNsYXNzIEZpbGUge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHtcclxuICAgICAgICBjcmVhdG9yOiBcIlVuLW5hbWVkXCIsXHJcbiAgICAgICAgcmV2aXNpb246IFwiMVwiLFxyXG4gICAgICAgIGxhc3RNb2RpZmllZEJ5OiBcIlVuLW5hbWVkXCIsXHJcbiAgICB9LCBmaWxlUHJvcGVydGllcyA9IHt9LCBzZWN0aW9ucyA9IFtdKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQgPSAxO1xyXG4gICAgICAgIHRoaXMuaGVhZGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZm9vdGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaHlwZXJsaW5rQ2FjaGUgPSB7fTtcclxuICAgICAgICB0aGlzLmNvcmVQcm9wZXJ0aWVzID0gbmV3IGNvcmVfcHJvcGVydGllc18xLkNvcmVQcm9wZXJ0aWVzKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMubnVtYmVyaW5nID0gbmV3IG51bWJlcmluZ18xLk51bWJlcmluZyhvcHRpb25zLm51bWJlcmluZ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubnVtYmVyaW5nXHJcbiAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnOiBbXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kb2NSZWxhdGlvbnNoaXBzID0gbmV3IHJlbGF0aW9uc2hpcHNfMS5SZWxhdGlvbnNoaXBzKCk7XHJcbiAgICAgICAgdGhpcy5maWxlUmVsYXRpb25zaGlwcyA9IG5ldyByZWxhdGlvbnNoaXBzXzEuUmVsYXRpb25zaGlwcygpO1xyXG4gICAgICAgIHRoaXMuYXBwUHJvcGVydGllcyA9IG5ldyBhcHBfcHJvcGVydGllc18xLkFwcFByb3BlcnRpZXMoKTtcclxuICAgICAgICB0aGlzLmZvb3ROb3RlcyA9IG5ldyBmb290bm90ZXNfMS5Gb290Tm90ZXMoKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRUeXBlcyA9IG5ldyBjb250ZW50X3R5cGVzXzEuQ29udGVudFR5cGVzKCk7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IG5ldyBkb2N1bWVudF8xLkRvY3VtZW50KHsgYmFja2dyb3VuZDogb3B0aW9ucy5iYWNrZ3JvdW5kIHx8IHt9IH0pO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgc2V0dGluZ3NfMS5TZXR0aW5ncygpO1xyXG4gICAgICAgIHRoaXMubWVkaWEgPSBmaWxlUHJvcGVydGllcy50ZW1wbGF0ZSAmJiBmaWxlUHJvcGVydGllcy50ZW1wbGF0ZS5tZWRpYSA/IGZpbGVQcm9wZXJ0aWVzLnRlbXBsYXRlLm1lZGlhIDogbmV3IG1lZGlhXzEuTWVkaWEoKTtcclxuICAgICAgICBpZiAoZmlsZVByb3BlcnRpZXMudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQgPSBmaWxlUHJvcGVydGllcy50ZW1wbGF0ZS5jdXJyZW50UmVsYXRpb25zaGlwSWQgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmlsZVByb3BlcnRpZXMudGVtcGxhdGUgJiYgb3B0aW9ucy5leHRlcm5hbFN0eWxlcykge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImNhbiBub3QgdXNlIGJvdGggdGVtcGxhdGUgYW5kIGV4dGVybmFsIHN0eWxlc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZpbGVQcm9wZXJ0aWVzLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBuZXcgZXh0ZXJuYWxfc3R5bGVzX2ZhY3RvcnlfMS5FeHRlcm5hbFN0eWxlc0ZhY3RvcnkoKTtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZXMgPSBzdHlsZXNGYWN0b3J5Lm5ld0luc3RhbmNlKGZpbGVQcm9wZXJ0aWVzLnRlbXBsYXRlLnN0eWxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuZXh0ZXJuYWxTdHlsZXMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IG5ldyBleHRlcm5hbF9zdHlsZXNfZmFjdG9yeV8xLkV4dGVybmFsU3R5bGVzRmFjdG9yeSgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlc0ZhY3RvcnkubmV3SW5zdGFuY2Uob3B0aW9ucy5leHRlcm5hbFN0eWxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuc3R5bGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBuZXcgZmFjdG9yeV8xLkRlZmF1bHRTdHlsZXNGYWN0b3J5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZXMgPSBzdHlsZXNGYWN0b3J5Lm5ld0luc3RhbmNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGVzID0gbmV3IHN0eWxlc18xLlN0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0U3R5bGVzLCBvcHRpb25zLnN0eWxlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IG5ldyBmYWN0b3J5XzEuRGVmYXVsdFN0eWxlc0ZhY3RvcnkoKTtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZXMgPSBuZXcgc3R5bGVzXzEuU3R5bGVzKHN0eWxlc0ZhY3RvcnkubmV3SW5zdGFuY2UoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkRGVmYXVsdFJlbGF0aW9uc2hpcHMoKTtcclxuICAgICAgICBpZiAoZmlsZVByb3BlcnRpZXMudGVtcGxhdGUgJiYgZmlsZVByb3BlcnRpZXMudGVtcGxhdGUuaGVhZGVycykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRlbXBsYXRlSGVhZGVyIG9mIGZpbGVQcm9wZXJ0aWVzLnRlbXBsYXRlLmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkSGVhZGVyVG9Eb2N1bWVudCh0ZW1wbGF0ZUhlYWRlci5oZWFkZXIsIHRlbXBsYXRlSGVhZGVyLnR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmaWxlUHJvcGVydGllcy50ZW1wbGF0ZSAmJiBmaWxlUHJvcGVydGllcy50ZW1wbGF0ZS5mb290ZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcGxhdGVGb290ZXIgb2YgZmlsZVByb3BlcnRpZXMudGVtcGxhdGUuZm9vdGVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRGb290ZXJUb0RvY3VtZW50KHRlbXBsYXRlRm9vdGVyLmZvb3RlciwgdGVtcGxhdGVGb290ZXIudHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHNlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuQm9keS5hZGRTZWN0aW9uKHNlY3Rpb24ucHJvcGVydGllcyA/IHNlY3Rpb24ucHJvcGVydGllcyA6IHt9KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBzZWN0aW9uLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBwYXJhZ3JhcGhfMS5IeXBlcmxpbmtSZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoeXBlcmxpbmsgPSB0aGlzLmh5cGVybGlua0NhY2hlW2NoaWxkLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmFkZChoeXBlcmxpbmspO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5hZGQoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmZvb3Rub3Rlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFncmFwaCBvZiBvcHRpb25zLmZvb3Rub3Rlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb290Tm90ZXMuY3JlYXRlRm9vdE5vdGUocGFyYWdyYXBoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5oeXBlcmxpbmtzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0ge307XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMuaHlwZXJsaW5rcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmh5cGVybGlua3Nba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaHlwZXJsaW5rUmVmID0gb3B0aW9ucy5oeXBlcmxpbmtzW2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoeXBlcmxpbmsgPSBoeXBlcmxpbmtSZWYudHlwZSA9PT0gcGFyYWdyYXBoXzEuSHlwZXJsaW5rVHlwZS5FWFRFUk5BTFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jcmVhdGVIeXBlcmxpbmsoaHlwZXJsaW5rUmVmLmxpbmssIGh5cGVybGlua1JlZi50ZXh0KVxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jcmVhdGVJbnRlcm5hbEh5cGVyTGluayhrZXksIGh5cGVybGlua1JlZi50ZXh0KTtcclxuICAgICAgICAgICAgICAgIGNhY2hlW2tleV0gPSBoeXBlcmxpbms7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5oeXBlcmxpbmtDYWNoZSA9IGNhY2hlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5mZWF0dXJlcykge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mZWF0dXJlcy50cmFja1JldmlzaW9ucykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5hZGRUcmFja1JldmlzaW9ucygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkU2VjdGlvbih7IGhlYWRlcnMgPSB7IGRlZmF1bHQ6IG5ldyBoZWFkZXJfMS5IZWFkZXIoKSB9LCBmb290ZXJzID0geyBkZWZhdWx0OiBuZXcgaGVhZGVyXzEuSGVhZGVyKCkgfSwgbWFyZ2lucyA9IHt9LCBzaXplID0ge30sIHByb3BlcnRpZXMsIGNoaWxkcmVuLCB9KSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudC5Cb2R5LmFkZFNlY3Rpb24oT2JqZWN0LmFzc2lnbih7fSwgcHJvcGVydGllcywgeyBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBoZWFkZXJzLmRlZmF1bHQgPyB0aGlzLmNyZWF0ZUhlYWRlcihoZWFkZXJzLmRlZmF1bHQpIDogdGhpcy5jcmVhdGVIZWFkZXIobmV3IGhlYWRlcl8xLkhlYWRlcigpKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0OiBoZWFkZXJzLmZpcnN0ID8gdGhpcy5jcmVhdGVIZWFkZXIoaGVhZGVycy5maXJzdCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBldmVuOiBoZWFkZXJzLmV2ZW4gPyB0aGlzLmNyZWF0ZUhlYWRlcihoZWFkZXJzLmV2ZW4pIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9LCBmb290ZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBmb290ZXJzLmRlZmF1bHQgPyB0aGlzLmNyZWF0ZUZvb3Rlcihmb290ZXJzLmRlZmF1bHQpIDogdGhpcy5jcmVhdGVGb290ZXIobmV3IGhlYWRlcl8xLkZvb3RlcigpKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0OiBmb290ZXJzLmZpcnN0ID8gdGhpcy5jcmVhdGVGb290ZXIoZm9vdGVycy5maXJzdCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBldmVuOiBmb290ZXJzLmV2ZW4gPyB0aGlzLmNyZWF0ZUZvb3Rlcihmb290ZXJzLmV2ZW4pIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9IH0sIG1hcmdpbnMsIHNpemUpKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIHBhcmFncmFwaF8xLkh5cGVybGlua1JlZikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHlwZXJsaW5rID0gdGhpcy5oeXBlcmxpbmtDYWNoZVtjaGlsZC5pZF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmFkZChoeXBlcmxpbmspO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5hZGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZlcmlmeVVwZGF0ZUZpZWxkcygpIHtcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudC5nZXRUYWJsZXNPZkNvbnRlbnRzKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYWRkVXBkYXRlRmllbGRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY3JlYXRlSHlwZXJsaW5rKGxpbmssIHRleHQgPSBsaW5rKSB7XHJcbiAgICAgICAgY29uc3QgaHlwZXJsaW5rID0gbmV3IHBhcmFncmFwaF8xLkh5cGVybGluayh0ZXh0LCBzaG9ydGlkLmdlbmVyYXRlKCkudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgdGhpcy5kb2NSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChoeXBlcmxpbmsubGlua0lkLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaHlwZXJsaW5rXCIsIGxpbmssIHJlbGF0aW9uc2hpcF8xLlRhcmdldE1vZGVUeXBlLkVYVEVSTkFMKTtcclxuICAgICAgICByZXR1cm4gaHlwZXJsaW5rO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlSW50ZXJuYWxIeXBlckxpbmsoYW5jaG9yLCB0ZXh0ID0gYW5jaG9yKSB7XHJcbiAgICAgICAgY29uc3QgaHlwZXJsaW5rID0gbmV3IHBhcmFncmFwaF8xLkh5cGVybGluayh0ZXh0LCBzaG9ydGlkLmdlbmVyYXRlKCkudG9Mb3dlckNhc2UoKSwgYW5jaG9yKTtcclxuICAgICAgICByZXR1cm4gaHlwZXJsaW5rO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlSGVhZGVyKGhlYWRlcikge1xyXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgaGVhZGVyX3dyYXBwZXJfMS5IZWFkZXJXcmFwcGVyKHRoaXMubWVkaWEsIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyspO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgaGVhZGVyLm9wdGlvbnMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgd3JhcHBlci5hZGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkZEhlYWRlclRvRG9jdW1lbnQod3JhcHBlcik7XHJcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVGb290ZXIoZm9vdGVyKSB7XHJcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IG5ldyBmb290ZXJfd3JhcHBlcl8xLkZvb3RlcldyYXBwZXIodGhpcy5tZWRpYSwgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmb290ZXIub3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB3cmFwcGVyLmFkZChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkRm9vdGVyVG9Eb2N1bWVudCh3cmFwcGVyKTtcclxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcclxuICAgIH1cclxuICAgIGFkZEhlYWRlclRvRG9jdW1lbnQoaGVhZGVyLCB0eXBlID0gc2VjdGlvbl9wcm9wZXJ0aWVzXzEuSGVhZGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxUKSB7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzLnB1c2goeyBoZWFkZXIsIHR5cGUgfSk7XHJcbiAgICAgICAgdGhpcy5kb2NSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChoZWFkZXIuSGVhZGVyLlJlZmVyZW5jZUlkLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaGVhZGVyXCIsIGBoZWFkZXIke3RoaXMuaGVhZGVycy5sZW5ndGh9LnhtbGApO1xyXG4gICAgICAgIHRoaXMuY29udGVudFR5cGVzLmFkZEhlYWRlcih0aGlzLmhlYWRlcnMubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGFkZEZvb3RlclRvRG9jdW1lbnQoZm9vdGVyLCB0eXBlID0gc2VjdGlvbl9wcm9wZXJ0aWVzXzEuRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxUKSB7XHJcbiAgICAgICAgdGhpcy5mb290ZXJzLnB1c2goeyBmb290ZXIsIHR5cGUgfSk7XHJcbiAgICAgICAgdGhpcy5kb2NSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChmb290ZXIuRm9vdGVyLlJlZmVyZW5jZUlkLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZm9vdGVyXCIsIGBmb290ZXIke3RoaXMuZm9vdGVycy5sZW5ndGh9LnhtbGApO1xyXG4gICAgICAgIHRoaXMuY29udGVudFR5cGVzLmFkZEZvb3Rlcih0aGlzLmZvb3RlcnMubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGFkZERlZmF1bHRSZWxhdGlvbnNoaXBzKCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKDEsIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudFwiLCBcIndvcmQvZG9jdW1lbnQueG1sXCIpO1xyXG4gICAgICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKDIsIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9yZWxhdGlvbnNoaXBzL21ldGFkYXRhL2NvcmUtcHJvcGVydGllc1wiLCBcImRvY1Byb3BzL2NvcmUueG1sXCIpO1xyXG4gICAgICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKDMsIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9leHRlbmRlZC1wcm9wZXJ0aWVzXCIsIFwiZG9jUHJvcHMvYXBwLnhtbFwiKTtcclxuICAgICAgICB0aGlzLmRvY1JlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zdHlsZXNcIiwgXCJzdHlsZXMueG1sXCIpO1xyXG4gICAgICAgIHRoaXMuZG9jUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAodGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKywgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL251bWJlcmluZ1wiLCBcIm51bWJlcmluZy54bWxcIik7XHJcbiAgICAgICAgdGhpcy5kb2NSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcCh0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZm9vdG5vdGVzXCIsIFwiZm9vdG5vdGVzLnhtbFwiKTtcclxuICAgICAgICB0aGlzLmRvY1JlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zZXR0aW5nc1wiLCBcInNldHRpbmdzLnhtbFwiKTtcclxuICAgIH1cclxuICAgIGdldCBEb2N1bWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudDtcclxuICAgIH1cclxuICAgIGdldCBTdHlsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IENvcmVQcm9wZXJ0aWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvcmVQcm9wZXJ0aWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IE51bWJlcmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmc7XHJcbiAgICB9XHJcbiAgICBnZXQgTWVkaWEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWE7XHJcbiAgICB9XHJcbiAgICBnZXQgRG9jdW1lbnRSZWxhdGlvbnNoaXBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvY1JlbGF0aW9uc2hpcHM7XHJcbiAgICB9XHJcbiAgICBnZXQgRmlsZVJlbGF0aW9uc2hpcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHM7XHJcbiAgICB9XHJcbiAgICBnZXQgSGVhZGVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLm1hcCgoaXRlbSkgPT4gaXRlbS5oZWFkZXIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IEZvb3RlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9vdGVycy5tYXAoKGl0ZW0pID0+IGl0ZW0uZm9vdGVyKTtcclxuICAgIH1cclxuICAgIGdldCBDb250ZW50VHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFR5cGVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IEFwcFByb3BlcnRpZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwUHJvcGVydGllcztcclxuICAgIH1cclxuICAgIGdldCBGb290Tm90ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9vdE5vdGVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IFNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzO1xyXG4gICAgfVxyXG4gICAgZ2V0IEh5cGVybGlua0NhY2hlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh5cGVybGlua0NhY2hlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRmlsZSA9IEZpbGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBhcHBfcHJvcGVydGllc19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MSk7XHJcbmNsYXNzIEFwcFByb3BlcnRpZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIlByb3BlcnRpZXNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGFwcF9wcm9wZXJ0aWVzX2F0dHJpYnV0ZXNfMS5BcHBQcm9wZXJ0aWVzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2V4dGVuZGVkLXByb3BlcnRpZXNcIixcclxuICAgICAgICAgICAgdnQ6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZG9jUHJvcHNWVHlwZXNcIixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BcHBQcm9wZXJ0aWVzID0gQXBwUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEFwcFByb3BlcnRpZXNBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcInhtbG5zXCIsXHJcbiAgICAgICAgICAgIHZ0OiBcInhtbG5zOnZ0XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkFwcFByb3BlcnRpZXNBdHRyaWJ1dGVzID0gQXBwUHJvcGVydGllc0F0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBjb250ZW50X3R5cGVzX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgzKTtcclxuY29uc3QgZGVmYXVsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODQpO1xyXG5jb25zdCBvdmVycmlkZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODYpO1xyXG5jbGFzcyBDb250ZW50VHlwZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIlR5cGVzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb250ZW50X3R5cGVzX2F0dHJpYnV0ZXNfMS5Db250ZW50VHlwZUF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB4bWxuczogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L2NvbnRlbnQtdHlwZXNcIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRlZmF1bHRfMS5EZWZhdWx0KFwiaW1hZ2UvcG5nXCIsIFwicG5nXCIpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZGVmYXVsdF8xLkRlZmF1bHQoXCJpbWFnZS9qcGVnXCIsIFwianBlZ1wiKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRlZmF1bHRfMS5EZWZhdWx0KFwiaW1hZ2UvanBlZ1wiLCBcImpwZ1wiKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRlZmF1bHRfMS5EZWZhdWx0KFwiaW1hZ2UvYm1wXCIsIFwiYm1wXCIpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZGVmYXVsdF8xLkRlZmF1bHQoXCJpbWFnZS9naWZcIiwgXCJnaWZcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkZWZhdWx0XzEuRGVmYXVsdChcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLnJlbGF0aW9uc2hpcHMreG1sXCIsIFwicmVsc1wiKSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRlZmF1bHRfMS5EZWZhdWx0KFwiYXBwbGljYXRpb24veG1sXCIsIFwieG1sXCIpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb3ZlcnJpZGVfMS5PdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50Lm1haW4reG1sXCIsIFwiL3dvcmQvZG9jdW1lbnQueG1sXCIpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb3ZlcnJpZGVfMS5PdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnN0eWxlcyt4bWxcIiwgXCIvd29yZC9zdHlsZXMueG1sXCIpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb3ZlcnJpZGVfMS5PdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIiwgXCIvZG9jUHJvcHMvY29yZS54bWxcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBvdmVycmlkZV8xLk92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmV4dGVuZGVkLXByb3BlcnRpZXMreG1sXCIsIFwiL2RvY1Byb3BzL2FwcC54bWxcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBvdmVycmlkZV8xLk92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwubnVtYmVyaW5nK3htbFwiLCBcIi93b3JkL251bWJlcmluZy54bWxcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBvdmVycmlkZV8xLk92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdG5vdGVzK3htbFwiLCBcIi93b3JkL2Zvb3Rub3Rlcy54bWxcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBvdmVycmlkZV8xLk92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc2V0dGluZ3MreG1sXCIsIFwiL3dvcmQvc2V0dGluZ3MueG1sXCIpKTtcclxuICAgIH1cclxuICAgIGFkZEZvb3RlcihpbmRleCkge1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBvdmVycmlkZV8xLk92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdGVyK3htbFwiLCBgL3dvcmQvZm9vdGVyJHtpbmRleH0ueG1sYCkpO1xyXG4gICAgfVxyXG4gICAgYWRkSGVhZGVyKGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IG92ZXJyaWRlXzEuT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5oZWFkZXIreG1sXCIsIGAvd29yZC9oZWFkZXIke2luZGV4fS54bWxgKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db250ZW50VHlwZXMgPSBDb250ZW50VHlwZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBDb250ZW50VHlwZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgeG1sbnM6IFwieG1sbnNcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29udGVudFR5cGVBdHRyaWJ1dGVzID0gQ29udGVudFR5cGVBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZGVmYXVsdF9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4NSk7XHJcbmNsYXNzIERlZmF1bHQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50VHlwZSwgZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgc3VwZXIoXCJEZWZhdWx0XCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkZWZhdWx0X2F0dHJpYnV0ZXNfMS5EZWZhdWx0QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcclxuICAgICAgICAgICAgZXh0ZW5zaW9uOiBleHRlbnNpb24sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGVmYXVsdCA9IERlZmF1bHQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBEZWZhdWx0QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJDb250ZW50VHlwZVwiLFxyXG4gICAgICAgICAgICBleHRlbnNpb246IFwiRXh0ZW5zaW9uXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlZmF1bHRBdHRyaWJ1dGVzID0gRGVmYXVsdEF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBvdmVycmlkZV9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4Nyk7XHJcbmNsYXNzIE92ZXJyaWRlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY29udGVudFR5cGUsIHBhcnROYW1lKSB7XHJcbiAgICAgICAgc3VwZXIoXCJPdmVycmlkZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgb3ZlcnJpZGVfYXR0cmlidXRlc18xLk92ZXJyaWRlQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcclxuICAgICAgICAgICAgcGFydE5hbWU6IHBhcnROYW1lLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk92ZXJyaWRlID0gT3ZlcnJpZGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBPdmVycmlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiQ29udGVudFR5cGVcIixcclxuICAgICAgICAgICAgcGFydE5hbWU6IFwiUGFydE5hbWVcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuT3ZlcnJpZGVBdHRyaWJ1dGVzID0gT3ZlcnJpZGVBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyODkpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGRvY3VtZW50X2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5jb25zdCBjb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MCk7XHJcbmNsYXNzIENvcmVQcm9wZXJ0aWVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwiY3A6Y29yZVByb3BlcnRpZXNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRvY3VtZW50X2F0dHJpYnV0ZXNfMS5Eb2N1bWVudEF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBjcDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L21ldGFkYXRhL2NvcmUtcHJvcGVydGllc1wiLFxyXG4gICAgICAgICAgICBkYzogXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxyXG4gICAgICAgICAgICBkY3Rlcm1zOiBcImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9cIixcclxuICAgICAgICAgICAgZGNtaXR5cGU6IFwiaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1wiLFxyXG4gICAgICAgICAgICB4c2k6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudGl0bGUpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5UaXRsZShvcHRpb25zLnRpdGxlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnN1YmplY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5TdWJqZWN0KG9wdGlvbnMuc3ViamVjdCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5jcmVhdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb21wb25lbnRzXzEuQ3JlYXRvcihvcHRpb25zLmNyZWF0b3IpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMua2V5d29yZHMpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5LZXl3b3JkcyhvcHRpb25zLmtleXdvcmRzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb21wb25lbnRzXzEuRGVzY3JpcHRpb24ob3B0aW9ucy5kZXNjcmlwdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5sYXN0TW9kaWZpZWRCeSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLkxhc3RNb2RpZmllZEJ5KG9wdGlvbnMubGFzdE1vZGlmaWVkQnkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucmV2aXNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbXBvbmVudHNfMS5SZXZpc2lvbihvcHRpb25zLnJldmlzaW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb21wb25lbnRzXzEuQ3JlYXRlZCgpKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgY29tcG9uZW50c18xLk1vZGlmaWVkKCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29yZVByb3BlcnRpZXMgPSBDb3JlUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMjkwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGRvY3VtZW50X2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5jbGFzcyBUaXRsZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkYzp0aXRsZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UaXRsZSA9IFRpdGxlO1xyXG5jbGFzcyBTdWJqZWN0IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICBzdXBlcihcImRjOnN1YmplY3RcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3ViamVjdCA9IFN1YmplY3Q7XHJcbmNsYXNzIENyZWF0b3IgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwiZGM6Y3JlYXRvclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaCh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5DcmVhdG9yID0gQ3JlYXRvcjtcclxuY2xhc3MgS2V5d29yZHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwiY3A6a2V5d29yZHNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuS2V5d29yZHMgPSBLZXl3b3JkcztcclxuY2xhc3MgRGVzY3JpcHRpb24gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwiZGM6ZGVzY3JpcHRpb25cIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGVzY3JpcHRpb24gPSBEZXNjcmlwdGlvbjtcclxuY2xhc3MgTGFzdE1vZGlmaWVkQnkgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwiY3A6bGFzdE1vZGlmaWVkQnlcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTGFzdE1vZGlmaWVkQnkgPSBMYXN0TW9kaWZpZWRCeTtcclxuY2xhc3MgUmV2aXNpb24gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwiY3A6cmV2aXNpb25cIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUmV2aXNpb24gPSBSZXZpc2lvbjtcclxuY2xhc3MgRGF0ZUNvbXBvbmVudCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGdldEN1cnJlbnREYXRlKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgY29uc3QgbW9udGggPSAoXCIwXCIgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKTtcclxuICAgICAgICBjb25zdCBkYXkgPSAoXCIwXCIgKyBkYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgIGNvbnN0IGhvdXJzID0gKFwiMFwiICsgZGF0ZS5nZXRIb3VycygpKS5zbGljZSgtMik7XHJcbiAgICAgICAgY29uc3QgbWludXRlcyA9IChcIjBcIiArIGRhdGUuZ2V0TWludXRlcygpKS5zbGljZSgtMik7XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IChcIjBcIiArIGRhdGUuZ2V0U2Vjb25kcygpKS5zbGljZSgtMik7XHJcbiAgICAgICAgcmV0dXJuIHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXkgKyBcIlRcIiArIGhvdXJzICsgXCI6XCIgKyBtaW51dGVzICsgXCI6XCIgKyBzZWNvbmRzICsgXCJaXCI7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EYXRlQ29tcG9uZW50ID0gRGF0ZUNvbXBvbmVudDtcclxuY2xhc3MgQ3JlYXRlZCBleHRlbmRzIERhdGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJkY3Rlcm1zOmNyZWF0ZWRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRvY3VtZW50X2F0dHJpYnV0ZXNfMS5Eb2N1bWVudEF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB0eXBlOiBcImRjdGVybXM6VzNDRFRGXCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuZ2V0Q3VycmVudERhdGUoKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5DcmVhdGVkID0gQ3JlYXRlZDtcclxuY2xhc3MgTW9kaWZpZWQgZXh0ZW5kcyBEYXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiZGN0ZXJtczptb2RpZmllZFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZG9jdW1lbnRfYXR0cmlidXRlc18xLkRvY3VtZW50QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZGN0ZXJtczpXM0NEVEZcIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGhpcy5nZXRDdXJyZW50RGF0ZSgpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1vZGlmaWVkID0gTW9kaWZpZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBib2R5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNCk7XHJcbmNvbnN0IGRvY3VtZW50X2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5jb25zdCBkb2N1bWVudF9iYWNrZ3JvdW5kXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOSk7XHJcbmNsYXNzIERvY3VtZW50IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpkb2N1bWVudFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZG9jdW1lbnRfYXR0cmlidXRlc18xLkRvY3VtZW50QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHdwYzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdDYW52YXNcIixcclxuICAgICAgICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcclxuICAgICAgICAgICAgbzogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcclxuICAgICAgICAgICAgcjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIsXHJcbiAgICAgICAgICAgIG06IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxyXG4gICAgICAgICAgICB2OiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXHJcbiAgICAgICAgICAgIHdwMTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxyXG4gICAgICAgICAgICB3cDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXHJcbiAgICAgICAgICAgIHcxMDogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXHJcbiAgICAgICAgICAgIHc6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIsXHJcbiAgICAgICAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXHJcbiAgICAgICAgICAgIHcxNTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXHJcbiAgICAgICAgICAgIHdwZzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxyXG4gICAgICAgICAgICB3cGk6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nSW5rXCIsXHJcbiAgICAgICAgICAgIHduZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXHJcbiAgICAgICAgICAgIHdwczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiLFxyXG4gICAgICAgICAgICBJZ25vcmFibGU6IFwidzE0IHcxNSB3cDE0XCIsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMuYm9keSA9IG5ldyBib2R5XzEuQm9keSgpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkb2N1bWVudF9iYWNrZ3JvdW5kXzEuRG9jdW1lbnRCYWNrZ3JvdW5kKG9wdGlvbnMuYmFja2dyb3VuZCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuYm9keSk7XHJcbiAgICB9XHJcbiAgICBhZGQoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuYm9keS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgZ2V0IEJvZHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keTtcclxuICAgIH1cclxuICAgIGdldFRhYmxlc09mQ29udGVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keS5nZXRUYWJsZXNPZkNvbnRlbnRzKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb2N1bWVudCA9IERvY3VtZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiAyOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgX18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XHJcbmNvbnN0IHNlY3Rpb25fcHJvcGVydGllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpO1xyXG5jbGFzcyBCb2R5IGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmJvZHlcIik7XHJcbiAgICAgICAgdGhpcy5zZWN0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYWRkU2VjdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zLnBvcCgpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuY3JlYXRlU2VjdGlvblBhcmFncmFwaChjdXJyZW50U2VjdGlvbikpO1xyXG4gICAgICAgIHRoaXMuc2VjdGlvbnMucHVzaChuZXcgc2VjdGlvbl9wcm9wZXJ0aWVzXzEuU2VjdGlvblByb3BlcnRpZXMob3B0aW9ucykpO1xyXG4gICAgfVxyXG4gICAgcHJlcEZvclhtbChmaWxlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvbnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuc2VjdGlvbnMucG9wKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChmaWxlKTtcclxuICAgIH1cclxuICAgIHB1c2goY29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGdldFRhYmxlc09mQ29udGVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZCBpbnN0YW5jZW9mIF9fMS5UYWJsZU9mQ29udGVudHMpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlU2VjdGlvblBhcmFncmFwaChzZWN0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gbmV3IF9fMS5QYXJhZ3JhcGgoe30pO1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgX18xLlBhcmFncmFwaFByb3BlcnRpZXMoe30pO1xyXG4gICAgICAgIHByb3BlcnRpZXMucHVzaChzZWN0aW9uKTtcclxuICAgICAgICBwYXJhZ3JhcGguYWRkQ2hpbGRFbGVtZW50KHByb3BlcnRpZXMpO1xyXG4gICAgICAgIHJldHVybiBwYXJhZ3JhcGg7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Cb2R5ID0gQm9keTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGNvbHVtbnNfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTQpO1xyXG5jbGFzcyBDb2x1bW5zIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc3BhY2UsIG51bSkge1xyXG4gICAgICAgIHN1cGVyKFwidzpjb2xzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBjb2x1bW5zX2F0dHJpYnV0ZXNfMS5Db2x1bW5zQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHNwYWNlOiBzcGFjZSxcclxuICAgICAgICAgICAgbnVtOiBudW0sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29sdW1ucyA9IENvbHVtbnM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBDb2x1bW5zQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBzcGFjZTogXCJ3OnNwYWNlXCIsXHJcbiAgICAgICAgICAgIG51bTogXCJ3Om51bVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db2x1bW5zQXR0cmlidXRlcyA9IENvbHVtbnNBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgZG9jX2dyaWRfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTYpO1xyXG5jbGFzcyBEb2N1bWVudEdyaWQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihsaW5lUGl0Y2gpIHtcclxuICAgICAgICBzdXBlcihcInc6ZG9jR3JpZFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZG9jX2dyaWRfYXR0cmlidXRlc18xLkRvY0dyaWRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgbGluZVBpdGNoOiBsaW5lUGl0Y2gsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRG9jdW1lbnRHcmlkID0gRG9jdW1lbnRHcmlkO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyOTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRG9jR3JpZEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgbGluZVBpdGNoOiBcInc6bGluZVBpdGNoXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvY0dyaWRBdHRyaWJ1dGVzID0gRG9jR3JpZEF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI5NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgTGluZU51bWJlclJlc3RhcnRGb3JtYXQ7XHJcbihmdW5jdGlvbiAoTGluZU51bWJlclJlc3RhcnRGb3JtYXQpIHtcclxuICAgIExpbmVOdW1iZXJSZXN0YXJ0Rm9ybWF0W1wiQ09OVElOVU9VU1wiXSA9IFwiY29udGludW91c1wiO1xyXG4gICAgTGluZU51bWJlclJlc3RhcnRGb3JtYXRbXCJORVdfU0VDVElPTlwiXSA9IFwibmV3U2VjdGlvblwiO1xyXG4gICAgTGluZU51bWJlclJlc3RhcnRGb3JtYXRbXCJORVdfUEFHRVwiXSA9IFwibmV3UGFnZVwiO1xyXG59KShMaW5lTnVtYmVyUmVzdGFydEZvcm1hdCA9IGV4cG9ydHMuTGluZU51bWJlclJlc3RhcnRGb3JtYXQgfHwgKGV4cG9ydHMuTGluZU51bWJlclJlc3RhcnRGb3JtYXQgPSB7fSkpO1xyXG5jbGFzcyBMaW5lTnVtYmVyQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBsaW5lTnVtYmVyQ291bnRCeTogXCJ3OmNvdW50QnlcIixcclxuICAgICAgICAgICAgbGluZU51bWJlclN0YXJ0OiBcInc6c3RhcnRcIixcclxuICAgICAgICAgICAgbGluZU51bWJlclJlc3RhcnQ6IFwidzpyZXN0YXJ0XCIsXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXJEaXN0YW5jZTogXCJ3OmRpc3RhbmNlXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxpbmVOdW1iZXJBdHRyaWJ1dGVzID0gTGluZU51bWJlckF0dHJpYnV0ZXM7XHJcbmNsYXNzIExpbmVOdW1iZXJUeXBlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY291bnRCeSwgc3RhcnQsIHJlc3RhcnQsIGRpc3QpIHtcclxuICAgICAgICBzdXBlcihcInc6bG5OdW1UeXBlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBMaW5lTnVtYmVyQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXJDb3VudEJ5OiBjb3VudEJ5LFxyXG4gICAgICAgICAgICBsaW5lTnVtYmVyU3RhcnQ6IHN0YXJ0LFxyXG4gICAgICAgICAgICBsaW5lTnVtYmVyUmVzdGFydDogcmVzdGFydCxcclxuICAgICAgICAgICAgbGluZU51bWJlckRpc3RhbmNlOiBkaXN0LFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxpbmVOdW1iZXJUeXBlID0gTGluZU51bWJlclR5cGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI5OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgUGFnZUJvcmRlckRpc3BsYXk7XHJcbihmdW5jdGlvbiAoUGFnZUJvcmRlckRpc3BsYXkpIHtcclxuICAgIFBhZ2VCb3JkZXJEaXNwbGF5W1wiQUxMX1BBR0VTXCJdID0gXCJhbGxQYWdlc1wiO1xyXG4gICAgUGFnZUJvcmRlckRpc3BsYXlbXCJGSVJTVF9QQUdFXCJdID0gXCJmaXJzdFBhZ2VcIjtcclxuICAgIFBhZ2VCb3JkZXJEaXNwbGF5W1wiTk9UX0ZJUlNUX1BBR0VcIl0gPSBcIm5vdEZpcnN0UGFnZVwiO1xyXG59KShQYWdlQm9yZGVyRGlzcGxheSA9IGV4cG9ydHMuUGFnZUJvcmRlckRpc3BsYXkgfHwgKGV4cG9ydHMuUGFnZUJvcmRlckRpc3BsYXkgPSB7fSkpO1xyXG52YXIgUGFnZUJvcmRlck9mZnNldEZyb207XHJcbihmdW5jdGlvbiAoUGFnZUJvcmRlck9mZnNldEZyb20pIHtcclxuICAgIFBhZ2VCb3JkZXJPZmZzZXRGcm9tW1wiUEFHRVwiXSA9IFwicGFnZVwiO1xyXG4gICAgUGFnZUJvcmRlck9mZnNldEZyb21bXCJURVhUXCJdID0gXCJ0ZXh0XCI7XHJcbn0pKFBhZ2VCb3JkZXJPZmZzZXRGcm9tID0gZXhwb3J0cy5QYWdlQm9yZGVyT2Zmc2V0RnJvbSB8fCAoZXhwb3J0cy5QYWdlQm9yZGVyT2Zmc2V0RnJvbSA9IHt9KSk7XHJcbnZhciBQYWdlQm9yZGVyWk9yZGVyO1xyXG4oZnVuY3Rpb24gKFBhZ2VCb3JkZXJaT3JkZXIpIHtcclxuICAgIFBhZ2VCb3JkZXJaT3JkZXJbXCJCQUNLXCJdID0gXCJiYWNrXCI7XHJcbiAgICBQYWdlQm9yZGVyWk9yZGVyW1wiRlJPTlRcIl0gPSBcImZyb250XCI7XHJcbn0pKFBhZ2VCb3JkZXJaT3JkZXIgPSBleHBvcnRzLlBhZ2VCb3JkZXJaT3JkZXIgfHwgKGV4cG9ydHMuUGFnZUJvcmRlclpPcmRlciA9IHt9KSk7XHJcbmNsYXNzIFBhZ2VCb3JkZUF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgc3R5bGU6IFwidzp2YWxcIixcclxuICAgICAgICAgICAgc2l6ZTogXCJ3OnNpemVcIixcclxuICAgICAgICAgICAgY29sb3I6IFwidzpjb2xvclwiLFxyXG4gICAgICAgICAgICBzcGFjZTogXCJ3OnNwYWNlXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBQYWdlQm9yZGVyIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoa2V5KTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZUJvcmRlQXR0cmlidXRlcyhvcHRpb25zKSk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgUGFnZUJvcmRlcnNBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IFwidzpkaXNwbGF5XCIsXHJcbiAgICAgICAgICAgIG9mZnNldEZyb206IFwidzpvZmZzZXRGcm9tXCIsXHJcbiAgICAgICAgICAgIHpPcmRlcjogXCJ3OnpPcmRlclwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgUGFnZUJvcmRlcnMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLklnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKFwidzpwZ0JvcmRlcnNcIik7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBhZ2VCb3JkZXJzQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIGlmIChvcHRpb25zLnBhZ2VCb3JkZXJzKSB7XHJcbiAgICAgICAgICAgIHBhZ2VCb3JkZXJzQXR0cmlidXRlcyA9IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG9wdGlvbnMucGFnZUJvcmRlcnMuZGlzcGxheSxcclxuICAgICAgICAgICAgICAgIG9mZnNldEZyb206IG9wdGlvbnMucGFnZUJvcmRlcnMub2Zmc2V0RnJvbSxcclxuICAgICAgICAgICAgICAgIHpPcmRlcjogb3B0aW9ucy5wYWdlQm9yZGVycy56T3JkZXIsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlQm9yZGVyc0F0dHJpYnV0ZXMocGFnZUJvcmRlcnNBdHRyaWJ1dGVzKSk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucGFnZUJvcmRlclRvcCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZUJvcmRlcihcInc6dG9wXCIsIG9wdGlvbnMucGFnZUJvcmRlclRvcCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5wYWdlQm9yZGVyUmlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VCb3JkZXIoXCJ3OnJpZ2h0XCIsIG9wdGlvbnMucGFnZUJvcmRlclJpZ2h0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnBhZ2VCb3JkZXJCb3R0b20pIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VCb3JkZXIoXCJ3OmJvdHRvbVwiLCBvcHRpb25zLnBhZ2VCb3JkZXJCb3R0b20pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucGFnZUJvcmRlckxlZnQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VCb3JkZXIoXCJ3OmxlZnRcIiwgb3B0aW9ucy5wYWdlQm9yZGVyTGVmdCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBhZ2VCb3JkZXJzID0gUGFnZUJvcmRlcnM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI5OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBwYWdlX21hcmdpbl9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XHJcbmNsYXNzIFBhZ2VNYXJnaW4gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIGhlYWRlciwgZm9vdGVyLCBndXR0ZXIsIG1pcnJvcikge1xyXG4gICAgICAgIHN1cGVyKFwidzpwZ01hclwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgcGFnZV9tYXJnaW5fYXR0cmlidXRlc18xLlBhZ2VNYXJnaW5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIHJpZ2h0OiByaWdodCxcclxuICAgICAgICAgICAgYm90dG9tOiBib3R0b20sXHJcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQsXHJcbiAgICAgICAgICAgIGhlYWRlcjogaGVhZGVyLFxyXG4gICAgICAgICAgICBmb290ZXI6IGZvb3RlcixcclxuICAgICAgICAgICAgZ3V0dGVyOiBndXR0ZXIsXHJcbiAgICAgICAgICAgIG1pcnJvcjogbWlycm9yLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBhZ2VNYXJnaW4gPSBQYWdlTWFyZ2luO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgUGFnZU1hcmdpbkF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgdG9wOiBcInc6dG9wXCIsXHJcbiAgICAgICAgICAgIHJpZ2h0OiBcInc6cmlnaHRcIixcclxuICAgICAgICAgICAgYm90dG9tOiBcInc6Ym90dG9tXCIsXHJcbiAgICAgICAgICAgIGxlZnQ6IFwidzpsZWZ0XCIsXHJcbiAgICAgICAgICAgIGhlYWRlcjogXCJ3OmhlYWRlclwiLFxyXG4gICAgICAgICAgICBmb290ZXI6IFwidzpmb290ZXJcIixcclxuICAgICAgICAgICAgZ3V0dGVyOiBcInc6Z3V0dGVyXCIsXHJcbiAgICAgICAgICAgIG1pcnJvcjogXCJ3Om1pcnJvck1hcmdpbnNcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGFnZU1hcmdpbkF0dHJpYnV0ZXMgPSBQYWdlTWFyZ2luQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbnZhciBQYWdlTnVtYmVyRm9ybWF0O1xyXG4oZnVuY3Rpb24gKFBhZ2VOdW1iZXJGb3JtYXQpIHtcclxuICAgIFBhZ2VOdW1iZXJGb3JtYXRbXCJDQVJESU5BTF9URVhUXCJdID0gXCJjYXJkaW5hbFRleHRcIjtcclxuICAgIFBhZ2VOdW1iZXJGb3JtYXRbXCJERUNJTUFMXCJdID0gXCJkZWNpbWFsXCI7XHJcbiAgICBQYWdlTnVtYmVyRm9ybWF0W1wiREVDSU1BTF9FTkNMT1NFRF9DSVJDTEVcIl0gPSBcImRlY2ltYWxFbmNsb3NlZENpcmNsZVwiO1xyXG4gICAgUGFnZU51bWJlckZvcm1hdFtcIkRFQ0lNQUxfRU5DTE9TRURfRlVMTF9TVE9QXCJdID0gXCJkZWNpbWFsRW5jbG9zZWRGdWxsc3RvcFwiO1xyXG4gICAgUGFnZU51bWJlckZvcm1hdFtcIkRFQ0lNQUxfRU5DTE9TRURfUEFSRU5cIl0gPSBcImRlY2ltYWxFbmNsb3NlZFBhcmVuXCI7XHJcbiAgICBQYWdlTnVtYmVyRm9ybWF0W1wiREVDSU1BTF9aRVJPXCJdID0gXCJkZWNpbWFsWmVyb1wiO1xyXG4gICAgUGFnZU51bWJlckZvcm1hdFtcIkxPV0VSX0xFVFRFUlwiXSA9IFwibG93ZXJMZXR0ZXJcIjtcclxuICAgIFBhZ2VOdW1iZXJGb3JtYXRbXCJMT1dFUl9ST01BTlwiXSA9IFwibG93ZXJSb21hblwiO1xyXG4gICAgUGFnZU51bWJlckZvcm1hdFtcIk5PTkVcIl0gPSBcIm5vbmVcIjtcclxuICAgIFBhZ2VOdW1iZXJGb3JtYXRbXCJPUkRJTkFMX1RFWFRcIl0gPSBcIm9yZGluYWxUZXh0XCI7XHJcbiAgICBQYWdlTnVtYmVyRm9ybWF0W1wiVVBQRVJfTEVUVEVSXCJdID0gXCJ1cHBlckxldHRlclwiO1xyXG4gICAgUGFnZU51bWJlckZvcm1hdFtcIlVQUEVSX1JPTUFOXCJdID0gXCJ1cHBlclJvbWFuXCI7XHJcbiAgICBQYWdlTnVtYmVyRm9ybWF0W1wiREVDSU1BTF9GVUxMX1dJRFRIXCJdID0gXCJkZWNpbWFsRnVsbFdpZHRoXCI7XHJcbn0pKFBhZ2VOdW1iZXJGb3JtYXQgPSBleHBvcnRzLlBhZ2VOdW1iZXJGb3JtYXQgfHwgKGV4cG9ydHMuUGFnZU51bWJlckZvcm1hdCA9IHt9KSk7XHJcbmNsYXNzIFBhZ2VOdW1iZXJUeXBlQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBwYWdlTnVtYmVyU3RhcnQ6IFwidzpzdGFydFwiLFxyXG4gICAgICAgICAgICBwYWdlTnVtYmVyRm9ybWF0VHlwZTogXCJ3OmZtdFwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QYWdlTnVtYmVyVHlwZUF0dHJpYnV0ZXMgPSBQYWdlTnVtYmVyVHlwZUF0dHJpYnV0ZXM7XHJcbmNsYXNzIFBhZ2VOdW1iZXJUeXBlIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhcnQsIG51bWJlckZvcm1hdCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpwZ051bVR5cGVcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VOdW1iZXJUeXBlQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHBhZ2VOdW1iZXJTdGFydDogc3RhcnQsXHJcbiAgICAgICAgICAgIHBhZ2VOdW1iZXJGb3JtYXRUeXBlOiBudW1iZXJGb3JtYXQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGFnZU51bWJlclR5cGUgPSBQYWdlTnVtYmVyVHlwZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IHRpdGxlX3BhZ2VfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDMpO1xyXG5jbGFzcyBUaXRsZVBhZ2UgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6dGl0bGVQZ1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdGl0bGVfcGFnZV9hdHRyaWJ1dGVzXzEuVGl0bGVQYWdlQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHZhbHVlOiBcIjFcIixcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UaXRsZVBhZ2UgPSBUaXRsZVBhZ2U7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBUaXRsZVBhZ2VBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBcInc6dmFsXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRpdGxlUGFnZUF0dHJpYnV0ZXMgPSBUaXRsZVBhZ2VBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgdmVydGljYWxfYWxpZ25fYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjcpO1xyXG52YXIgU2VjdGlvblZlcnRpY2FsQWxpZ25WYWx1ZTtcclxuKGZ1bmN0aW9uIChTZWN0aW9uVmVydGljYWxBbGlnblZhbHVlKSB7XHJcbiAgICBTZWN0aW9uVmVydGljYWxBbGlnblZhbHVlW1wiQk9USFwiXSA9IFwiYm90aFwiO1xyXG4gICAgU2VjdGlvblZlcnRpY2FsQWxpZ25WYWx1ZVtcIkJPVFRPTVwiXSA9IFwiYm90dG9tXCI7XHJcbiAgICBTZWN0aW9uVmVydGljYWxBbGlnblZhbHVlW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcclxuICAgIFNlY3Rpb25WZXJ0aWNhbEFsaWduVmFsdWVbXCJUT1BcIl0gPSBcInRvcFwiO1xyXG59KShTZWN0aW9uVmVydGljYWxBbGlnblZhbHVlID0gZXhwb3J0cy5TZWN0aW9uVmVydGljYWxBbGlnblZhbHVlIHx8IChleHBvcnRzLlNlY3Rpb25WZXJ0aWNhbEFsaWduVmFsdWUgPSB7fSkpO1xyXG5jbGFzcyBTZWN0aW9uVmVydGljYWxBbGlnbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnZBbGlnblwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdmVydGljYWxfYWxpZ25fYXR0cmlidXRlc18xLlNlY3Rpb25WZXJ0aWNhbEFsaWduQXR0cmlidXRlcyh7IHZlcnRpY2FsQWxpZ246IHZhbHVlIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNlY3Rpb25WZXJ0aWNhbEFsaWduID0gU2VjdGlvblZlcnRpY2FsQWxpZ247XHJcblxuXG4vKioqLyB9KSxcbi8qIDMwNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBEb2N1bWVudEJhY2tncm91bmRBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcInc6Y29sb3JcIixcclxuICAgICAgICAgICAgdGhlbWVDb2xvcjogXCJ3OnRoZW1lQ29sb3JcIixcclxuICAgICAgICAgICAgdGhlbWVTaGFkZTogXCJ3OnRoZW1lU2hhZGVcIixcclxuICAgICAgICAgICAgdGhlbWVUaW50OiBcInc6dGhlbWVUaW50XCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRvY3VtZW50QmFja2dyb3VuZEF0dHJpYnV0ZXMgPSBEb2N1bWVudEJhY2tncm91bmRBdHRyaWJ1dGVzO1xyXG5jbGFzcyBEb2N1bWVudEJhY2tncm91bmQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmJhY2tncm91bmRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IERvY3VtZW50QmFja2dyb3VuZEF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBjb2xvcjogb3B0aW9ucy5jb2xvciA/IG9wdGlvbnMuY29sb3IgOiBcIkZGRkZGRlwiLFxyXG4gICAgICAgICAgICB0aGVtZUNvbG9yOiBvcHRpb25zLnRoZW1lQ29sb3IsXHJcbiAgICAgICAgICAgIHRoZW1lU2hhZGU6IG9wdGlvbnMudGhlbWVTaGFkZSxcclxuICAgICAgICAgICAgdGhlbWVUaW50OiBvcHRpb25zLnRoZW1lVGludCxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb2N1bWVudEJhY2tncm91bmQgPSBEb2N1bWVudEJhY2tncm91bmQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBmb290ZXJfYXR0cmlidXRlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDgpO1xyXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLkluaXRpYWxpemFibGVYbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocmVmZXJlbmNlTnVtYmVyLCBpbml0Q29udGVudCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpmdHJcIiwgaW5pdENvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMucmVmSWQgPSByZWZlcmVuY2VOdW1iZXI7XHJcbiAgICAgICAgaWYgKCFpbml0Q29udGVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZm9vdGVyX2F0dHJpYnV0ZXNfMS5Gb290ZXJBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgICAgIHdwYzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdDYW52YXNcIixcclxuICAgICAgICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXHJcbiAgICAgICAgICAgICAgICBvOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiLFxyXG4gICAgICAgICAgICAgICAgcjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIsXHJcbiAgICAgICAgICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcclxuICAgICAgICAgICAgICAgIHY6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWxcIixcclxuICAgICAgICAgICAgICAgIHdwMTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxyXG4gICAgICAgICAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxyXG4gICAgICAgICAgICAgICAgdzEwOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmRcIixcclxuICAgICAgICAgICAgICAgIHc6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIsXHJcbiAgICAgICAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICAgICAgdzE1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMi93b3JkbWxcIixcclxuICAgICAgICAgICAgICAgIHdwZzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxyXG4gICAgICAgICAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxyXG4gICAgICAgICAgICAgICAgd25lOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwNi93b3JkbWxcIixcclxuICAgICAgICAgICAgICAgIHdwczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IFJlZmVyZW5jZUlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZklkO1xyXG4gICAgfVxyXG4gICAgYWRkKGl0ZW0pIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3RlciA9IEZvb3RlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEZvb3RlckF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgd3BjOiBcInhtbG5zOndwY1wiLFxyXG4gICAgICAgICAgICBtYzogXCJ4bWxuczptY1wiLFxyXG4gICAgICAgICAgICBvOiBcInhtbG5zOm9cIixcclxuICAgICAgICAgICAgcjogXCJ4bWxuczpyXCIsXHJcbiAgICAgICAgICAgIG06IFwieG1sbnM6bVwiLFxyXG4gICAgICAgICAgICB2OiBcInhtbG5zOnZcIixcclxuICAgICAgICAgICAgd3AxNDogXCJ4bWxuczp3cDE0XCIsXHJcbiAgICAgICAgICAgIHdwOiBcInhtbG5zOndwXCIsXHJcbiAgICAgICAgICAgIHcxMDogXCJ4bWxuczp3MTBcIixcclxuICAgICAgICAgICAgdzogXCJ4bWxuczp3XCIsXHJcbiAgICAgICAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcclxuICAgICAgICAgICAgdzE1OiBcInhtbG5zOncxNVwiLFxyXG4gICAgICAgICAgICB3cGc6IFwieG1sbnM6d3BnXCIsXHJcbiAgICAgICAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcclxuICAgICAgICAgICAgd25lOiBcInhtbG5zOnduZVwiLFxyXG4gICAgICAgICAgICB3cHM6IFwieG1sbnM6d3BzXCIsXHJcbiAgICAgICAgICAgIGNwOiBcInhtbG5zOmNwXCIsXHJcbiAgICAgICAgICAgIGRjOiBcInhtbG5zOmRjXCIsXHJcbiAgICAgICAgICAgIGRjdGVybXM6IFwieG1sbnM6ZGN0ZXJtc1wiLFxyXG4gICAgICAgICAgICBkY21pdHlwZTogXCJ4bWxuczpkY21pdHlwZVwiLFxyXG4gICAgICAgICAgICB4c2k6IFwieG1sbnM6eHNpXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwieHNpOnR5cGVcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdGVyQXR0cmlidXRlcyA9IEZvb3RlckF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBhdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMCk7XHJcbmNvbnN0IHJlbGF0aW9uc2hpcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XHJcbmNsYXNzIFJlbGF0aW9uc2hpcHMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIlJlbGF0aW9uc2hpcHNcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGF0dHJpYnV0ZXNfMS5SZWxhdGlvbnNoaXBzQXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwc1wiLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIGFkZFJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChyZWxhdGlvbnNoaXApO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlUmVsYXRpb25zaGlwKGlkLCB0eXBlLCB0YXJnZXQsIHRhcmdldE1vZGUpIHtcclxuICAgICAgICBjb25zdCByZWxhdGlvbnNoaXAgPSBuZXcgcmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwKGBySWQke2lkfWAsIHR5cGUsIHRhcmdldCwgdGFyZ2V0TW9kZSk7XHJcbiAgICAgICAgdGhpcy5hZGRSZWxhdGlvbnNoaXAocmVsYXRpb25zaGlwKTtcclxuICAgICAgICByZXR1cm4gcmVsYXRpb25zaGlwO1xyXG4gICAgfVxyXG4gICAgZ2V0IFJlbGF0aW9uc2hpcENvdW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubGVuZ3RoIC0gMTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJlbGF0aW9uc2hpcHMgPSBSZWxhdGlvbnNoaXBzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgUmVsYXRpb25zaGlwc0F0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgeG1sbnM6IFwieG1sbnNcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUmVsYXRpb25zaGlwc0F0dHJpYnV0ZXMgPSBSZWxhdGlvbnNoaXBzQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFJlbGF0aW9uc2hpcEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgaWQ6IFwiSWRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJUeXBlXCIsXHJcbiAgICAgICAgICAgIHRhcmdldDogXCJUYXJnZXRcIixcclxuICAgICAgICAgICAgdGFyZ2V0TW9kZTogXCJUYXJnZXRNb2RlXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJlbGF0aW9uc2hpcEF0dHJpYnV0ZXMgPSBSZWxhdGlvbnNoaXBBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgcGFyYWdyYXBoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5jb25zdCBmb290bm90ZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTMpO1xyXG5jb25zdCBjb250aW51YXRpb25fc2VwZXJhdG9yX3J1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTcpO1xyXG5jb25zdCBzZXBlcmF0b3JfcnVuXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxOSk7XHJcbmNvbnN0IGZvb3Rub3Rlc19hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyMSk7XHJcbmNsYXNzIEZvb3ROb3RlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpmb290bm90ZXNcIik7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SWQgPSAxO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmb290bm90ZXNfYXR0cmlidXRlc18xLkZvb3Rub3Rlc0F0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXHJcbiAgICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXHJcbiAgICAgICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXHJcbiAgICAgICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxyXG4gICAgICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcclxuICAgICAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxyXG4gICAgICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcclxuICAgICAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxyXG4gICAgICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxyXG4gICAgICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxyXG4gICAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcclxuICAgICAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxyXG4gICAgICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcclxuICAgICAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBjb25zdCBiZWdpbiA9IG5ldyBmb290bm90ZV8xLkZvb3Rub3RlKC0xLCBmb290bm90ZV8xLkZvb3Rub3RlVHlwZS5TRVBFUkFUT1IpO1xyXG4gICAgICAgIGJlZ2luLmFkZChuZXcgcGFyYWdyYXBoXzEuUGFyYWdyYXBoKHtcclxuICAgICAgICAgICAgc3BhY2luZzoge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBsaW5lOiAyNDAsXHJcbiAgICAgICAgICAgICAgICBsaW5lUnVsZTogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IHNlcGVyYXRvcl9ydW5fMS5TZXBlcmF0b3JSdW4oKV0sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGJlZ2luKTtcclxuICAgICAgICBjb25zdCBzcGFjaW5nID0gbmV3IGZvb3Rub3RlXzEuRm9vdG5vdGUoMCwgZm9vdG5vdGVfMS5Gb290bm90ZVR5cGUuQ09OVElOVUFUSU9OX1NFUEVSQVRPUik7XHJcbiAgICAgICAgc3BhY2luZy5hZGQobmV3IHBhcmFncmFwaF8xLlBhcmFncmFwaCh7XHJcbiAgICAgICAgICAgIHNwYWNpbmc6IHtcclxuICAgICAgICAgICAgICAgIGFmdGVyOiAwLFxyXG4gICAgICAgICAgICAgICAgbGluZTogMjQwLFxyXG4gICAgICAgICAgICAgICAgbGluZVJ1bGU6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogW25ldyBjb250aW51YXRpb25fc2VwZXJhdG9yX3J1bl8xLkNvbnRpbnVhdGlvblNlcGVyYXRvclJ1bigpXSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goc3BhY2luZyk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVGb290Tm90ZShwYXJhZ3JhcGgpIHtcclxuICAgICAgICBjb25zdCBmb290bm90ZSA9IG5ldyBmb290bm90ZV8xLkZvb3Rub3RlKHRoaXMuY3VycmVudElkKTtcclxuICAgICAgICBmb290bm90ZS5hZGQocGFyYWdyYXBoKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChmb290bm90ZSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SWQrKztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3ROb3RlcyA9IEZvb3ROb3RlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGZvb3Rub3RlX2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzE0KTtcclxuY29uc3QgZm9vdG5vdGVfcmVmX3J1bl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTUpO1xyXG52YXIgRm9vdG5vdGVUeXBlO1xyXG4oZnVuY3Rpb24gKEZvb3Rub3RlVHlwZSkge1xyXG4gICAgRm9vdG5vdGVUeXBlW1wiU0VQRVJBVE9SXCJdID0gXCJzZXBhcmF0b3JcIjtcclxuICAgIEZvb3Rub3RlVHlwZVtcIkNPTlRJTlVBVElPTl9TRVBFUkFUT1JcIl0gPSBcImNvbnRpbnVhdGlvblNlcGFyYXRvclwiO1xyXG59KShGb290bm90ZVR5cGUgPSBleHBvcnRzLkZvb3Rub3RlVHlwZSB8fCAoZXhwb3J0cy5Gb290bm90ZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBGb290bm90ZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmZvb3Rub3RlXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBmb290bm90ZV9hdHRyaWJ1dGVzXzEuRm9vdG5vdGVBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIGFkZChwYXJhZ3JhcGgpIHtcclxuICAgICAgICBwYXJhZ3JhcGguYWRkUnVuVG9Gcm9udChuZXcgZm9vdG5vdGVfcmVmX3J1bl8xLkZvb3Rub3RlUmVmUnVuKCkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHBhcmFncmFwaCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Gb290bm90ZSA9IEZvb3Rub3RlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRm9vdG5vdGVBdHRyaWJ1dGVzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxBdHRyaWJ1dGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnhtbEtleXMgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwidzp0eXBlXCIsXHJcbiAgICAgICAgICAgIGlkOiBcInc6aWRcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdG5vdGVBdHRyaWJ1dGVzID0gRm9vdG5vdGVBdHRyaWJ1dGVzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXJhZ3JhcGhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbmNvbnN0IGZvb3Rub3RlX3JlZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTYpO1xyXG5jbGFzcyBGb290bm90ZVJlZlJ1biBleHRlbmRzIHBhcmFncmFwaF8xLlJ1biB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0eWxlOiBcIkZvb3Rub3RlUmVmZXJlbmNlXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZvb3Rub3RlX3JlZl8xLkZvb3Rub3RlUmVmKCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdG5vdGVSZWZSdW4gPSBGb290bm90ZVJlZlJ1bjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEZvb3Rub3RlUmVmIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmZvb3Rub3RlUmVmXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdG5vdGVSZWYgPSBGb290bm90ZVJlZjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGFyYWdyYXBoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5jb25zdCBjb250aW51YXRpb25fc2VwZXJhdG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxOCk7XHJcbmNsYXNzIENvbnRpbnVhdGlvblNlcGVyYXRvclJ1biBleHRlbmRzIHBhcmFncmFwaF8xLlJ1biB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7fSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGNvbnRpbnVhdGlvbl9zZXBlcmF0b3JfMS5Db250aW51YXRpb25TZXBlcmF0b3IoKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db250aW51YXRpb25TZXBlcmF0b3JSdW4gPSBDb250aW51YXRpb25TZXBlcmF0b3JSdW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDMxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBDb250aW51YXRpb25TZXBlcmF0b3IgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6Y29udGludWF0aW9uU2VwYXJhdG9yXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29udGludWF0aW9uU2VwZXJhdG9yID0gQ29udGludWF0aW9uU2VwZXJhdG9yO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXJhZ3JhcGhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbmNvbnN0IHNlcGVyYXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMjApO1xyXG5jbGFzcyBTZXBlcmF0b3JSdW4gZXh0ZW5kcyBwYXJhZ3JhcGhfMS5SdW4ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoe30pO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBzZXBlcmF0b3JfMS5TZXBlcmF0b3IoKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TZXBlcmF0b3JSdW4gPSBTZXBlcmF0b3JSdW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDMyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBTZXBlcmF0b3IgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6c2VwYXJhdG9yXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2VwZXJhdG9yID0gU2VwZXJhdG9yO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRm9vdG5vdGVzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXHJcbiAgICAgICAgICAgIG1jOiBcInhtbG5zOm1jXCIsXHJcbiAgICAgICAgICAgIG86IFwieG1sbnM6b1wiLFxyXG4gICAgICAgICAgICByOiBcInhtbG5zOnJcIixcclxuICAgICAgICAgICAgbTogXCJ4bWxuczptXCIsXHJcbiAgICAgICAgICAgIHY6IFwieG1sbnM6dlwiLFxyXG4gICAgICAgICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcclxuICAgICAgICAgICAgd3A6IFwieG1sbnM6d3BcIixcclxuICAgICAgICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxyXG4gICAgICAgICAgICB3OiBcInhtbG5zOndcIixcclxuICAgICAgICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXHJcbiAgICAgICAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcclxuICAgICAgICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxyXG4gICAgICAgICAgICB3bmU6IFwieG1sbnM6d25lXCIsXHJcbiAgICAgICAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcclxuICAgICAgICAgICAgSWdub3JhYmxlOiBcIm1jOklnbm9yYWJsZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Gb290bm90ZXNBdHRyaWJ1dGVzID0gRm9vdG5vdGVzQXR0cmlidXRlcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMzIzKSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMyNCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcbmNvbnN0IHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICBpZDogXCJ3OmlkXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcyA9IEZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcztcclxuY2xhc3MgRm9vdG5vdGVSZWZlcmVuY2UgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpmb290bm90ZVJlZmVyZW5jZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRm9vdE5vdGVSZWZlcmVuY2VSdW5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZvb3Rub3RlUmVmZXJlbmNlID0gRm9vdG5vdGVSZWZlcmVuY2U7XHJcbmNsYXNzIEZvb3Rub3RlUmVmZXJlbmNlUnVuIGV4dGVuZHMgcnVuXzEuUnVuIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgc3VwZXIoe30pO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcy5wdXNoKG5ldyBzdHlsZV8xLlN0eWxlKFwiRm9vdG5vdGVSZWZlcmVuY2VcIikpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGb290bm90ZVJlZmVyZW5jZShpZCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9vdG5vdGVSZWZlcmVuY2VSdW4gPSBGb290bm90ZVJlZmVyZW5jZVJ1bjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGhlYWRlcl9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyNik7XHJcbmNsYXNzIEhlYWRlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuSW5pdGlhbGl6YWJsZVhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZWZlcmVuY2VOdW1iZXIsIGluaXRDb250ZW50KSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmhkclwiLCBpbml0Q29udGVudCk7XHJcbiAgICAgICAgdGhpcy5yZWZJZCA9IHJlZmVyZW5jZU51bWJlcjtcclxuICAgICAgICBpZiAoIWluaXRDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBoZWFkZXJfYXR0cmlidXRlc18xLkhlYWRlckF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICAgICAgd3BjOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0NhbnZhc1wiLFxyXG4gICAgICAgICAgICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcclxuICAgICAgICAgICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXHJcbiAgICAgICAgICAgICAgICByOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcclxuICAgICAgICAgICAgICAgIG06IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxyXG4gICAgICAgICAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxyXG4gICAgICAgICAgICAgICAgd3AxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXHJcbiAgICAgICAgICAgICAgICB3cDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXHJcbiAgICAgICAgICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxyXG4gICAgICAgICAgICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcclxuICAgICAgICAgICAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXHJcbiAgICAgICAgICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICAgICAgd3BnOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0dyb3VwXCIsXHJcbiAgICAgICAgICAgICAgICB3cGk6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nSW5rXCIsXHJcbiAgICAgICAgICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxyXG4gICAgICAgICAgICAgICAgd3BzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ1NoYXBlXCIsXHJcbiAgICAgICAgICAgICAgICBjeDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTQvY2hhcnRleFwiLFxyXG4gICAgICAgICAgICAgICAgY3gxOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS85LzgvY2hhcnRleFwiLFxyXG4gICAgICAgICAgICAgICAgY3gyOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS8xMC8yMS9jaGFydGV4XCIsXHJcbiAgICAgICAgICAgICAgICBjeDM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvOS9jaGFydGV4XCIsXHJcbiAgICAgICAgICAgICAgICBjeDQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTAvY2hhcnRleFwiLFxyXG4gICAgICAgICAgICAgICAgY3g1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzExL2NoYXJ0ZXhcIixcclxuICAgICAgICAgICAgICAgIGN4NjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMi9jaGFydGV4XCIsXHJcbiAgICAgICAgICAgICAgICBjeDc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTMvY2hhcnRleFwiLFxyXG4gICAgICAgICAgICAgICAgY3g4OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzE0L2NoYXJ0ZXhcIixcclxuICAgICAgICAgICAgICAgIHcxNmNpZDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTYvd29yZG1sL2NpZFwiLFxyXG4gICAgICAgICAgICAgICAgdzE2c2U6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE1L3dvcmRtbC9zeW1leFwiLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IFJlZmVyZW5jZUlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZklkO1xyXG4gICAgfVxyXG4gICAgYWRkKGl0ZW0pIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhlYWRlciA9IEhlYWRlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEhlYWRlckF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHtcclxuICAgICAgICAgICAgd3BjOiBcInhtbG5zOndwY1wiLFxyXG4gICAgICAgICAgICBtYzogXCJ4bWxuczptY1wiLFxyXG4gICAgICAgICAgICBvOiBcInhtbG5zOm9cIixcclxuICAgICAgICAgICAgcjogXCJ4bWxuczpyXCIsXHJcbiAgICAgICAgICAgIG06IFwieG1sbnM6bVwiLFxyXG4gICAgICAgICAgICB2OiBcInhtbG5zOnZcIixcclxuICAgICAgICAgICAgd3AxNDogXCJ4bWxuczp3cDE0XCIsXHJcbiAgICAgICAgICAgIHdwOiBcInhtbG5zOndwXCIsXHJcbiAgICAgICAgICAgIHcxMDogXCJ4bWxuczp3MTBcIixcclxuICAgICAgICAgICAgdzogXCJ4bWxuczp3XCIsXHJcbiAgICAgICAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcclxuICAgICAgICAgICAgdzE1OiBcInhtbG5zOncxNVwiLFxyXG4gICAgICAgICAgICB3cGc6IFwieG1sbnM6d3BnXCIsXHJcbiAgICAgICAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcclxuICAgICAgICAgICAgd25lOiBcInhtbG5zOnduZVwiLFxyXG4gICAgICAgICAgICB3cHM6IFwieG1sbnM6d3BzXCIsXHJcbiAgICAgICAgICAgIGNwOiBcInhtbG5zOmNwXCIsXHJcbiAgICAgICAgICAgIGRjOiBcInhtbG5zOmRjXCIsXHJcbiAgICAgICAgICAgIGRjdGVybXM6IFwieG1sbnM6ZGN0ZXJtc1wiLFxyXG4gICAgICAgICAgICBkY21pdHlwZTogXCJ4bWxuczpkY21pdHlwZVwiLFxyXG4gICAgICAgICAgICB4c2k6IFwieG1sbnM6eHNpXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwieHNpOnR5cGVcIixcclxuICAgICAgICAgICAgY3g6IFwieG1sbnM6Y3hcIixcclxuICAgICAgICAgICAgY3gxOiBcInhtbG5zOmN4MVwiLFxyXG4gICAgICAgICAgICBjeDI6IFwieG1sbnM6Y3gyXCIsXHJcbiAgICAgICAgICAgIGN4MzogXCJ4bWxuczpjeDNcIixcclxuICAgICAgICAgICAgY3g0OiBcInhtbG5zOmN4NFwiLFxyXG4gICAgICAgICAgICBjeDU6IFwieG1sbnM6Y3g1XCIsXHJcbiAgICAgICAgICAgIGN4NjogXCJ4bWxuczpjeDZcIixcclxuICAgICAgICAgICAgY3g3OiBcInhtbG5zOmN4N1wiLFxyXG4gICAgICAgICAgICBjeDg6IFwieG1sbnM6Y3g4XCIsXHJcbiAgICAgICAgICAgIHcxNmNpZDogXCJ4bWxuczp3MTZjaWRcIixcclxuICAgICAgICAgICAgdzE2c2U6IFwieG1sbnM6dzE2c2VcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSGVhZGVyQXR0cmlidXRlcyA9IEhlYWRlckF0dHJpYnV0ZXM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHBhcmFncmFwaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuY2xhc3MgTWVkaWEge1xyXG4gICAgc3RhdGljIGFkZEltYWdlKGZpbGUsIGJ1ZmZlciwgd2lkdGgsIGhlaWdodCwgZHJhd2luZ09wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBtZWRpYURhdGEgPSBmaWxlLk1lZGlhLmFkZE1lZGlhKGJ1ZmZlciwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBwYXJhZ3JhcGhfMS5QaWN0dXJlUnVuKG1lZGlhRGF0YSwgZHJhd2luZ09wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdlbmVyYXRlSWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSkgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBnZXRNZWRpYShrZXkpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5tYXAuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGltYWdlIHdpdGggdGhlIGtleSAke2tleX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbiAgICBhZGRNZWRpYShidWZmZXIsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBgJHtNZWRpYS5nZW5lcmF0ZUlkKCl9LnBuZ2A7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVkaWEoa2V5LCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgfSwgYnVmZmVyKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZU1lZGlhKGtleSwgZGltZW5zaW9ucywgZGF0YSwgZmlsZVBhdGgpIHtcclxuICAgICAgICBjb25zdCBuZXdEYXRhID0gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyB0aGlzLmNvbnZlcnREYXRhVVJJVG9CaW5hcnkoZGF0YSkgOiBkYXRhO1xyXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IHtcclxuICAgICAgICAgICAgc3RyZWFtOiBuZXdEYXRhLFxyXG4gICAgICAgICAgICBwYXRoOiBmaWxlUGF0aCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IGtleSxcclxuICAgICAgICAgICAgZGltZW5zaW9uczoge1xyXG4gICAgICAgICAgICAgICAgcGl4ZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogTWF0aC5yb3VuZChkaW1lbnNpb25zLndpZHRoKSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLnJvdW5kKGRpbWVuc2lvbnMuaGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbXVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogTWF0aC5yb3VuZChkaW1lbnNpb25zLndpZHRoICogOTUyNSksXHJcbiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5yb3VuZChkaW1lbnNpb25zLmhlaWdodCAqIDk1MjUpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubWFwLnNldChrZXksIGltYWdlRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGltYWdlRGF0YTtcclxuICAgIH1cclxuICAgIGdldCBBcnJheSgpIHtcclxuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMubWFwLmZvckVhY2goKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgYXJyYXkucHVzaChkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcbiAgICBjb252ZXJ0RGF0YVVSSVRvQmluYXJ5KGRhdGFVUkkpIHtcclxuICAgICAgICBjb25zdCBCQVNFNjRfTUFSS0VSID0gXCI7YmFzZTY0LFwiO1xyXG4gICAgICAgIGNvbnN0IGJhc2U2NEluZGV4ID0gZGF0YVVSSS5pbmRleE9mKEJBU0U2NF9NQVJLRVIpICsgQkFTRTY0X01BUktFUi5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhdG9iID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF0b2IoZGF0YVVSSS5zdWJzdHJpbmcoYmFzZTY0SW5kZXgpKVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiXCIpXHJcbiAgICAgICAgICAgICAgICAubWFwKChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGIuQnVmZmVyKGRhdGFVUkksIFwiYmFzZTY0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1lZGlhID0gTWVkaWE7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuV09SS0FST1VORDIgPSBcIlwiO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXJhZ3JhcGhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBkb2N1bWVudF9hdHRyaWJ1dGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcclxuY29uc3QgYWJzdHJhY3RfbnVtYmVyaW5nXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMyk7XHJcbmNvbnN0IG51bV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzQpO1xyXG5jbGFzcyBOdW1iZXJpbmcgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Om51bWJlcmluZ1wiKTtcclxuICAgICAgICB0aGlzLmFic3RyYWN0TnVtYmVyaW5nID0gW107XHJcbiAgICAgICAgdGhpcy5jb25jcmV0ZU51bWJlcmluZyA9IFtdO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkb2N1bWVudF9hdHRyaWJ1dGVzXzEuRG9jdW1lbnRBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgd3BjOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0NhbnZhc1wiLFxyXG4gICAgICAgICAgICBtYzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvbWFya3VwLWNvbXBhdGliaWxpdHkvMjAwNlwiLFxyXG4gICAgICAgICAgICBvOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiLFxyXG4gICAgICAgICAgICByOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcclxuICAgICAgICAgICAgbTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9tYXRoXCIsXHJcbiAgICAgICAgICAgIHY6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWxcIixcclxuICAgICAgICAgICAgd3AxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXHJcbiAgICAgICAgICAgIHdwOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcclxuICAgICAgICAgICAgdzEwOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmRcIixcclxuICAgICAgICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcclxuICAgICAgICAgICAgdzE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIixcclxuICAgICAgICAgICAgdzE1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMi93b3JkbWxcIixcclxuICAgICAgICAgICAgd3BnOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0dyb3VwXCIsXHJcbiAgICAgICAgICAgIHdwaTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdJbmtcIixcclxuICAgICAgICAgICAgd25lOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwNi93b3JkbWxcIixcclxuICAgICAgICAgICAgd3BzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ1NoYXBlXCIsXHJcbiAgICAgICAgICAgIElnbm9yYWJsZTogXCJ3MTQgdzE1IHdwMTRcIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5uZXh0SWQgPSAwO1xyXG4gICAgICAgIGNvbnN0IGFic3RyYWN0TnVtYmVyaW5nID0gdGhpcy5jcmVhdGVBYnN0cmFjdE51bWJlcmluZyhbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImJ1bGxldFwiLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJcXHUyNUNGXCIsXHJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHBhcmFncmFwaF8xLkFsaWdubWVudFR5cGUuTEVGVCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiA3MjAsIGhhbmdpbmc6IDM2MCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbDogMSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdDogXCJidWxsZXRcIixcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiXFx1MjVDQlwiLFxyXG4gICAgICAgICAgICAgICAgYWxpZ25tZW50OiBwYXJhZ3JhcGhfMS5BbGlnbm1lbnRUeXBlLkxFRlQsXHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogMTQ0MCwgaGFuZ2luZzogMzYwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldmVsOiAyLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImJ1bGxldFwiLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJcXHUyNUEwXCIsXHJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHBhcmFncmFwaF8xLkFsaWdubWVudFR5cGUuTEVGVCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiAyMTYwLCBoYW5naW5nOiAzNjAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWw6IDMsXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiYnVsbGV0XCIsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlxcdTI1Q0ZcIixcclxuICAgICAgICAgICAgICAgIGFsaWdubWVudDogcGFyYWdyYXBoXzEuQWxpZ25tZW50VHlwZS5MRUZULFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGg6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDI4ODAsIGhhbmdpbmc6IDM2MCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbDogNCxcclxuICAgICAgICAgICAgICAgIGZvcm1hdDogXCJidWxsZXRcIixcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiXFx1MjVDQlwiLFxyXG4gICAgICAgICAgICAgICAgYWxpZ25tZW50OiBwYXJhZ3JhcGhfMS5BbGlnbm1lbnRUeXBlLkxFRlQsXHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogMzYwMCwgaGFuZ2luZzogMzYwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldmVsOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImJ1bGxldFwiLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJcXHUyNUEwXCIsXHJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHBhcmFncmFwaF8xLkFsaWdubWVudFR5cGUuTEVGVCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiA0MzIwLCBoYW5naW5nOiAzNjAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWw6IDYsXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiYnVsbGV0XCIsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlxcdTI1Q0ZcIixcclxuICAgICAgICAgICAgICAgIGFsaWdubWVudDogcGFyYWdyYXBoXzEuQWxpZ25tZW50VHlwZS5MRUZULFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGg6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDUwNDAsIGhhbmdpbmc6IDM2MCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbDogNyxcclxuICAgICAgICAgICAgICAgIGZvcm1hdDogXCJidWxsZXRcIixcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiXFx1MjVDRlwiLFxyXG4gICAgICAgICAgICAgICAgYWxpZ25tZW50OiBwYXJhZ3JhcGhfMS5BbGlnbm1lbnRUeXBlLkxFRlQsXHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogNTc2MCwgaGFuZ2luZzogMzYwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldmVsOiA4LFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImJ1bGxldFwiLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJcXHUyNUNGXCIsXHJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHBhcmFncmFwaF8xLkFsaWdubWVudFR5cGUuTEVGVCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiA2NDgwLCBoYW5naW5nOiAzNjAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNvbmNyZXRlTnVtYmVyaW5nKGFic3RyYWN0TnVtYmVyaW5nKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNvbiBvZiBvcHRpb25zLmNvbmZpZykge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QWJzdHJhY3ROdW1iZXJpbmcgPSB0aGlzLmNyZWF0ZUFic3RyYWN0TnVtYmVyaW5nKGNvbi5sZXZlbHMpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbmNyZXRlTnVtYmVyaW5nKGN1cnJlbnRBYnN0cmFjdE51bWJlcmluZywgY29uLnJlZmVyZW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJlcEZvclhtbCgpIHtcclxuICAgICAgICB0aGlzLmFic3RyYWN0TnVtYmVyaW5nLmZvckVhY2goKHgpID0+IHRoaXMucm9vdC5wdXNoKHgpKTtcclxuICAgICAgICB0aGlzLmNvbmNyZXRlTnVtYmVyaW5nLmZvckVhY2goKHgpID0+IHRoaXMucm9vdC5wdXNoKHgpKTtcclxuICAgICAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbCgpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQ29uY3JldGVOdW1iZXJpbmcoYWJzdHJhY3ROdW1iZXJpbmcsIHJlZmVyZW5jZSkge1xyXG4gICAgICAgIGNvbnN0IG51bSA9IG5ldyBudW1fMS5Db25jcmV0ZU51bWJlcmluZyh0aGlzLm5leHRJZCsrLCBhYnN0cmFjdE51bWJlcmluZy5pZCwgcmVmZXJlbmNlKTtcclxuICAgICAgICB0aGlzLmNvbmNyZXRlTnVtYmVyaW5nLnB1c2gobnVtKTtcclxuICAgICAgICByZXR1cm4gbnVtO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQWJzdHJhY3ROdW1iZXJpbmcob3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IG51bSA9IG5ldyBhYnN0cmFjdF9udW1iZXJpbmdfMS5BYnN0cmFjdE51bWJlcmluZyh0aGlzLm5leHRJZCsrLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmFic3RyYWN0TnVtYmVyaW5nLnB1c2gobnVtKTtcclxuICAgICAgICByZXR1cm4gbnVtO1xyXG4gICAgfVxyXG4gICAgZ2V0IENvbmNyZXRlTnVtYmVyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmNyZXRlTnVtYmVyaW5nO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTnVtYmVyaW5nID0gTnVtYmVyaW5nO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgTXVsdGlMZXZlbFR5cGUgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKFwidzptdWx0aUxldmVsVHlwZVwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgeG1sX2NvbXBvbmVudHNfMS5BdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgdmFsOiB2YWx1ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NdWx0aUxldmVsVHlwZSA9IE11bHRpTGV2ZWxUeXBlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzMzIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygxMzUpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGNvbXBhdGliaWxpdHlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMzKTtcclxuY29uc3QgZGlzcGxheV9iYWNrZ3JvdW5kX3NoYXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzNCk7XHJcbmNvbnN0IHRyYWNrX3JldmlzaW9uc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzUpO1xyXG5jb25zdCB1cGRhdGVfZmllbGRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNSk7XHJcbmNsYXNzIFNldHRpbmdzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0ge1xyXG4gICAgICAgICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXHJcbiAgICAgICAgICAgIG1jOiBcInhtbG5zOm1jXCIsXHJcbiAgICAgICAgICAgIG86IFwieG1sbnM6b1wiLFxyXG4gICAgICAgICAgICByOiBcInhtbG5zOnJcIixcclxuICAgICAgICAgICAgbTogXCJ4bWxuczptXCIsXHJcbiAgICAgICAgICAgIHY6IFwieG1sbnM6dlwiLFxyXG4gICAgICAgICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcclxuICAgICAgICAgICAgd3A6IFwieG1sbnM6d3BcIixcclxuICAgICAgICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxyXG4gICAgICAgICAgICB3OiBcInhtbG5zOndcIixcclxuICAgICAgICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXHJcbiAgICAgICAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcclxuICAgICAgICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxyXG4gICAgICAgICAgICB3bmU6IFwieG1sbnM6d25lXCIsXHJcbiAgICAgICAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcclxuICAgICAgICAgICAgSWdub3JhYmxlOiBcIm1jOklnbm9yYWJsZVwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TZXR0aW5nc0F0dHJpYnV0ZXMgPSBTZXR0aW5nc0F0dHJpYnV0ZXM7XHJcbmNsYXNzIFNldHRpbmdzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnNldHRpbmdzXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXR0aW5nc0F0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXHJcbiAgICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXHJcbiAgICAgICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXHJcbiAgICAgICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxyXG4gICAgICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcclxuICAgICAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxyXG4gICAgICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcclxuICAgICAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxyXG4gICAgICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxyXG4gICAgICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxyXG4gICAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcclxuICAgICAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxyXG4gICAgICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcclxuICAgICAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLmNvbXBhdGliaWxpdHkgPSBuZXcgY29tcGF0aWJpbGl0eV8xLkNvbXBhdGliaWxpdHkoKTtcclxuICAgICAgICB0aGlzLnRyYWNrUmV2aXNpb25zID0gbmV3IHRyYWNrX3JldmlzaW9uc18xLlRyYWNrUmV2aXNpb25zKCk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGRpc3BsYXlfYmFja2dyb3VuZF9zaGFwZV8xLkRpc3BsYXlCYWNrZ3JvdW5kU2hhcGUoKSk7XHJcbiAgICB9XHJcbiAgICBhZGRVcGRhdGVGaWVsZHMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QuZmluZCgoY2hpbGQpID0+IGNoaWxkIGluc3RhbmNlb2YgdXBkYXRlX2ZpZWxkc18xLlVwZGF0ZUZpZWxkcykpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZEVsZW1lbnQobmV3IHVwZGF0ZV9maWVsZHNfMS5VcGRhdGVGaWVsZHMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkQ29tcGF0aWJpbGl0eSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucm9vdC5maW5kKChjaGlsZCkgPT4gY2hpbGQgaW5zdGFuY2VvZiBjb21wYXRpYmlsaXR5XzEuQ29tcGF0aWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZEVsZW1lbnQodGhpcy5jb21wYXRpYmlsaXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGF0aWJpbGl0eTtcclxuICAgIH1cclxuICAgIGFkZFRyYWNrUmV2aXNpb25zKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5yb290LmZpbmQoKGNoaWxkKSA9PiBjaGlsZCBpbnN0YW5jZW9mIHRyYWNrX3JldmlzaW9uc18xLlRyYWNrUmV2aXNpb25zKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkRWxlbWVudCh0aGlzLnRyYWNrUmV2aXNpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tSZXZpc2lvbnM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TZXR0aW5ncyA9IFNldHRpbmdzO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRG9Ob3RFeHBhbmRTaGlmdFJldHVybiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpkb05vdEV4cGFuZFNoaWZ0UmV0dXJuXCIpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIENvbXBhdGliaWxpdHkgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6Y29tcGF0XCIpO1xyXG4gICAgfVxyXG4gICAgZG9Ob3RFeHBhbmRTaGlmdFJldHVybigpIHtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRG9Ob3RFeHBhbmRTaGlmdFJldHVybigpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNvbXBhdGliaWxpdHkgPSBDb21wYXRpYmlsaXR5O1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgRGlzcGxheUJhY2tncm91bmRTaGFwZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpkaXNwbGF5QmFja2dyb3VuZFNoYXBlXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGlzcGxheUJhY2tncm91bmRTaGFwZSA9IERpc3BsYXlCYWNrZ3JvdW5kU2hhcGU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBUcmFja1JldmlzaW9ucyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzp0cmFja1JldmlzaW9uc1wiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRyYWNrUmV2aXNpb25zID0gVHJhY2tSZXZpc2lvbnM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCB4bWxfanNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xyXG5jb25zdCBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xyXG5jbGFzcyBFeHRlcm5hbFN0eWxlc0ZhY3Rvcnkge1xyXG4gICAgbmV3SW5zdGFuY2UoeG1sRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHhtbE9iaiA9IHhtbF9qc18xLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlIH0pO1xyXG4gICAgICAgIGxldCBzdHlsZXNYbWxFbGVtZW50O1xyXG4gICAgICAgIGZvciAoY29uc3QgeG1sRWxtIG9mIHhtbE9iai5lbGVtZW50cyB8fCBbXSkge1xyXG4gICAgICAgICAgICBpZiAoeG1sRWxtLm5hbWUgPT09IFwidzpzdHlsZXNcIikge1xyXG4gICAgICAgICAgICAgICAgc3R5bGVzWG1sRWxlbWVudCA9IHhtbEVsbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3R5bGVzWG1sRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbiBub3QgZmluZCBzdHlsZXMgZWxlbWVudFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3R5bGVzRWxlbWVudHMgPSBzdHlsZXNYbWxFbGVtZW50LmVsZW1lbnRzIHx8IFtdO1xyXG4gICAgICAgIGNvbnN0IGltcG9ydGVkU3R5bGUgPSBuZXcgXzEuU3R5bGVzKHtcclxuICAgICAgICAgICAgaW5pdGlhbFN0eWxlczogbmV3IHhtbF9jb21wb25lbnRzXzEuSW1wb3J0ZWRSb290RWxlbWVudEF0dHJpYnV0ZXMoc3R5bGVzWG1sRWxlbWVudC5hdHRyaWJ1dGVzKSxcclxuICAgICAgICAgICAgaW1wb3J0ZWRTdHlsZXM6IHN0eWxlc0VsZW1lbnRzLm1hcCgoY2hpbGRFbG0pID0+IHhtbF9jb21wb25lbnRzXzEuY29udmVydFRvWG1sQ29tcG9uZW50KGNoaWxkRWxtKSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGltcG9ydGVkU3R5bGU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FeHRlcm5hbFN0eWxlc0ZhY3RvcnkgPSBFeHRlcm5hbFN0eWxlc0ZhY3Rvcnk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGRvY3VtZW50X2F0dHJpYnV0ZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5jb25zdCBkZWZhdWx0c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDUpO1xyXG5jb25zdCBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpO1xyXG5jbGFzcyBEZWZhdWx0U3R5bGVzRmFjdG9yeSB7XHJcbiAgICBuZXdJbnN0YW5jZSgpIHtcclxuICAgICAgICBjb25zdCBkb2N1bWVudEF0dHJpYnV0ZXMgPSBuZXcgZG9jdW1lbnRfYXR0cmlidXRlc18xLkRvY3VtZW50QXR0cmlidXRlcyh7XHJcbiAgICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXHJcbiAgICAgICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxyXG4gICAgICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxyXG4gICAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxyXG4gICAgICAgICAgICBJZ25vcmFibGU6IFwidzE0IHcxNVwiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdHlsZXM6IGRvY3VtZW50QXR0cmlidXRlcyxcclxuICAgICAgICAgICAgaW1wb3J0ZWRTdHlsZXM6IFtcclxuICAgICAgICAgICAgICAgIG5ldyBkZWZhdWx0c18xLkRvY3VtZW50RGVmYXVsdHMoKSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLlRpdGxlU3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiA1NixcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBuZXcgc3R5bGVfMS5IZWFkaW5nMVN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICBydW46IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDMyLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLkhlYWRpbmcyU3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIyRTc0QjVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMjYsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbmV3IHN0eWxlXzEuSGVhZGluZzNTdHlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIjFGNEQ3OFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAyNCxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBuZXcgc3R5bGVfMS5IZWFkaW5nNFN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICBydW46IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpY3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbmV3IHN0eWxlXzEuSGVhZGluZzVTdHlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIjJFNzRCNVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLkhlYWRpbmc2U3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIxRjRENzhcIixcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBuZXcgc3R5bGVfMS5MaXN0UGFyYWdyYXBoKHt9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLkh5cGVybGlua1N0eWxlKHt9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLkZvb3Rub3RlUmVmZXJlbmNlU3R5bGUoe30pLFxyXG4gICAgICAgICAgICAgICAgbmV3IHN0eWxlXzEuRm9vdG5vdGVUZXh0KHt9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBzdHlsZV8xLkZvb3Rub3RlVGV4dENoYXIoe30pLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EZWZhdWx0U3R5bGVzRmFjdG9yeSA9IERlZmF1bHRTdHlsZXNGYWN0b3J5O1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLldPUktBUk9VTkQgPSBcIlwiO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNDApKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNDUpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGFyYWdyYXBoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcbmNvbnN0IGZpZWxkXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNvbnN0IGZpZWxkX2luc3RydWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0MSk7XHJcbmNvbnN0IHNkdF9jb250ZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0Mik7XHJcbmNvbnN0IHNkdF9wcm9wZXJ0aWVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0Myk7XHJcbmNsYXNzIFRhYmxlT2ZDb250ZW50cyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGFsaWFzID0gXCJUYWJsZSBvZiBDb250ZW50c1wiLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnNkdFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgc2R0X3Byb3BlcnRpZXNfMS5TdHJ1Y3R1cmVkRG9jdW1lbnRUYWdQcm9wZXJ0aWVzKGFsaWFzKSk7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IG5ldyBzZHRfY29udGVudF8xLlN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQoKTtcclxuICAgICAgICBjb25zdCBiZWdpblBhcmFncmFwaCA9IG5ldyBwYXJhZ3JhcGhfMS5QYXJhZ3JhcGgoe1xyXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAgbmV3IHJ1bl8xLlJ1bih7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtuZXcgZmllbGRfMS5CZWdpbih0cnVlKSwgbmV3IGZpZWxkX2luc3RydWN0aW9uXzEuRmllbGRJbnN0cnVjdGlvbihwcm9wZXJ0aWVzKSwgbmV3IGZpZWxkXzEuU2VwYXJhdGUoKV0sXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250ZW50LmFkZENoaWxkRWxlbWVudChiZWdpblBhcmFncmFwaCk7XHJcbiAgICAgICAgY29uc3QgZW5kUGFyYWdyYXBoID0gbmV3IHBhcmFncmFwaF8xLlBhcmFncmFwaCh7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICBuZXcgcnVuXzEuUnVuKHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW25ldyBmaWVsZF8xLkVuZCgpXSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRlbnQuYWRkQ2hpbGRFbGVtZW50KGVuZFBhcmFncmFwaCk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goY29udGVudCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UYWJsZU9mQ29udGVudHMgPSBUYWJsZU9mQ29udGVudHM7XHJcblxuXG4vKioqLyB9KSxcbi8qIDM0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHNwYWNlX3R5cGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jbGFzcyBUZXh0QXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBzcGFjZTogXCJ4bWw6c3BhY2VcIiB9O1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEZpZWxkSW5zdHJ1Y3Rpb24gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzID0ge30pIHtcclxuICAgICAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IHNwYWNlX3R5cGVfMS5TcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xyXG4gICAgICAgIGxldCBpbnN0cnVjdGlvbiA9IFwiVE9DXCI7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5jYXB0aW9uTGFiZWwpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGEgXCIke3RoaXMucHJvcGVydGllcy5jYXB0aW9uTGFiZWx9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmVudHJpZXNGcm9tQm9va21hcmspIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGIgXCIke3RoaXMucHJvcGVydGllcy5lbnRyaWVzRnJvbUJvb2ttYXJrfVwiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5jYXB0aW9uTGFiZWxJbmNsdWRpbmdOdW1iZXJzKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxjIFwiJHt0aGlzLnByb3BlcnRpZXMuY2FwdGlvbkxhYmVsSW5jbHVkaW5nTnVtYmVyc31cImA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc2VxdWVuY2VBbmRQYWdlTnVtYmVyc1NlcGFyYXRvcikge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcZCBcIiR7dGhpcy5wcm9wZXJ0aWVzLnNlcXVlbmNlQW5kUGFnZU51bWJlcnNTZXBhcmF0b3J9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnRjRmllbGRJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxmIFwiJHt0aGlzLnByb3BlcnRpZXMudGNGaWVsZElkZW50aWZpZXJ9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmh5cGVybGluaykge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcaGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMudGNGaWVsZExldmVsUmFuZ2UpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGwgXCIke3RoaXMucHJvcGVydGllcy50Y0ZpZWxkTGV2ZWxSYW5nZX1cImA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMucGFnZU51bWJlcnNFbnRyeUxldmVsc1JhbmdlKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxuIFwiJHt0aGlzLnByb3BlcnRpZXMucGFnZU51bWJlcnNFbnRyeUxldmVsc1JhbmdlfVwiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5oZWFkaW5nU3R5bGVSYW5nZSkge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcbyBcIiR7dGhpcy5wcm9wZXJ0aWVzLmhlYWRpbmdTdHlsZVJhbmdlfVwiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5lbnRyeUFuZFBhZ2VOdW1iZXJTZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHAgXCIke3RoaXMucHJvcGVydGllcy5lbnRyeUFuZFBhZ2VOdW1iZXJTZXBhcmF0b3J9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnNlcUZpZWxkSWRlbnRpZmllckZvclByZWZpeCkge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxccyBcIiR7dGhpcy5wcm9wZXJ0aWVzLnNlcUZpZWxkSWRlbnRpZmllckZvclByZWZpeH1cImA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc3R5bGVzV2l0aExldmVscyAmJiB0aGlzLnByb3BlcnRpZXMuc3R5bGVzV2l0aExldmVscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5wcm9wZXJ0aWVzLnN0eWxlc1dpdGhMZXZlbHMubWFwKChzbCkgPT4gYCR7c2wuc3R5bGVOYW1lfSwke3NsLmxldmVsfWApLmpvaW4oXCIsXCIpO1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcdCBcIiR7c3R5bGVzfVwiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy51c2VBcHBsaWVkUGFyYWdyYXBoT3V0bGluZUxldmVsKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFx1YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5wcmVzZXJ2ZVRhYkluRW50cmllcykge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcd2A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMucHJlc2VydmVOZXdMaW5lSW5FbnRyaWVzKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFx4YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5oaWRlVGFiQW5kUGFnZU51bWJlcnNJbldlYlZpZXcpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHpgO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJvb3QucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5GaWVsZEluc3RydWN0aW9uID0gRmllbGRJbnN0cnVjdGlvbjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIFN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcInc6c2R0Q29udGVudFwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQgPSBTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdDb250ZW50O1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgYWxpYXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ0KTtcclxuY2xhc3MgU3RydWN0dXJlZERvY3VtZW50VGFnUHJvcGVydGllcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGFsaWFzKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OnNkdFByXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBhbGlhc18xLkFsaWFzKGFsaWFzKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TdHJ1Y3R1cmVkRG9jdW1lbnRUYWdQcm9wZXJ0aWVzID0gU3RydWN0dXJlZERvY3VtZW50VGFnUHJvcGVydGllcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgeG1sX2NvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbmNsYXNzIEFsaWFzQXR0cmlidXRlcyBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy54bWxLZXlzID0geyBhbGlhczogXCJ3OnZhbFwiIH07XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgQWxpYXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihhbGlhcykge1xyXG4gICAgICAgIHN1cGVyKFwidzphbGlhc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQWxpYXNBdHRyaWJ1dGVzKHsgYWxpYXMgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQWxpYXMgPSBBbGlhcztcclxuXG5cbi8qKiovIH0pLFxuLyogMzQ1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgU3R5bGVMZXZlbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZU5hbWUsIGxldmVsKSB7XHJcbiAgICAgICAgdGhpcy5zdHlsZU5hbWUgPSBzdHlsZU5hbWU7XHJcbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3R5bGVMZXZlbCA9IFN0eWxlTGV2ZWw7XHJcblxuXG4vKioqLyB9KSxcbi8qIDM0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDM0OCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY29uc3QgaW5kZXhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xyXG5jb25zdCB0cmFja19yZXZpc2lvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzYpO1xyXG5jbGFzcyBJbnNlcnRlZFRleHRSdW4gZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3Omluc1wiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgdHJhY2tfcmV2aXNpb25fMS5DaGFuZ2VBdHRyaWJ1dGVzKHtcclxuICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQsXHJcbiAgICAgICAgICAgIGF1dGhvcjogb3B0aW9ucy5hdXRob3IsXHJcbiAgICAgICAgICAgIGRhdGU6IG9wdGlvbnMuZGF0ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZEVsZW1lbnQobmV3IGluZGV4XzEuVGV4dFJ1bihvcHRpb25zKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JbnNlcnRlZFRleHRSdW4gPSBJbnNlcnRlZFRleHRSdW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDM0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBpbmRleF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XHJcbmNvbnN0IGJyZWFrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcclxuY29uc3QgZmllbGRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5jb25zdCBydW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xyXG5jb25zdCB0cmFja19yZXZpc2lvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzYpO1xyXG5jb25zdCBkZWxldGVkX3BhZ2VfbnVtYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0OSk7XHJcbmNvbnN0IGRlbGV0ZWRfdGV4dF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTApO1xyXG5jbGFzcyBEZWxldGVkVGV4dFJ1biBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6ZGVsXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyB0cmFja19yZXZpc2lvbl8xLkNoYW5nZUF0dHJpYnV0ZXMoe1xyXG4gICAgICAgICAgICBpZDogb3B0aW9ucy5pZCxcclxuICAgICAgICAgICAgYXV0aG9yOiBvcHRpb25zLmF1dGhvcixcclxuICAgICAgICAgICAgZGF0ZTogb3B0aW9ucy5kYXRlLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLmRlbGV0ZWRUZXh0UnVuV3JhcHBlciA9IG5ldyBEZWxldGVkVGV4dFJ1bldyYXBwZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZEVsZW1lbnQodGhpcy5kZWxldGVkVGV4dFJ1bldyYXBwZXIpO1xyXG4gICAgfVxyXG4gICAgYnJlYWsoKSB7XHJcbiAgICAgICAgdGhpcy5kZWxldGVkVGV4dFJ1bldyYXBwZXIuYnJlYWsoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlbGV0ZWRUZXh0UnVuID0gRGVsZXRlZFRleHRSdW47XHJcbmNsYXNzIERlbGV0ZWRUZXh0UnVuV3JhcHBlciBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihcInc6clwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgaW5kZXhfMS5SdW5Qcm9wZXJ0aWVzKG9wdGlvbnMpKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG9wdGlvbnMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgcnVuXzEuUGFnZU51bWJlci5DVVJSRU5UOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZpZWxkXzEuQmVnaW4oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZGVsZXRlZF9wYWdlX251bWJlcl8xLkRlbGV0ZWRQYWdlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZpZWxkXzEuU2VwYXJhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5FbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBydW5fMS5QYWdlTnVtYmVyLlRPVEFMX1BBR0VTOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZpZWxkXzEuQmVnaW4oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZGVsZXRlZF9wYWdlX251bWJlcl8xLkRlbGV0ZWROdW1iZXJPZlBhZ2VzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZpZWxkXzEuU2VwYXJhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5FbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBydW5fMS5QYWdlTnVtYmVyLlRPVEFMX1BBR0VTX0lOX1NFQ1RJT046XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5CZWdpbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkZWxldGVkX3BhZ2VfbnVtYmVyXzEuRGVsZXRlZE51bWJlck9mUGFnZXNTZWN0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IGZpZWxkXzEuU2VwYXJhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZmllbGRfMS5FbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBkZWxldGVkX3RleHRfMS5EZWxldGVkVGV4dChjaGlsZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMudGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgZGVsZXRlZF90ZXh0XzEuRGVsZXRlZFRleHQob3B0aW9ucy50ZXh0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYnJlYWsoKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnNwbGljZSgxLCAwLCBuZXcgYnJlYWtfMS5CcmVhaygpKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG4vKiAzNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzcGFjZV90eXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGV4dEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgc3BhY2U6IFwieG1sOnNwYWNlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBEZWxldGVkUGFnZSBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpkZWxJbnN0clRleHRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IHNwYWNlX3R5cGVfMS5TcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKFwiUEFHRVwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlbGV0ZWRQYWdlID0gRGVsZXRlZFBhZ2U7XHJcbmNsYXNzIERlbGV0ZWROdW1iZXJPZlBhZ2VzIGV4dGVuZHMgeG1sX2NvbXBvbmVudHNfMS5YbWxDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJ3OmRlbEluc3RyVGV4dFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogc3BhY2VfdHlwZV8xLlNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2goXCJOVU1QQUdFU1wiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlbGV0ZWROdW1iZXJPZlBhZ2VzID0gRGVsZXRlZE51bWJlck9mUGFnZXM7XHJcbmNsYXNzIERlbGV0ZWROdW1iZXJPZlBhZ2VzU2VjdGlvbiBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidzpkZWxJbnN0clRleHRcIik7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IHNwYWNlX3R5cGVfMS5TcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xyXG4gICAgICAgIHRoaXMucm9vdC5wdXNoKFwiU0VDVElPTlBBR0VTXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGVsZXRlZE51bWJlck9mUGFnZXNTZWN0aW9uID0gRGVsZXRlZE51bWJlck9mUGFnZXNTZWN0aW9uO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzcGFjZV90eXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5jb25zdCB4bWxfY29tcG9uZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuY2xhc3MgVGV4dEF0dHJpYnV0ZXMgZXh0ZW5kcyB4bWxfY29tcG9uZW50c18xLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMueG1sS2V5cyA9IHsgc3BhY2U6IFwieG1sOnNwYWNlXCIgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBEZWxldGVkVGV4dCBleHRlbmRzIHhtbF9jb21wb25lbnRzXzEuWG1sQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHRleHQpIHtcclxuICAgICAgICBzdXBlcihcInc6ZGVsVGV4dFwiKTtcclxuICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogc3BhY2VfdHlwZV8xLlNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XHJcbiAgICAgICAgdGhpcy5yb290LnB1c2godGV4dCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EZWxldGVkVGV4dCA9IERlbGV0ZWRUZXh0O1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNTIpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbmV4dF9jb21waWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTMpO1xyXG5jbGFzcyBQYWNrZXIge1xyXG4gICAgc3RhdGljIHRvQnVmZmVyKGZpbGUsIHByZXR0aWZ5KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIHByZXR0aWZ5KTtcclxuICAgICAgICAgICAgY29uc3QgemlwRGF0YSA9IHlpZWxkIHppcC5nZW5lcmF0ZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwibm9kZWJ1ZmZlclwiLFxyXG4gICAgICAgICAgICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIixcclxuICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB6aXBEYXRhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHRvQmFzZTY0U3RyaW5nKGZpbGUsIHByZXR0aWZ5KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIHByZXR0aWZ5KTtcclxuICAgICAgICAgICAgY29uc3QgemlwRGF0YSA9IHlpZWxkIHppcC5nZW5lcmF0ZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYmFzZTY0XCIsXHJcbiAgICAgICAgICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxyXG4gICAgICAgICAgICAgICAgY29tcHJlc3Npb246IFwiREVGTEFURVwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHppcERhdGE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdG9CbG9iKGZpbGUsIHByZXR0aWZ5KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIHByZXR0aWZ5KTtcclxuICAgICAgICAgICAgY29uc3QgemlwRGF0YSA9IHlpZWxkIHppcC5nZW5lcmF0ZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYmxvYlwiLFxyXG4gICAgICAgICAgICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIixcclxuICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB6aXBEYXRhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblBhY2tlci5jb21waWxlciA9IG5ldyBuZXh0X2NvbXBpbGVyXzEuQ29tcGlsZXIoKTtcclxuZXhwb3J0cy5QYWNrZXIgPSBQYWNrZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDM1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IEpTWmlwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzcpO1xyXG5jb25zdCB4bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1NCk7XHJcbmNvbnN0IGZvcm1hdHRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTYpO1xyXG5jb25zdCBpbWFnZV9yZXBsYWNlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTcpO1xyXG5jb25zdCBudW1iZXJpbmdfcmVwbGFjZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzU4KTtcclxuY2xhc3MgQ29tcGlsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtYXR0ZXIgPSBuZXcgZm9ybWF0dGVyXzEuRm9ybWF0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZVJlcGxhY2VyID0gbmV3IGltYWdlX3JlcGxhY2VyXzEuSW1hZ2VSZXBsYWNlcigpO1xyXG4gICAgICAgIHRoaXMubnVtYmVyaW5nUmVwbGFjZXIgPSBuZXcgbnVtYmVyaW5nX3JlcGxhY2VyXzEuTnVtYmVyaW5nUmVwbGFjZXIoKTtcclxuICAgIH1cclxuICAgIGNvbXBpbGUoZmlsZSwgcHJldHRpZnlYbWwpIHtcclxuICAgICAgICBjb25zdCB6aXAgPSBuZXcgSlNaaXAoKTtcclxuICAgICAgICBjb25zdCB4bWxpZmllZEZpbGVNYXBwaW5nID0gdGhpcy54bWxpZnlGaWxlKGZpbGUsIHByZXR0aWZ5WG1sKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB4bWxpZmllZEZpbGVNYXBwaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICgheG1saWZpZWRGaWxlTWFwcGluZ1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvYmogPSB4bWxpZmllZEZpbGVNYXBwaW5nW2tleV07XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViRmlsZSBvZiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICB6aXAuZmlsZShzdWJGaWxlLnBhdGgsIHN1YkZpbGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB6aXAuZmlsZShvYmoucGF0aCwgb2JqLmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiBmaWxlLk1lZGlhLkFycmF5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhRGF0YSA9IGRhdGEuc3RyZWFtO1xyXG4gICAgICAgICAgICB6aXAuZmlsZShgd29yZC9tZWRpYS8ke2RhdGEuZmlsZU5hbWV9YCwgbWVkaWFEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHppcDtcclxuICAgIH1cclxuICAgIHhtbGlmeUZpbGUoZmlsZSwgcHJldHRpZnkpIHtcclxuICAgICAgICBmaWxlLnZlcmlmeVVwZGF0ZUZpZWxkcygpO1xyXG4gICAgICAgIGNvbnN0IGRvY3VtZW50UmVsYXRpb25zaGlwQ291bnQgPSBmaWxlLkRvY3VtZW50UmVsYXRpb25zaGlwcy5SZWxhdGlvbnNoaXBDb3VudCArIDE7XHJcbiAgICAgICAgY29uc3QgZG9jdW1lbnRYbWxEYXRhID0geG1sKHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkRvY3VtZW50LCBmaWxlKSwgcHJldHRpZnkpO1xyXG4gICAgICAgIGNvbnN0IGRvY3VtZW50TWVkaWFEYXRhcyA9IHRoaXMuaW1hZ2VSZXBsYWNlci5nZXRNZWRpYURhdGEoZG9jdW1lbnRYbWxEYXRhLCBmaWxlLk1lZGlhKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBSZWxhdGlvbnNoaXBzOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TWVkaWFEYXRhcy5mb3JFYWNoKChtZWRpYURhdGEsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5Eb2N1bWVudFJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKGRvY3VtZW50UmVsYXRpb25zaGlwQ291bnQgKyBpLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIiwgYG1lZGlhLyR7bWVkaWFEYXRhLmZpbGVOYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4bWwodGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuRG9jdW1lbnRSZWxhdGlvbnNoaXBzLCBmaWxlKSwgcHJldHRpZnkpO1xyXG4gICAgICAgICAgICAgICAgfSkoKSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IFwid29yZC9fcmVscy9kb2N1bWVudC54bWwucmVsc1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBEb2N1bWVudDoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4bWxEYXRhID0gdGhpcy5pbWFnZVJlcGxhY2VyLnJlcGxhY2UoZG9jdW1lbnRYbWxEYXRhLCBkb2N1bWVudE1lZGlhRGF0YXMsIGRvY3VtZW50UmVsYXRpb25zaGlwQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5lZFhtbERhdGEgPSB0aGlzLm51bWJlcmluZ1JlcGxhY2VyLnJlcGxhY2UoeG1sRGF0YSwgZmlsZS5OdW1iZXJpbmcuQ29uY3JldGVOdW1iZXJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWZlcmVuZWRYbWxEYXRhO1xyXG4gICAgICAgICAgICAgICAgfSkoKSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IFwid29yZC9kb2N1bWVudC54bWxcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgU3R5bGVzOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB4bWwodGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuU3R5bGVzLCBmaWxlKSwgcHJldHRpZnkpLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogXCJ3b3JkL3N0eWxlcy54bWxcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgUHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogeG1sKHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkNvcmVQcm9wZXJ0aWVzLCBmaWxlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogXCJkb2NQcm9wcy9jb3JlLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBOdW1iZXJpbmc6IHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5OdW1iZXJpbmcsIGZpbGUpLCBwcmV0dGlmeSksXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBcIndvcmQvbnVtYmVyaW5nLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBGaWxlUmVsYXRpb25zaGlwczoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogeG1sKHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkZpbGVSZWxhdGlvbnNoaXBzLCBmaWxlKSwgcHJldHRpZnkpLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogXCJfcmVscy8ucmVsc1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBIZWFkZXJSZWxhdGlvbnNoaXBzOiBmaWxlLkhlYWRlcnMubWFwKChoZWFkZXJXcmFwcGVyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeG1sRGF0YSA9IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5IZWFkZXIsIGZpbGUpLCBwcmV0dGlmeSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYURhdGFzID0gdGhpcy5pbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YSh4bWxEYXRhLCBmaWxlLk1lZGlhKTtcclxuICAgICAgICAgICAgICAgIG1lZGlhRGF0YXMuZm9yRWFjaCgobWVkaWFEYXRhLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyV3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChpLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIiwgYG1lZGlhLyR7bWVkaWFEYXRhLmZpbGVOYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5SZWxhdGlvbnNoaXBzLCBmaWxlKSwgcHJldHRpZnkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGB3b3JkL19yZWxzL2hlYWRlciR7aW5kZXggKyAxfS54bWwucmVsc2AsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgRm9vdGVyUmVsYXRpb25zaGlwczogZmlsZS5Gb290ZXJzLm1hcCgoZm9vdGVyV3JhcHBlciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhtbERhdGEgPSB4bWwodGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZvb3RlcldyYXBwZXIuRm9vdGVyLCBmaWxlKSwgcHJldHRpZnkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVkaWFEYXRhcyA9IHRoaXMuaW1hZ2VSZXBsYWNlci5nZXRNZWRpYURhdGEoeG1sRGF0YSwgZmlsZS5NZWRpYSk7XHJcbiAgICAgICAgICAgICAgICBtZWRpYURhdGFzLmZvckVhY2goKG1lZGlhRGF0YSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlcldyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoaSwgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlXCIsIGBtZWRpYS8ke21lZGlhRGF0YS5maWxlTmFtZX1gKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB4bWwodGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZvb3RlcldyYXBwZXIuUmVsYXRpb25zaGlwcywgZmlsZSksIHByZXR0aWZ5KSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgd29yZC9fcmVscy9mb290ZXIke2luZGV4ICsgMX0ueG1sLnJlbHNgLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIEhlYWRlcnM6IGZpbGUuSGVhZGVycy5tYXAoKGhlYWRlcldyYXBwZXIsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wWG1sRGF0YSA9IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5IZWFkZXIsIGZpbGUpLCBwcmV0dGlmeSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYURhdGFzID0gdGhpcy5pbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YSh0ZW1wWG1sRGF0YSwgZmlsZS5NZWRpYSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4bWxEYXRhID0gdGhpcy5pbWFnZVJlcGxhY2VyLnJlcGxhY2UodGVtcFhtbERhdGEsIG1lZGlhRGF0YXMsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB4bWxEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGB3b3JkL2hlYWRlciR7aW5kZXggKyAxfS54bWxgLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIEZvb3RlcnM6IGZpbGUuRm9vdGVycy5tYXAoKGZvb3RlcldyYXBwZXIsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wWG1sRGF0YSA9IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoZm9vdGVyV3JhcHBlci5Gb290ZXIsIGZpbGUpLCBwcmV0dGlmeSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYURhdGFzID0gdGhpcy5pbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YSh0ZW1wWG1sRGF0YSwgZmlsZS5NZWRpYSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4bWxEYXRhID0gdGhpcy5pbWFnZVJlcGxhY2VyLnJlcGxhY2UodGVtcFhtbERhdGEsIG1lZGlhRGF0YXMsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB4bWxEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGB3b3JkL2Zvb3RlciR7aW5kZXggKyAxfS54bWxgLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIENvbnRlbnRUeXBlczoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogeG1sKHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkNvbnRlbnRUeXBlcywgZmlsZSksIHByZXR0aWZ5KSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IFwiW0NvbnRlbnRfVHlwZXNdLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBBcHBQcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB4bWwodGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuQXBwUHJvcGVydGllcywgZmlsZSksIHByZXR0aWZ5KSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IFwiZG9jUHJvcHMvYXBwLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBGb290Tm90ZXM6IHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IHhtbCh0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5Gb290Tm90ZXMsIGZpbGUpLCBwcmV0dGlmeSksXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBcIndvcmQvZm9vdG5vdGVzLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogeG1sKHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLlNldHRpbmdzLCBmaWxlKSwgcHJldHRpZnkpLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogXCJ3b3JkL3NldHRpbmdzLnhtbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db21waWxlciA9IENvbXBpbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHt2YXIgZXNjYXBlRm9yWE1MID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTUpO1xudmFyIFN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpLlN0cmVhbTtcblxudmFyIERFRkFVTFRfSU5ERU5UID0gJyAgICAnO1xuXG5mdW5jdGlvbiB4bWwoaW5wdXQsIG9wdGlvbnMpIHtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGluZGVudDogb3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzdHJlYW0gICAgICA9IG9wdGlvbnMuc3RyZWFtID8gbmV3IFN0cmVhbSgpIDogbnVsbCxcbiAgICAgICAgb3V0cHV0ICAgICAgPSBcIlwiLFxuICAgICAgICBpbnRlcnJ1cHRlZCA9IGZhbHNlLFxuICAgICAgICBpbmRlbnQgICAgICA9ICFvcHRpb25zLmluZGVudCA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuaW5kZW50ID09PSB0cnVlID8gREVGQVVMVF9JTkRFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuaW5kZW50LFxuICAgICAgICBpbnN0YW50ICAgICA9IHRydWU7XG5cblxuICAgIGZ1bmN0aW9uIGRlbGF5IChmdW5jKSB7XG4gICAgICAgIGlmICghaW5zdGFudCkge1xuICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGVuZCAoaW50ZXJydXB0LCBvdXQpIHtcbiAgICAgICAgaWYgKG91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gb3V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnJ1cHQgJiYgIWludGVycnVwdGVkKSB7XG4gICAgICAgICAgICBzdHJlYW0gPSBzdHJlYW0gfHwgbmV3IFN0cmVhbSgpO1xuICAgICAgICAgICAgaW50ZXJydXB0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnJ1cHQgJiYgaW50ZXJydXB0ZWQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gb3V0cHV0O1xuICAgICAgICAgICAgZGVsYXkoZnVuY3Rpb24gKCkgeyBzdHJlYW0uZW1pdCgnZGF0YScsIGRhdGEpIH0pO1xuICAgICAgICAgICAgb3V0cHV0ID0gXCJcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZCAodmFsdWUsIGxhc3QpIHtcbiAgICAgICAgZm9ybWF0KGFwcGVuZCwgcmVzb2x2ZSh2YWx1ZSwgaW5kZW50LCBpbmRlbnQgPyAxIDogMCksIGxhc3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBvdXRwdXQ7XG4gICAgICAgICAgICBkZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgZGF0YSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRYbWxEZWNsYXJhdGlvbihkZWNsYXJhdGlvbikge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBkZWNsYXJhdGlvbi5lbmNvZGluZyB8fCAnVVRGLTgnLFxuICAgICAgICAgICAgYXR0ciA9ICB7IHZlcnNpb246ICcxLjAnLCBlbmNvZGluZzogZW5jb2RpbmcgfTtcblxuICAgICAgICBpZiAoZGVjbGFyYXRpb24uc3RhbmRhbG9uZSkge1xuICAgICAgICAgICAgYXR0ci5zdGFuZGFsb25lID0gZGVjbGFyYXRpb24uc3RhbmRhbG9uZVxuICAgICAgICB9XG5cbiAgICAgICAgYWRkKHsnP3htbCc6IHsgX2F0dHI6IGF0dHIgfSB9KTtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoJy8+JywgJz8+Jyk7XG4gICAgfVxuXG4gICAgLy8gZGlzYWJsZSBkZWxheSBkZWxheWVkXG4gICAgZGVsYXkoZnVuY3Rpb24gKCkgeyBpbnN0YW50ID0gZmFsc2UgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5kZWNsYXJhdGlvbikge1xuICAgICAgICBhZGRYbWxEZWNsYXJhdGlvbihvcHRpb25zLmRlY2xhcmF0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXQgJiYgaW5wdXQuZm9yRWFjaCkge1xuICAgICAgICBpbnB1dC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgICAgICAgdmFyIGxhc3Q7XG4gICAgICAgICAgICBpZiAoaSArIDEgPT09IGlucHV0Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBsYXN0ID0gZW5kO1xuICAgICAgICAgICAgYWRkKHZhbHVlLCBsYXN0KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWRkKGlucHV0LCBlbmQpO1xuICAgIH1cblxuICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLnJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZWxlbWVudCAoLyppbnB1dCwg4oCmKi8pIHtcbiAgICB2YXIgaW5wdXQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICBzZWxmID0ge1xuICAgICAgICAgICAgX2VsZW06ICByZXNvbHZlKGlucHV0KVxuICAgICAgICB9O1xuXG4gICAgc2VsZi5wdXNoID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5hcHBlbmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBhc3NpZ25lZCB0byBhIHBhcmVudCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgaW5kZW50ID0gdGhpcy5fZWxlbS5pbmRlbnQ7XG4gICAgICAgIGZvcm1hdCh0aGlzLmFwcGVuZCwgcmVzb2x2ZShcbiAgICAgICAgICAgIGlucHV0LCBpbmRlbnQsIHRoaXMuX2VsZW0uaWNvdW50ICsgKGluZGVudCA/IDEgOiAwKSksXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHRoYXQuYXBwZW5kKHRydWUpIH0pO1xuICAgIH07XG5cbiAgICBzZWxmLmNsb3NlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVuZCkge1xuICAgICAgICAgICAgdGhpcy5lbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2luZGVudChjaGFyYWN0ZXIsIGNvdW50KSB7XG4gICAgcmV0dXJuIChuZXcgQXJyYXkoY291bnQgfHwgMCkuam9pbihjaGFyYWN0ZXIgfHwgJycpKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKGRhdGEsIGluZGVudCwgaW5kZW50X2NvdW50KSB7XG4gICAgaW5kZW50X2NvdW50ID0gaW5kZW50X2NvdW50IHx8IDA7XG4gICAgdmFyIGluZGVudF9zcGFjZXMgPSBjcmVhdGVfaW5kZW50KGluZGVudCwgaW5kZW50X2NvdW50KTtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgdmFsdWVzID0gZGF0YTtcbiAgICB2YXIgaW50ZXJydXB0ID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICAgIG5hbWUgPSBrZXlzWzBdO1xuICAgICAgICB2YWx1ZXMgPSBkYXRhW25hbWVdO1xuXG4gICAgICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzLl9lbGVtKSB7XG4gICAgICAgICAgICB2YWx1ZXMuX2VsZW0ubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB2YWx1ZXMuX2VsZW0uaWNvdW50ID0gaW5kZW50X2NvdW50O1xuICAgICAgICAgICAgdmFsdWVzLl9lbGVtLmluZGVudCA9IGluZGVudDtcbiAgICAgICAgICAgIHZhbHVlcy5fZWxlbS5pbmRlbnRzID0gaW5kZW50X3NwYWNlcztcbiAgICAgICAgICAgIHZhbHVlcy5fZWxlbS5pbnRlcnJ1cHQgPSB2YWx1ZXM7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLl9lbGVtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBbXSxcbiAgICAgICAgY29udGVudCA9IFtdO1xuXG4gICAgdmFyIGlzU3RyaW5nQ29udGVudDtcblxuICAgIGZ1bmN0aW9uIGdldF9hdHRyaWJ1dGVzKG9iail7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKGtleSwgb2JqW2tleV0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3dpdGNoKHR5cGVvZiB2YWx1ZXMpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgIGlmICh2YWx1ZXMgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgICAgICBpZiAodmFsdWVzLl9hdHRyKSB7XG4gICAgICAgICAgICAgICAgZ2V0X2F0dHJpYnV0ZXModmFsdWVzLl9hdHRyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlcy5fY2RhdGEpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICgnPCFbQ0RBVEFbJyArIHZhbHVlcy5fY2RhdGEpLnJlcGxhY2UoL1xcXVxcXT4vZywgJ11dXV0+PCFbQ0RBVEFbPicpICsgJ11dPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWVzLmZvckVhY2gpIHtcbiAgICAgICAgICAgICAgICBpc1N0cmluZ0NvbnRlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbmFtZSA9IE9iamVjdC5rZXlzKHZhbHVlKVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9uYW1lID09ICdfYXR0cicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRfYXR0cmlidXRlcyh2YWx1ZS5fYXR0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQucHVzaChyZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSwgaW5kZW50LCBpbmRlbnRfY291bnQgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RyaW5nQ29udGVudD10cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5wdXNoKGVzY2FwZUZvclhNTCh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU3RyaW5nQ29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vc3RyaW5nXG4gICAgICAgICAgICBjb250ZW50LnB1c2goZXNjYXBlRm9yWE1MKHZhbHVlcykpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogICAgICAgbmFtZSxcbiAgICAgICAgaW50ZXJydXB0OiAgaW50ZXJydXB0LFxuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICBjb250ZW50OiAgICBjb250ZW50LFxuICAgICAgICBpY291bnQ6ICAgICBpbmRlbnRfY291bnQsXG4gICAgICAgIGluZGVudHM6ICAgIGluZGVudF9zcGFjZXMsXG4gICAgICAgIGluZGVudDogICAgIGluZGVudFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChhcHBlbmQsIGVsZW0sIGVuZCkge1xuXG4gICAgaWYgKHR5cGVvZiBlbGVtICE9ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmQoZmFsc2UsIGVsZW0pO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBlbGVtLmludGVycnVwdCA/IDEgOiBlbGVtLmNvbnRlbnQubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gcHJvY2VlZCAoKSB7XG4gICAgICAgIHdoaWxlIChlbGVtLmNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtLmNvbnRlbnQuc2hpZnQoKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGludGVycnVwdCh2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICAgICAgZm9ybWF0KGFwcGVuZCwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwZW5kKGZhbHNlLCAobGVuID4gMSA/IGVsZW0uaW5kZW50cyA6ICcnKVxuICAgICAgICAgICAgKyAoZWxlbS5uYW1lID8gJzwvJyArIGVsZW0ubmFtZSArICc+JyA6ICcnKVxuICAgICAgICAgICAgKyAoZWxlbS5pbmRlbnQgJiYgIWVuZCA/ICdcXG4nIDogJycpKTtcblxuICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludGVycnVwdCh2YWx1ZSkge1xuICAgICAgIGlmICh2YWx1ZS5pbnRlcnJ1cHQpIHtcbiAgICAgICAgICAgdmFsdWUuaW50ZXJydXB0LmFwcGVuZCA9IGFwcGVuZDtcbiAgICAgICAgICAgdmFsdWUuaW50ZXJydXB0LmVuZCA9IHByb2NlZWQ7XG4gICAgICAgICAgIHZhbHVlLmludGVycnVwdCA9IGZhbHNlO1xuICAgICAgICAgICBhcHBlbmQodHJ1ZSk7XG4gICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgIH1cbiAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgYXBwZW5kKGZhbHNlLCBlbGVtLmluZGVudHNcbiAgICAgICAgKyAoZWxlbS5uYW1lID8gJzwnICsgZWxlbS5uYW1lIDogJycpXG4gICAgICAgICsgKGVsZW0uYXR0cmlidXRlcy5sZW5ndGggPyAnICcgKyBlbGVtLmF0dHJpYnV0ZXMuam9pbignICcpIDogJycpXG4gICAgICAgICsgKGxlbiA/IChlbGVtLm5hbWUgPyAnPicgOiAnJykgOiAoZWxlbS5uYW1lID8gJy8+JyA6ICcnKSlcbiAgICAgICAgKyAoZWxlbS5pbmRlbnQgJiYgbGVuID4gMSA/ICdcXG4nIDogJycpKTtcblxuICAgIGlmICghbGVuKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmQoZmFsc2UsIGVsZW0uaW5kZW50ID8gJ1xcbicgOiAnJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnJ1cHQoZWxlbSkpIHtcbiAgICAgICAgcHJvY2VlZCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXR0cmlidXRlKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4ga2V5ICsgJz0nICsgJ1wiJyArIGVzY2FwZUZvclhNTCh2YWx1ZSkgKyAnXCInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHhtbDtcbm1vZHVsZS5leHBvcnRzLmVsZW1lbnQgPSBtb2R1bGUuZXhwb3J0cy5FbGVtZW50ID0gZWxlbWVudDtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTMpKSlcblxuLyoqKi8gfSksXG4vKiAzNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG52YXIgWE1MX0NIQVJBQ1RFUl9NQVAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJmFwb3M7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7J1xufTtcblxuZnVuY3Rpb24gZXNjYXBlRm9yWE1MKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2VcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZSgvKFsmXCI8PiddKS9nLCBmdW5jdGlvbihzdHIsIGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBYTUxfQ0hBUkFDVEVSX01BUFtpdGVtXTtcbiAgICAgICAgICB9KVxuICAgICAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVGb3JYTUw7XG5cblxuLyoqKi8gfSksXG4vKiAzNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBGb3JtYXR0ZXIge1xyXG4gICAgZm9ybWF0KGlucHV0LCBmaWxlKSB7XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gaW5wdXQucHJlcEZvclhtbChmaWxlKTtcclxuICAgICAgICBpZiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlhNTENvbXBvbmVudCBkaWQgbm90IGZvcm1hdCBjb3JyZWN0bHlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9ybWF0dGVyID0gRm9ybWF0dGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBJbWFnZVJlcGxhY2VyIHtcclxuICAgIHJlcGxhY2UoeG1sRGF0YSwgbWVkaWFEYXRhLCBvZmZzZXQpIHtcclxuICAgICAgICBsZXQgY3VycmVudFhtbERhdGEgPSB4bWxEYXRhO1xyXG4gICAgICAgIG1lZGlhRGF0YS5mb3JFYWNoKChpbWFnZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBjdXJyZW50WG1sRGF0YSA9IGN1cnJlbnRYbWxEYXRhLnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7aW1hZ2UuZmlsZU5hbWV9fWAsIFwiZ1wiKSwgKG9mZnNldCArIGkpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50WG1sRGF0YTtcclxuICAgIH1cclxuICAgIGdldE1lZGlhRGF0YSh4bWxEYXRhLCBtZWRpYSkge1xyXG4gICAgICAgIHJldHVybiBtZWRpYS5BcnJheS5maWx0ZXIoKGltYWdlKSA9PiB4bWxEYXRhLnNlYXJjaChgeyR7aW1hZ2UuZmlsZU5hbWV9fWApID4gMCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JbWFnZVJlcGxhY2VyID0gSW1hZ2VSZXBsYWNlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgTnVtYmVyaW5nUmVwbGFjZXIge1xyXG4gICAgcmVwbGFjZSh4bWxEYXRhLCBjb25jcmV0ZU51bWJlcmluZ3MpIHtcclxuICAgICAgICBsZXQgY3VycmVudFhtbERhdGEgPSB4bWxEYXRhO1xyXG4gICAgICAgIGZvciAoY29uc3QgY29uY3JldGVOdW1iZXJpbmcgb2YgY29uY3JldGVOdW1iZXJpbmdzKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uY3JldGVOdW1iZXJpbmcucmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50WG1sRGF0YSA9IGN1cnJlbnRYbWxEYXRhLnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7Y29uY3JldGVOdW1iZXJpbmcucmVmZXJlbmNlfX1gLCBcImdcIiksIGNvbmNyZXRlTnVtYmVyaW5nLmlkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VycmVudFhtbERhdGE7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5OdW1iZXJpbmdSZXBsYWNlciA9IE51bWJlcmluZ1JlcGxhY2VyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzNTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzNjApKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMzYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgSlNaaXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNyk7XHJcbmNvbnN0IHhtbF9qc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XHJcbmNvbnN0IGZvb3Rlcl93cmFwcGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcclxuY29uc3QgaGVhZGVyX3dyYXBwZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xyXG5jb25zdCBtZWRpYV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XHJcbmNvbnN0IHJlbGF0aW9uc2hpcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XHJcbmNvbnN0IHhtbF9jb21wb25lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5jb25zdCBzY2hlbWVUb1R5cGUgPSB7XHJcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaGVhZGVyXCI6IFwiaGVhZGVyXCIsXHJcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZm9vdGVyXCI6IFwiZm9vdGVyXCIsXHJcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIjogXCJpbWFnZVwiLFxyXG4gICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2h5cGVybGlua1wiOiBcImh5cGVybGlua1wiLFxyXG59O1xyXG52YXIgUmVsYXRpb25zaGlwVHlwZTtcclxuKGZ1bmN0aW9uIChSZWxhdGlvbnNoaXBUeXBlKSB7XHJcbiAgICBSZWxhdGlvbnNoaXBUeXBlW1wiSEVBREVSXCJdID0gXCJoZWFkZXJcIjtcclxuICAgIFJlbGF0aW9uc2hpcFR5cGVbXCJGT09URVJcIl0gPSBcImZvb3RlclwiO1xyXG4gICAgUmVsYXRpb25zaGlwVHlwZVtcIklNQUdFXCJdID0gXCJpbWFnZVwiO1xyXG4gICAgUmVsYXRpb25zaGlwVHlwZVtcIkhZUEVSTElOS1wiXSA9IFwiaHlwZXJsaW5rXCI7XHJcbn0pKFJlbGF0aW9uc2hpcFR5cGUgfHwgKFJlbGF0aW9uc2hpcFR5cGUgPSB7fSkpO1xyXG5jbGFzcyBJbXBvcnREb3R4IHtcclxuICAgIGV4dHJhY3QoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHppcENvbnRlbnQgPSB5aWVsZCBKU1ppcC5sb2FkQXN5bmMoZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50Q29udGVudCA9IHlpZWxkIHppcENvbnRlbnQuZmlsZXNbXCJ3b3JkL2RvY3VtZW50LnhtbFwiXS5hc3luYyhcInRleHRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uc2hpcENvbnRlbnQgPSB5aWVsZCB6aXBDb250ZW50LmZpbGVzW1wid29yZC9fcmVscy9kb2N1bWVudC54bWwucmVsc1wiXS5hc3luYyhcInRleHRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50UmVmcyA9IHRoaXMuZXh0cmFjdERvY3VtZW50UmVmcyhkb2N1bWVudENvbnRlbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudFJlbGF0aW9uc2hpcHMgPSB0aGlzLmZpbmRSZWZlcmVuY2VGaWxlcyhyZWxhdGlvbnNoaXBDb250ZW50KTtcclxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBuZXcgbWVkaWFfMS5NZWRpYSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZURvY3VtZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeWllbGQgdGhpcy5jcmVhdGVIZWFkZXJzKHppcENvbnRlbnQsIGRvY3VtZW50UmVmcywgZG9jdW1lbnRSZWxhdGlvbnNoaXBzLCBtZWRpYSwgMCksXHJcbiAgICAgICAgICAgICAgICBmb290ZXJzOiB5aWVsZCB0aGlzLmNyZWF0ZUZvb3RlcnMoemlwQ29udGVudCwgZG9jdW1lbnRSZWZzLCBkb2N1bWVudFJlbGF0aW9uc2hpcHMsIG1lZGlhLCBkb2N1bWVudFJlZnMuaGVhZGVycy5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJlbGF0aW9uc2hpcElkOiBkb2N1bWVudFJlZnMuZm9vdGVycy5sZW5ndGggKyBkb2N1bWVudFJlZnMuaGVhZGVycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBzdHlsZXM6IHlpZWxkIHppcENvbnRlbnQuZmlsZXNbXCJ3b3JkL3N0eWxlcy54bWxcIl0uYXN5bmMoXCJ0ZXh0XCIpLFxyXG4gICAgICAgICAgICAgICAgdGl0bGVQYWdlSXNEZWZpbmVkOiB0aGlzLmNoZWNrSWZUaXRsZVBhZ2VJc0RlZmluZWQoZG9jdW1lbnRDb250ZW50KSxcclxuICAgICAgICAgICAgICAgIG1lZGlhOiBtZWRpYSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlRG9jdW1lbnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVGb290ZXJzKHppcENvbnRlbnQsIGRvY3VtZW50UmVmcywgZG9jdW1lbnRSZWxhdGlvbnNoaXBzLCBtZWRpYSwgc3RhcnRpbmdSZWxhdGlvbnNoaXBJZCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGRvY3VtZW50UmVmcy5mb290ZXJzXHJcbiAgICAgICAgICAgICAgICAubWFwKChyZWZlcmVuY2UsIGkpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uc2hpcEZpbGVJbmZvID0gZG9jdW1lbnRSZWxhdGlvbnNoaXBzLmZpbmQoKHJlbCkgPT4gcmVsLmlkID09PSByZWZlcmVuY2UuaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aW9uc2hpcEZpbGVJbmZvID09PSBudWxsIHx8ICFyZWxhdGlvbnNoaXBGaWxlSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCBmaW5kIHRhcmdldCBmaWxlIGZvciBpZCAke3JlZmVyZW5jZS5pZH1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHhtbERhdGEgPSB5aWVsZCB6aXBDb250ZW50LmZpbGVzW2B3b3JkLyR7cmVsYXRpb25zaGlwRmlsZUluZm8udGFyZ2V0fWBdLmFzeW5jKFwidGV4dFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhtbE9iaiA9IHhtbF9qc18xLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlLCBjYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF4bWxPYmouZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeG1sRWxlbWVudCA9IHhtbE9iai5lbGVtZW50cy5yZWR1Y2UoKGFjYywgY3VycmVudCkgPT4gKGN1cnJlbnQubmFtZSA9PT0gXCJ3OmZ0clwiID8gY3VycmVudCA6IGFjYykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1wb3J0ZWRDb21wID0geG1sX2NvbXBvbmVudHNfMS5jb252ZXJ0VG9YbWxDb21wb25lbnQoeG1sRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gbmV3IGZvb3Rlcl93cmFwcGVyXzEuRm9vdGVyV3JhcHBlcihtZWRpYSwgc3RhcnRpbmdSZWxhdGlvbnNoaXBJZCArIGksIGltcG9ydGVkQ29tcCk7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmFkZFJlbGF0aW9uc2hpcFRvV3JhcHBlcihyZWxhdGlvbnNoaXBGaWxlSW5mbywgemlwQ29udGVudCwgd3JhcHBlciwgbWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogcmVmZXJlbmNlLnR5cGUsIGZvb3Rlcjogd3JhcHBlciB9O1xyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHgpID0+ICEheCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChyZXN1bHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlSGVhZGVycyh6aXBDb250ZW50LCBkb2N1bWVudFJlZnMsIGRvY3VtZW50UmVsYXRpb25zaGlwcywgbWVkaWEsIHN0YXJ0aW5nUmVsYXRpb25zaGlwSWQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBkb2N1bWVudFJlZnMuaGVhZGVyc1xyXG4gICAgICAgICAgICAgICAgLm1hcCgocmVmZXJlbmNlLCBpKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWxhdGlvbnNoaXBGaWxlSW5mbyA9IGRvY3VtZW50UmVsYXRpb25zaGlwcy5maW5kKChyZWwpID0+IHJlbC5pZCA9PT0gcmVmZXJlbmNlLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGlvbnNoaXBGaWxlSW5mbyA9PT0gbnVsbCB8fCAhcmVsYXRpb25zaGlwRmlsZUluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgZmluZCB0YXJnZXQgZmlsZSBmb3IgaWQgJHtyZWZlcmVuY2UuaWR9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4bWxEYXRhID0geWllbGQgemlwQ29udGVudC5maWxlc1tgd29yZC8ke3JlbGF0aW9uc2hpcEZpbGVJbmZvLnRhcmdldH1gXS5hc3luYyhcInRleHRcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4bWxPYmogPSB4bWxfanNfMS54bWwyanMoeG1sRGF0YSwgeyBjb21wYWN0OiBmYWxzZSwgY2FwdHVyZVNwYWNlc0JldHdlZW5FbGVtZW50czogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIGlmICgheG1sT2JqLmVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHhtbEVsZW1lbnQgPSB4bWxPYmouZWxlbWVudHMucmVkdWNlKChhY2MsIGN1cnJlbnQpID0+IChjdXJyZW50Lm5hbWUgPT09IFwidzpoZHJcIiA/IGN1cnJlbnQgOiBhY2MpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltcG9ydGVkQ29tcCA9IHhtbF9jb21wb25lbnRzXzEuY29udmVydFRvWG1sQ29tcG9uZW50KHhtbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IG5ldyBoZWFkZXJfd3JhcHBlcl8xLkhlYWRlcldyYXBwZXIobWVkaWEsIHN0YXJ0aW5nUmVsYXRpb25zaGlwSWQgKyBpLCBpbXBvcnRlZENvbXApO1xyXG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5hZGRSZWxhdGlvbnNoaXBUb1dyYXBwZXIocmVsYXRpb25zaGlwRmlsZUluZm8sIHppcENvbnRlbnQsIHdyYXBwZXIsIG1lZGlhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IHJlZmVyZW5jZS50eXBlLCBoZWFkZXI6IHdyYXBwZXIgfTtcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFkZFJlbGF0aW9uc2hpcFRvV3JhcHBlcihyZWxhdGlvbmhpcEZpbGUsIHppcENvbnRlbnQsIHdyYXBwZXIsIG1lZGlhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVmRmlsZSA9IHppcENvbnRlbnQuZmlsZXNbYHdvcmQvX3JlbHMvJHtyZWxhdGlvbmhpcEZpbGUudGFyZ2V0fS5yZWxzYF07XHJcbiAgICAgICAgICAgIGlmICghcmVmRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHhtbFJlZiA9IHlpZWxkIHJlZkZpbGUuYXN5bmMoXCJ0ZXh0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCB3cmFwcGVySW1hZ2VzUmVmZXJlbmNlcyA9IHRoaXMuZmluZFJlZmVyZW5jZUZpbGVzKHhtbFJlZikuZmlsdGVyKChyKSA9PiByLnR5cGUgPT09IFJlbGF0aW9uc2hpcFR5cGUuSU1BR0UpO1xyXG4gICAgICAgICAgICBjb25zdCBoeXBlckxpbmtSZWZlcmVuY2VzID0gdGhpcy5maW5kUmVmZXJlbmNlRmlsZXMoeG1sUmVmKS5maWx0ZXIoKHIpID0+IHIudHlwZSA9PT0gUmVsYXRpb25zaGlwVHlwZS5IWVBFUkxJTkspO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2Ygd3JhcHBlckltYWdlc1JlZmVyZW5jZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHlpZWxkIHppcENvbnRlbnQuZmlsZXNbYHdvcmQvJHtyLnRhcmdldH1gXS5hc3luYyhcIm5vZGVidWZmZXJcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYURhdGEgPSBtZWRpYS5hZGRNZWRpYShidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChyLmlkLCBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIiwgYG1lZGlhLyR7bWVkaWFEYXRhLmZpbGVOYW1lfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiBoeXBlckxpbmtSZWZlcmVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKHIuaWQsIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9oeXBlcmxpbmtcIiwgci50YXJnZXQsIHJlbGF0aW9uc2hpcF8xLlRhcmdldE1vZGVUeXBlLkVYVEVSTkFMKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZmluZFJlZmVyZW5jZUZpbGVzKHhtbERhdGEpIHtcclxuICAgICAgICBjb25zdCB4bWxPYmogPSB4bWxfanNfMS54bWwyanMoeG1sRGF0YSwgeyBjb21wYWN0OiB0cnVlIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlbGF0aW9uWG1sQXJyYXkgPSBBcnJheS5pc0FycmF5KHhtbE9iai5SZWxhdGlvbnNoaXBzLlJlbGF0aW9uc2hpcClcclxuICAgICAgICAgICAgPyB4bWxPYmouUmVsYXRpb25zaGlwcy5SZWxhdGlvbnNoaXBcclxuICAgICAgICAgICAgOiBbeG1sT2JqLlJlbGF0aW9uc2hpcHMuUmVsYXRpb25zaGlwXTtcclxuICAgICAgICBjb25zdCByZWxhdGlvbnNoaXBzID0gcmVsYXRpb25YbWxBcnJheVxyXG4gICAgICAgICAgICAubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLl9hdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwicmVsYXRpb25zaGlwIGVsZW1lbnQgaGFzIG5vIGF0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnBhcnNlUmVmSWQoaXRlbS5fYXR0cmlidXRlcy5JZCksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBzY2hlbWVUb1R5cGVbaXRlbS5fYXR0cmlidXRlcy5UeXBlXSxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogaXRlbS5fYXR0cmlidXRlcy5UYXJnZXQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50eXBlICE9PSBudWxsKTtcclxuICAgICAgICByZXR1cm4gcmVsYXRpb25zaGlwcztcclxuICAgIH1cclxuICAgIGV4dHJhY3REb2N1bWVudFJlZnMoeG1sRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHhtbE9iaiA9IHhtbF9qc18xLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IHRydWUgfSk7XHJcbiAgICAgICAgY29uc3Qgc2VjdGlvblByb3AgPSB4bWxPYmpbXCJ3OmRvY3VtZW50XCJdW1widzpib2R5XCJdW1widzpzZWN0UHJcIl07XHJcbiAgICAgICAgY29uc3QgaGVhZGVyUHJvcHMgPSBzZWN0aW9uUHJvcFtcInc6aGVhZGVyUmVmZXJlbmNlXCJdO1xyXG4gICAgICAgIGxldCBoZWFkZXJzWG1sQXJyYXk7XHJcbiAgICAgICAgaWYgKGhlYWRlclByb3BzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVyc1htbEFycmF5ID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyUHJvcHMpKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnNYbWxBcnJheSA9IGhlYWRlclByb3BzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGVhZGVyc1htbEFycmF5ID0gW2hlYWRlclByb3BzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IGhlYWRlcnNYbWxBcnJheS5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uX2F0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJoZWFkZXIgcmVmZXJlY25lIGVsZW1lbnQgaGFzIG5vIGF0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGl0ZW0uX2F0dHJpYnV0ZXNbXCJ3OnR5cGVcIl0sXHJcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5wYXJzZVJlZklkKGl0ZW0uX2F0dHJpYnV0ZXNbXCJyOmlkXCJdKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBmb290ZXJQcm9wcyA9IHNlY3Rpb25Qcm9wW1widzpmb290ZXJSZWZlcmVuY2VcIl07XHJcbiAgICAgICAgbGV0IGZvb3RlcnNYbWxBcnJheTtcclxuICAgICAgICBpZiAoZm9vdGVyUHJvcHMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmb290ZXJzWG1sQXJyYXkgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmb290ZXJQcm9wcykpIHtcclxuICAgICAgICAgICAgZm9vdGVyc1htbEFycmF5ID0gZm9vdGVyUHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb290ZXJzWG1sQXJyYXkgPSBbZm9vdGVyUHJvcHNdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb290ZXJzID0gZm9vdGVyc1htbEFycmF5Lm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5fYXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImZvb3RlciByZWZlcmVjbmUgZWxlbWVudCBoYXMgbm8gYXR0cmlidXRlc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogaXRlbS5fYXR0cmlidXRlc1tcInc6dHlwZVwiXSxcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnBhcnNlUmVmSWQoaXRlbS5fYXR0cmlidXRlc1tcInI6aWRcIl0pLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7IGhlYWRlcnMsIGZvb3RlcnMgfTtcclxuICAgIH1cclxuICAgIGNoZWNrSWZUaXRsZVBhZ2VJc0RlZmluZWQoeG1sRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHhtbE9iaiA9IHhtbF9qc18xLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IHRydWUgfSk7XHJcbiAgICAgICAgY29uc3Qgc2VjdGlvblByb3AgPSB4bWxPYmpbXCJ3OmRvY3VtZW50XCJdW1widzpib2R5XCJdW1widzpzZWN0UHJcIl07XHJcbiAgICAgICAgcmV0dXJuIHNlY3Rpb25Qcm9wW1widzp0aXRsZVBnXCJdICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBwYXJzZVJlZklkKHN0cikge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gL15ySWQoXFxkKykkLy5leGVjKHN0cik7XHJcbiAgICAgICAgaWYgKG1hdGNoID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmVmIGlkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkltcG9ydERvdHggPSBJbXBvcnREb3R4O1xyXG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7IiwiIWZ1bmN0aW9uKHQscil7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9cigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10scik6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0c1tcInF1aWxsanMtcGFyc2VyXCJdPXIoKTp0W1wicXVpbGxqcy1wYXJzZXJcIl09cigpfShzZWxmLChmdW5jdGlvbigpe3JldHVybigoKT0+e1widXNlIHN0cmljdFwiO3ZhciB0PXs2MDc6KHQscik9PntmdW5jdGlvbiBlKHQscil7dC5pbnNlcnQudmlkZW98fHQuaW5zZXJ0LmltYWdlP2Z1bmN0aW9uKHQscil7ci5wYXJhZ3JhcGhzLnB1c2goe2VtYmVkOnQuaW5zZXJ0fSksYShyKX0odCxyKTp0Lmluc2VydC5mb3JtdWxhP2Z1bmN0aW9uKHQscil7dmFyIGU7MD09PXIucGFyYWdyYXBocy5sZW5ndGgmJmEociksbnVsbD09PShlPXIucGFyYWdyYXBoc1tyLnBhcmFncmFwaHMubGVuZ3RoLTFdLnRleHRSdW5zKXx8dm9pZCAwPT09ZXx8ZS5wdXNoKHtmb3JtdWxhOnQuaW5zZXJ0LmZvcm11bGEsYXR0cmlidXRlczp0LmF0dHJpYnV0ZXN9KX0odCxyKTpcIlxcblwiPT09dC5pbnNlcnQ/ZnVuY3Rpb24odCxyKXt0LmF0dHJpYnV0ZXMmJihyLnBhcmFncmFwaHNbci5wYXJhZ3JhcGhzLmxlbmd0aC0xXS5hdHRyaWJ1dGVzPXQuYXR0cmlidXRlcyksYShyKX0odCxyKTpmdW5jdGlvbih0LHIpe2lmKDA9PT1yLnBhcmFncmFwaHMubGVuZ3RoJiZhKHIpLHQuaW5zZXJ0Lm1hdGNoKC9cXG4vKSl7Y29uc3QgZT10Lmluc2VydC5zcGxpdCgvKFxcbikvKTtmb3IoY29uc3QgdCBvZiBlKVwiXFxuXCI9PT10P2Eocik6bih0LHIpfWVsc2Ugbih0Lmluc2VydCxyLHQuYXR0cmlidXRlcyl9KHQscil9ZnVuY3Rpb24gYSh0KXt0LnBhcmFncmFwaHMucHVzaCh7dGV4dFJ1bnM6W119KX1mdW5jdGlvbiBuKHQscixlKXt2YXIgYSxuO2U/bnVsbD09PShhPXIucGFyYWdyYXBoc1tyLnBhcmFncmFwaHMubGVuZ3RoLTFdLnRleHRSdW5zKXx8dm9pZCAwPT09YXx8YS5wdXNoKHt0ZXh0OnQsYXR0cmlidXRlczplfSk6bnVsbD09PShuPXIucGFyYWdyYXBoc1tyLnBhcmFncmFwaHMubGVuZ3RoLTFdLnRleHRSdW5zKXx8dm9pZCAwPT09bnx8bi5wdXNoKHt0ZXh0OnR9KX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLnBhcnNlUXVpbGxEZWx0YT12b2lkIDAsci5wYXJzZVF1aWxsRGVsdGE9ZnVuY3Rpb24odCl7Y29uc3Qgcj17cGFyYWdyYXBoczpbXX07Zm9yKGNvbnN0IGEgb2YgdC5vcHMpZShhLHIpO3JldHVybiByfX19LHI9e307cmV0dXJuIGZ1bmN0aW9uIGUoYSl7aWYoclthXSlyZXR1cm4gclthXS5leHBvcnRzO3ZhciBuPXJbYV09e2V4cG9ydHM6e319O3JldHVybiB0W2FdKG4sbi5leHBvcnRzLGUpLG4uZXhwb3J0c30oNjA3KX0pKCl9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTl4ZFdsc2JHcHpMWEJoY25ObGNpOTNaV0p3WVdOckwzVnVhWFpsY25OaGJFMXZaSFZzWlVSbFptbHVhWFJwYjI0aUxDSjNaV0p3WVdOck9pOHZjWFZwYkd4cWN5MXdZWEp6WlhJdkxpOXpjbU12YVc1a1pYZ3VkSE1pTENKM1pXSndZV05yT2k4dmNYVnBiR3hxY3kxd1lYSnpaWEl2ZDJWaWNHRmpheTlpYjI5MGMzUnlZWEFpTENKM1pXSndZV05yT2k4dmNYVnBiR3hxY3kxd1lYSnpaWEl2ZDJWaWNHRmpheTl6ZEdGeWRIVndJbDBzSW01aGJXVnpJanBiSW5KdmIzUWlMQ0ptWVdOMGIzSjVJaXdpWlhod2IzSjBjeUlzSW0xdlpIVnNaU0lzSW1SbFptbHVaU0lzSW1GdFpDSXNJbk5sYkdZaUxDSndZWEp6WlU5d0lpd2liM0FpTENKd1lYSnpaV1FpTENKcGJuTmxjblFpTENKMmFXUmxieUlzSW1sdFlXZGxJaXdpY0dGeVlXZHlZWEJvY3lJc0luQjFjMmdpTENKbGJXSmxaQ0lzSW5OMFlYSjBUbVYzVUdGeVlXZHlZWEJvSWl3aWFXNXpaWEowUlcxaVpXUlFZWEpoWjNKaGNHZ2lMQ0ptYjNKdGRXeGhJaXdpYkdWdVozUm9JaXdpZEdWNGRGSjFibk1pTENKaGRIUnlhV0oxZEdWeklpd2lhVzV6WlhKMFJtOXliWFZzWVNJc0ltbHVjMlZ5ZEU1bGQyeHBibVVpTENKdFlYUmphQ0lzSW5OMGNtbHVaM01pTENKemNHeHBkQ0lzSW5SbGVIUWlMQ0pwYm5ObGNuUlRhVzF3YkdWVGRISnBibWNpTENKcGJuTmxjblJVWlhoMElpd2ljWFZwYkd3aUxDSnZjSE1pTENKZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsWDJOaFkyaGxYMThpTENKZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5Zklpd2liVzlrZFd4bFNXUWlMQ0pmWDNkbFluQmhZMnRmYlc5a2RXeGxjMTlmSWwwc0ltMWhjSEJwYm1keklqb2lRMEZCUVN4VFFVRXlRMEVzUlVGQlRVTXNSMEZETVVJc2FVSkJRVnBETEZOQlFUQkRMR2xDUVVGWVF5eFBRVU40UTBFc1QwRkJUMFFzVVVGQlZVUXNTVUZEVVN4dFFrRkJXRWNzVVVGQmVVSkJMRTlCUVU5RExFbEJRemxEUkN4UFFVRlBMRWRCUVVsSUxFZEJRMlVzYVVKQlFWcERMRkZCUTJSQkxGRkJRVkVzYTBKQlFXOUNSQ3hKUVVVMVFrUXNSVUZCU3l4clFrRkJiMEpETEVsQlVqTkNMRU5CVTBkTExFMUJRVTBzVjBGRFZDeE5MSE5EUXpaRVFTeFRRVUZUUXl4RlFVRlJReXhGUVVGaFF5eEhRVVZ5UWtRc1JVRkJSMFVzVDBGQmRVSkRMRTlCUVZWSUxFVkJRVWRGTEU5QlFYVkNSU3hOUVhOQ2RrVXNVMEZCT0VKS0xFVkJRV0ZETEVkQlEzWkRRU3hGUVVGUFNTeFhRVUZYUXl4TFFVRkxMRU5CUTI1Q1F5eE5RVUZQVUN4RlFVRkhSU3hUUVVWa1RTeEZRVUZyUWxBc1IwRjZRbVJSTEVOQlFYRkNWQ3hGUVVGSlF5eEhRVVZxUWtRc1JVRkJSMFVzVDBGQmRVSlJMRkZCTWtJeFF5eFRRVUYxUWxZc1JVRkJZVU1zUnl4TlFVTkRMRWxCUVRkQ1FTeEZRVUZQU1N4WFFVRlhUU3hSUVVOc1FrZ3NSVUZCYTBKUUxFZEJSV2RETEZGQlFYUkVMRVZCUVVGQkxFVkJRVTlKTEZkQlFWZEtMRVZCUVU5SkxGZEJRVmROTEU5QlFVOHNSMEZCUjBNc1owSkJRVkVzVTBGQlJVNHNTMEZCU3l4RFFVTjZSRWtzVVVGQlZWWXNSVUZCUjBVc1QwRkJkVUpSTEZGQlEzQkRSeXhYUVVGWllpeEZRVUZIWVN4aFFXaERaa01zUTBGQlkyUXNSVUZCU1VNc1IwRkZSeXhQUVVGa1JDeEZRVUZIUlN4UFFXMURiRUlzVTBGQmRVSkdMRVZCUVdGRExFZEJSVFZDUkN4RlFVRkhZU3hoUVVOSVdpeEZRVUZQU1N4WFFVRlhTaXhGUVVGUFNTeFhRVUZYVFN4UFFVRlBMRWRCUVVkRkxGZEJRV0ZpTEVWQlFVZGhMRmxCUld4RlRDeEZRVUZyUWxBc1IwRjJRMlJqTEVOQlFXTm1MRVZCUVVsRExFZEJNa014UWl4VFFVRnZRa1FzUlVGQllVTXNSMEZMTjBJc1IwRkthVU1zU1VGQk4wSkJMRVZCUVU5SkxGZEJRVmROTEZGQlEyeENTQ3hGUVVGclFsQXNSMEZIYWtKRUxFVkJRVWRGTEU5QlFXdENZeXhOUVVGTkxFMUJRVThzUTBGRGJrTXNUVUZCVFVNc1JVRkJkMEpxUWl4RlFVRkhSU3hQUVRaQ2RrSm5RaXhOUVVGTkxGRkJOVUpvUWl4SlFVRkxMRTFCUVUxRExFdEJRVkZHTEVWQlEwWXNUMEZCVkVVc1JVRkRRVmdzUlVGQmEwSlFMRWRCUld4Q2JVSXNSVUZCYlVKRUxFVkJRVTFzUWl4UlFVbHFRMjFDTEVWQlFXMUNjRUlzUlVGQlIwVXNUMEZCYTBKRUxFVkJRVkZFTEVWQlFVZGhMRmxCZGtSdVJGRXNRMEZCVjNKQ0xFVkJRVWxETEVkQlMzWkNMRk5CUVZOUExFVkJRV3RDVUN4SFFVTjJRa0VzUlVGQlQwa3NWMEZCVjBNc1MwRkJTeXhEUVVOdVFrMHNVMEZCVlN4TFFYRkViRUlzVTBGQlUxRXNSVUZCYlVKRUxFVkJRV05zUWl4RlFVRXdRbGtzUnl4UlFVTTFSRUVzUlVGRGMwUXNVVUZCZEVRc1JVRkJRVm9zUlVGQlQwa3NWMEZCVjBvc1JVRkJUMGtzVjBGQlYwMHNUMEZCVHl4SFFVRkhReXhuUWtGQlVTeFRRVUZGVGl4TFFVRkxMRU5CUTNwRVlTeExRVUZOUVN4RlFVTk9UaXhYUVVGWlFTeEpRVWR6UXl4UlFVRjBSQ3hGUVVGQldpeEZRVUZQU1N4WFFVRlhTaXhGUVVGUFNTeFhRVUZYVFN4UFFVRlBMRWRCUVVkRExHZENRVUZSTEZOQlFVVk9MRXRCUVVzc1EwRkRla1JoTEV0QlFVMUJMRWtzTUVWQk0wWnNRaXd5UWtGQlowTkhMRWRCUXpWQ0xFMUJRVTF5UWl4RlFVRXlRaXhEUVVNM1Fra3NWMEZCV1N4SlFVVm9RaXhKUVVGTExFMUJRVTFNTEV0QlFVMXpRaXhGUVVGTlF5eEpRVU51UW5oQ0xFVkJRVkZETEVWQlFVbERMRWRCUldoQ0xFOUJRVTlCTEV0RGJFVlFkVUlzUlVGQk1rSXNSME5GTDBJc1QwUkRRU3hUUVVGVFF5eEZRVUZ2UWtNc1IwRkZOVUlzUjBGQlIwWXNSVUZCZVVKRkxFZEJRek5DTEU5QlFVOUdMRVZCUVhsQ1JTeEhRVUZWYUVNc1VVRkhNME1zU1VGQlNVTXNSVUZCVXpaQ0xFVkJRWGxDUlN4SFFVRlpMRU5CUjJwRWFFTXNVVUZCVXl4SlFVOVdMRTlCU0VGcFF5eEZRVUZ2UWtRc1IwRkJWUzlDTEVWQlFWRkJMRVZCUVU5RUxGRkJRVk1yUWl4SFFVY3ZRemxDTEVWQlFVOUVMRkZEYWtKU0swSXNRMEZCYjBJc1RTSXNJbVpwYkdVaU9pSnRZV2x1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJSGRsWW5CaFkydFZibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUtISnZiM1FzSUdaaFkzUnZjbmtwSUh0Y2JseDBhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNsY2JseDBYSFJrWldacGJtVW9XMTBzSUdaaFkzUnZjbmtwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5bGNibHgwWEhSbGVIQnZjblJ6VzF3aWNYVnBiR3hxY3kxd1lYSnpaWEpjSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVmNibHgwWEhSeWIyOTBXMXdpY1hWcGJHeHFjeTF3WVhKelpYSmNJbDBnUFNCbVlXTjBiM0o1S0NrN1hHNTlLU2h6Wld4bUxDQm1kVzVqZEdsdmJpZ3BJSHRjYm5KbGRIVnliaUFpTENKbGVIQnZjblFnYVc1MFpYSm1ZV05sSUVsdWMyVnlkRVZ0WW1Wa0lIdGNiaUFnSUNCcGJXRm5aVDg2SUhOMGNtbHVaenRjYmlBZ0lDQm1iM0p0ZFd4aFB6b2djM1J5YVc1bk8xeHVJQ0FnSUhacFpHVnZQem9nYzNSeWFXNW5PMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElGSjFia0YwZEhKcFluVjBaWE1nZTF4dUlDQWdJSE5qY21sd2REODZJQ2R6ZFhCbGNpY2dmQ0FuYzNWaUp6dGNiaUFnSUNCamIyeHZjajg2SUhOMGNtbHVaenRjYmlBZ0lDQmlZV05yWjNKdmRXNWtQem9nYzNSeWFXNW5PMXh1SUNBZ0lHSnZiR1EvT2lCaWIyOXNaV0Z1TzF4dUlDQWdJR2wwWVd4cFl6ODZJR0p2YjJ4bFlXNDdYRzRnSUNBZ2RXNWtaWEpzYVc1bFB6b2dZbTl2YkdWaGJqdGNiaUFnSUNCemRISnBhMlUvT2lCaWIyOXNaV0Z1TzF4dUlDQWdJR1p2Ym5RL09pQnpkSEpwYm1jN1hHNGdJQ0FnYkdsdWF6ODZJSE4wY21sdVp6dGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCTWFXNWxRWFIwY21saWRYUmxjeUI3WEc0Z0lDQWdhR1ZoWkdWeVB6b2dNU0I4SURJN1hHNGdJQ0FnWkdseVpXTjBhVzl1UHpvZ0ozSjBiQ2M3WEc0Z0lDQWdZV3hwWjI0L09pQW5jbWxuYUhRbklId2dKMnhsWm5RbklId2dKMk5sYm5SbGNpY2dmQ0FuYW5WemRHbG1lU2M3WEc0Z0lDQWdhVzVrWlc1MFB6b2diblZ0WW1WeU8xeHVJQ0FnSUdKc2IyTnJjWFZ2ZEdVL09pQmliMjlzWldGdU8xeHVJQ0FnSUd4cGMzUS9PaUFuYjNKa1pYSmxaQ2NnZkNBblluVnNiR1YwSnp0Y2JpQWdJQ0JjSW1OdlpHVXRZbXh2WTJ0Y0lqODZJR0p2YjJ4bFlXNDdYRzU5WEc1Y2JtbHVkR1Z5Wm1GalpTQkJkSFJ5YVdKMWRHVnpJR1Y0ZEdWdVpITWdVblZ1UVhSMGNtbGlkWFJsY3l3Z1RHbHVaVUYwZEhKcFluVjBaWE1nZTMxY2JseHVhVzUwWlhKbVlXTmxJRkYxYVd4c1QzQWdlMXh1SUNBZ0lHbHVjMlZ5ZEQ4NklITjBjbWx1WnlCOElFbHVjMlZ5ZEVWdFltVmtPMXh1SUNBZ0lHRjBkSEpwWW5WMFpYTS9PaUJCZEhSeWFXSjFkR1Z6TzF4dUlDQWdJR3hwYm1WQmRIUnlhV0oxZEdWelB6b2dUR2x1WlVGMGRISnBZblYwWlhNN1hHNGdJQ0FnY25WdVFYUjBjbWxpZFhSbGN6ODZJRkoxYmtGMGRISnBZblYwWlhNN1hHNTlYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnVW1GM1VYVnBiR3hFWld4MFlTQjdYRzRnSUNBZ2IzQnpPaUJSZFdsc2JFOXdXMTA3WEc1OVhHNWNiaTh2SUU5VlZGQlZWRnh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZSbGVIUlNkVzRnZTF4dUlDQWdJSFJsZUhRNklITjBjbWx1Wnp0Y2JpQWdJQ0JoZEhSeWFXSjFkR1Z6UHpvZ1VuVnVRWFIwY21saWRYUmxjenRjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlFZWEpoWjNKaGNHZ2dlMXh1SUNBZ0lIUmxlSFJTZFc1elB6b2dLRlJsZUhSU2RXNGdmQ0I3SUdadmNtMTFiR0U2SUhOMGNtbHVaeUI5S1Z0ZE8xeHVJQ0FnSUdWdFltVmtQem9nU1c1elpYSjBSVzFpWldRN1hHNGdJQ0FnWVhSMGNtbGlkWFJsY3o4NklFeHBibVZCZEhSeWFXSjFkR1Z6TzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRkJoY25ObFpGRjFhV3hzUkdWc2RHRWdlMXh1SUNBZ0lIQmhjbUZuY21Gd2FITTZJRkJoY21GbmNtRndhRnRkTzF4dWZWeHVYRzR2THlCR2RXNWpkR2x2Ym5OY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIQmhjbk5sVVhWcGJHeEVaV3gwWVNoeGRXbHNiRG9nVW1GM1VYVnBiR3hFWld4MFlTazZJRkJoY25ObFpGRjFhV3hzUkdWc2RHRWdlMXh1SUNBZ0lHTnZibk4wSUhCaGNuTmxaRG9nVUdGeWMyVmtVWFZwYkd4RVpXeDBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ2NHRnlZV2R5WVhCb2N6b2dXMTFjYmlBZ0lDQjlPMXh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdiM0FnYjJZZ2NYVnBiR3d1YjNCektTQjdYRzRnSUNBZ0lDQWdJSEJoY25ObFQzQW9iM0FzSUhCaGNuTmxaQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z2NHRnljMlZrTzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUhCaGNuTmxUM0FvYjNBNklGRjFhV3hzVDNBc0lIQmhjbk5sWkRvZ1VHRnljMlZrVVhWcGJHeEVaV3gwWVNrZ2UxeHVJQ0FnSUM4dklHaGhibVJzWlNCMmFXUmxiM01nWVc1a0lHbHRZV2RsYzF4dUlDQWdJR2xtSUNnb2IzQXVhVzV6WlhKMElHRnpJRWx1YzJWeWRFVnRZbVZrS1M1MmFXUmxieUI4ZkNBb2IzQXVhVzV6WlhKMElHRnpJRWx1YzJWeWRFVnRZbVZrS1M1cGJXRm5aU2tnZTF4dUlDQWdJQ0FnSUNCcGJuTmxjblJGYldKbFpGQmhjbUZuY21Gd2FDaHZjQ3dnY0dGeWMyVmtLVHRjYmlBZ0lDQXZMeUJvWVc1a2JHVWdabTl5YlhWc1lYTmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDaHZjQzVwYm5ObGNuUWdZWE1nU1c1elpYSjBSVzFpWldRcExtWnZjbTExYkdFcElIdGNiaUFnSUNBZ0lDQWdhVzV6WlhKMFJtOXliWFZzWVNodmNDd2djR0Z5YzJWa0tUdGNiaUFnSUNBdkx5Qm9ZVzVrYkdVZ1pYaGpiSFZ6YVhabElHNWxkMnhwYm1WelhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodmNDNXBibk5sY25RZ1BUMDlJQ2RjWEc0bktTQjdYRzRnSUNBZ0lDQWdJR2x1YzJWeWRFNWxkMnhwYm1Vb2IzQXNJSEJoY25ObFpDazdYRzRnSUNBZ0x5OGdhR0Z1Wkd4bElIUmxlSFFnWVc1a0lIUmxlSFFnZDJsMGFDQnVaWGRzYVc1bGN5QnBiblJsY20xcGVHVmtYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2FXNXpaWEowVkdWNGRDaHZjQ3dnY0dGeWMyVmtLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJR2x1YzJWeWRDQmhJR0pzWVc1cklIQmhjbUZuY21Gd2FGeHVablZ1WTNScGIyNGdjM1JoY25ST1pYZFFZWEpoWjNKaGNHZ29jR0Z5YzJWa09pQlFZWEp6WldSUmRXbHNiRVJsYkhSaEtTQjdYRzRnSUNBZ2NHRnljMlZrTG5CaGNtRm5jbUZ3YUhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSbGVIUlNkVzV6T2lCYlhWeHVJQ0FnSUgwcE8xeHVmVnh1WEc0dkx5QnBibk5sY25SeklHRWdkbWxrWlc4Z2IzSWdhVzFoWjJVZ1pXMWlaV1JjYm1aMWJtTjBhVzl1SUdsdWMyVnlkRVZ0WW1Wa1VHRnlZV2R5WVhCb0tHOXdPaUJSZFdsc2JFOXdMQ0J3WVhKelpXUTZJRkJoY25ObFpGRjFhV3hzUkdWc2RHRXBJSHRjYmlBZ0lDQndZWEp6WldRdWNHRnlZV2R5WVhCb2N5NXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ1pXMWlaV1E2SUc5d0xtbHVjMlZ5ZENCaGN5Qkpibk5sY25SRmJXSmxaRnh1SUNBZ0lIMHBPMXh1SUNBZ0lITjBZWEowVG1WM1VHRnlZV2R5WVhCb0tIQmhjbk5sWkNrN1hHNTlYRzVjYmk4dklHbHVjMlZ5ZEhNZ1lTQm1iM0p0ZFd4aElHVnRZbVZrWEc1bWRXNWpkR2x2YmlCcGJuTmxjblJHYjNKdGRXeGhLRzl3T2lCUmRXbHNiRTl3TENCd1lYSnpaV1E2SUZCaGNuTmxaRkYxYVd4c1JHVnNkR0VwSUh0Y2JpQWdJQ0JwWmlBb2NHRnljMlZrTG5CaGNtRm5jbUZ3YUhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhOMFlYSjBUbVYzVUdGeVlXZHlZWEJvS0hCaGNuTmxaQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIQmhjbk5sWkM1d1lYSmhaM0poY0doelczQmhjbk5sWkM1d1lYSmhaM0poY0doekxteGxibWQwYUMweFhTNTBaWGgwVW5WdWN6OHVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lHWnZjbTExYkdFNklDaHZjQzVwYm5ObGNuUWdZWE1nU1c1elpYSjBSVzFpWldRcExtWnZjbTExYkdFaExGeHVJQ0FnSUNBZ0lDQmhkSFJ5YVdKMWRHVnpPaUJ2Y0M1aGRIUnlhV0oxZEdWelhHNGdJQ0FnZlNrN1hHNTlYRzVjYmk4dklHbHVjMlZ5ZEhNZ1lTQnVaWGNnY0dGeVlXZHlZWEJvSUdGdVpDQmhjSEJzYVdWeklHeHBibVVnWm05eWJXRjBkR2x1WjF4dVpuVnVZM1JwYjI0Z2FXNXpaWEowVG1WM2JHbHVaU2h2Y0RvZ1VYVnBiR3hQY0N3Z2NHRnljMlZrT2lCUVlYSnpaV1JSZFdsc2JFUmxiSFJoS1NCN1hHNGdJQ0FnTHk4Z2FXWWdiR2x1WlNCaGRIUnlhV0oxZEdWekxDQmhjSEJzZVNCMGFHOXpaU0IwYnlCMGFHVWdjSEpsZG1sdmRYTWdjR0Z5WVdkeVlYQm9YRzRnSUNBZ2FXWWdLRzl3TG1GMGRISnBZblYwWlhNcElIdGNiaUFnSUNBZ0lDQWdjR0Z5YzJWa0xuQmhjbUZuY21Gd2FITmJjR0Z5YzJWa0xuQmhjbUZuY21Gd2FITXViR1Z1WjNSb0xURmRMbUYwZEhKcFluVjBaWE1nUFNCdmNDNWhkSFJ5YVdKMWRHVnpPMXh1SUNBZ0lIMWNiaUFnSUNCemRHRnlkRTVsZDFCaGNtRm5jbUZ3YUNod1lYSnpaV1FwTzF4dWZWeHVYRzR2THlCcGJuTmxjblJ6SUhSbGVIUWdkMmwwYUNCcGJuUmxjbTFwZUdWa0lHNWxkMnhwYm1WeklHRnVaQ0J5ZFc0Z1lYUjBjbWxpZFhSbGMxeHVablZ1WTNScGIyNGdhVzV6WlhKMFZHVjRkQ2h2Y0RvZ1VYVnBiR3hQY0N3Z2NHRnljMlZrT2lCUVlYSnpaV1JSZFdsc2JFUmxiSFJoS1NCN1hHNGdJQ0FnYVdZZ0tIQmhjbk5sWkM1d1lYSmhaM0poY0doekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCemRHRnlkRTVsZDFCaGNtRm5jbUZ3YUNod1lYSnpaV1FwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJwWmlCcGRDQmpiMjUwWVdsdWN5QnVaWGRzYVc1bElHTm9ZWEpoWTNSbGNuTmNiaUFnSUNCcFppQW9LRzl3TG1sdWMyVnlkQ0JoY3lCemRISnBibWNwTG0xaGRHTm9LQzljWEc0dktTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkSEpwYm1keklEMGdjM0JzYVhSVGRISnBibWR6S0NodmNDNXBibk5sY25RZ1lYTWdjM1J5YVc1bktTazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnZEdWNGRDQnZaaUJ6ZEhKcGJtZHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdWNGRDQTlQVDBnSjF4Y2JpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRFNWxkMUJoY21GbmNtRndhQ2h3WVhKelpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTmxjblJUYVcxd2JHVlRkSEpwYm1jb2RHVjRkQ3dnY0dGeWMyVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbHVjMlZ5ZEZOcGJYQnNaVk4wY21sdVp5aHZjQzVwYm5ObGNuUWdZWE1nYzNSeWFXNW5MQ0J3WVhKelpXUXNJRzl3TG1GMGRISnBZblYwWlhNcE8xeHVJQ0FnSUgxY2JuMWNibHh1THk4Z2FXNXpaWEowY3lCemFXMXdiR1VnYzNSeWFXNW5JSGRwZEdnZ1lYUjBjbWxpZFhSbGMxeHVablZ1WTNScGIyNGdhVzV6WlhKMFUybHRjR3hsVTNSeWFXNW5LSFJsZUhRNklITjBjbWx1Wnl3Z2NHRnljMlZrT2lCUVlYSnpaV1JSZFdsc2JFUmxiSFJoTENCaGRIUnlhV0oxZEdWelB6b2dVblZ1UVhSMGNtbGlkWFJsY3lrZ2UxeHVJQ0FnSUdsbUlDaGhkSFJ5YVdKMWRHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhCaGNuTmxaQzV3WVhKaFozSmhjR2h6VzNCaGNuTmxaQzV3WVhKaFozSmhjR2h6TG14bGJtZDBhQzB4WFM1MFpYaDBVblZ1Y3o4dWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCMFpYaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjbWxpZFhSbGN6b2dZWFIwY21saWRYUmxjMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J3WVhKelpXUXVjR0Z5WVdkeVlYQm9jMXR3WVhKelpXUXVjR0Z5WVdkeVlYQm9jeTVzWlc1bmRHZ3RNVjB1ZEdWNGRGSjFibk0vTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nZEdWNGRGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJSE53YkdsMGN5QnpkSEpwYm1keklHOXVJR1YyWlhKNUlHNWxkMnhwYm1VZ1kyaGhjbUZqZEdWeUxDQnJaV1Z3YVc1bklIUm9aU0J1Wlhkc2FXNWxJR05vWVhKaFkzUmxjbk03SUhKbGRIVnlibk1nWVhKeVlYbGNibVoxYm1OMGFXOXVJSE53YkdsMFUzUnlhVzVuY3loemRISnBibWM2SUhOMGNtbHVaeWs2SUhOMGNtbHVaMXRkSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5YVc1bkxuTndiR2wwS0M4b1hGeHVLUzhwTzF4dWZWeHVYRzVjYmx4dUlpd2lMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1ZG1GeUlGOWZkMlZpY0dGamExOXRiMlIxYkdWZlkyRmphR1ZmWHlBOUlIdDlPMXh1WEc0dkx5QlVhR1VnY21WeGRXbHlaU0JtZFc1amRHbHZibHh1Wm5WdVkzUnBiMjRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlodGIyUjFiR1ZKWkNrZ2UxeHVYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JseDBhV1lvWDE5M1pXSndZV05yWDIxdlpIVnNaVjlqWVdOb1pWOWZXMjF2WkhWc1pVbGtYU2tnZTF4dVhIUmNkSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZiVzlrZFd4bFgyTmhZMmhsWDE5YmJXOWtkV3hsU1dSZExtVjRjRzl5ZEhNN1hHNWNkSDFjYmx4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmx4MGRtRnlJRzF2WkhWc1pTQTlJRjlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlgxdHRiMlIxYkdWSlpGMGdQU0I3WEc1Y2RGeDBMeThnYm04Z2JXOWtkV3hsTG1sa0lHNWxaV1JsWkZ4dVhIUmNkQzh2SUc1dklHMXZaSFZzWlM1c2IyRmtaV1FnYm1WbFpHVmtYRzVjZEZ4MFpYaHdiM0owY3pvZ2UzMWNibHgwZlR0Y2JseHVYSFF2THlCRmVHVmpkWFJsSUhSb1pTQnRiMlIxYkdVZ1puVnVZM1JwYjI1Y2JseDBYMTkzWldKd1lXTnJYMjF2WkhWc1pYTmZYMXR0YjJSMWJHVkpaRjBvYlc5a2RXeGxMQ0J0YjJSMWJHVXVaWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWs3WEc1Y2JseDBMeThnVW1WMGRYSnVJSFJvWlNCbGVIQnZjblJ6SUc5bUlIUm9aU0J0YjJSMWJHVmNibHgwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVmVnh1WEc0aUxDSXZMeUJ0YjJSMWJHVWdaWGh3YjNKMGN5QnRkWE4wSUdKbElISmxkSFZ5Ym1Wa0lHWnliMjBnY25WdWRHbHRaU0J6YnlCbGJuUnllU0JwYm14cGJtbHVaeUJwY3lCa2FYTmhZbXhsWkZ4dUx5OGdjM1JoY25SMWNGeHVMeThnVEc5aFpDQmxiblJ5ZVNCdGIyUjFiR1VnWVc1a0lISmxkSFZ5YmlCbGVIQnZjblJ6WEc1eVpYUjFjbTRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlnMk1EY3BPMXh1SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PSIsImltcG9ydCB7IFBhcnNlZFF1aWxsRGVsdGEsIFBhcmFncmFwaCBhcyBRUGFyYWdyYXBoLCBUZXh0UnVuIGFzIFFUZXh0UnVuLCBwYXJzZVF1aWxsRGVsdGEsIFJhd1F1aWxsRGVsdGEgfSBmcm9tICdxdWlsbGpzLXBhcnNlcic7XG5pbXBvcnQgKiBhcyBkb2N4IGZyb20gJ2RvY3gnO1xuaW1wb3J0IHsgQWxpZ25tZW50VHlwZSwgUGFja2VyLCBQYXJhZ3JhcGgsIFRleHRSdW4sIFVuZGVybGluZVR5cGUgfSBmcm9tICdkb2N4JztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInXG5cbmNvbnN0IGRlZmF1bHRTdHlsZXMgPSBbe1xuICBpZDogJ25vcm1hbCcsXG4gIG5hbWU6ICdOb3JtYWwnLFxuICBuZXh0OiAnbm9ybWFsJyxcbiAgYmFzZWRPbjogJ25vcm1hbCcsXG4gIHF1aWNrRm9ybWF0OiB0cnVlLFxuICBydW46IHtcbiAgICBzaXplOiAyNFxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBzcGFjaW5nOiB7XG4gICAgICBsaW5lOiA0ODAsXG4gICAgICBiZWZvcmU6IDAsXG4gICAgICBhZnRlcjogMFxuICAgIH1cbiAgfVxufSx7XG4gIGlkOiAnaGVhZGVyXzEnLFxuICBuYW1lOiAnSGVhZGluZyAxJyxcbiAgbmV4dDogJ25vcm1hbCcsXG4gIHF1aWNrRm9ybWF0OiB0cnVlLFxuICBydW46IHtcbiAgICBmb250OiAnQ2FsaWJyaScsXG4gICAgc2l6ZTogMzAsXG4gICAgYm9sZDogdHJ1ZVxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBzcGFjaW5nOiB7XG4gICAgICBiZWZvcmU6IDMwMCxcbiAgICAgIGFmdGVyOiAyMDBcbiAgICB9XG4gIH1cbn0se1xuICBpZDogJ2hlYWRlcl8yJyxcbiAgbmFtZTogJ0hlYWRpbmcgMicsXG4gIGJhc2VkT246ICdub3JtYWwnLFxuICBuZXh0OiAnbm9ybWFsJyxcbiAgcXVpY2tGb3JtYXQ6IHRydWUsXG4gIHJ1bjoge1xuICAgIGZvbnQ6ICdDYWxpYnJpJyxcbiAgICBzaXplOiAyNixcbiAgICBib2xkOiB0cnVlXG4gIH0sXG4gIHBhcmFncmFwaDoge1xuICAgIHNwYWNpbmc6IHtcbiAgICAgIGJlZm9yZTogMjAwLFxuICAgICAgYWZ0ZXI6IDEwMFxuICAgIH1cbiAgfVxufSx7XG4gIGlkOiAnbGlzdF9wYXJhZ3JhcGgnLFxuICBuYW1lOiAnTGlzdCBQYXJhZ3JhcGgnLFxuICBiYXNlZE9uOiAnbm9ybWFsJyxcbiAgcXVpY2tGb3JtYXQ6IHRydWUsXG4gIHJ1bjoge1xuICAgIHNpemU6IDI2XG4gIH1cbn1dO1xuXG4gY29uc3QgY3VzdG9tTGV2ZWxzID0gW3tcbiAgICBsZXZlbDogMCxcbiAgICBmb3JtYXQ6ICdkZWNpbWFsJyxcbiAgICB0ZXh0OiAnJTEuJyxcbiAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICBzdHlsZToge1xuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIGluZGVudDogeyBsZWZ0OiA3MjAsIGhhbmdpbmc6IDM2MCB9XG4gICAgICB9XG4gICAgfVxuICB9LHtcbiAgICBsZXZlbDogMSxcbiAgICBmb3JtYXQ6ICdsb3dlckxldHRlcicsXG4gICAgdGV4dDogJyUyLicsXG4gICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICBpbmRlbnQ6IHsgbGVmdDogMTQ0MCwgaGFuZ2luZzogMzYwIH1cbiAgICAgIH1cbiAgICB9XG4gIH0se1xuICAgIGxldmVsOiAyLFxuICAgIGZvcm1hdDogJ2xvd2VyUm9tYW4nLFxuICAgIHRleHQ6ICclMy4nLFxuICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgIHN0eWxlOiB7XG4gICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDIxNjAsIGhhbmdpbmc6IDM2MCB9XG4gICAgICB9XG4gICAgfVxuICB9LHtcbiAgICBsZXZlbDogMyxcbiAgICBmb3JtYXQ6ICdkZWNpbWFsJyxcbiAgICB0ZXh0OiAnJTQuJyxcbiAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICBzdHlsZToge1xuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIGluZGVudDogeyBsZWZ0OiAyODgwLCBoYW5naW5nOiAzNjAgfVxuICAgICAgfVxuICAgIH1cbiAgfSx7XG4gICAgbGV2ZWw6IDQsXG4gICAgZm9ybWF0OiAnbG93ZXJMZXR0ZXInLFxuICAgIHRleHQ6ICclNS4nLFxuICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgIHN0eWxlOiB7XG4gICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDM2MDAsIGhhbmdpbmc6IDM2MCB9XG4gICAgICB9XG4gICAgfVxuICB9LHtcbiAgICBsZXZlbDogMyxcbiAgICBmb3JtYXQ6ICdsb3dlclJvbWFuJyxcbiAgICB0ZXh0OiAnJTUuJyxcbiAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICBzdHlsZToge1xuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIGluZGVudDogeyBsZWZ0OiA0MzIwLCBoYW5naW5nOiAzNjAgfVxuICAgICAgfVxuICAgIH1cbiAgfV1cblxuICBjb25zdCBkZWZhdWx0TnVtYmVyaW5nID0ge1xuICAgIGNvbmZpZzogW3tcbiAgICAgIHJlZmVyZW5jZTogJ2RlZmF1bHQtbnVtYmVyaW5nJyxcbiAgICAgIGxldmVsczogY3VzdG9tTGV2ZWxzXG4gICAgfV1cbiAgfVxuXG4vLyBtYWluIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIFdvcmQgZG9jdW1lbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVdvcmQoZGVsdGE6IFJhd1F1aWxsRGVsdGEpOiBQcm9taXNlPEJsb2I+IHtcblxuICBjb25zdCBwYXJzZWQgPSBwYXJzZVF1aWxsRGVsdGEoZGVsdGEpO1xuXG4gICAgY29uc3QgZG9jID0gbmV3IGRvY3guRG9jdW1lbnQoe1xuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIHBhcmFncmFwaFN0eWxlczogZGVmYXVsdFN0eWxlc1xuICAgICAgfSxcbiAgICAgIG51bWJlcmluZzogZGVmYXVsdE51bWJlcmluZ1xuICAgIH0pO1xuICAgIGNvbnN0IHNlY3Rpb25zOiBQYXJhZ3JhcGhbXVtdID0gW107XG4gICAgLy8gaWYgYXJyYXkgb2YgZGVsdGFzLCBpdGVyYXRlIG92ZXIgZWFjaCBkZWx0YVxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZCkpIHtcbiAgICAgICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHBhcnNlZCkge1xuICAgICAgICAgICAgLy8gYnVpbGQgc2VjdGlvbnNcbiAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goYnVpbGRTZWN0aW9uKHNlY3Rpb24ucGFyYWdyYXBocykpO1xuICAgICAgICB9O1xuICAgIC8vIG9ubHkgYSBzaW5nbGUgZGVsdGFcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBidWlsZCBzaW5nbGUgc2VjdGlvblxuICAgICAgICBzZWN0aW9ucy5wdXNoKGJ1aWxkU2VjdGlvbihwYXJzZWQucGFyYWdyYXBocykpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgICBkb2MuYWRkU2VjdGlvbih7XG4gICAgICAgICAgICBjaGlsZHJlbjogc2VjdGlvblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgXG5cbiAgICAvLyBkb3dubG9hZFxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCBQYWNrZXIudG9CbG9iKGRvYyk7XG5cbiAgICByZXR1cm4gYmxvYjtcbn1cblxuLy8gZ2VuZXJhdGUgYSBzZWN0aW9uIGFzIGFuIGFycmF5IG9mIHBhcmFncmFwaHNcbmZ1bmN0aW9uIGJ1aWxkU2VjdGlvbihxdWlsbFBhcmFncmFwaHM6IFFQYXJhZ3JhcGhbXSk6IFBhcmFncmFwaFtdIHtcbiAgICBjb25zdCBwYXJhZ3JhcGhzOiBQYXJhZ3JhcGhbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBwYXJhZ3JhcGggb2YgcXVpbGxQYXJhZ3JhcGhzKSB7XG4gICAgICAgIC8vIGlmIGVtYmVkIHZpZGVvIG9yIGltYWdlXG4gICAgICAgIGlmIChwYXJhZ3JhcGguZW1iZWQpIHtcblxuICAgICAgICAvLyBpZiB0ZXh0IHJ1bnNcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhZ3JhcGgudGV4dFJ1bnMpIHtcbiAgICAgICAgICAgIHBhcmFncmFwaHMucHVzaChuZXcgUGFyYWdyYXBoKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogYnVpbGRQYXJhZ3JhcGgocGFyYWdyYXBoKSxcbiAgICAgICAgICAgICAgICBoZWFkaW5nOiBwYXJhZ3JhcGguYXR0cmlidXRlcz8uaGVhZGVyID09PSAxID8gZG9jeC5IZWFkaW5nTGV2ZWwuSEVBRElOR18xIDogcGFyYWdyYXBoLmF0dHJpYnV0ZXM/LmhlYWRlciA9PT0gMiA/IGRvY3guSGVhZGluZ0xldmVsLkhFQURJTkdfMiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBidWxsZXQ6IHBhcmFncmFwaC5hdHRyaWJ1dGVzPy5saXN0ID09PSAnYnVsbGV0JyA/IHsgbGV2ZWw6IHBhcmFncmFwaC5hdHRyaWJ1dGVzLmluZGVudCA/IHBhcmFncmFwaC5hdHRyaWJ1dGVzLmluZGVudCA6IDAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBudW1iZXJpbmc6IHBhcmFncmFwaC5hdHRyaWJ1dGVzPy5saXN0ID09PSAnb3JkZXJlZCcgPyB7IHJlZmVyZW5jZTogJ2RlZmF1bHQtbnVtYmVyaW5nJywgbGV2ZWw6IHBhcmFncmFwaC5hdHRyaWJ1dGVzLmluZGVudCA/IHBhcmFncmFwaC5hdHRyaWJ1dGVzLmluZGVudCA6IDAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHBhcmFncmFwaC5hdHRyaWJ1dGVzPy5hbGlnbiA9PT0gJ2xlZnQnID8gQWxpZ25tZW50VHlwZS5MRUZUIDogcGFyYWdyYXBoLmF0dHJpYnV0ZXM/LmFsaWduID09PSAnY2VudGVyJyA/IEFsaWdubWVudFR5cGUuQ0VOVEVSIDogcGFyYWdyYXBoLmF0dHJpYnV0ZXM/LmFsaWduID09PSAncmlnaHQnID8gQWxpZ25tZW50VHlwZS5SSUdIVCA6IHBhcmFncmFwaC5hdHRyaWJ1dGVzPy5hbGlnbiA9PT0gJ2p1c3RpZnknID8gQWxpZ25tZW50VHlwZS5KVVNUSUZJRUQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gaW5kZW50XG4gICAgICAgICAgICAgICAgLy8gYmxvY2txdW90ZVxuICAgICAgICAgICAgICAgIC8vIGNvZGUgYmxvY2tcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBidWlsZCBcblxuICAgIHJldHVybiBwYXJhZ3JhcGhzO1xufVxuXG4vLyBnZW5lcmF0ZSBhIHBhcmFncmFwaCBhcyBhbiBhcnJheSBvZiB0ZXh0IHJ1bnNcbmZ1bmN0aW9uIGJ1aWxkUGFyYWdyYXBoKHBhcmFncmFwaDogUVBhcmFncmFwaCk6IFRleHRSdW5bXSB7XG4gICAgY29uc3QgdGV4dFJ1bnM6IFRleHRSdW5bXSA9IFtdO1xuICAgIGZvciAoY29uc3QgcnVuIG9mIHBhcmFncmFwaC50ZXh0UnVucyEpIHtcbiAgICAgICAgLy8gaWYgZm9ybXVsYVxuICAgICAgICBpZiAoKHJ1biBhcyB7Zm9ybXVsYTogc3RyaW5nfSkuZm9ybXVsYSkge1xuXG4gICAgICAgIC8vIGlmIHRleHRcbiAgICAgICAgfSBlbHNlIGlmICgocnVuIGFzIFFUZXh0UnVuKS50ZXh0KSB7XG4gICAgICAgICAgICB0ZXh0UnVucy5wdXNoKGJ1aWxkVGV4dFJ1bihydW4gYXMgUVRleHRSdW4pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRleHRSdW5zO1xufVxuXG4vLyBnZW5lcmF0ZSBhIHRleHQgcnVuXG5mdW5jdGlvbiBidWlsZFRleHRSdW4ocnVuOiBRVGV4dFJ1bik6IFRleHRSdW4ge1xuICAgIGNvbnN0IHRleHRSdW4gPSBuZXcgVGV4dFJ1bih7XG4gICAgICAgIHRleHQ6IHJ1bi50ZXh0LFxuICAgICAgICBib2xkOiBydW4uYXR0cmlidXRlcz8uYm9sZCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgaXRhbGljczogcnVuLmF0dHJpYnV0ZXM/Lml0YWxpYyA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgc3ViU2NyaXB0OiBydW4uYXR0cmlidXRlcz8uc2NyaXB0ID09PSAnc3ViJyA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgc3VwZXJTY3JpcHQ6IHJ1bi5hdHRyaWJ1dGVzPy5zY3JpcHQgPT09ICdzdXBlcicgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgIHN0cmlrZTogcnVuLmF0dHJpYnV0ZXM/LnN0cmlrZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgdW5kZXJsaW5lOiBydW4uYXR0cmlidXRlcz8udW5kZXJsaW5lID8geyB0eXBlOiBVbmRlcmxpbmVUeXBlLlNJTkdMRSwgY29sb3I6IHVuZGVmaW5lZCB9IDogdW5kZWZpbmVkLFxuICAgICAgICBjb2xvcjogcnVuLmF0dHJpYnV0ZXM/LmNvbG9yID8gcnVuLmF0dHJpYnV0ZXM/LmNvbG9yLnNsaWNlKDEpIDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBzaXplXG4gICAgICAgIC8vIGZvbnRcbiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvclxuICAgICAgICAvLyBsaW5rXG4gICAgfSk7XG4gICAgcmV0dXJuIHRleHRSdW47XG59XG5cbi8vIGJ1aWxkIGEgZm9ybXVsYVxuZnVuY3Rpb24gYnVpbGRGb3JtdWxhKGZvcm11bGE6IHN0cmluZykge1xuXG59XG5cbi8vIGJ1aWxkIGFuIGltYWdlXG5mdW5jdGlvbiBidWlsZEltYWdlKGltYWdlOiBzdHJpbmcpIHtcblxufVxuXG4vLyBidWlsZCBhIHZpZGVvXG5mdW5jdGlvbiBidWlsZFZpZGVvKHZpZGVvOiBzdHJpbmcpIHtcblxufVxuXG5cblxuXG5cblxuLy8gYWxsb3cgdXNlciB0byBzZXQgdGhlICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gbW9kdWxlIGV4cG9ydHMgbXVzdCBiZSByZXR1cm5lZCBmcm9tIHJ1bnRpbWUgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xucmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oNjA3KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=