/*! For license information please see main.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.QuillToWord=t():e.QuillToWord=t()}(self,(function(){return e={50:function(e){var t;"undefined"!=typeof self&&self,t=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=138)}([function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(139)),n(r(140)),n(r(52)),n(r(141)),n(r(157)),n(r(158)),n(r(24))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(50)),n(r(215)),n(r(21)),n(r(3)),n(r(36)),n(r(230))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(88)),n(r(89)),n(r(90)),n(r(91)),n(r(92)),n(r(238)),n(r(93))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(17)),n(r(9)),n(r(161)),n(r(162)),n(r(164)),n(r(33)),n(r(212)),n(r(19)),n(r(32)),n(r(214))},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=r(15),s=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(14);o.inherits=r(7);var i=r(56),a=r(28);o.inherits(h,i);for(var u=s(a.prototype),c=0;c<u.length;c++){var l=u[c];h.prototype[l]||(h.prototype[l]=a.prototype[l])}function h(e){if(!(this instanceof h))return new h(e);i.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",p)}function p(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";(function(e){var n=r(143),s=r(144),o=r(54);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n),u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t),e}(e,t,r,n):"string"==typeof t?function(e,t,r){if("string"==typeof r&&""!==r||(r="utf8"),!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|f(t,r),s=(e=a(e,n)).write(t,r);return s!==n&&(e=e.slice(0,s)),e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=a(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?a(e,0):p(e,t);if("Buffer"===t.type&&o(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|d(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function f(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return X(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(n)return X(e).length;t=(""+t).toLowerCase(),n=!0}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return S(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return C(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function w(e,t,r,n,s){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=s?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:y(e,t,r,n,s);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,n,s);throw new TypeError("val must be string, number or Buffer")}function y(e,t,r,n,s){var o,i=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,r/=2}function c(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(s){var l=-1;for(o=r;o<a;o++)if(c(e,o)===c(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*i}else-1!==l&&(o-=o-l),l=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(c(e,o+p)!==c(t,p)){h=!1;break}if(h)return o}return-1}function b(e,t,r,n){r=Number(r)||0;var s=e.length-r;n?(n=Number(n))>s&&(n=s):n=s;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var i=0;i<n;++i){var a=parseInt(t.substr(2*i,2),16);if(isNaN(a))return i;e[r+i]=a}return i}function _(e,t,r,n){return U(X(t,e.length-r),e,r,n)}function v(e,t,r,n){return U(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return v(e,t,r,n)}function T(e,t,r,n){return U(z(t),e,r,n)}function E(e,t,r,n){return U(function(e,t){for(var r,n,s,o=[],i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,s=r%256,o.push(s),o.push(n);return o}(t,e.length-r),e,r,n)}function C(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);for(var n=[],s=t;s<r;){var o,i,a,u,c=e[s],l=null,h=c>239?4:c>223?3:c>191?2:1;if(s+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(o=e[s+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=e[s+1],i=e[s+2],128==(192&o)&&128==(192&i)&&(u=(15&c)<<12|(63&o)<<6|63&i)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=e[s+1],i=e[s+2],a=e[s+3],128==(192&o)&&128==(192&i)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&i)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),s+=h}return function(e){var t=e.length;if(t<=P)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=P));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,s=0,o=Math.min(r,n);s<o;++s)if(e[s]!==t[s]){r=e[s],n=t[s];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),s=0;for(r=0;r<e.length;++r){var i=e[r];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,s),s+=i.length}return n},u.byteLength=f,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,s){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),t<0||r>e.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&t>=r)return 0;if(n>=s)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(s>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),a=Math.min(o,i),c=this.slice(n,s),l=e.slice(t,r),h=0;h<a;++h)if(c[h]!==l[h]){o=c[h],i=l[h];break}return o<i?-1:i<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return w(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return w(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var s=this.length-t;if((void 0===r||r>s)&&(r=s),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return v(this,e,t,r);case"latin1":case"binary":return x(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function S(e,t,r){var n="";r=Math.min(e.length,r);for(var s=t;s<r;++s)n+=String.fromCharCode(127&e[s]);return n}function O(e,t,r){var n="";r=Math.min(e.length,r);for(var s=t;s<r;++s)n+=String.fromCharCode(e[s]);return n}function R(e,t,r){var n,s=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>s)&&(r=s);for(var o="",i=t;i<r;++i)o+=(n=e[i])<16?"0"+n.toString(16):n.toString(16);return o}function k(e,t,r){for(var n=e.slice(t,r),s="",o=0;o<n.length;o+=2)s+=String.fromCharCode(n[o]+256*n[o+1]);return s}function M(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,s,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n){t<0&&(t=65535+t+1);for(var s=0,o=Math.min(e.length-r,2);s<o;++s)e[r+s]=(t&255<<8*(n?s:1-s))>>>8*(n?s:1-s)}function D(e,t,r,n){t<0&&(t=4294967295+t+1);for(var s=0,o=Math.min(e.length-r,4);s<o;++s)e[r+s]=t>>>8*(n?s:3-s)&255}function F(e,t,r,n,s,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,o){return o||F(e,0,r,4),s.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,o){return o||F(e,0,r,8),s.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var s=t-e;r=new u(s,void 0);for(var o=0;o<s;++o)r[o]=this[o+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||M(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||M(e,t,this.length);for(var n=this[e+--t],s=1;t>0&&(s*=256);)n+=this[e+--t]*s;return n},u.prototype.readUInt8=function(e,t){return t||M(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||M(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||M(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||M(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||M(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||M(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return n>=(s*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||M(e,t,this.length);for(var n=t,s=1,o=this[e+--n];n>0&&(s*=256);)o+=this[e+--n]*s;return o>=(s*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||M(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||M(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||M(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||M(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||M(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||M(e,4,this.length),s.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||M(e,4,this.length),s.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||M(e,8,this.length),s.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||M(e,8,this.length),s.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t|=0,r|=0,n||I(this,e,t,r,Math.pow(2,8*r)-1,0);var s=1,o=0;for(this[t]=255&e;++o<r&&(s*=256);)this[t+o]=e/s&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t|=0,r|=0,n||I(this,e,t,r,Math.pow(2,8*r)-1,0);var s=r-1,o=1;for(this[t+s]=255&e;--s>=0&&(o*=256);)this[t+s]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):D(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var s=Math.pow(2,8*r-1);I(this,e,t,r,s-1,-s)}var o=0,i=1,a=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var s=Math.pow(2,8*r-1);I(this,e,t,r,s-1,-s)}var o=r-1,i=1,a=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):D(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var s,o=n-r;if(this===e&&r<t&&t<n)for(s=o-1;s>=0;--s)e[s+t]=this[s+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<o;++s)e[s+t]=this[s+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var s=e.charCodeAt(0);s<256&&(e=s)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var i=u.isBuffer(e)?e:X(new u(e,n).toString()),a=i.length;for(o=0;o<r-t;++o)this[o+t]=i[o%a]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function X(e,t){var r;t=t||1/0;for(var n=e.length,s=null,o=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!s){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&o.push(239,191,189);continue}s=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(t-=3)>-1&&o.push(239,191,189);if(s=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function z(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(L,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,r,n){for(var s=0;s<n&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}}).call(t,r(4))},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),(n=t.SpaceType||(t.SpaceType={})).DEFAULT="default",n.PRESERVE="preserve"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(32),o=r(67),i=r(33),a=r(68),u=r(69),c=r(19);class l extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:rPr"),!e)return;e.bold&&this.push(new o.Bold),(void 0===e.boldComplexScript&&e.bold||e.boldComplexScript)&&this.push(new o.BoldComplexScript),e.italics&&this.push(new o.Italics),(void 0===e.italicsComplexScript&&e.italics||e.italicsComplexScript)&&this.push(new o.ItalicsComplexScript),e.underline&&this.push(new c.Underline(e.underline.type,e.underline.color)),e.emphasisMark&&this.push(new s.EmphasisMark(e.emphasisMark.type)),e.color&&this.push(new o.Color(e.color)),e.size&&this.push(new o.Size(e.size));const t=void 0===e.sizeComplexScript||!0===e.sizeComplexScript?e.size:e.sizeComplexScript;t&&this.push(new o.SizeComplexScript(t)),e.rightToLeft&&this.push(new o.RightToLeft),e.smallCaps&&this.push(new o.SmallCaps),e.allCaps&&this.push(new o.Caps),e.strike&&this.push(new o.Strike),e.doubleStrike&&this.push(new o.DoubleStrike),e.subScript&&this.push(new a.SubScript),e.superScript&&this.push(new a.SuperScript),e.style&&this.push(new u.Style(e.style)),e.font&&("string"==typeof e.font?this.push(new i.RunFonts(e.font)):"name"in e.font?this.push(new i.RunFonts(e.font.name,e.font.hint)):this.push(new i.RunFonts(e.font))),e.highlight&&this.push(new o.Highlight(e.highlight));const r=void 0===e.highlightComplexScript||!0===e.highlightComplexScript?e.highlight:e.highlightComplexScript;r&&this.push(new o.HighlightComplexScript(r)),e.characterSpacing&&this.push(new o.CharacterSpacing(e.characterSpacing));const n=e.shading||e.shadow;n&&this.push(new o.Shading(n.type,n.fill,n.color));const l=void 0===e.shadingComplexScript||!0===e.shadingComplexScript?n:e.shadingComplexScript;l&&this.push(new o.ShadowComplexScript(l.type,l.fill,l.color))}push(e){this.root.push(e)}}t.RunProperties=l},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(264)),n(r(37))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"}}}t.DocumentAttributes=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(1)),n(r(261)),n(r(279)),n(r(338)),n(r(132)),n(r(48)),n(r(71)),n(r(113)),n(r(23)),n(r(339)),n(r(0)),n(r(47)),n(r(44)),n(r(131)),n(r(130)),n(r(346))},function(e,t){var r,n,s=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],l=!1,h=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var e=a(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new f(e,t)),1!==c.length||l||a(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(t,r(6).Buffer)},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,s){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,i,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,n)}));case 4:return t.nextTick((function(){e.call(null,r,n,s)}));default:for(o=new Array(a-1),i=0;i<o.length;)o[i++]=arguments[i];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(t,r(13))},function(e,t,r){var n=r(6),s=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return s(e,t,r)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=i),o(s,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=s(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(66),o=r(18),i=r(160),a=r(9),u=r(70);var c;!function(e){e.CURRENT="CURRENT",e.TOTAL_PAGES="TOTAL_PAGES",e.TOTAL_PAGES_IN_SECTION="TOTAL_PAGES_IN_SECTION"}(c=t.PageNumber||(t.PageNumber={}));class l extends n.XmlComponent{constructor(e){if(super("w:r"),this.properties=new a.RunProperties(e),this.root.push(this.properties),e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case c.CURRENT:this.root.push(new o.Begin),this.root.push(new i.Page),this.root.push(new o.Separate),this.root.push(new o.End);break;case c.TOTAL_PAGES:this.root.push(new o.Begin),this.root.push(new i.NumberOfPages),this.root.push(new o.Separate),this.root.push(new o.End);break;case c.TOTAL_PAGES_IN_SECTION:this.root.push(new o.Begin),this.root.push(new i.NumberOfPagesSection),this.root.push(new o.Separate),this.root.push(new o.End);break;default:this.root.push(new u.Text(t))}else e.text&&this.root.push(new u.Text(e.text))}break(){return this.root.splice(1,0,new s.Break),this}}t.Run=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.BEGIN="begin",e.END="end",e.SEPARATE="separate"}(s||(s={}));class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:fldCharType",dirty:"w:dirty"}}}class i extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.BEGIN,dirty:e}))}}t.Begin=i;class a extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.SEPARATE,dirty:e}))}}t.Separate=a;class u extends n.XmlComponent{constructor(e){super("w:fldChar"),this.root.push(new o({type:s.END,dirty:e}))}}t.End=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.SINGLE="single",e.WORDS="words",e.DOUBLE="double",e.THICK="thick",e.DOTTED="dotted",e.DOTTEDHEAVY="dottedHeavy",e.DASH="dash",e.DASHEDHEAVY="dashedHeavy",e.DASHLONG="dashLong",e.DASHLONGHEAVY="dashLongHeavy",e.DOTDASH="dotDash",e.DASHDOTHEAVY="dashDotHeavy",e.DOTDOTDASH="dotDotDash",e.DASHDOTDOTHEAVY="dashDotDotHeavy",e.WAVE="wave",e.WAVYHEAVY="wavyHeavy",e.WAVYDOUBLE="wavyDouble"}(s=t.UnderlineType||(t.UnderlineType={}));class o extends n.XmlComponent{constructor(e,t){super("w:u"),this.root.push(new n.Attributes({val:e,color:t}))}}t.BaseUnderline=o,t.Underline=class extends o{constructor(e=s.SINGLE,t){super(e,t)}},t.DashUnderline=class extends o{constructor(){super("dash")}},t.DashDotDotHeavyUnderline=class extends o{constructor(){super("dashDotDotHeavy")}},t.DashDotHeavyUnderline=class extends o{constructor(){super("dashDotHeavy")}},t.DashLongUnderline=class extends o{constructor(){super("dashLong")}},t.DashLongHeavyUnderline=class extends o{constructor(){super("dashLongHeavy")}},t.DotDashUnderline=class extends o{constructor(){super("dotDash")}},t.DotDotDashUnderline=class extends o{constructor(){super("dotDotDash")}},t.DottedUnderline=class extends o{constructor(){super("dotted")}},t.DottedHeavyUnderline=class extends o{constructor(){super("dottedHeavy")}},t.DoubleUnderline=class extends o{constructor(){super("double")}},t.SingleUnderline=class extends o{constructor(){super("single")}},t.ThickUnderline=class extends o{constructor(){super("thick")}},t.WaveUnderline=class extends o{constructor(){super("wave")}},t.WavyDoubleUnderline=class extends o{constructor(){super("wavyDouble")}},t.WavyHeavyUnderline=class extends o{constructor(){super("wavyHeavy")}},t.WordsUnderline=class extends o{constructor(){super("words")}}},function(e,t,r){"use strict";var n,s,o,i=r(220),a="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";function u(){o=!1}function c(e){if(e){if(e!==n){if(e.length!==a.length)throw new Error("Custom alphabet for shortid must be "+a.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter((function(e,t,r){return t!==r.lastIndexOf(e)}));if(t.length)throw new Error("Custom alphabet for shortid must be "+a.length+" unique characters. These characters were not unique: "+t.join(", "));n=e,u()}}else n!==a&&(n=a,u())}function l(){return o||(o=function(){n||c(a);for(var e,t=n.split(""),r=[],s=i.nextValue();t.length>0;)s=i.nextValue(),e=Math.floor(s*t.length),r.push(t.splice(e,1)[0]);return r.join("")}())}e.exports={get:function(){return n||a},characters:function(e){return c(e),n},seed:function(e){i.seed(e),s!==e&&(u(),s=e)},lookup:function(e){return l()[e]},shuffled:l}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(51),o=r(229),i=r(62),a=r(63),u=r(64),c=r(65),l=r(81),h=r(82),p=r(83),d=r(84),f=r(36),m=r(67);class g extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:pPr"),e){if(e.border&&this.push(new i.Border(e.border)),e.spacing&&this.push(new l.Spacing(e.spacing)),void 0!==e.outlineLevel&&this.push(new f.OutlineLevel(e.outlineLevel)),e.alignment&&this.push(new s.Alignment(e.alignment)),e.heading&&this.push(new h.Style(e.heading)),e.bidirectional&&this.push(new o.Bidirectional),e.thematicBreak&&this.push(new i.ThematicBreak),e.pageBreakBefore&&this.push(new c.PageBreakBefore),e.contextualSpacing&&this.push(new l.ContextualSpacing(e.contextualSpacing)),e.indent&&this.push(new a.Indent(e.indent)),e.keepLines&&this.push(new u.KeepLines),e.keepNext&&this.push(new u.KeepNext),e.tabStops)for(const t of e.tabStops)this.push(new p.TabStop(t.type,t.position,t.leader));e.style&&this.push(new h.Style(e.style)),e.bullet&&(this.push(new h.Style("ListParagraph")),this.push(new d.NumberProperties(1,e.bullet.level))),e.numbering&&(e.numbering.custom||this.push(new h.Style("ListParagraph")),this.push(new d.NumberProperties(e.numbering.reference,e.numbering.level))),e.rightTabStop&&this.push(new p.TabStop(p.TabStopType.RIGHT,e.rightTabStop)),e.leftTabStop&&this.push(new p.TabStop(p.TabStopType.LEFT,e.leftTabStop)),e.shading&&this.push(new m.Shading(e.shading.type,e.shading.fill,e.shading.color))}}push(e){this.root.push(e)}}t.ParagraphProperties=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(256),o=r(257);class i extends n.XmlComponent{constructor(e){super("m:dPr"),e&&(this.root.push(new s.MathBeginningCharacter(e.beginningCharacter)),this.root.push(new o.MathEndingCharacter(e.endingCharacter)))}}t.MathBracketProperties=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(270)),n(r(42)),n(r(41)),n(r(105))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseXmlComponent=class{constructor(e){this.deleted=!1,this.rootKey=e}get IsDeleted(){return this.deleted}}},function(e,t,r){var n=r(53),s=r(155),o=r(61),i=r(156);e.exports={xml2js:n,xml2json:s,js2xml:o,json2xml:i}},function(e,t,r){"use strict";var n,s="object"==typeof Reflect?Reflect:null,o=s&&"function"==typeof s.apply?s.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function l(e,t,r,n){var s,o,i,a;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),i=o[t]),void 0===i)i=o[t]=r,++e._eventsCount;else if("function"==typeof i?i=o[t]=n?[r,i]:[i,r]:n?i.unshift(r):i.push(r),(s=c(e))>0&&i.length>s&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,a=u,console&&console.warn&&console.warn(a)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}function p(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=h.bind(n);return s.listener=r,n.wrapFn=s,s}function d(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):m(s,s.length)}function f(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function m(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var c=u.length,l=m(u,c);for(r=0;r<c;++r)o(l[r],this,t)}return!0},a.prototype.addListener=function(e,t){return l(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return l(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var r,n,s,o,i;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){i=r[o].listener,s=o;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(s=o[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){(t=e.exports=r(56)).Stream=t,t.Readable=t,t.Writable=r(28),t.Duplex=r(5),t.Transform=r(60),t.PassThrough=r(150)},function(e,t,r){"use strict";(function(t,n,s){var o=r(15);function i(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var s=n.callback;t.pendingcb--,s(undefined),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=y;var a,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;y.WritableState=w;var c=r(14);c.inherits=r(7);var l,h={deprecate:r(149)},p=r(57),d=r(16).Buffer,f=s.Uint8Array||function(){},m=r(58);function g(){}function w(e,t){a=a||r(5),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var s=e.highWaterMark,c=e.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:n&&(c||0===c)?c:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,s=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,s){--t.pendingcb,r?(o.nextTick(s,n),o.nextTick(E,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(s(n),e._writableState.errorEmitted=!0,e.emit("error",n),E(e,t))}(e,r,n,t,s);else{var i=x(r);i||r.corked||r.bufferProcessing||!r.bufferedRequest||v(e,r),n?u(_,e,r,i,s):_(e,r,i,s)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function y(e){if(a=a||r(5),!(l.call(y,this)||this instanceof a))return new y(e);this._writableState=new w(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),p.call(this)}function b(e,t,r,n,s,o,i){t.writelen=n,t.writecb=i,t.writing=!0,t.sync=!0,r?e._writev(s,t.onwrite):e._write(s,o,t.onwrite),t.sync=!1}function _(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),E(e,t)}function v(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,s=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var a=0,u=!0;r;)s[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;s.allBuffers=u,b(e,t,!0,t.length,s,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new i(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,h=r.callback;if(b(e,t,!1,t.objectMode?1:c.length,c,l,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function x(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function T(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),E(e,t)}))}function E(e,t){var r=x(t);return r&&(function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(T,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(y,p),w.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(w.prototype,"buffer",{get:h.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(l=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(e){return!!l.call(this,e)||this===y&&e&&e._writableState instanceof w}})):l=function(e){return e instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(e,t,r){var n,s=this._writableState,i=!1,a=!s.objectMode&&(n=e,d.isBuffer(n)||n instanceof f);return a&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=s.defaultEncoding),"function"!=typeof r&&(r=g),s.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var s=!0,i=!1;return null===r?i=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(i=new TypeError("Invalid non-string/buffer chunk")),i&&(e.emit("error",i),o.nextTick(n,i),s=!1),s}(this,s,e,r))&&(s.pendingcb++,i=function(e,t,r,n,s,o){if(!r){var i=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r)),t}(t,n,s);n!==i&&(r=!0,s="buffer",n=i)}var a=t.objectMode?1:n.length;t.length+=a;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:s,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else b(e,t,!1,a,n,s,o);return u}(this,s,a,e,t,r)),i},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||v(this,e))},y.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,E(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),y.prototype.destroy=m.destroy,y.prototype._undestroy=m.undestroy,y.prototype._destroy=function(e,t){this.end(),t(e)}}).call(t,r(13),r(59).setImmediate,r(4))},function(e,t,r){"use strict";var n=r(16).Buffer,s=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===s||!s(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=c,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=l,this.end=h,t=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function i(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function l(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function p(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var s=i(t[n]);return s>=0?(s>0&&(e.lastNeed=s-1),s):--n<r||-2===s?0:(s=i(t[n]))>=0?(s>0&&(e.lastNeed=s-2),s):--n<r||-2===s?0:(s=i(t[n]))>=0?(s>0&&(2===s?s=0:e.lastNeed=s-3),s):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){var n=r(31).isArray;e.exports={copyOptions:function(e){var t,r={};for(t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r},ensureFlagExists:function(e,t){e in t&&"boolean"==typeof t[e]||(t[e]=!1)},ensureSpacesExists:function(e){(!("spaces"in e)||"number"!=typeof e.spaces&&"string"!=typeof e.spaces)&&(e.spaces=0)},ensureAlwaysArrayExists:function(e){"alwaysArray"in e&&("boolean"==typeof e.alwaysArray||n(e.alwaysArray))||(e.alwaysArray=!1)},ensureKeyExists:function(e,t){e+"Key"in t&&"string"==typeof t[e+"Key"]||(t[e+"Key"]=t.compact?"_"+e:e)},checkFnExists:function(e,t){return e+"Fn"in t}}},function(e,t){e.exports={isArray:function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;!function(e){e.DOT="dot"}(s=t.EmphasisMarkType||(t.EmphasisMarkType={}));class o extends n.XmlComponent{constructor(e){super("w:em"),this.root.push(new n.Attributes({val:e}))}}t.BaseEmphasisMark=o,t.EmphasisMark=class extends o{constructor(e=s.DOT){super(e)}},t.DotEmphasisMark=class extends o{constructor(){super(s.DOT)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ascii:"w:ascii",cs:"w:cs",eastAsia:"w:eastAsia",hAnsi:"w:hAnsi",hint:"w:hint"}}}class o extends n.XmlComponent{constructor(e,t){if(super("w:rFonts"),"string"==typeof e){const r=e;this.root.push(new s({ascii:r,cs:r,eastAsia:r,hAnsi:r,hint:t}))}else{const t=e;this.root.push(new s(t))}}}t.RunFonts=o},function(e,t,r){"use strict";var n,s,o,i;Object.defineProperty(t,"__esModule",{value:!0}),(i=t.HorizontalPositionRelativeFrom||(t.HorizontalPositionRelativeFrom={})).CHARACTER="character",i.COLUMN="column",i.INSIDE_MARGIN="insideMargin",i.LEFT_MARGIN="leftMargin",i.MARGIN="margin",i.OUTSIDE_MARGIN="outsideMargin",i.PAGE="page",i.RIGHT_MARGIN="rightMargin",(o=t.VerticalPositionRelativeFrom||(t.VerticalPositionRelativeFrom={})).BOTTOM_MARGIN="bottomMargin",o.INSIDE_MARGIN="insideMargin",o.LINE="line",o.MARGIN="margin",o.OUTSIDE_MARGIN="outsideMargin",o.PAGE="page",o.PARAGRAPH="paragraph",o.TOP_MARGIN="topMargin",(s=t.HorizontalPositionAlign||(t.HorizontalPositionAlign={})).CENTER="center",s.INSIDE="inside",s.LEFT="left",s.OUTSIDE="outside",s.RIGHT="right",(n=t.VerticalPositionAlign||(t.VerticalPositionAlign={})).BOTTOM="bottom",n.CENTER="center",n.INSIDE="inside",n.OUTSIDE="outside",n.TOP="top"},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(199)),n(r(200)),n(r(201)),n(r(202)),n(r(203))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(216)),n(r(218)),n(r(228))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={style:"w:val",size:"w:sz",color:"w:color"}}}class o extends n.XmlComponent{setProperties(e,t,r){const n=new s({style:e,size:t,color:r});return this.root.push(n),this}}class i extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tcBorders")}addTopBorder(e,t,r){const n=new o("w:top");return n.setProperties(e,t,r),this.root.push(n),this}addStartBorder(e,t,r){const n=new o("w:start");return n.setProperties(e,t,r),this.root.push(n),this}addBottomBorder(e,t,r){const n=new o("w:bottom");return n.setProperties(e,t,r),this.root.push(n),this}addEndBorder(e,t,r){const n=new o("w:end");return n.setProperties(e,t,r),this.root.push(n),this}addLeftBorder(e,t,r){const n=new o("w:left");return n.setProperties(e,t,r),this.root.push(n),this}addRightBorder(e,t,r){const n=new o("w:right");return n.setProperties(e,t,r),this.root.push(n),this}}t.TableCellBorders=i;class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class u extends n.XmlComponent{constructor(e){super("w:gridSpan"),this.root.push(new a({val:e}))}}var c,l,h,p;t.GridSpan=u,(c=t.VerticalMergeType||(t.VerticalMergeType={})).CONTINUE="continue",c.RESTART="restart";class d extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class f extends n.XmlComponent{constructor(e){super("w:vMerge"),this.root.push(new d({val:e}))}}t.VerticalMerge=f,(l=t.VerticalAlign||(t.VerticalAlign={})).BOTTOM="bottom",l.CENTER="center",l.TOP="top";class m extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class g extends n.XmlComponent{constructor(e){super("w:vAlign"),this.root.push(new m({val:e}))}}t.VAlign=g,(h=t.TextDirection||(t.TextDirection={})).BOTTOM_TO_TOP_LEFT_TO_RIGHT="btLr",h.LEFT_TO_RIGHT_TOP_TO_BOTTOM="lrTb",h.TOP_TO_BOTTOM_RIGHT_TO_LEFT="tbRl";class w extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class y extends n.XmlComponent{constructor(e){super("w:textDirection"),this.root.push(new w({val:e}))}}t.TDirection=y,(p=t.WidthType||(t.WidthType={})).AUTO="auto",p.DXA="dxa",p.NIL="nil",p.PERCENTAGE="pct";class b extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",type:"w:type"}}}class _ extends n.XmlComponent{constructor(e,t){super("w:tcW"),this.root.push(new b({width:e,type:t}))}}t.TableCellWidth=_},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(266))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(40);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",styleId:"w:styleId",default:"w:default",customStyle:"w:customStyle"}}}class i extends n.XmlComponent{constructor(e,t){super("w:style"),this.root.push(new o(e)),t&&this.root.push(new s.Name(t))}}t.Style=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:name"),this.root.push(new s({val:e}))}}t.Name=o;class i extends n.XmlComponent{constructor(e){super("w:basedOn"),this.root.push(new s({val:e}))}}t.BasedOn=i;class a extends n.XmlComponent{constructor(e){super("w:next"),this.root.push(new s({val:e}))}}t.Next=a;class u extends n.XmlComponent{constructor(e){super("w:link"),this.root.push(new s({val:e}))}}t.Link=u;class c extends n.XmlComponent{constructor(e){super("w:uiPriority"),this.root.push(new s({val:e}))}}t.UiPriority=c;class l extends n.XmlComponent{constructor(){super("w:unhideWhenUsed")}}t.UnhideWhenUsed=l;class h extends n.XmlComponent{constructor(){super("w:qFormat")}}t.QuickFormat=h;class p extends n.XmlComponent{}t.TableProperties=p;class d extends n.XmlComponent{}t.RsId=d;class f extends n.XmlComponent{constructor(){super("w:semiHidden")}}t.SemiHidden=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(9),o=r(40),i=r(39);class a extends i.Style{constructor(e){super({type:"paragraph",styleId:e.id},e.name),this.paragraphProperties=new n.ParagraphProperties(e.paragraph),this.runProperties=new s.RunProperties(e.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),e.basedOn&&this.root.push(new o.BasedOn(e.basedOn)),e.next&&this.root.push(new o.Next(e.next)),e.quickFormat&&this.root.push(new o.QuickFormat),e.link&&this.root.push(new o.Link(e.link)),e.semiHidden&&this.root.push(new o.SemiHidden),e.uiPriority&&this.root.push(new o.UiPriority(e.uiPriority)),e.unhideWhenUsed&&this.root.push(new o.UnhideWhenUsed)}}t.StyleForParagraph=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(9),s=r(40),o=r(39);class i extends o.Style{constructor(e){super({type:"character",styleId:e.id},e.name),this.runProperties=new n.RunProperties(e.run),this.root.push(this.runProperties),this.root.push(new s.UiPriority(99)),this.root.push(new s.UnhideWhenUsed),e.basedOn&&this.root.push(new s.BasedOn(e.basedOn)),e.link&&this.root.push(new s.Link(e.link)),e.semiHidden&&this.root.push(new s.SemiHidden)}}t.StyleForCharacter=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.PageOrientation||(t.PageOrientation={})).PORTRAIT="portrait",s.LANDSCAPE="landscape";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",height:"w:h",orientation:"w:orient"}}}t.PageSizeAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(307),s=r(45);t.FooterWrapper=class{constructor(e,t,r){this.media=e,this.footer=new n.Footer(t,r),this.relationships=new s.Relationships}add(e){this.footer.add(e)}addChildElement(e){this.footer.addChildElement(e)}get Footer(){return this.footer}get Relationships(){return this.relationships}get Media(){return this.media}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(309))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(311);(t.TargetModeType||(t.TargetModeType={})).EXTERNAL="External";class o extends n.XmlComponent{constructor(e,t,r,n){super("Relationship"),this.root.push(new s.RelationshipAttributes({id:e,type:t,target:r,targetMode:n}))}}t.Relationship=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(325),s=r(45);t.HeaderWrapper=class{constructor(e,t,r){this.media=e,this.header=new n.Header(t,r),this.relationships=new s.Relationships}add(e){return this.header.add(e),this}addChildElement(e){this.header.addChildElement(e)}get Header(){return this.header}get Relationships(){return this.relationships}get Media(){return this.media}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(327)),n(r(328))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(50),o=r(21),i=r(9);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl",tentative:"w15:tentative"}}}class u extends n.XmlComponent{constructor(e){super("w:start"),this.root.push(new n.Attributes({val:e}))}}class c extends n.XmlComponent{constructor(e){super("w:numFmt"),this.root.push(new n.Attributes({val:e}))}}class l extends n.XmlComponent{constructor(e){super("w:lvlText"),this.root.push(new n.Attributes({val:e}))}}class h extends n.XmlComponent{constructor(e){super("w:lvlJc"),this.root.push(new n.Attributes({val:e}))}}var p;(p=t.LevelSuffix||(t.LevelSuffix={})).NOTHING="nothing",p.SPACE="space",p.TAB="tab";class d extends n.XmlComponent{constructor(e){super("w:suff"),this.root.push(new n.Attributes({val:e}))}}class f extends n.XmlComponent{constructor({level:e,format:t,text:r,alignment:n=s.AlignmentType.START,start:p=1,style:f,suffix:m}){super("w:lvl"),this.root.push(new a({ilvl:e,tentative:1})),this.root.push(new u(p)),this.root.push(new h(n)),t&&this.root.push(new c(t)),r&&this.root.push(new l(r)),this.paragraphProperties=new o.ParagraphProperties(f&&f.paragraph),this.runProperties=new i.RunProperties(f&&f.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),m&&this.root.push(new d(m))}}t.LevelBase=f,t.Level=class extends f{constructor(e){super(e)}},t.LevelForOverride=class extends f{}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(51)),n(r(62)),n(r(63)),n(r(64)),n(r(65)),n(r(81)),n(r(82)),n(r(83)),n(r(84))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.AlignmentType||(t.AlignmentType={})).START="start",s.END="end",s.CENTER="center",s.BOTH="both",s.JUSTIFIED="both",s.DISTRIBUTE="distribute",s.LEFT="left",s.RIGHT="right";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}t.AlignmentAttributes=o;class i extends n.XmlComponent{constructor(e){super("w:jc"),this.root.push(new o({val:e}))}}t.Alignment=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(24);class s extends n.BaseXmlComponent{constructor(e){super("_attr"),this.root=e}prepForXml(){const e={};return Object.keys(this.root).forEach((t=>{const r=this.root[t];if(void 0!==r){const n=this.xmlKeys&&this.xmlKeys[t]||t;e[n]=r}})),{_attr:e}}set(e){this.root=e}}t.XmlAttributeComponent=s},function(e,t,r){var n,s,o=r(142),i=r(30),a=r(31).isArray;function u(e){var t=Number(e);if(!isNaN(t))return t;var r=e.toLowerCase();return"true"===r||"false"!==r&&e}function c(e,t){var r;if(n.compact){if(!s[n[e+"Key"]]&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(n[e+"Key"]):n.alwaysArray)&&(s[n[e+"Key"]]=[]),s[n[e+"Key"]]&&!a(s[n[e+"Key"]])&&(s[n[e+"Key"]]=[s[n[e+"Key"]]]),e+"Fn"in n&&"string"==typeof t&&(t=n[e+"Fn"](t,s)),"instruction"===e&&("instructionFn"in n||"instructionNameFn"in n))for(r in t)if(t.hasOwnProperty(r))if("instructionFn"in n)t[r]=n.instructionFn(t[r],r,s);else{var o=t[r];delete t[r],t[n.instructionNameFn(r,o,s)]=o}a(s[n[e+"Key"]])?s[n[e+"Key"]].push(t):s[n[e+"Key"]]=t}else{s[n.elementsKey]||(s[n.elementsKey]=[]);var i={};if(i[n.typeKey]=e,"instruction"===e){for(r in t)if(t.hasOwnProperty(r))break;i[n.nameKey]="instructionNameFn"in n?n.instructionNameFn(r,t,s):r,n.instructionHasAttributes?(i[n.attributesKey]=t[r][n.attributesKey],"instructionFn"in n&&(i[n.attributesKey]=n.instructionFn(i[n.attributesKey],r,s))):("instructionFn"in n&&(t[r]=n.instructionFn(t[r],r,s)),i[n.instructionKey]=t[r])}else e+"Fn"in n&&(t=n[e+"Fn"](t,s)),i[n[e+"Key"]]=t;n.addParent&&(i[n.parentKey]=s),s[n.elementsKey].push(i)}}function l(e){var t;if("attributesFn"in n&&e&&(e=n.attributesFn(e,s)),(n.trim||"attributeValueFn"in n||"attributeNameFn"in n||n.nativeTypeAttributes)&&e)for(t in e)if(e.hasOwnProperty(t)&&(n.trim&&(e[t]=e[t].trim()),n.nativeTypeAttributes&&(e[t]=u(e[t])),"attributeValueFn"in n&&(e[t]=n.attributeValueFn(e[t],t,s)),"attributeNameFn"in n)){var r=e[t];delete e[t],e[n.attributeNameFn(t,e[t],s)]=r}return e}function h(e){var t={};if(e.body&&("xml"===e.name.toLowerCase()||n.instructionHasAttributes)){for(var r,o=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(r=o.exec(e.body));)t[r[1]]=r[2]||r[3]||r[4];t=l(t)}if("xml"===e.name.toLowerCase()){if(n.ignoreDeclaration)return;s[n.declarationKey]={},Object.keys(t).length&&(s[n.declarationKey][n.attributesKey]=t),n.addParent&&(s[n.declarationKey][n.parentKey]=s)}else{if(n.ignoreInstruction)return;n.trim&&(e.body=e.body.trim());var i={};n.instructionHasAttributes&&Object.keys(t).length?(i[e.name]={},i[e.name][n.attributesKey]=t):i[e.name]=e.body,c("instruction",i)}}function p(e,t){var r;if("object"==typeof e&&(t=e.attributes,e=e.name),t=l(t),"elementNameFn"in n&&(e=n.elementNameFn(e,s)),n.compact){var o;if(r={},!n.ignoreAttributes&&t&&Object.keys(t).length)for(o in r[n.attributesKey]={},t)t.hasOwnProperty(o)&&(r[n.attributesKey][o]=t[o]);!(e in s)&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(e):n.alwaysArray)&&(s[e]=[]),s[e]&&!a(s[e])&&(s[e]=[s[e]]),a(s[e])?s[e].push(r):s[e]=r}else s[n.elementsKey]||(s[n.elementsKey]=[]),(r={})[n.typeKey]="element",r[n.nameKey]=e,!n.ignoreAttributes&&t&&Object.keys(t).length&&(r[n.attributesKey]=t),n.alwaysChildren&&(r[n.elementsKey]=[]),s[n.elementsKey].push(r);r[n.parentKey]=s,s=r}function d(e){n.ignoreText||(e.trim()||n.captureSpacesBetweenElements)&&(n.trim&&(e=e.trim()),n.nativeType&&(e=u(e)),n.sanitize&&(e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),c("text",e))}function f(e){n.ignoreComment||(n.trim&&(e=e.trim()),c("comment",e))}function m(e){var t=s[n.parentKey];n.addParent||delete s[n.parentKey],s=t}function g(e){n.ignoreCdata||(n.trim&&(e=e.trim()),c("cdata",e))}function w(e){n.ignoreDoctype||(e=e.replace(/^ /,""),n.trim&&(e=e.trim()),c("doctype",e))}function y(e){e.note=e}e.exports=function(e,t){var r=o.parser(!0,{}),a={};if(s=a,n=function(e){return n=i.copyOptions(e),i.ensureFlagExists("ignoreDeclaration",n),i.ensureFlagExists("ignoreInstruction",n),i.ensureFlagExists("ignoreAttributes",n),i.ensureFlagExists("ignoreText",n),i.ensureFlagExists("ignoreComment",n),i.ensureFlagExists("ignoreCdata",n),i.ensureFlagExists("ignoreDoctype",n),i.ensureFlagExists("compact",n),i.ensureFlagExists("alwaysChildren",n),i.ensureFlagExists("addParent",n),i.ensureFlagExists("trim",n),i.ensureFlagExists("nativeType",n),i.ensureFlagExists("nativeTypeAttributes",n),i.ensureFlagExists("sanitize",n),i.ensureFlagExists("instructionHasAttributes",n),i.ensureFlagExists("captureSpacesBetweenElements",n),i.ensureAlwaysArrayExists(n),i.ensureKeyExists("declaration",n),i.ensureKeyExists("instruction",n),i.ensureKeyExists("attributes",n),i.ensureKeyExists("text",n),i.ensureKeyExists("comment",n),i.ensureKeyExists("cdata",n),i.ensureKeyExists("doctype",n),i.ensureKeyExists("type",n),i.ensureKeyExists("name",n),i.ensureKeyExists("elements",n),i.ensureKeyExists("parent",n),i.checkFnExists("doctype",n),i.checkFnExists("instruction",n),i.checkFnExists("cdata",n),i.checkFnExists("comment",n),i.checkFnExists("text",n),i.checkFnExists("instructionName",n),i.checkFnExists("elementName",n),i.checkFnExists("attributeName",n),i.checkFnExists("attributeValue",n),i.checkFnExists("attributes",n),n}(t),r.opt={strictEntities:!0},r.onopentag=p,r.ontext=d,r.oncomment=f,r.onclosetag=m,r.onerror=y,r.oncdata=g,r.ondoctype=w,r.onprocessinginstruction=h,r.write(e).close(),a[n.elementsKey]){var u=a[n.elementsKey];delete a[n.elementsKey],a[n.elementsKey]=u,delete a.text}return a}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){e.exports=s;var n=r(26).EventEmitter;function s(){n.call(this)}r(7)(s,n),s.Readable=r(27),s.Writable=r(151),s.Duplex=r(152),s.Transform=r(153),s.PassThrough=r(154),s.Stream=s,s.prototype.pipe=function(e,t){var r=this;function s(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",s),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",u));var i=!1;function a(){i||(i=!0,e.end())}function u(){i||(i=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(l(),0===n.listenerCount(this,"error"))throw e}function l(){r.removeListener("data",s),e.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",l),r.removeListener("close",l),e.removeListener("close",l)}return r.on("error",c),e.on("error",c),r.on("end",l),r.on("close",l),e.on("close",l),e.emit("pipe",r),e}},function(e,t,r){"use strict";(function(t,n){var s=r(15);e.exports=b;var o,i=r(54);b.ReadableState=y,r(26).EventEmitter;var a=function(e,t){return e.listeners(t).length},u=r(57),c=r(16).Buffer,l=t.Uint8Array||function(){},h=r(14);h.inherits=r(7);var p=r(145),d=void 0;d=p&&p.debuglog?p.debuglog("stream"):function(){};var f,m=r(146),g=r(58);h.inherits(b,u);var w=["error","close","destroy","pause","resume"];function y(e,t){e=e||{};var n=t instanceof(o=o||r(5));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var s=e.highWaterMark,i=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:n&&(i||0===i)?i:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(f||(f=r(29).StringDecoder),this.decoder=new f(e.encoding),this.encoding=e.encoding)}function b(e){if(o=o||r(5),!(this instanceof b))return new b(e);this._readableState=new y(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function _(e,t,r,n,s){var o,i=e._readableState;return null===t?(i.reading=!1,function(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,E(e)}}(e,i)):(s||(o=function(e,t){var r,n;return n=t,c.isBuffer(n)||n instanceof l||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(i,t)),o?e.emit("error",o):i.objectMode||t&&t.length>0?("string"==typeof t||i.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n?i.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):v(e,i,t,!0):i.ended?e.emit("error",new Error("stream.push() after EOF")):(i.reading=!1,i.decoder&&!r?(t=i.decoder.write(t),i.objectMode||0!==t.length?v(e,i,t,!1):A(e,i)):v(e,i,t,!1))):n||(i.reading=!1)),function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(i)}function v(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&E(e)),A(e,t)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(e,t){this.push(null),t(e)},b.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},b.prototype.unshift=function(e){return _(this,e,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(e){return f||(f=r(29).StringDecoder),this._readableState.decoder=new f(e),this._readableState.encoding=e,this};var x=8388608;function T(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=x?e=x:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function E(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?s.nextTick(C,e):C(e))}function C(e){d("emit readable"),e.emit("readable"),R(e)}function A(e,t){t.readingMore||(t.readingMore=!0,s.nextTick(P,e,t))}function P(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function S(e){d("readable nexttick read 0"),e.read(0)}function O(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),R(e),t.flowing&&!t.reading&&e.read(0)}function R(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function k(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,s=r.data;for(e-=s.length;r=r.next;){var o=r.data,i=e>o.length?o.length:e;if(i===o.length?s+=o:s+=o.slice(0,e),0==(e-=i)){i===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(i));break}++n}return t.length-=n,s}(e,t):function(e,t){var r=c.allocUnsafe(e),n=t.head,s=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var o=n.data,i=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,i),0==(e-=i)){i===o.length?(++s,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(i));break}++s}return t.length-=s,r}(e,t),n}(e,t.buffer,t.decoder),r);var r}function M(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,s.nextTick(I,t,e))}function I(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function N(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}b.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?M(this):E(this),null;if(0===(e=T(e,t))&&t.ended)return 0===t.length&&M(this),null;var n,s=t.needReadable;return d("need readable",s),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",s=!0),t.ended||t.reading?d("reading or ended",s=!1):s&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=T(r,t))),null===(n=e>0?k(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&M(this)),null!==n&&this.emit("data",n),n},b.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=t&&!1===t.end||e===n.stdout||e===n.stderr?y:c;function c(){d("onend"),e.end()}o.endEmitted?s.nextTick(u):r.once("end",u),e.on("unpipe",(function t(n,s){d("onunpipe"),n===r&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,d("cleanup"),e.removeListener("close",g),e.removeListener("finish",w),e.removeListener("drain",l),e.removeListener("error",m),e.removeListener("unpipe",t),r.removeListener("end",c),r.removeListener("end",y),r.removeListener("data",f),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}));var l=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,R(e))}}(r);e.on("drain",l);var h=!1,p=!1;function f(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==N(o.pipes,e))&&!h&&(d("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function m(t){d("onerror",t),y(),e.removeListener("error",m),0===a(e,"error")&&e.emit("error",t)}function g(){e.removeListener("finish",w),y()}function w(){d("onfinish"),e.removeListener("close",g),y()}function y(){d("unpipe"),r.unpipe(e)}return r.on("data",f),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events.error?i(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on(t,r)}(e,"error",m),e.once("close",g),e.once("finish",w),e.emit("pipe",r),o.flowing||(d("pipe resume"),r.resume()),e},b.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,s=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<s;o++)n[o].emit("unpipe",this,r);return this}var i=N(t.pipes,e);return-1===i||(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},b.prototype.on=function(e,t){var r=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&E(this):s.nextTick(S,this))}return r},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,s.nextTick(O,e,t))}(this,e)),this},b.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var s in e.on("end",(function(){if(d("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(s){d("wrapped data"),r.decoder&&(s=r.decoder.write(s)),r.objectMode&&null==s||(r.objectMode||s&&s.length)&&(t.push(s)||(n=!0,e.pause()))})),e)void 0===this[s]&&"function"==typeof e[s]&&(this[s]=function(t){return function(){return e[t].apply(e,arguments)}}(s));for(var o=0;o<w.length;o++)e.on(w[o],this.emit.bind(this,w[o]));return this._read=function(t){d("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=k}).call(t,r(4),r(13))},function(e,t,r){e.exports=r(26).EventEmitter},function(e,t,r){"use strict";var n=r(15);function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,i=this._writableState&&this._writableState.destroyed;return o||i?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(s,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(s,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,s=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(s.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(s.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(148),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(t,r(4))},function(e,t,r){"use strict";e.exports=i;var n=r(5),s=r(14);function o(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var s=this._readableState;s.reading=!1,(s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}function i(e){if(!(this instanceof i))return new i(e);n.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){u(e,t,r)})):u(this,null,null)}function u(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}s.inherits=r(7),s.inherits(i,n),i.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},i.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},i.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var s=this._readableState;(n.needTransform||s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}},i.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},i.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){var n,s,o=r(30),i=r(31).isArray;function a(e,t,r){return(!r&&e.spaces?"\n":"")+Array(t+1).join(e.spaces)}function u(e,t,r){if(t.ignoreAttributes)return"";"attributesFn"in t&&(e=t.attributesFn(e,s,n));var o,i,u,c,l=[];for(o in e)e.hasOwnProperty(o)&&null!==e[o]&&void 0!==e[o]&&(c=t.noQuotesForNativeAttributes&&"string"!=typeof e[o]?"":'"',i=(i=""+e[o]).replace(/"/g,"&quot;"),u="attributeNameFn"in t?t.attributeNameFn(o,i,s,n):o,l.push(t.spaces&&t.indentAttributes?a(t,r+1,!1):" "),l.push(u+"="+c+("attributeValueFn"in t?t.attributeValueFn(i,o,s,n):i)+c));return e&&Object.keys(e).length&&t.spaces&&t.indentAttributes&&l.push(a(t,r,!1)),l.join("")}function c(e,t,r){return n=e,s="xml",t.ignoreDeclaration?"":"<?xml"+u(e[t.attributesKey],t,r)+"?>"}function l(e,t,r){if(t.ignoreInstruction)return"";var o;for(o in e)if(e.hasOwnProperty(o))break;var i="instructionNameFn"in t?t.instructionNameFn(o,e[o],s,n):o;if("object"==typeof e[o])return n=e,s=i,"<?"+i+u(e[o][t.attributesKey],t,r)+"?>";var a=e[o]?e[o]:"";return"instructionFn"in t&&(a=t.instructionFn(a,o,s,n)),"<?"+i+(a?" "+a:"")+"?>"}function h(e,t){return t.ignoreComment?"":"\x3c!--"+("commentFn"in t?t.commentFn(e,s,n):e)+"--\x3e"}function p(e,t){return t.ignoreCdata?"":"<![CDATA["+("cdataFn"in t?t.cdataFn(e,s,n):e.replace("]]>","]]]]><![CDATA[>"))+"]]>"}function d(e,t){return t.ignoreDoctype?"":"<!DOCTYPE "+("doctypeFn"in t?t.doctypeFn(e,s,n):e)+">"}function f(e,t){return t.ignoreText?"":(e=(e=(e=""+e).replace(/&amp;/g,"&")).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"textFn"in t?t.textFn(e,s,n):e)}function m(e,t,r,o){return e.reduce((function(e,i){var c=a(t,r,o&&!e);switch(i.type){case"element":return e+c+function(e,t,r){n=e,s=e.name;var o=[],i="elementNameFn"in t?t.elementNameFn(e.name,e):e.name;o.push("<"+i),e[t.attributesKey]&&o.push(u(e[t.attributesKey],t,r));var a=e[t.elementsKey]&&e[t.elementsKey].length||e[t.attributesKey]&&"preserve"===e[t.attributesKey]["xml:space"];return a||(a="fullTagEmptyElementFn"in t?t.fullTagEmptyElementFn(e.name,e):t.fullTagEmptyElement),a?(o.push(">"),e[t.elementsKey]&&e[t.elementsKey].length&&(o.push(m(e[t.elementsKey],t,r+1)),n=e,s=e.name),o.push(t.spaces&&function(e,t){var r;if(e.elements&&e.elements.length)for(r=0;r<e.elements.length;++r)switch(e.elements[r][t.typeKey]){case"text":if(t.indentText)return!0;break;case"cdata":if(t.indentCdata)return!0;break;case"instruction":if(t.indentInstruction)return!0;break;case"doctype":case"comment":case"element":default:return!0}return!1}(e,t)?"\n"+Array(r+1).join(t.spaces):""),o.push("</"+i+">")):o.push("/>"),o.join("")}(i,t,r);case"comment":return e+c+h(i[t.commentKey],t);case"doctype":return e+c+d(i[t.doctypeKey],t);case"cdata":return e+(t.indentCdata?c:"")+p(i[t.cdataKey],t);case"text":return e+(t.indentText?c:"")+f(i[t.textKey],t);case"instruction":var g={};return g[i[t.nameKey]]=i[t.attributesKey]?i:i[t.instructionKey],e+(t.indentInstruction?c:"")+l(g,t,r)}}),"")}function g(e,t,r){var n;for(n in e)if(e.hasOwnProperty(n))switch(n){case t.parentKey:case t.attributesKey:break;case t.textKey:if(t.indentText||r)return!0;break;case t.cdataKey:if(t.indentCdata||r)return!0;break;case t.instructionKey:if(t.indentInstruction||r)return!0;break;case t.doctypeKey:case t.commentKey:default:return!0}return!1}function w(e,t,r,o,i){n=e,s=t;var c="elementNameFn"in r?r.elementNameFn(t,e):t;if(null==e||""===e)return"fullTagEmptyElementFn"in r&&r.fullTagEmptyElementFn(t,e)||r.fullTagEmptyElement?"<"+c+"></"+c+">":"<"+c+"/>";var l=[];if(t){if(l.push("<"+c),"object"!=typeof e)return l.push(">"+f(e,r)+"</"+c+">"),l.join("");e[r.attributesKey]&&l.push(u(e[r.attributesKey],r,o));var h=g(e,r,!0)||e[r.attributesKey]&&"preserve"===e[r.attributesKey]["xml:space"];if(h||(h="fullTagEmptyElementFn"in r?r.fullTagEmptyElementFn(t,e):r.fullTagEmptyElement),!h)return l.push("/>"),l.join("");l.push(">")}return l.push(y(e,r,o+1,!1)),n=e,s=t,t&&l.push((i?a(r,o,!1):"")+"</"+c+">"),l.join("")}function y(e,t,r,n){var s,o,u,m=[];for(o in e)if(e.hasOwnProperty(o))for(u=i(e[o])?e[o]:[e[o]],s=0;s<u.length;++s){switch(o){case t.declarationKey:m.push(c(u[s],t,r));break;case t.instructionKey:m.push((t.indentInstruction?a(t,r,n):"")+l(u[s],t,r));break;case t.attributesKey:case t.parentKey:break;case t.textKey:m.push((t.indentText?a(t,r,n):"")+f(u[s],t));break;case t.cdataKey:m.push((t.indentCdata?a(t,r,n):"")+p(u[s],t));break;case t.doctypeKey:m.push(a(t,r,n)+d(u[s],t));break;case t.commentKey:m.push(a(t,r,n)+h(u[s],t));break;default:m.push(a(t,r,n)+w(u[s],o,t,r,g(u[s],t)))}n=n&&!m.length}return m.join("")}e.exports=function(e,t){t=function(e){var t=o.copyOptions(e);return o.ensureFlagExists("ignoreDeclaration",t),o.ensureFlagExists("ignoreInstruction",t),o.ensureFlagExists("ignoreAttributes",t),o.ensureFlagExists("ignoreText",t),o.ensureFlagExists("ignoreComment",t),o.ensureFlagExists("ignoreCdata",t),o.ensureFlagExists("ignoreDoctype",t),o.ensureFlagExists("compact",t),o.ensureFlagExists("indentText",t),o.ensureFlagExists("indentCdata",t),o.ensureFlagExists("indentAttributes",t),o.ensureFlagExists("indentInstruction",t),o.ensureFlagExists("fullTagEmptyElement",t),o.ensureFlagExists("noQuotesForNativeAttributes",t),o.ensureSpacesExists(t),"number"==typeof t.spaces&&(t.spaces=Array(t.spaces+1).join(" ")),o.ensureKeyExists("declaration",t),o.ensureKeyExists("instruction",t),o.ensureKeyExists("attributes",t),o.ensureKeyExists("text",t),o.ensureKeyExists("comment",t),o.ensureKeyExists("cdata",t),o.ensureKeyExists("doctype",t),o.ensureKeyExists("type",t),o.ensureKeyExists("name",t),o.ensureKeyExists("elements",t),o.checkFnExists("doctype",t),o.checkFnExists("instruction",t),o.checkFnExists("cdata",t),o.checkFnExists("comment",t),o.checkFnExists("text",t),o.checkFnExists("instructionName",t),o.checkFnExists("elementName",t),o.checkFnExists("attributeName",t),o.checkFnExists("attributeValue",t),o.checkFnExists("attributes",t),o.checkFnExists("fullTagEmptyElement",t),t}(t);var r=[];return n=e,s="_root_",t.compact?r.push(y(e,t,0,!0)):(e[t.declarationKey]&&r.push(c(e[t.declarationKey],t,0)),e[t.elementsKey]&&e[t.elementsKey].length&&r.push(m(e[t.elementsKey],t,0,!r.length))),r.join("")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(159);class o extends n.XmlComponent{constructor(e,t={color:"auto",space:1,value:"single",size:6}){super(e);const r=new s.BorderAttributes({color:t.color,space:t.space,val:t.value,sz:t.size});this.root.push(r)}}class i extends n.XmlComponent{constructor(e){if(super("w:pBdr"),void 0!==e.top){const t=new o("w:top",e.top);this.root.push(t)}if(void 0!==e.bottom){const t=new o("w:bottom",e.bottom);this.root.push(t)}if(void 0!==e.left){const t=new o("w:left",e.left);this.root.push(t)}if(void 0!==e.right){const t=new o("w:right",e.right);this.root.push(t)}}}t.Border=i;class a extends n.XmlComponent{constructor(){super("w:pBdr");const e=new o("w:bottom",{color:"auto",space:1,value:"single",size:6});this.root.push(e)}}t.ThematicBreak=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={left:"w:left",hanging:"w:hanging",firstLine:"w:firstLine",start:"w:start",end:"w:end",right:"w:end"}}}class o extends n.XmlComponent{constructor(e){super("w:ind"),this.root.push(new s(e))}}t.Indent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:keepLines")}}t.KeepLines=s;class o extends n.XmlComponent{constructor(){super("w:keepNext")}}t.KeepNext=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(3);class o extends n.XmlComponent{constructor(){super("w:br"),this.root.push(new n.Attributes({type:"page"}))}}class i extends s.Run{constructor(){super({}),this.root.push(new o)}}t.PageBreak=i;class a extends n.XmlComponent{constructor(){super("w:pageBreakBefore")}}t.PageBreakBefore=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:br")}}t.Break=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s=r(19);t.Underline=s.Underline;var o=r(32);t.EmphasisMark=o.EmphasisMark;var i=r(68);t.SubScript=i.SubScript,t.SuperScript=i.SuperScript;var a=r(33);t.RunFonts=a.RunFonts;class u extends n.XmlComponent{constructor(){super("w:b"),this.root.push(new n.Attributes({val:!0}))}}t.Bold=u;class c extends n.XmlComponent{constructor(){super("w:bCs"),this.root.push(new n.Attributes({val:!0}))}}t.BoldComplexScript=c;class l extends n.XmlComponent{constructor(e){super("w:spacing"),this.root.push(new n.Attributes({val:e}))}}t.CharacterSpacing=l;class h extends n.XmlComponent{constructor(){super("w:i"),this.root.push(new n.Attributes({val:!0}))}}t.Italics=h;class p extends n.XmlComponent{constructor(){super("w:iCs"),this.root.push(new n.Attributes({val:!0}))}}t.ItalicsComplexScript=p;class d extends n.XmlComponent{constructor(){super("w:caps"),this.root.push(new n.Attributes({val:!0}))}}t.Caps=d;class f extends n.XmlComponent{constructor(e){super("w:color"),this.root.push(new n.Attributes({val:e}))}}t.Color=f;class m extends n.XmlComponent{constructor(){super("w:dstrike"),this.root.push(new n.Attributes({val:!0}))}}t.DoubleStrike=m;class g extends n.XmlComponent{constructor(){super("w:emboss"),this.root.push(new n.Attributes({val:!0}))}}t.Emboss=g;class w extends n.XmlComponent{constructor(){super("w:imprint"),this.root.push(new n.Attributes({val:!0}))}}t.Imprint=w;class y extends n.XmlComponent{constructor(){super("w:smallCaps"),this.root.push(new n.Attributes({val:!0}))}}t.SmallCaps=y;class b extends n.XmlComponent{constructor(){super("w:strike"),this.root.push(new n.Attributes({val:!0}))}}t.Strike=b;class _ extends n.XmlComponent{constructor(e){super("w:sz"),this.root.push(new n.Attributes({val:e}))}}t.Size=_;class v extends n.XmlComponent{constructor(e){super("w:szCs"),this.root.push(new n.Attributes({val:e}))}}t.SizeComplexScript=v;class x extends n.XmlComponent{constructor(){super("w:rtl"),this.root.push(new n.Attributes({val:!0}))}}t.RightToLeft=x;class T extends n.XmlComponent{constructor(e){super("w:highlight"),this.root.push(new n.Attributes({val:e}))}}t.Highlight=T;class E extends n.XmlComponent{constructor(e){super("w:highlightCs"),this.root.push(new n.Attributes({val:e}))}}t.HighlightComplexScript=E;class C extends n.XmlComponent{constructor(e,t,r){super("w:shd"),this.root.push(new n.Attributes({val:e,fill:t,color:r}))}}t.Shading=C;class A extends n.XmlComponent{constructor(e,t,r){super("w:shdCs"),this.root.push(new n.Attributes({val:e,fill:t,color:r}))}}t.ShadowComplexScript=A},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:vertAlign"),this.root.push(new n.Attributes({val:e}))}}t.VerticalAlign=s,t.SuperScript=class extends s{constructor(){super("superscript")}},t.SubScript=class extends s{constructor(){super("subscript")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:rStyle"),this.root.push(new s({val:e}))}}t.Style=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:t"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(e)}}t.Text=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(165)),n(r(35)),n(r(72))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(34)),n(r(168)),n(r(169)),n(r(170))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("wp:align"),this.root.push(e)}}t.Align=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("wp:posOffset"),this.root.push(e.toString())}}t.PositionOffset=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(171))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(204);class o extends n.XmlComponent{constructor(){super("wp:docPr"),this.root.push(new s.DocPropertiesAttributes({id:0,name:"",descr:""}))}}t.DocProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(205);class o extends n.XmlComponent{constructor(){super("wp:effectExtent"),this.root.push(new s.EffectExtentAttributes({b:0,l:0,r:0,t:0}))}}t.EffectExtent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(206);class o extends n.XmlComponent{constructor(e,t){super("wp:extent"),this.attributes=new s.ExtentAttributes({cx:e,cy:t}),this.root.push(this.attributes)}setXY(e,t){this.attributes.set({cx:e,cy:t})}}t.Extent=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(207);class o extends n.XmlComponent{constructor(){super("wp:cNvGraphicFramePr"),this.root.push(new s.GraphicFrameLocks)}}t.GraphicFrameProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",allowOverlap:"allowOverlap",behindDoc:"behindDoc",layoutInCell:"layoutInCell",locked:"locked",relativeHeight:"relativeHeight",simplePos:"simplePos"}}}t.AnchorAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={after:"w:after",before:"w:before",line:"w:line",lineRule:"w:lineRule"}}}class o extends n.XmlComponent{constructor(e){super("w:spacing"),this.root.push(new s(e))}}t.Spacing=o;class i extends n.XmlComponent{constructor(e){super("w:contextualSpacing"),this.root.push(new n.Attributes({val:!1===e?0:1}))}}t.ContextualSpacing=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeadingLevel||(t.HeadingLevel={})).HEADING_1="Heading1",s.HEADING_2="Heading2",s.HEADING_3="Heading3",s.HEADING_4="Heading4",s.HEADING_5="Heading5",s.HEADING_6="Heading6",s.TITLE="Title";class o extends n.XmlComponent{constructor(e){super("w:pStyle"),this.root.push(new n.Attributes({val:e}))}}t.Style=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t,r){super("w:tabs"),this.root.push(new c(e,t,r))}}var o,i,a;t.TabStop=s,(a=t.TabStopType||(t.TabStopType={})).LEFT="left",a.RIGHT="right",a.CENTER="center",a.BAR="bar",a.CLEAR="clear",a.DECIMAL="decimal",a.END="end",a.NUM="num",a.START="start",(i=t.LeaderType||(t.LeaderType={})).DOT="dot",i.HYPHEN="hyphen",i.MIDDLE_DOT="middleDot",i.NONE="none",i.UNDERSCORE="underscore",(o=t.TabStopPosition||(t.TabStopPosition={}))[o.MAX=9026]="MAX";class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",pos:"w:pos",leader:"w:leader"}}}t.TabAttributes=u;class c extends n.XmlComponent{constructor(e,t,r){super("w:tab"),this.root.push(new u({val:e,pos:t,leader:r}))}}t.TabStopItem=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t){super("w:numPr"),this.root.push(new o(t)),this.root.push(new i(e))}}t.NumberProperties=s;class o extends n.XmlComponent{constructor(e){super("w:ilvl"),this.root.push(new n.Attributes({val:e}))}}class i extends n.XmlComponent{constructor(e){super("w:numId"),this.root.push(new n.Attributes({val:"string"==typeof e?`{${e}}`:e}))}}},function(e,t,r){"use strict";e.exports=r(219)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:den");for(const t of e)this.root.push(t)}}t.MathDenominator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:num");for(const t of e)this.root.push(t)}}t.MathNumerator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={accent:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:chr"),this.root.push(new s({accent:e}))}}t.MathAccentCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:e");for(const t of e)this.root.push(t)}}t.MathBase=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:limLoc"),this.root.push(new s({value:"undOvr"}))}}t.MathLimitLocation=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(88),o=r(90),i=r(236),a=r(237);class u extends n.XmlComponent{constructor(e,t,r){super("m:naryPr"),this.root.push(new s.MathAccentCharacter(e)),this.root.push(new o.MathLimitLocation),t||this.root.push(new a.MathSuperScriptHide),r||this.root.push(new i.MathSubScriptHide)}}t.MathNArayProperties=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:sub");for(const t of e)this.root.push(t)}}t.MathSubScriptElement=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:sup");for(const t of e)this.root.push(t)}}t.MathSuperScriptElement=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSupPr")}}t.MathSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSubPr")}}t.MathSubScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sSubSupPr")}}t.MathSubSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:sPrePr")}}t.MathPreSubSuperScriptProperties=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){if(super("m:deg"),e)for(const t of e)this.root.push(t)}}t.MathDegree=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(251);class o extends n.XmlComponent{constructor(e){super("m:radPr"),e||this.root.push(new s.MathDegreeHide)}}t.MathRadicalProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:fName");for(const t of e)this.root.push(t)}}t.MathFunctionName=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("m:funcPr")}}t.MathFunctionProperties=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(269)),n(r(108)),n(r(110)),n(r(103)),n(r(109))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(23),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:tblBorders"),e.top?this.root.push(new i("w:top",e.top.style,e.top.size,0,e.top.color)):this.root.push(new i("w:top",n.BorderStyle.SINGLE,4,0,"auto")),e.left?this.root.push(new i("w:left",e.left.style,e.left.size,0,e.left.color)):this.root.push(new i("w:left",n.BorderStyle.SINGLE,4,0,"auto")),e.bottom?this.root.push(new i("w:bottom",e.bottom.style,e.bottom.size,0,e.bottom.color)):this.root.push(new i("w:bottom",n.BorderStyle.SINGLE,4,0,"auto")),e.right?this.root.push(new i("w:right",e.right.style,e.right.size,0,e.right.color)):this.root.push(new i("w:right",n.BorderStyle.SINGLE,4,0,"auto")),e.insideHorizontal?this.root.push(new i("w:insideH",e.insideHorizontal.style,e.insideHorizontal.size,0,e.insideHorizontal.color)):this.root.push(new i("w:insideH",n.BorderStyle.SINGLE,4,0,"auto")),e.insideVertical?this.root.push(new i("w:insideV",e.insideVertical.style,e.insideVertical.size,0,e.insideVertical.color)):this.root.push(new i("w:insideV",n.BorderStyle.SINGLE,4,0,"auto"))}}t.TableBorders=o;class i extends s.XmlComponent{constructor(e,t,r,n,s){super(e),this.root.push(new a({value:t,size:r,space:n,color:s}))}}class a extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:val",size:"w:sz",space:"w:space",color:"w:color"}}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(39)),n(r(41)),n(r(42)),n(r(271))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(106)),n(r(107)),n(r(274))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(21),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:pPrDefault"),this.root.push(new n.ParagraphProperties(e))}}t.ParagraphPropertiesDefaults=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(9),s=r(0);class o extends s.XmlComponent{constructor(e){super("w:rPrDefault"),this.properties=new n.RunProperties(e),this.root.push(this.properties)}}t.RunPropertiesDefaults=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(109);var o,i,a;(a=t.TableAnchorType||(t.TableAnchorType={})).MARGIN="margin",a.PAGE="page",a.TEXT="text",(i=t.RelativeHorizontalPosition||(t.RelativeHorizontalPosition={})).CENTER="center",i.INSIDE="inside",i.LEFT="left",i.OUTSIDE="outside",i.RIGHT="right",(o=t.RelativeVerticalPosition||(t.RelativeVerticalPosition={})).CENTER="center",o.INSIDE="inside",o.BOTTOM="bottom",o.OUTSIDE="outside",o.INLINE="inline",o.TOP="top";class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={horizontalAnchor:"w:horzAnchor",verticalAnchor:"w:vertAnchor",absoluteHorizontalPosition:"w:tblpX",relativeHorizontalPosition:"w:tblpXSpec",absoluteVerticalPosition:"w:tblpY",relativeVerticalPosition:"w:tblpYSpec",bottomFromText:"w:bottomFromText",topFromText:"w:topFromText",leftFromText:"w:leftFromText",rightFromText:"w:rightFromText"}}}t.TableFloatOptionsAttributes=u;class c extends n.XmlComponent{constructor(e){super("w:tblpPr"),this.root.push(new u(e)),e.overlap&&this.root.push(new s.TableOverlap(e.overlap))}}t.TableFloatProperties=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.OverlapType||(t.OverlapType={})).NEVER="never",s.OVERLAP="overlap";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class i extends n.XmlComponent{constructor(e){super("w:tblOverlap"),this.root.push(new o({val:e}))}}t.TableOverlap=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.TableLayoutType||(t.TableLayoutType={})).AUTOFIT="autofit",s.FIXED="fixed";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type"}}}class i extends n.XmlComponent{constructor(e){super("w:tblLayout"),this.root.push(new o({type:e}))}}t.TableLayout=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(112);class o extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:trPr")}setCantSplit(){return this.root.push(new a),this}setTableHeader(){return this.root.push(new c),this}setHeight(e,t){return this.root.push(new s.TableRowHeight(e,t)),this}}t.TableRowProperties=o;class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class a extends n.XmlComponent{constructor(){super("w:cantSplit"),this.root.push(new i({val:!0}))}}t.CantSplit=a;class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class c extends n.XmlComponent{constructor(){super("w:tblHeader"),this.root.push(new u({val:!0}))}}t.TableHeader=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeightRule||(t.HeightRule={})).AUTO="auto",s.ATLEAST="atLeast",s.EXACT="exact";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={height:"w:val",rule:"w:hRule"}}}t.TableRowHeightAttributes=o;class i extends n.XmlComponent{constructor(e,t){super("w:trHeight"),this.root.push(new o({height:e,rule:t}))}}t.TableRowHeight=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(291)),n(r(11)),n(r(114)),n(r(129))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(292)),n(r(128))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(293),o=r(295),i=r(116),a=r(117),u=r(119),c=r(120),l=r(122),h=r(123),p=r(299),d=r(124),f=r(125),m=r(43),g=r(302),w=r(126);class y extends n.XmlComponent{constructor(e={column:{}}){super("w:sectPr");const{width:t=11906,height:r=16838,top:n=1440,right:i=1440,bottom:a=1440,left:u=1440,header:c=708,footer:y=708,gutter:b=0,mirror:_=!1,column:v={},linePitch:x=360,orientation:T=m.PageOrientation.PORTRAIT,headers:E,footers:C,pageNumberFormatType:A,pageNumberStart:P,lineNumberCountBy:S,lineNumberStart:O,lineNumberRestart:R,lineNumberDistance:k,pageBorders:M,pageBorderTop:I,pageBorderRight:N,pageBorderBottom:D,pageBorderLeft:F,titlePage:j=!1,verticalAlign:B}=e;this.options=e,this.root.push(new f.PageSize(t,r,T)),this.root.push(new p.PageMargin(n,i,a,u,c,y,b,_)),this.root.push(new s.Columns(v.space?v.space:708,v.count?v.count:1)),this.root.push(new o.DocumentGrid(x)),this.addHeaders(E),this.addFooters(C),(P||A)&&this.root.push(new d.PageNumberType(P,A)),(S||O||R||k)&&this.root.push(new l.LineNumberType(S,O,R,k)),(M||I||N||D||F)&&this.root.push(new h.PageBorders({pageBorders:M,pageBorderTop:I,pageBorderRight:N,pageBorderBottom:D,pageBorderLeft:F})),j&&this.root.push(new g.TitlePage),B&&this.root.push(new w.SectionVerticalAlign(B))}addHeaders(e){e&&(e.default&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.DEFAULT,headerId:e.default.Header.ReferenceId})),e.first&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.FIRST,headerId:e.first.Header.ReferenceId})),e.even&&this.root.push(new c.HeaderReference({headerType:u.HeaderReferenceType.EVEN,headerId:e.even.Header.ReferenceId})))}addFooters(e){e&&(e.default&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.DEFAULT,footerId:e.default.Footer.ReferenceId})),e.first&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.FIRST,footerId:e.first.Footer.ReferenceId})),e.even&&this.root.push(new a.FooterReference({footerType:i.FooterReferenceType.EVEN,footerId:e.even.Footer.ReferenceId})))}get Options(){return this.options}}t.SectionProperties=y},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(117)),n(r(118))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(118);class o extends n.XmlComponent{constructor(e){super("w:footerReference"),this.root.push(new s.FooterReferenceAttributes({type:e.footerType||s.FooterReferenceType.DEFAULT,id:`rId${e.footerId}`}))}}t.FooterReference=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.FooterReferenceType||(t.FooterReferenceType={})).DEFAULT="default",s.FIRST="first",s.EVEN="even";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"r:id"}}}t.FooterReferenceAttributes=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(120)),n(r(121))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(121);class o extends n.XmlComponent{constructor(e){super("w:headerReference"),this.root.push(new s.HeaderReferenceAttributes({type:e.headerType||s.HeaderReferenceType.DEFAULT,id:`rId${e.headerId}`}))}}t.HeaderReference=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.HeaderReferenceType||(t.HeaderReferenceType={})).DEFAULT="default",s.FIRST="first",s.EVEN="even";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"r:id"}}}t.HeaderReferenceAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(297))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(298))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(301))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(43);class o extends n.XmlComponent{constructor(e,t,r){super("w:pgSz");const n=r===s.PageOrientation.LANDSCAPE;this.root.push(new s.PageSizeAttributes({width:n?t:e,height:n?e:t,orientation:r}))}}t.PageSize=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(304)),n(r(127))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={verticalAlign:"w:val"}}}t.SectionVerticalAlignAttributes=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(115)),n(r(116)),n(r(119)),n(r(305)),n(r(124)),n(r(123)),n(r(122)),n(r(126))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(306))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(312)),n(r(322))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Header=class{constructor(e={children:[]}){this.options=e}},t.Footer=class{constructor(e={children:[]}){this.options=e}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(329)),n(r(133)),n(r(49)),n(r(134))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(49),o=r(330);class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={abstractNumId:"w:abstractNumId",restartNumberingAfterBreak:"w15:restartNumberingAfterBreak"}}}class a extends n.XmlComponent{constructor(e,t){super("w:abstractNum"),this.root.push(new i({abstractNumId:e,restartNumberingAfterBreak:0})),this.root.push(new o.MultiLevelType("hybridMultilevel")),this.id=e;for(const e of t)this.root.push(new s.Level(e))}}t.AbstractNumbering=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(49);class o extends n.XmlComponent{constructor(e){super("w:abstractNumId"),this.root.push(new n.Attributes({val:e}))}}class i extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={numId:"w:numId"}}}class a extends n.XmlComponent{constructor(e,t,r){super("w:num"),this.reference=r,this.root.push(new i({numId:e})),this.root.push(new o(t)),this.id=e}overrideLevel(e,t){const r=new c(e,t);return this.root.push(r),r}}t.ConcreteNumbering=a;class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl"}}}class c extends n.XmlComponent{constructor(e,t){super("w:lvlOverride"),this.levelNum=e,this.root.push(new u({ilvl:e})),void 0!==t&&this.root.push(new h(t)),this.lvl=new s.LevelForOverride({level:this.levelNum}),this.root.push(this.lvl)}get Level(){return this.lvl}}t.LevelOverride=c;class l extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val"}}}class h extends n.XmlComponent{constructor(e){super("w:startOverride"),this.root.push(new l({val:e}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={enabled:"w:val"}}}t.UpdateFieldsAttributes=s;class o extends n.XmlComponent{constructor(e=!0){super("w:updateFields"),this.root.push(new s({enabled:e}))}}t.UpdateFields=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id",author:"w:author",date:"w:date"}}}t.ChangeAttributes=s},function(e,t,r){(function(t,r,n){e.exports=function e(t,r,n){function s(i,a){if(!r[i]){if(!t[i]){if(o)return o(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[i]={exports:{}};t[i][0].call(c.exports,(function(e){return s(t[i][1][e]||e)}),c,c.exports,e,t,r,n)}return r[i].exports}for(var o=!1,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,t,r){"use strict";var n=e("./utils"),s=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,s,i,a,u,c,l=[],h=0,p=e.length,d=p,f="string"!==n.getTypeOf(e);h<e.length;)d=p-h,s=f?(t=e[h++],r=h<p?e[h++]:0,h<p?e[h++]:0):(t=e.charCodeAt(h++),r=h<p?e.charCodeAt(h++):0,h<p?e.charCodeAt(h++):0),i=t>>2,a=(3&t)<<4|r>>4,u=1<d?(15&r)<<2|s>>6:64,c=2<d?63&s:64,l.push(o.charAt(i)+o.charAt(a)+o.charAt(u)+o.charAt(c));return l.join("")},r.decode=function(e){var t,r,n,i,a,u,c=0,l=0,h="data:";if(e.substr(0,h.length)===h)throw new Error("Invalid base64 input, it looks like a data url.");var p,d=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&d--,e.charAt(e.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(p=s.uint8array?new Uint8Array(0|d):new Array(0|d);c<e.length;)t=o.indexOf(e.charAt(c++))<<2|(i=o.indexOf(e.charAt(c++)))>>4,r=(15&i)<<4|(a=o.indexOf(e.charAt(c++)))>>2,n=(3&a)<<6|(u=o.indexOf(e.charAt(c++))),p[l++]=t,64!==a&&(p[l++]=r),64!==u&&(p[l++]=n);return p}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),s=e("./stream/DataWorker"),o=e("./stream/DataLengthProbe"),i=e("./stream/Crc32Probe");function a(e,t,r,n,s){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=s}o=e("./stream/DataLengthProbe"),a.prototype={getContentWorker:function(){var e=new s(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new s(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,r){return e.pipe(new i).pipe(new o("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(e){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),s=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var o=s,i=0+r;e^=-1;for(var a=0;a<i;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}(0|t,e,e.length):function(e,t,r,n){var o=s,i=0+r;e^=-1;for(var a=0;a<i;a++)e=e>>>8^o[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,s=e("pako"),o=e("./utils"),i=e("./stream/GenericWorker"),a=n?"uint8array":"array";function u(e,t){i.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",o.inherits(u,i),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(a,e.data),!1)},u.prototype.flush=function(){i.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new s[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new u("Deflate",e)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function s(e,t,r,s,i,l){var h,p,d=e.file,f=e.compression,m=l!==a.utf8encode,g=o.transformTo("string",l(d.name)),w=o.transformTo("string",a.utf8encode(d.name)),y=d.comment,b=o.transformTo("string",l(y)),_=o.transformTo("string",a.utf8encode(y)),v=w.length!==d.name.length,x=_.length!==y.length,T="",E="",C="",A=d.dir,P=d.date,S={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(S.crc32=e.crc32,S.compressedSize=e.compressedSize,S.uncompressedSize=e.uncompressedSize);var O=0;t&&(O|=8),m||!v&&!x||(O|=2048);var R=0,k=0;A&&(R|=16),"UNIX"===i?(k=798,R|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(d.unixPermissions,A)):(k=20,R|=function(e){return 63&(e||0)}(d.dosPermissions)),h=P.getUTCHours(),h<<=6,h|=P.getUTCMinutes(),h<<=5,h|=P.getUTCSeconds()/2,p=P.getUTCFullYear()-1980,p<<=4,p|=P.getUTCMonth()+1,p<<=5,p|=P.getUTCDate(),v&&(E=n(1,1)+n(u(g),4)+w,T+="up"+n(E.length,2)+E),x&&(C=n(1,1)+n(u(b),4)+_,T+="uc"+n(C.length,2)+C);var M="";return M+="\n\0",M+=n(O,2),M+=f.magic,M+=n(h,2),M+=n(p,2),M+=n(S.crc32,4),M+=n(S.compressedSize,4),M+=n(S.uncompressedSize,4),M+=n(g.length,2),M+=n(T.length,2),{fileRecord:c.LOCAL_FILE_HEADER+M+g+T,dirRecord:c.CENTRAL_FILE_HEADER+n(k,2)+M+n(b.length,2)+"\0\0\0\0"+n(R,4)+n(s,4)+g+T+b}}var o=e("../utils"),i=e("../stream/GenericWorker"),a=e("../utf8"),u=e("../crc32"),c=e("../signature");function l(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(l,i),l.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},l.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=s(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},l.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=s(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return c.DATA_DESCRIPTOR+n(e.crc32,4)+n(e.compressedSize,4)+n(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},l.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,s=function(e,t,r,s,i){var a=o.transformTo("string",i(s));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(e,2)+n(e,2)+n(t,4)+n(r,4)+n(a.length,2)+a}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:s,meta:{percent:100}})},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},l.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},l.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},l.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=l},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),s=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var o=new s(t.streamFiles,r,t.platform,t.encodeFileName),i=0;try{e.forEach((function(e,r){i++;var s=function(e,t){var r=e||t,s=n[r];if(!s)throw new Error(r+" is not a valid compression method !");return s}(r.options.compression,t.compression),a=r.options.compressionOptions||t.compressionOptions||{},u=r.dir,c=r.date;r._compressWorker(s,a).withStreamInfo("file",{name:e,dir:u,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(o)})),o.entriesCount=i}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.5.0",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),s=e("./external"),o=e("./utf8"),i=(n=e("./utils"),e("./zipEntries")),a=e("./stream/Crc32Probe"),u=e("./nodejsUtils");function c(e){return new s.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new a);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(e)?s.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new i(t);return r.load(e),r})).then((function(e){var r=[s.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var o=0;o<n.length;o++)r.push(c(n[o]));return s.Promise.all(r)})).then((function(e){for(var n=e.shift(),s=n.files,o=0;o<s.length;o++){var i=s[o];r.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:t.createFolders})}return n.zipComment.length&&(r.comment=n.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),s=e("../stream/GenericWorker");function o(e,t){s.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(o,s),o.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},o.prototype.pause=function(){return!!s.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function s(e,t,r){n.call(this,t),this._helper=e;var s=this;e.on("data",(function(e,t){s.push(e)||s._helper.pause(),r&&r(t)})).on("error",(function(e){s.emit("error",e)})).on("end",(function(){s.push(null)}))}e("../utils").inherits(s,n),s.prototype._read=function(){this._helper.resume()},t.exports=s},{"../utils":32,"readable-stream":16}],14:[function(e,r,n){"use strict";r.exports={isNode:void 0!==t,newBufferFrom:function(e,r){if(t.from&&t.from!==Uint8Array.from)return t.from(e,r);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new t(e,r)},allocBuffer:function(e){if(t.alloc)return t.alloc(e);var r=new t(e);return r.fill(0),r},isBuffer:function(e){return t.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function n(e,t,r){var n,s=o.getTypeOf(t),a=o.extend(r||{},u);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(e=m(e)),a.createFolders&&(n=f(e))&&g.call(this,n,!0);var h="string"===s&&!1===a.binary&&!1===a.base64;r&&void 0!==r.binary||(a.binary=!h),(t instanceof c&&0===t.uncompressedSize||a.dir||!t||0===t.length)&&(a.base64=!1,a.binary=!0,t="",a.compression="STORE",s="string");var w;w=t instanceof c||t instanceof i?t:p.isNode&&p.isStream(t)?new d(e,t):o.prepareContent(e,t,a.binary,a.optimizedBinaryString,a.base64);var y=new l(e,w,a);this.files[e]=y}var s=e("./utf8"),o=e("./utils"),i=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),u=e("./defaults"),c=e("./compressedObject"),l=e("./zipObject"),h=e("./generate"),p=e("./nodejsUtils"),d=e("./nodejs/NodejsStreamInputAdapter"),f=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:u.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function w(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n))},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(w(e)){var s=e;return this.filter((function(e,t){return!t.dir&&s.test(e)}))}var o=this.files[this.root+e];return o&&!o.dir?o:null},folder:function(e){if(!e)return this;if(w(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=g.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=o.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:s.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");o.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=h.generateWorker(this,r,n)}catch(e){(t=new i("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function s(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(s,n),s.prototype.byteAt=function(e){return this.data[this.zero+e]},s.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),s=e.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===t&&this.data[o+1]===r&&this.data[o+2]===n&&this.data[o+3]===s)return o-this.zero;return-1},s.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),s=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&r===o[1]&&n===o[2]&&s===o[3]},s.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function s(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}s.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=s},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},s.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},s.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},s.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function s(e){n.call(this,e)}e("../utils").inherits(s,n),s.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=s},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),s=e("../support"),o=e("./ArrayReader"),i=e("./StringReader"),a=e("./NodeBufferReader"),u=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||s.uint8array?"nodebuffer"===t?new a(e):s.uint8array?new u(n.transformTo("uint8array",e)):new o(n.transformTo("array",e)):new i(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),s=e("../utils");function o(e){n.call(this,"ConvertWorker to "+e),this.destType=e}s.inherits(o,n),o.prototype.processChunk=function(e){this.push({data:s.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),s=e("../crc32");function o(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,n),o.prototype.processChunk=function(e){this.streamInfo.crc32=s(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),s=e("./GenericWorker");function o(e){s.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(o,s),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}s.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),s=e("./GenericWorker");function o(e){s.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(o,s),o.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,r,n){"use strict";var s=e("../utils"),o=e("./ConvertWorker"),i=e("./GenericWorker"),a=e("../base64"),u=e("../support"),c=e("../external"),l=null;if(u.nodestream)try{l=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function h(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=t,this._mimeType=r,s.checkSupport(n),this._worker=e.pipe(new o(n)),e.lock()}catch(e){this._worker=new i("error"),this._worker.error(e)}}h.prototype={accumulate:function(e){return function(e,r){return new c.Promise((function(n,o){var i=[],u=e._internalType,c=e._outputType,l=e._mimeType;e.on("data",(function(e,t){i.push(e),r&&r(t)})).on("error",(function(e){i=[],o(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return s.newBlob(s.transformTo("arraybuffer",t),r);case"base64":return a.encode(t);default:return s.transformTo(e,t)}}(c,function(e,r){var n,s=0,o=null,i=0;for(n=0;n<r.length;n++)i+=r[n].length;switch(e){case"string":return r.join("");case"array":return Array.prototype.concat.apply([],r);case"uint8array":for(o=new Uint8Array(i),n=0;n<r.length;n++)o.set(r[n],s),s+=r[n].length;return o;case"nodebuffer":return t.concat(r);default:throw new Error("concat : unsupported type '"+e+"'")}}(u,i),l);n(e)}catch(e){o(e)}i=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){s.delay(t,arguments,r)})),this},resume:function(){return s.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(s.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:"nodebuffer"!==this._outputType},e)}},r.exports=h},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,r,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer=void 0!==t,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var s=new ArrayBuffer(0);try{n.blob=0===new Blob([s],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(s),n.blob=0===o.getBlob("application/zip").size}catch(e){n.blob=!1}}}try{n.nodestream=!!e("readable-stream").Readable}catch(e){n.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),s=e("./support"),o=e("./nodejsUtils"),i=e("./stream/GenericWorker"),a=new Array(256),u=0;u<256;u++)a[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){i.call(this,"utf-8 decode"),this.leftOver=null}function l(){i.call(this,"utf-8 encode")}a[254]=a[254]=1,r.utf8encode=function(e){return s.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,r,n,o,i,a=e.length,u=0;for(o=0;o<a;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=s.uint8array?new Uint8Array(u):new Array(u),o=i=0;i<u;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),r<128?t[i++]=r:(r<2048?t[i++]=192|r>>>6:(r<65536?t[i++]=224|r>>>12:(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63),t[i++]=128|r>>>6&63),t[i++]=128|63&r);return t}(e)},r.utf8decode=function(e){return s.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,s,o,i=e.length,u=new Array(2*i);for(t=r=0;t<i;)if((s=e[t++])<128)u[r++]=s;else if(4<(o=a[s]))u[r++]=65533,t+=o-1;else{for(s&=2===o?31:3===o?15:7;1<o&&t<i;)s=s<<6|63&e[t++],o--;1<o?u[r++]=65533:s<65536?u[r++]=s:(s-=65536,u[r++]=55296|s>>10&1023,u[r++]=56320|1023&s)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)}(e=n.transformTo(s.uint8array?"uint8array":"array",e))},n.inherits(c,i),c.prototype.processChunk=function(e){var t=n.transformTo(s.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(s.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var i=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}(t),u=t;i!==t.length&&(s.uint8array?(u=t.subarray(0,i),this.leftOver=t.subarray(i,t.length)):(u=t.slice(0,i),this.leftOver=t.slice(i,t.length))),this.push({data:r.utf8decode(u),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(l,i),l.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),s=e("./base64"),o=e("./nodejsUtils"),i=e("set-immediate-shim"),a=e("./external");function u(e){return e}function c(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(e,t,r){var n=[],s=0,o=e.length;if(o<=r)return String.fromCharCode.apply(null,e);for(;s<o;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(s,Math.min(s+r,o)))):n.push(String.fromCharCode.apply(null,e.subarray(s,Math.min(s+r,o)))),s+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(e){return!1}}()}};function h(e){var t=65536,n=r.getTypeOf(e),s=!0;if("uint8array"===n?s=l.applyCanBeUsed.uint8array:"nodebuffer"===n&&(s=l.applyCanBeUsed.nodebuffer),s)for(;1<t;)try{return l.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return l.stringifyByChar(e)}function p(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=h;var d={};d.string={string:u,array:function(e){return c(e,new Array(e.length))},arraybuffer:function(e){return d.string.uint8array(e).buffer},uint8array:function(e){return c(e,new Uint8Array(e.length))},nodebuffer:function(e){return c(e,o.allocBuffer(e.length))}},d.array={string:h,array:u,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(e)}},d.arraybuffer={string:function(e){return h(new Uint8Array(e))},array:function(e){return p(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:u,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(new Uint8Array(e))}},d.uint8array={string:h,array:function(e){return p(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:u,nodebuffer:function(e){return o.newBufferFrom(e)}},d.nodebuffer={string:h,array:function(e){return p(e,new Array(e.length))},arraybuffer:function(e){return d.nodebuffer.uint8array(e).buffer},uint8array:function(e){return p(e,new Uint8Array(e.length))},nodebuffer:u},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return d[n][e](t)},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&o.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){i((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,o,i,u){return a.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var l=r.getTypeOf(t);return l?("arraybuffer"===l?t=r.transformTo("uint8array",t):"string"===l&&(u?t=s.decode(t):o&&!0!==i&&(t=function(e){return c(e,n.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),o=e("./signature"),i=e("./zipEntry"),a=(e("./utf8"),e("./support"));function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+s.pretty(t)+", expected "+s.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",r=s.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new i({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===s.MAX_VALUE_16BITS||this.diskWithCentralDirStart===s.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===s.MAX_VALUE_16BITS||this.centralDirRecords===s.MAX_VALUE_16BITS||this.centralDirSize===s.MAX_VALUE_32BITS||this.centralDirOffset===s.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),o=e("./compressedObject"),i=e("./crc32"),a=e("./utf8"),u=e("./compressions"),c=e("./support");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,s=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<s;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(s)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var o=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||i(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||i(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e("./stream/StreamHelper"),o=e("./stream/DataWorker"),i=e("./utf8"),a=e("./compressedObject"),u=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var o=!this._dataBinary;o&&!n&&(t=t.pipe(new i.Utf8EncodeWorker)),!o&&n&&(t=t.pipe(new i.Utf8DecodeWorker))}catch(e){(t=new u("error")).error(e)}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new i.Utf8EncodeWorker)),a.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof u?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<c.length;h++)n.prototype[c[h]]=l;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,n){(function(e){"use strict";var r,n,s=e.MutationObserver||e.WebKitMutationObserver;if(s){var o=0,i=new s(l),a=e.document.createTextNode("");i.observe(a,{characterData:!0}),r=function(){a.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var u=new e.MessageChannel;u.port1.onmessage=l,r=function(){u.port2.postMessage(0)}}var c=[];function l(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}t.exports=function(e){1!==c.push(e)||n||r()}}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function s(){}var o={},i=["REJECTED"],a=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==s&&d(this,e)}function l(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function h(e,t,r){n((function(){var n;try{n=t(r)}catch(n){return o.reject(e,n)}n===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,n)}))}function p(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function d(e,t){var r=!1;function n(t){r||(r=!0,o.reject(e,t))}function s(t){r||(r=!0,o.resolve(e,t))}var i=f((function(){t(s,n)}));"error"===i.status&&n(i.value)}function f(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===i)return this;var r=new this.constructor(s);return this.state!==u?h(r,this.state===a?e:t,this.outcome):this.queue.push(new l(r,e,t)),r},l.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){o.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},o.resolve=function(e,t){var r=f(p,t);if("error"===r.status)return o.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var s=-1,i=e.queue.length;++s<i;)e.queue[s].callFulfilled(t)}return e},o.reject=function(e,t){e.state=i,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:o.resolve(new this(s),e)},c.reject=function(e){var t=new this(s);return o.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var i=new Array(r),a=0,u=-1,c=new this(s);++u<r;)l(e[u],u);return c;function l(e,s){t.resolve(e).then((function(e){i[s]=e,++a!==r||n||(n=!0,o.resolve(c,i))}),(function(e){n||(n=!0,o.reject(c,e))}))}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,a=new this(s);++i<t;)n=e[i],this.resolve(n).then((function(e){r||(r=!0,o.resolve(a,e))}),(function(e){r||(r=!0,o.reject(a,e))}));return a}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),s=e("./utils/common"),o=e("./utils/strings"),i=e("./zlib/messages"),a=e("./zlib/zstream"),u=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=s.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==r)throw new Error(i[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var l;if(l="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(i[r]);this._dict_set=!0}}function l(e,t){var r=new c(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}c.prototype.push=function(e,t){var r,i,a=this.strm,c=this.options.chunkSize;if(this.ended)return!1;i=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=o.string2buf(e):"[object ArrayBuffer]"===u.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new s.Buf8(c),a.next_out=0,a.avail_out=c),1!==(r=n.deflate(a,i))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(o.buf2binstring(s.shrinkBuf(a.output,a.next_out))):this.onData(s.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&1!==r);return 4===i?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==i||(this.onEnd(0),!(a.avail_out=0))},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=c,r.deflate=l,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,l(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,l(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),s=e("./utils/common"),o=e("./utils/strings"),i=e("./zlib/constants"),a=e("./zlib/messages"),u=e("./zlib/zstream"),c=e("./zlib/gzheader"),l=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=s.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==i.Z_OK)throw new Error(a[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function p(e,t){var r=new h(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}h.prototype.push=function(e,t){var r,a,u,c,h,p,d=this.strm,f=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?i.Z_FINISH:i.Z_NO_FLUSH,"string"==typeof e?d.input=o.binstring2buf(e):"[object ArrayBuffer]"===l.call(e)?d.input=new Uint8Array(e):d.input=e,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new s.Buf8(f),d.next_out=0,d.avail_out=f),(r=n.inflate(d,i.Z_NO_FLUSH))===i.Z_NEED_DICT&&m&&(p="string"==typeof m?o.string2buf(m):"[object ArrayBuffer]"===l.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,p)),r===i.Z_BUF_ERROR&&!0===g&&(r=i.Z_OK,g=!1),r!==i.Z_STREAM_END&&r!==i.Z_OK)return this.onEnd(r),!(this.ended=!0);d.next_out&&(0!==d.avail_out&&r!==i.Z_STREAM_END&&(0!==d.avail_in||a!==i.Z_FINISH&&a!==i.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(d.output,d.next_out),c=d.next_out-u,h=o.buf2string(d.output,u),d.next_out=c,d.avail_out=f-c,c&&s.arraySet(d.output,d.output,u,c,0),this.onData(h)):this.onData(s.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(g=!0)}while((0<d.avail_in||0===d.avail_out)&&r!==i.Z_STREAM_END);return r===i.Z_STREAM_END&&(a=i.Z_FINISH),a===i.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===i.Z_OK):a!==i.Z_SYNC_FLUSH||(this.onEnd(i.Z_OK),!(d.avail_out=0))},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===i.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=h,r.inflate=p,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},r.ungzip=p},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var s={arraySet:function(e,t,r,n,s){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),s);else for(var o=0;o<n;o++)e[s+o]=t[r+o]},flattenChunks:function(e){var t,r,n,s,o,i;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(i=new Uint8Array(n),t=s=0,r=e.length;t<r;t++)o=e[t],i.set(o,s),s+=o.length;return i}},o={arraySet:function(e,t,r,n,s){for(var o=0;o<n;o++)e[s+o]=t[r+o]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,s)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,o))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),s=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){s=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var i=new n.Buf8(256),a=0;a<256;a++)i[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function u(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&s))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",i=0;i<t;i++)r+=String.fromCharCode(e[i]);return r}i[254]=i[254]=1,r.string2buf=function(e){var t,r,s,o,i,a=e.length,u=0;for(o=0;o<a;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(s=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(s-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(u),o=i=0;i<u;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(s=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(s-56320),o++),r<128?t[i++]=r:(r<2048?t[i++]=192|r>>>6:(r<65536?t[i++]=224|r>>>12:(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63),t[i++]=128|r>>>6&63),t[i++]=128|63&r);return t},r.buf2binstring=function(e){return u(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,s=t.length;r<s;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,s,o,a=t||e.length,c=new Array(2*a);for(r=n=0;r<a;)if((s=e[r++])<128)c[n++]=s;else if(4<(o=i[s]))c[n++]=65533,r+=o-1;else{for(s&=2===o?31:3===o?15:7;1<o&&r<a;)s=s<<6|63&e[r++],o--;1<o?c[n++]=65533:s<65536?c[n++]=s:(s-=65536,c[n++]=55296|s>>10&1023,c[n++]=56320|1023&s)}return u(c,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+i[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var s=65535&e|0,o=e>>>16&65535|0,i=0;0!==r;){for(r-=i=2e3<r?2e3:r;o=o+(s=s+t[n++]|0)|0,--i;);s%=65521,o%=65521}return s|o<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,s){var o=n,i=s+r;e^=-1;for(var a=s;a<i;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){"use strict";var n,s=e("../utils/common"),o=e("./trees"),i=e("./adler32"),a=e("./crc32"),u=e("./messages"),c=-2,l=258,h=262,p=113;function d(e,t){return e.msg=u[t],t}function f(e){return(e<<1)-(4<e?9:0)}function m(e){for(var t=e.length;0<=--t;)e[t]=0}function g(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(s.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function w(e,t){o._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,g(e.strm)}function y(e,t){e.pending_buf[e.pending++]=t}function b(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function _(e,t){var r,n,s=e.max_chain_length,o=e.strstart,i=e.prev_length,a=e.nice_match,u=e.strstart>e.w_size-h?e.strstart-(e.w_size-h):0,c=e.window,p=e.w_mask,d=e.prev,f=e.strstart+l,m=c[o+i-1],g=c[o+i];e.prev_length>=e.good_match&&(s>>=2),a>e.lookahead&&(a=e.lookahead);do{if(c[(r=t)+i]===g&&c[r+i-1]===m&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<f);if(n=l-(f-o),o=f-l,i<n){if(e.match_start=t,a<=(i=n))break;m=c[o+i-1],g=c[o+i]}}}while((t=d[t&p])>u&&0!=--s);return i<=e.lookahead?i:e.lookahead}function v(e){var t,r,n,o,u,c,l,p,d,f,m=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-h)){for(s.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=r=e.hash_size;n=e.head[--t],e.head[t]=m<=n?n-m:0,--r;);for(t=r=m;n=e.prev[--t],e.prev[t]=m<=n?n-m:0,--r;);o+=m}if(0===e.strm.avail_in)break;if(c=e.strm,l=e.window,p=e.strstart+e.lookahead,f=void 0,(d=o)<(f=c.avail_in)&&(f=d),r=0===f?0:(c.avail_in-=f,s.arraySet(l,c.input,c.next_in,f,p),1===c.state.wrap?c.adler=i(c.adler,l,f,p):2===c.state.wrap&&(c.adler=a(c.adler,l,f,p)),c.next_in+=f,c.total_in+=f,f),e.lookahead+=r,e.lookahead+e.insert>=3)for(u=e.strstart-e.insert,e.ins_h=e.window[u],e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+3-1])&e.hash_mask,e.prev[u&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=u,u++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<h&&0!==e.strm.avail_in)}function x(e,t){for(var r,n;;){if(e.lookahead<h){if(v(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-h&&(e.match_length=_(e,r)),e.match_length>=3)if(n=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}function T(e,t){for(var r,n,s;;){if(e.lookahead<h){if(v(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-h&&(e.match_length=_(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(s=e.strstart+e.lookahead-3,n=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=s&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(w(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=o._tr_tally(e,0,e.window[e.strstart-1]))&&w(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}function E(e,t,r,n,s){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=s}function C(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new s.Buf16(1146),this.dyn_dtree=new s.Buf16(122),this.bl_tree=new s.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new s.Buf16(16),this.heap=new s.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new s.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function A(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:p,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):d(e,c)}function P(e){var t=A(e);return 0===t&&function(e){e.window_size=2*e.w_size,m(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function S(e,t,r,n,o,i){if(!e)return c;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),o<1||9<o||8!==r||n<8||15<n||t<0||9<t||i<0||4<i)return d(e,c);8===n&&(n=9);var u=new C;return(e.state=u).strm=e,u.wrap=a,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new s.Buf8(2*u.w_size),u.head=new s.Buf16(u.hash_size),u.prev=new s.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new s.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=i,u.method=r,P(e)}n=[new E(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(v(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,w(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-h&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(w(e,!1),e.strm.avail_out),1)})),new E(4,4,8,4,x),new E(4,5,16,8,x),new E(4,6,32,32,x),new E(4,4,16,16,T),new E(8,16,32,32,T),new E(8,16,128,128,T),new E(8,32,128,256,T),new E(32,128,258,1024,T),new E(32,258,258,4096,T)],r.deflateInit=function(e,t){return S(e,t,8,15,8,0)},r.deflateInit2=S,r.deflateReset=P,r.deflateResetKeep=A,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},r.deflate=function(e,t){var r,s,i,u;if(!e||!e.state||5<t||t<0)return e?d(e,c):c;if(s=e.state,!e.output||!e.input&&0!==e.avail_in||666===s.status&&4!==t)return d(e,0===e.avail_out?-5:c);if(s.strm=e,r=s.last_flush,s.last_flush=t,42===s.status)if(2===s.wrap)e.adler=0,y(s,31),y(s,139),y(s,8),s.gzhead?(y(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(s.gzhead.extra?4:0)+(s.gzhead.name?8:0)+(s.gzhead.comment?16:0)),y(s,255&s.gzhead.time),y(s,s.gzhead.time>>8&255),y(s,s.gzhead.time>>16&255),y(s,s.gzhead.time>>24&255),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,255&s.gzhead.os),s.gzhead.extra&&s.gzhead.extra.length&&(y(s,255&s.gzhead.extra.length),y(s,s.gzhead.extra.length>>8&255)),s.gzhead.hcrc&&(e.adler=a(e.adler,s.pending_buf,s.pending,0)),s.gzindex=0,s.status=69):(y(s,0),y(s,0),y(s,0),y(s,0),y(s,0),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,3),s.status=p);else{var h=8+(s.w_bits-8<<4)<<8;h|=(2<=s.strategy||s.level<2?0:s.level<6?1:6===s.level?2:3)<<6,0!==s.strstart&&(h|=32),h+=31-h%31,s.status=p,b(s,h),0!==s.strstart&&(b(s,e.adler>>>16),b(s,65535&e.adler)),e.adler=1}if(69===s.status)if(s.gzhead.extra){for(i=s.pending;s.gzindex<(65535&s.gzhead.extra.length)&&(s.pending!==s.pending_buf_size||(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending!==s.pending_buf_size));)y(s,255&s.gzhead.extra[s.gzindex]),s.gzindex++;s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),s.gzindex===s.gzhead.extra.length&&(s.gzindex=0,s.status=73)}else s.status=73;if(73===s.status)if(s.gzhead.name){i=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending===s.pending_buf_size)){u=1;break}u=s.gzindex<s.gzhead.name.length?255&s.gzhead.name.charCodeAt(s.gzindex++):0,y(s,u)}while(0!==u);s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),0===u&&(s.gzindex=0,s.status=91)}else s.status=91;if(91===s.status)if(s.gzhead.comment){i=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),g(e),i=s.pending,s.pending===s.pending_buf_size)){u=1;break}u=s.gzindex<s.gzhead.comment.length?255&s.gzhead.comment.charCodeAt(s.gzindex++):0,y(s,u)}while(0!==u);s.gzhead.hcrc&&s.pending>i&&(e.adler=a(e.adler,s.pending_buf,s.pending-i,i)),0===u&&(s.status=103)}else s.status=103;if(103===s.status&&(s.gzhead.hcrc?(s.pending+2>s.pending_buf_size&&g(e),s.pending+2<=s.pending_buf_size&&(y(s,255&e.adler),y(s,e.adler>>8&255),e.adler=0,s.status=p)):s.status=p),0!==s.pending){if(g(e),0===e.avail_out)return s.last_flush=-1,0}else if(0===e.avail_in&&f(t)<=f(r)&&4!==t)return d(e,-5);if(666===s.status&&0!==e.avail_in)return d(e,-5);if(0!==e.avail_in||0!==s.lookahead||0!==t&&666!==s.status){var _=2===s.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(v(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}(s,t):3===s.strategy?function(e,t){for(var r,n,s,i,a=e.window;;){if(e.lookahead<=l){if(v(e),e.lookahead<=l&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(n=a[s=e.strstart-1])===a[++s]&&n===a[++s]&&n===a[++s]){i=e.strstart+l;do{}while(n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&s<i);e.match_length=l-(i-s),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(w(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(w(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(w(e,!1),0===e.strm.avail_out)?1:2}(s,t):n[s.level].func(s,t);if(3!==_&&4!==_||(s.status=666),1===_||3===_)return 0===e.avail_out&&(s.last_flush=-1),0;if(2===_&&(1===t?o._tr_align(s):5!==t&&(o._tr_stored_block(s,0,0,!1),3===t&&(m(s.head),0===s.lookahead&&(s.strstart=0,s.block_start=0,s.insert=0))),g(e),0===e.avail_out))return s.last_flush=-1,0}return 4!==t?0:s.wrap<=0?1:(2===s.wrap?(y(s,255&e.adler),y(s,e.adler>>8&255),y(s,e.adler>>16&255),y(s,e.adler>>24&255),y(s,255&e.total_in),y(s,e.total_in>>8&255),y(s,e.total_in>>16&255),y(s,e.total_in>>24&255)):(b(s,e.adler>>>16),b(s,65535&e.adler)),g(e),0<s.wrap&&(s.wrap=-s.wrap),0!==s.pending?0:1)},r.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==p&&666!==t?d(e,c):(e.state=null,t===p?d(e,-3):0):c},r.deflateSetDictionary=function(e,t){var r,n,o,a,u,l,h,p,d=t.length;if(!e||!e.state)return c;if(2===(a=(r=e.state).wrap)||1===a&&42!==r.status||r.lookahead)return c;for(1===a&&(e.adler=i(e.adler,t,d,0)),r.wrap=0,d>=r.w_size&&(0===a&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new s.Buf8(r.w_size),s.arraySet(p,t,d-r.w_size,r.w_size,0),t=p,d=r.w_size),u=e.avail_in,l=e.next_in,h=e.input,e.avail_in=d,e.next_in=0,e.input=t,v(r);r.lookahead>=3;){for(n=r.strstart,o=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--o;);r.strstart=n,r.lookahead=2,v(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=l,e.input=h,e.avail_in=u,r.wrap=a,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,s,o,i,a,u,c,l,h,p,d,f,m,g,w,y,b,_,v,x,T,E,C,A;r=e.state,n=e.next_in,C=e.input,s=n+(e.avail_in-5),o=e.next_out,A=e.output,i=o-(t-e.avail_out),a=o+(e.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,h=r.wnext,p=r.window,d=r.hold,f=r.bits,m=r.lencode,g=r.distcode,w=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{f<15&&(d+=C[n++]<<f,f+=8,d+=C[n++]<<f,f+=8),b=m[d&w];t:for(;;){if(d>>>=_=b>>>24,f-=_,0==(_=b>>>16&255))A[o++]=65535&b;else{if(!(16&_)){if(0==(64&_)){b=m[(65535&b)+(d&(1<<_)-1)];continue t}if(32&_){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}v=65535&b,(_&=15)&&(f<_&&(d+=C[n++]<<f,f+=8),v+=d&(1<<_)-1,d>>>=_,f-=_),f<15&&(d+=C[n++]<<f,f+=8,d+=C[n++]<<f,f+=8),b=g[d&y];r:for(;;){if(d>>>=_=b>>>24,f-=_,!(16&(_=b>>>16&255))){if(0==(64&_)){b=g[(65535&b)+(d&(1<<_)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(x=65535&b,f<(_&=15)&&(d+=C[n++]<<f,(f+=8)<_&&(d+=C[n++]<<f,f+=8)),u<(x+=d&(1<<_)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=_,f-=_,(_=o-i)<x){if(l<(_=x-_)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(E=p,(T=0)===h){if(T+=c-_,_<v){for(v-=_;A[o++]=p[T++],--_;);T=o-x,E=A}}else if(h<_){if(T+=c+h-_,(_-=h)<v){for(v-=_;A[o++]=p[T++],--_;);if(T=0,h<v){for(v-=_=h;A[o++]=p[T++],--_;);T=o-x,E=A}}}else if(T+=h-_,_<v){for(v-=_;A[o++]=p[T++],--_;);T=o-x,E=A}for(;2<v;)A[o++]=E[T++],A[o++]=E[T++],A[o++]=E[T++],v-=3;v&&(A[o++]=E[T++],1<v&&(A[o++]=E[T++]))}else{for(T=o-x;A[o++]=A[T++],A[o++]=A[T++],A[o++]=A[T++],2<(v-=3););v&&(A[o++]=A[T++],1<v&&(A[o++]=A[T++]))}break}}break}}while(n<s&&o<a);n-=v=f>>3,d&=(1<<(f-=v<<3))-1,e.next_in=n,e.next_out=o,e.avail_in=n<s?s-n+5:5-(n-s),e.avail_out=o<a?a-o+257:257-(o-a),r.hold=d,r.bits=f}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),s=e("./adler32"),o=e("./crc32"),i=e("./inffast"),a=e("./inftrees"),u=-2;function c(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function h(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(852),t.distcode=t.distdyn=new n.Buf32(592),t.sane=1,t.back=-1,0):u}function p(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,h(e)):u}function d(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?u:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,p(e))):u}function f(e,t){var r,n;return e?(n=new l,(e.state=n).window=null,0!==(r=d(e,t))&&(e.state=null),r):u}var m,g,w=!0;function y(e){if(w){var t;for(m=new n.Buf32(512),g=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,m,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,g,0,e.work,{bits:5}),w=!1}e.lencode=m,e.lenbits=9,e.distcode=g,e.distbits=5}function b(e,t,r,s){var o,i=e.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new n.Buf8(i.wsize)),s>=i.wsize?(n.arraySet(i.window,t,r-i.wsize,i.wsize,0),i.wnext=0,i.whave=i.wsize):(s<(o=i.wsize-i.wnext)&&(o=s),n.arraySet(i.window,t,r-s,o,i.wnext),(s-=o)?(n.arraySet(i.window,t,r-s,s,0),i.wnext=s,i.whave=i.wsize):(i.wnext+=o,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=o))),0}r.inflateReset=p,r.inflateReset2=d,r.inflateResetKeep=h,r.inflateInit=function(e){return f(e,15)},r.inflateInit2=f,r.inflate=function(e,t){var r,l,h,p,d,f,m,g,w,_,v,x,T,E,C,A,P,S,O,R,k,M,I,N,D=0,F=new n.Buf8(4),j=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return u;12===(r=e.state).mode&&(r.mode=13),d=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,f=e.avail_in,g=r.hold,w=r.bits,_=f,v=m,M=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(2&r.wrap&&35615===g){F[r.check=0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0),w=g=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&g)<<8)+(g>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&g)){e.msg="unknown compression method",r.mode=30;break}if(w-=4,k=8+(15&(g>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&g?10:12,w=g=0;break;case 2:for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(r.flags=g,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=g>>8&1),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0,r.mode=3;case 3:for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.head&&(r.head.time=g),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,F[2]=g>>>16&255,F[3]=g>>>24&255,r.check=o(r.check,F,4,0)),w=g=0,r.mode=4;case 4:for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.head&&(r.head.xflags=255&g,r.head.os=g>>8),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0,r.mode=5;case 5:if(1024&r.flags){for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.length=g,r.head&&(r.head.extra_len=g),512&r.flags&&(F[0]=255&g,F[1]=g>>>8&255,r.check=o(r.check,F,2,0)),w=g=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(f<(x=r.length)&&(x=f),x&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,p,x,k)),512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,r.length-=x),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===f)break e;for(x=0;k=l[p+x++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&x<f;);if(512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===f)break e;for(x=0;k=l[p+x++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&x<f;);if(512&r.flags&&(r.check=o(r.check,l,x,p)),f-=x,p+=x,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;w<16;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}w=g=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}e.adler=r.check=c(g),w=g=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){g>>>=7&w,w-=7&w,r.mode=27;break}for(;w<3;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}switch(r.last=1&g,w-=1,3&(g>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==t)break;g>>>=2,w-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}g>>>=2,w-=2;break;case 14:for(g>>>=7&w,w-=7&w;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if((65535&g)!=(g>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&g,w=g=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(x=r.length){if(f<x&&(x=f),m<x&&(x=m),0===x)break e;n.arraySet(h,l,p,x,d),f-=x,p+=x,m-=x,d+=x,r.length-=x;break}r.mode=12;break;case 17:for(;w<14;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(r.nlen=257+(31&g),g>>>=5,w-=5,r.ndist=1+(31&g),g>>>=5,w-=5,r.ncode=4+(15&g),g>>>=4,w-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;w<3;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.lens[j[r.have++]]=7&g,g>>>=3,w-=3}for(;r.have<19;)r.lens[j[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,I={bits:r.lenbits},M=a(0,r.lens,0,19,r.lencode,0,r.work,I),r.lenbits=I.bits,M){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=(D=r.lencode[g&(1<<r.lenbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(P<16)g>>>=C,w-=C,r.lens[r.have++]=P;else{if(16===P){for(N=C+2;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g>>>=C,w-=C,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],x=3+(3&g),g>>>=2,w-=2}else if(17===P){for(N=C+3;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}w-=C,k=0,x=3+(7&(g>>>=C)),g>>>=3,w-=3}else{for(N=C+7;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}w-=C,k=0,x=11+(127&(g>>>=C)),g>>>=7,w-=7}if(r.have+x>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;x--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,I={bits:r.lenbits},M=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,I),r.lenbits=I.bits,M){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,I={bits:r.distbits},M=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,I),r.distbits=I.bits,M){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=f&&258<=m){e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,i(e,v),d=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,f=e.avail_in,g=r.hold,w=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;A=(D=r.lencode[g&(1<<r.lenbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(A&&0==(240&A)){for(S=C,O=A,R=P;A=(D=r.lencode[R+((g&(1<<S+O)-1)>>S)])>>>16&255,P=65535&D,!(S+(C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}g>>>=S,w-=S,r.back+=S}if(g>>>=C,w-=C,r.back+=C,r.length=P,0===A){r.mode=26;break}if(32&A){r.back=-1,r.mode=12;break}if(64&A){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&A,r.mode=22;case 22:if(r.extra){for(N=r.extra;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.length+=g&(1<<r.extra)-1,g>>>=r.extra,w-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=(D=r.distcode[g&(1<<r.distbits)-1])>>>16&255,P=65535&D,!((C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(0==(240&A)){for(S=C,O=A,R=P;A=(D=r.distcode[R+((g&(1<<S+O)-1)>>S)])>>>16&255,P=65535&D,!(S+(C=D>>>24)<=w);){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}g>>>=S,w-=S,r.back+=S}if(g>>>=C,w-=C,r.back+=C,64&A){e.msg="invalid distance code",r.mode=30;break}r.offset=P,r.extra=15&A,r.mode=24;case 24:if(r.extra){for(N=r.extra;w<N;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}r.offset+=g&(1<<r.extra)-1,g>>>=r.extra,w-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===m)break e;if(x=v-m,r.offset>x){if((x=r.offset-x)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}T=x>r.wnext?(x-=r.wnext,r.wsize-x):r.wnext-x,x>r.length&&(x=r.length),E=r.window}else E=h,T=d-r.offset,x=r.length;for(m<x&&(x=m),m-=x,r.length-=x;h[d++]=E[T++],--x;);0===r.length&&(r.mode=21);break;case 26:if(0===m)break e;h[d++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;w<32;){if(0===f)break e;f--,g|=l[p++]<<w,w+=8}if(v-=m,e.total_out+=v,r.total+=v,v&&(e.adler=r.check=r.flags?o(r.check,h,v,d-v):s(r.check,h,v,d-v)),v=m,(r.flags?g:c(g))!==r.check){e.msg="incorrect data check",r.mode=30;break}w=g=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;w<32;){if(0===f)break e;f--,g+=l[p++]<<w,w+=8}if(g!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}w=g=0}r.mode=29;case 29:M=1;break e;case 30:M=-3;break e;case 31:return-4;case 32:default:return u}return e.next_out=d,e.avail_out=m,e.next_in=p,e.avail_in=f,r.hold=g,r.bits=w,(r.wsize||v!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&b(e,e.output,e.next_out,v-e.avail_out)?(r.mode=31,-4):(_-=e.avail_in,v-=e.avail_out,e.total_in+=_,e.total_out+=v,r.total+=v,r.wrap&&v&&(e.adler=r.check=r.flags?o(r.check,h,v,e.next_out-v):s(r.check,h,v,e.next_out-v)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==_&&0===v||4===t)&&0===M&&(M=-5),M)},r.inflateEnd=function(e){if(!e||!e.state)return u;var t=e.state;return t.window&&(t.window=null),e.state=null,0},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?u:((r.head=t).done=!1,0):u},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?u:11===r.mode&&s(1,t,n,0)!==r.check?-3:b(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),s=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],i=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,u,c,l,h,p){var d,f,m,g,w,y,b,_,v,x=p.bits,T=0,E=0,C=0,A=0,P=0,S=0,O=0,R=0,k=0,M=0,I=null,N=0,D=new n.Buf16(16),F=new n.Buf16(16),j=null,B=0;for(T=0;T<=15;T++)D[T]=0;for(E=0;E<u;E++)D[t[r+E]]++;for(P=x,A=15;1<=A&&0===D[A];A--);if(A<P&&(P=A),0===A)return c[l++]=20971520,c[l++]=20971520,p.bits=1,0;for(C=1;C<A&&0===D[C];C++);for(P<C&&(P=C),T=R=1;T<=15;T++)if(R<<=1,(R-=D[T])<0)return-1;if(0<R&&(0===e||1!==A))return-1;for(F[1]=0,T=1;T<15;T++)F[T+1]=F[T]+D[T];for(E=0;E<u;E++)0!==t[r+E]&&(h[F[t[r+E]]++]=E);if(y=0===e?(I=j=h,19):1===e?(I=s,N-=257,j=o,B-=257,256):(I=i,j=a,-1),T=C,w=l,O=E=M=0,m=-1,g=(k=1<<(S=P))-1,1===e&&852<k||2===e&&592<k)return 1;for(;;){for(b=T-O,v=h[E]<y?(_=0,h[E]):h[E]>y?(_=j[B+h[E]],I[N+h[E]]):(_=96,0),d=1<<T-O,C=f=1<<S;c[w+(M>>O)+(f-=d)]=b<<24|_<<16|v|0,0!==f;);for(d=1<<T-1;M&d;)d>>=1;if(0!==d?(M&=d-1,M+=d):M=0,E++,0==--D[T]){if(T===A)break;T=t[r+h[E]]}if(P<T&&(M&g)!==m){for(0===O&&(O=P),w+=C,R=1<<(S=T-O);S+O<A&&!((R-=D[S+O])<=0);)S++,R<<=1;if(k+=1<<S,1===e&&852<k||2===e&&592<k)return 1;c[m=M&g]=P<<24|S<<16|w-l|0}}return 0!==M&&(c[w+M]=T-O<<24|64<<16|0),p.bits=P,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common");function s(e){for(var t=e.length;0<=--t;)e[t]=0}var o=256,i=286,a=30,u=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);s(d);var f=new Array(60);s(f);var m=new Array(512);s(m);var g=new Array(256);s(g);var w=new Array(29);s(w);var y,b,_,v=new Array(a);function x(e,t,r,n,s){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=s,this.has_stree=e&&e.length}function T(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function E(e){return e<256?m[e]:m[256+(e>>>7)]}function C(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function A(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,C(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function P(e,t,r){A(e,r[2*t],r[2*t+1])}function S(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function O(e,t,r){var n,s,o=new Array(16),i=0;for(n=1;n<=u;n++)o[n]=i=i+r[n-1]<<1;for(s=0;s<=t;s++){var a=e[2*s+1];0!==a&&(e[2*s]=S(o[a]++,a))}}function R(e){var t;for(t=0;t<i;t++)e.dyn_ltree[2*t]=0;for(t=0;t<a;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function k(e){8<e.bi_valid?C(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function M(e,t,r,n){var s=2*t,o=2*r;return e[s]<e[o]||e[s]===e[o]&&n[t]<=n[r]}function I(e,t,r){for(var n=e.heap[r],s=r<<1;s<=e.heap_len&&(s<e.heap_len&&M(t,e.heap[s+1],e.heap[s],e.depth)&&s++,!M(t,n,e.heap[s],e.depth));)e.heap[r]=e.heap[s],r=s,s<<=1;e.heap[r]=n}function N(e,t,r){var n,s,i,a,u=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*u]<<8|e.pending_buf[e.d_buf+2*u+1],s=e.pending_buf[e.l_buf+u],u++,0===n?P(e,s,t):(P(e,(i=g[s])+o+1,t),0!==(a=c[i])&&A(e,s-=w[i],a),P(e,i=E(--n),r),0!==(a=l[i])&&A(e,n-=v[i],a)),u<e.last_lit;);P(e,256,t)}function D(e,t){var r,n,s,o=t.dyn_tree,i=t.stat_desc.static_tree,a=t.stat_desc.has_stree,c=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<c;r++)0!==o[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):o[2*r+1]=0;for(;e.heap_len<2;)o[2*(s=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[s]=0,e.opt_len--,a&&(e.static_len-=i[2*s+1]);for(t.max_code=l,r=e.heap_len>>1;1<=r;r--)I(e,o,r);for(s=c;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],I(e,o,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,o[2*s]=o[2*r]+o[2*n],e.depth[s]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,o[2*r+1]=o[2*n+1]=s,e.heap[1]=s++,I(e,o,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,s,o,i,a,c=t.dyn_tree,l=t.max_code,h=t.stat_desc.static_tree,p=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,f=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(o=0;o<=u;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(o=c[2*c[2*(n=e.heap[r])+1]+1]+1)&&(o=m,g++),c[2*n+1]=o,l<n||(e.bl_count[o]++,i=0,f<=n&&(i=d[n-f]),a=c[2*n],e.opt_len+=a*(o+i),p&&(e.static_len+=a*(h[2*n+1]+i)));if(0!==g){do{for(o=m-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[m]--,g-=2}while(0<g);for(o=m;0!==o;o--)for(n=e.bl_count[o];0!==n;)l<(s=e.heap[--r])||(c[2*s+1]!==o&&(e.opt_len+=(o-c[2*s+1])*c[2*s],c[2*s+1]=o),n--)}}(e,t),O(o,l,e.bl_count)}function F(e,t,r){var n,s,o=-1,i=t[1],a=0,u=7,c=4;for(0===i&&(u=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)s=i,i=t[2*(n+1)+1],++a<u&&s===i||(a<c?e.bl_tree[2*s]+=a:0!==s?(s!==o&&e.bl_tree[2*s]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=s,c=(a=0)===i?(u=138,3):s===i?(u=6,3):(u=7,4))}function j(e,t,r){var n,s,o=-1,i=t[1],a=0,u=7,c=4;for(0===i&&(u=138,c=3),n=0;n<=r;n++)if(s=i,i=t[2*(n+1)+1],!(++a<u&&s===i)){if(a<c)for(;P(e,s,e.bl_tree),0!=--a;);else 0!==s?(s!==o&&(P(e,s,e.bl_tree),a--),P(e,16,e.bl_tree),A(e,a-3,2)):a<=10?(P(e,17,e.bl_tree),A(e,a-3,3)):(P(e,18,e.bl_tree),A(e,a-11,7));o=s,c=(a=0)===i?(u=138,3):s===i?(u=6,3):(u=7,4)}}s(v);var B=!1;function L(e,t,r,s){A(e,0+(s?1:0),3),function(e,t,r,s){k(e),C(e,r),C(e,~r),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r)}r._tr_init=function(e){B||(function(){var e,t,r,n,s,o=new Array(16);for(n=r=0;n<28;n++)for(w[n]=r,e=0;e<1<<c[n];e++)g[r++]=n;for(g[r-1]=n,n=s=0;n<16;n++)for(v[n]=s,e=0;e<1<<l[n];e++)m[s++]=n;for(s>>=7;n<a;n++)for(v[n]=s<<7,e=0;e<1<<l[n]-7;e++)m[256+s++]=n;for(t=0;t<=u;t++)o[t]=0;for(e=0;e<=143;)d[2*e+1]=8,e++,o[8]++;for(;e<=255;)d[2*e+1]=9,e++,o[9]++;for(;e<=279;)d[2*e+1]=7,e++,o[7]++;for(;e<=287;)d[2*e+1]=8,e++,o[8]++;for(O(d,287,o),e=0;e<a;e++)f[2*e+1]=5,f[2*e]=S(e,5);y=new x(d,c,257,i,u),b=new x(f,l,0,a,u),_=new x(new Array(0),h,0,19,7)}(),B=!0),e.l_desc=new T(e.dyn_ltree,y),e.d_desc=new T(e.dyn_dtree,b),e.bl_desc=new T(e.bl_tree,_),e.bi_buf=0,e.bi_valid=0,R(e)},r._tr_stored_block=L,r._tr_flush_block=function(e,t,r,n){var s,i,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<o;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),D(e,e.l_desc),D(e,e.d_desc),a=function(e){var t;for(F(e,e.dyn_ltree,e.l_desc.max_code),F(e,e.dyn_dtree,e.d_desc.max_code),D(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*p[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),s=e.opt_len+3+7>>>3,(i=e.static_len+3+7>>>3)<=s&&(s=i)):s=i=r+5,r+4<=s&&-1!==t?L(e,t,r,n):4===e.strategy||i===s?(A(e,2+(n?1:0),3),N(e,d,f)):(A(e,4+(n?1:0),3),function(e,t,r,n){var s;for(A(e,t-257,5),A(e,r-1,5),A(e,n-4,4),s=0;s<n;s++)A(e,e.bl_tree[2*p[s]+1],3);j(e,e.dyn_ltree,t-1),j(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),N(e,e.dyn_ltree,e.dyn_dtree)),R(e),n&&k(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(g[r]+o+1)]++,e.dyn_dtree[2*E(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){A(e,2,3),P(e,256,d),function(e){16===e.bi_valid?(C(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){"use strict";t.exports="function"==typeof n?n:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)}).call(t,r(6).Buffer,r(4),r(59).setImmediate)},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0});var s=r(12);t.Document=s.File,n(r(12)),n(r(351)),n(r(359))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(24);t.EMPTY_OBJECT=Object.seal({});class s extends n.BaseXmlComponent{constructor(e){super(e),this.root=new Array}prepForXml(e){const r=this.root.filter((e=>e instanceof n.BaseXmlComponent?!e.IsDeleted:void 0!==e)).map((t=>t instanceof n.BaseXmlComponent?t.prepForXml(e):t)).filter((e=>void 0!==e));return{[this.rootKey]:r.length?1===r.length&&(s=r[0],"object"==typeof s&&s._attr)?r[0]:r:t.EMPTY_OBJECT};var s}addChildElement(e){return this.root.push(e),this}delete(){this.deleted=!0}}t.XmlComponent=s,t.IgnoreIfEmptyXmlComponent=class extends s{prepForXml(){const e=super.prepForXml();if(e&&("object"!=typeof e[this.rootKey]||Object.keys(e[this.rootKey]).length))return e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(52);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",color:"w:color",fill:"w:fill",space:"w:space",sz:"w:sz",type:"w:type",rsidR:"w:rsidR",rsidRPr:"w:rsidRPr",rsidSect:"w:rsidSect",w:"w:w",h:"w:h",top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",linePitch:"w:linePitch",pos:"w:pos"}}}t.Attributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(25),s=r(0);function o(e){switch(e.type){case void 0:case"element":const t=new a(e.name,e.attributes),r=e.elements||[];for(const e of r){const r=o(e);void 0!==r&&t.push(r)}return t;case"text":return e.text;default:return}}t.convertToXmlComponent=o;class i extends s.XmlAttributeComponent{}class a extends s.XmlComponent{static fromXmlString(e){return o(n.xml2js(e,{compact:!1}))}constructor(e,t){super(e),t&&this.root.push(new i(t))}push(e){this.root.push(e)}}t.ImportedXmlComponent=a;class u extends s.XmlComponent{constructor(e){super(""),this._attr=e}prepForXml(){return{_attr:this._attr}}}t.ImportedRootElementAttributes=u},function(e,t,r){(function(e){!function(t){t.parser=function(e,t){return new o(e,t)},t.SAXParser=o,t.SAXStream=a,t.createStream=function(e,t){return new a(e,t)},t.MAX_BUFFER_LENGTH=65536;var n,s=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(e,r){if(!(this instanceof o))return new o(e,r);var n=this;!function(e){for(var t=0,r=s.length;t<r;t++)e[s[t]]=""}(n),n.q=n.c="",n.bufferCheckPosition=t.MAX_BUFFER_LENGTH,n.opt=r||{},n.opt.lowercase=n.opt.lowercase||n.opt.lowercasetags,n.looseCase=n.opt.lowercase?"toLowerCase":"toUpperCase",n.tags=[],n.closed=n.closedRoot=n.sawRoot=!1,n.tag=n.error=null,n.strict=!!e,n.noscript=!(!e&&!n.opt.noscript),n.state=T.BEGIN,n.strictEntities=n.opt.strictEntities,n.ENTITIES=n.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),n.attribList=[],n.opt.xmlns&&(n.ns=Object.create(l)),n.trackPosition=!1!==n.opt.position,n.trackPosition&&(n.position=n.line=n.column=0),C(n,"onready")}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t}),o.prototype={end:function(){R(this)},write:function(e){var r=this;if(this.error)throw this.error;if(r.closed)return O(r,"Cannot write after close. Assign an onready handler.");if(null===e)return R(r);"object"==typeof e&&(e=e.toString());for(var n=0,o="";o=L(e,n++),r.c=o,o;)switch(r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++),r.state){case T.BEGIN:if(r.state=T.BEGIN_WHITESPACE,"\ufeff"===o)continue;B(r,o);continue;case T.BEGIN_WHITESPACE:B(r,o);continue;case T.TEXT:if(r.sawRoot&&!r.closedRoot){for(var i=n-1;o&&"<"!==o&&"&"!==o;)(o=L(e,n++))&&r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++);r.textNode+=e.substring(i,n-1)}"<"!==o||r.sawRoot&&r.closedRoot&&!r.strict?(m(o)||r.sawRoot&&!r.closedRoot||k(r,"Text data outside of root node."),"&"===o?r.state=T.TEXT_ENTITY:r.textNode+=o):(r.state=T.OPEN_WAKA,r.startTagPosition=r.position);continue;case T.SCRIPT:"<"===o?r.state=T.SCRIPT_ENDING:r.script+=o;continue;case T.SCRIPT_ENDING:"/"===o?r.state=T.CLOSE_TAG:(r.script+="<"+o,r.state=T.SCRIPT);continue;case T.OPEN_WAKA:if("!"===o)r.state=T.SGML_DECL,r.sgmlDecl="";else if(m(o));else if(y(h,o))r.state=T.OPEN_TAG,r.tagName=o;else if("/"===o)r.state=T.CLOSE_TAG,r.tagName="";else if("?"===o)r.state=T.PROC_INST,r.procInstName=r.procInstBody="";else{if(k(r,"Unencoded <"),r.startTagPosition+1<r.position){var a=r.position-r.startTagPosition;o=new Array(a).join(" ")+o}r.textNode+="<"+o,r.state=T.TEXT}continue;case T.SGML_DECL:"[CDATA["===(r.sgmlDecl+o).toUpperCase()?(A(r,"onopencdata"),r.state=T.CDATA,r.sgmlDecl="",r.cdata=""):r.sgmlDecl+o==="--"?(r.state=T.COMMENT,r.comment="",r.sgmlDecl=""):"DOCTYPE"===(r.sgmlDecl+o).toUpperCase()?(r.state=T.DOCTYPE,(r.doctype||r.sawRoot)&&k(r,"Inappropriately located doctype declaration"),r.doctype="",r.sgmlDecl=""):">"===o?(A(r,"onsgmldeclaration",r.sgmlDecl),r.sgmlDecl="",r.state=T.TEXT):g(o)?(r.state=T.SGML_DECL_QUOTED,r.sgmlDecl+=o):r.sgmlDecl+=o;continue;case T.SGML_DECL_QUOTED:o===r.q&&(r.state=T.SGML_DECL,r.q=""),r.sgmlDecl+=o;continue;case T.DOCTYPE:">"===o?(r.state=T.TEXT,A(r,"ondoctype",r.doctype),r.doctype=!0):(r.doctype+=o,"["===o?r.state=T.DOCTYPE_DTD:g(o)&&(r.state=T.DOCTYPE_QUOTED,r.q=o));continue;case T.DOCTYPE_QUOTED:r.doctype+=o,o===r.q&&(r.q="",r.state=T.DOCTYPE);continue;case T.DOCTYPE_DTD:r.doctype+=o,"]"===o?r.state=T.DOCTYPE:g(o)&&(r.state=T.DOCTYPE_DTD_QUOTED,r.q=o);continue;case T.DOCTYPE_DTD_QUOTED:r.doctype+=o,o===r.q&&(r.state=T.DOCTYPE_DTD,r.q="");continue;case T.COMMENT:"-"===o?r.state=T.COMMENT_ENDING:r.comment+=o;continue;case T.COMMENT_ENDING:"-"===o?(r.state=T.COMMENT_ENDED,r.comment=S(r.opt,r.comment),r.comment&&A(r,"oncomment",r.comment),r.comment=""):(r.comment+="-"+o,r.state=T.COMMENT);continue;case T.COMMENT_ENDED:">"!==o?(k(r,"Malformed comment"),r.comment+="--"+o,r.state=T.COMMENT):r.state=T.TEXT;continue;case T.CDATA:"]"===o?r.state=T.CDATA_ENDING:r.cdata+=o;continue;case T.CDATA_ENDING:"]"===o?r.state=T.CDATA_ENDING_2:(r.cdata+="]"+o,r.state=T.CDATA);continue;case T.CDATA_ENDING_2:">"===o?(r.cdata&&A(r,"oncdata",r.cdata),A(r,"onclosecdata"),r.cdata="",r.state=T.TEXT):"]"===o?r.cdata+="]":(r.cdata+="]]"+o,r.state=T.CDATA);continue;case T.PROC_INST:"?"===o?r.state=T.PROC_INST_ENDING:m(o)?r.state=T.PROC_INST_BODY:r.procInstName+=o;continue;case T.PROC_INST_BODY:if(!r.procInstBody&&m(o))continue;"?"===o?r.state=T.PROC_INST_ENDING:r.procInstBody+=o;continue;case T.PROC_INST_ENDING:">"===o?(A(r,"onprocessinginstruction",{name:r.procInstName,body:r.procInstBody}),r.procInstName=r.procInstBody="",r.state=T.TEXT):(r.procInstBody+="?"+o,r.state=T.PROC_INST_BODY);continue;case T.OPEN_TAG:y(p,o)?r.tagName+=o:(M(r),">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:(m(o)||k(r,"Invalid character in tag name"),r.state=T.ATTRIB));continue;case T.OPEN_TAG_SLASH:">"===o?(D(r,!0),F(r)):(k(r,"Forward-slash in opening tag not followed by >"),r.state=T.ATTRIB);continue;case T.ATTRIB:if(m(o))continue;">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:y(h,o)?(r.attribName=o,r.attribValue="",r.state=T.ATTRIB_NAME):k(r,"Invalid attribute name");continue;case T.ATTRIB_NAME:"="===o?r.state=T.ATTRIB_VALUE:">"===o?(k(r,"Attribute without value"),r.attribValue=r.attribName,N(r),D(r)):m(o)?r.state=T.ATTRIB_NAME_SAW_WHITE:y(p,o)?r.attribName+=o:k(r,"Invalid attribute name");continue;case T.ATTRIB_NAME_SAW_WHITE:if("="===o)r.state=T.ATTRIB_VALUE;else{if(m(o))continue;k(r,"Attribute without value"),r.tag.attributes[r.attribName]="",r.attribValue="",A(r,"onattribute",{name:r.attribName,value:""}),r.attribName="",">"===o?D(r):y(h,o)?(r.attribName=o,r.state=T.ATTRIB_NAME):(k(r,"Invalid attribute name"),r.state=T.ATTRIB)}continue;case T.ATTRIB_VALUE:if(m(o))continue;g(o)?(r.q=o,r.state=T.ATTRIB_VALUE_QUOTED):(k(r,"Unquoted attribute value"),r.state=T.ATTRIB_VALUE_UNQUOTED,r.attribValue=o);continue;case T.ATTRIB_VALUE_QUOTED:if(o!==r.q){"&"===o?r.state=T.ATTRIB_VALUE_ENTITY_Q:r.attribValue+=o;continue}N(r),r.q="",r.state=T.ATTRIB_VALUE_CLOSED;continue;case T.ATTRIB_VALUE_CLOSED:m(o)?r.state=T.ATTRIB:">"===o?D(r):"/"===o?r.state=T.OPEN_TAG_SLASH:y(h,o)?(k(r,"No whitespace between attributes"),r.attribName=o,r.attribValue="",r.state=T.ATTRIB_NAME):k(r,"Invalid attribute name");continue;case T.ATTRIB_VALUE_UNQUOTED:if(!w(o)){"&"===o?r.state=T.ATTRIB_VALUE_ENTITY_U:r.attribValue+=o;continue}N(r),">"===o?D(r):r.state=T.ATTRIB;continue;case T.CLOSE_TAG:if(r.tagName)">"===o?F(r):y(p,o)?r.tagName+=o:r.script?(r.script+="</"+r.tagName,r.tagName="",r.state=T.SCRIPT):(m(o)||k(r,"Invalid tagname in closing tag"),r.state=T.CLOSE_TAG_SAW_WHITE);else{if(m(o))continue;b(h,o)?r.script?(r.script+="</"+o,r.state=T.SCRIPT):k(r,"Invalid tagname in closing tag."):r.tagName=o}continue;case T.CLOSE_TAG_SAW_WHITE:if(m(o))continue;">"===o?F(r):k(r,"Invalid characters in closing tag");continue;case T.TEXT_ENTITY:case T.ATTRIB_VALUE_ENTITY_Q:case T.ATTRIB_VALUE_ENTITY_U:var u,c;switch(r.state){case T.TEXT_ENTITY:u=T.TEXT,c="textNode";break;case T.ATTRIB_VALUE_ENTITY_Q:u=T.ATTRIB_VALUE_QUOTED,c="attribValue";break;case T.ATTRIB_VALUE_ENTITY_U:u=T.ATTRIB_VALUE_UNQUOTED,c="attribValue"}";"===o?(r[c]+=j(r),r.entity="",r.state=u):y(r.entity.length?f:d,o)?r.entity+=o:(k(r,"Invalid character in entity name"),r[c]+="&"+r.entity+o,r.entity="",r.state=u);continue;default:throw new Error(r,"Unknown state: "+r.state)}return r.position>=r.bufferCheckPosition&&function(e){for(var r=Math.max(t.MAX_BUFFER_LENGTH,10),n=0,o=0,i=s.length;o<i;o++){var a=e[s[o]].length;if(a>r)switch(s[o]){case"textNode":P(e);break;case"cdata":A(e,"oncdata",e.cdata),e.cdata="";break;case"script":A(e,"onscript",e.script),e.script="";break;default:O(e,"Max buffer length exceeded: "+s[o])}n=Math.max(n,a)}var u=t.MAX_BUFFER_LENGTH-n;e.bufferCheckPosition=u+e.position}(r),r},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;P(e=this),""!==e.cdata&&(A(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(A(e,"onscript",e.script),e.script="")}};try{n=r(55).Stream}catch(e){n=function(){}}var i=t.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function a(e,t){if(!(this instanceof a))return new a(e,t);n.apply(this),this._parser=new o(e,t),this.writable=!0,this.readable=!0;var r=this;this._parser.onend=function(){r.emit("end")},this._parser.onerror=function(e){r.emit("error",e),r._parser.error=null},this._decoder=null,i.forEach((function(e){Object.defineProperty(r,"on"+e,{get:function(){return r._parser["on"+e]},set:function(t){if(!t)return r.removeAllListeners(e),r._parser["on"+e]=t,t;r.on(e,t)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(n.prototype,{constructor:{value:a}}),a.prototype.write=function(t){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(t)){if(!this._decoder){var n=r(29).StringDecoder;this._decoder=new n("utf8")}t=this._decoder.write(t)}return this._parser.write(t.toString()),this.emit("data",t),!0},a.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},a.prototype.on=function(e,t){var r=this;return r._parser["on"+e]||-1===i.indexOf(e)||(r._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),r.emit.apply(r,t)}),n.prototype.on.call(r,e,t)};var u="http://www.w3.org/XML/1998/namespace",c="http://www.w3.org/2000/xmlns/",l={xml:u,xmlns:c},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function g(e){return'"'===e||"'"===e}function w(e){return">"===e||m(e)}function y(e,t){return e.test(t)}function b(e,t){return!y(e,t)}var _,v,x,T=0;for(var E in t.STATE={BEGIN:T++,BEGIN_WHITESPACE:T++,TEXT:T++,TEXT_ENTITY:T++,OPEN_WAKA:T++,SGML_DECL:T++,SGML_DECL_QUOTED:T++,DOCTYPE:T++,DOCTYPE_QUOTED:T++,DOCTYPE_DTD:T++,DOCTYPE_DTD_QUOTED:T++,COMMENT_STARTING:T++,COMMENT:T++,COMMENT_ENDING:T++,COMMENT_ENDED:T++,CDATA:T++,CDATA_ENDING:T++,CDATA_ENDING_2:T++,PROC_INST:T++,PROC_INST_BODY:T++,PROC_INST_ENDING:T++,OPEN_TAG:T++,OPEN_TAG_SLASH:T++,ATTRIB:T++,ATTRIB_NAME:T++,ATTRIB_NAME_SAW_WHITE:T++,ATTRIB_VALUE:T++,ATTRIB_VALUE_QUOTED:T++,ATTRIB_VALUE_CLOSED:T++,ATTRIB_VALUE_UNQUOTED:T++,ATTRIB_VALUE_ENTITY_Q:T++,ATTRIB_VALUE_ENTITY_U:T++,CLOSE_TAG:T++,CLOSE_TAG_SAW_WHITE:T++,SCRIPT:T++,SCRIPT_ENDING:T++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach((function(e){var r=t.ENTITIES[e],n="number"==typeof r?String.fromCharCode(r):r;t.ENTITIES[e]=n})),t.STATE)t.STATE[t.STATE[E]]=E;function C(e,t,r){e[t]&&e[t](r)}function A(e,t,r){e.textNode&&P(e),C(e,t,r)}function P(e){e.textNode=S(e.opt,e.textNode),e.textNode&&C(e,"ontext",e.textNode),e.textNode=""}function S(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function O(e,t){return P(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,C(e,"onerror",t),e}function R(e){return e.sawRoot&&!e.closedRoot&&k(e,"Unclosed root tag"),e.state!==T.BEGIN&&e.state!==T.BEGIN_WHITESPACE&&e.state!==T.TEXT&&O(e,"Unexpected end"),P(e),e.c="",e.closed=!0,C(e,"onend"),o.call(e,e.strict,e.opt),e}function k(e,t){if("object"!=typeof e||!(e instanceof o))throw new Error("bad call to strictFail");e.strict&&O(e,t)}function M(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,r=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(r.ns=t.ns),e.attribList.length=0,A(e,"onopentagstart",r)}function I(e,t){var r=e.indexOf(":")<0?["",e]:e.split(":"),n=r[0],s=r[1];return t&&"xmlns"===e&&(n="xmlns",s=""),{prefix:n,local:s}}function N(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=I(e.attribName,!0),r=t.prefix,n=t.local;if("xmlns"===r)if("xml"===n&&e.attribValue!==u)k(e,"xml: prefix must be bound to "+u+"\nActual: "+e.attribValue);else if("xmlns"===n&&e.attribValue!==c)k(e,"xmlns: prefix must be bound to "+c+"\nActual: "+e.attribValue);else{var s=e.tag,o=e.tags[e.tags.length-1]||e;s.ns===o.ns&&(s.ns=Object.create(o.ns)),s.ns[n]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,A(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function D(e,t){if(e.opt.xmlns){var r=e.tag,n=I(e.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(k(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),r.uri=n.prefix);var s=e.tags[e.tags.length-1]||e;r.ns&&s.ns!==r.ns&&Object.keys(r.ns).forEach((function(t){A(e,"onopennamespace",{prefix:t,uri:r.ns[t]})}));for(var o=0,i=e.attribList.length;o<i;o++){var a=e.attribList[o],u=a[0],c=a[1],l=I(u,!0),h=l.prefix,p=l.local,d=""===h?"":r.ns[h]||"",f={name:u,value:c,prefix:h,local:p,uri:d};h&&"xmlns"!==h&&!d&&(k(e,"Unbound namespace prefix: "+JSON.stringify(h)),f.uri=h),e.tag.attributes[u]=f,A(e,"onattribute",f)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),A(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=T.TEXT:e.state=T.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function F(e){if(!e.tagName)return k(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=T.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=T.SCRIPT);A(e,"onscript",e.script),e.script=""}var t=e.tags.length,r=e.tagName;e.strict||(r=r[e.looseCase]());for(var n=r;t--&&e.tags[t].name!==n;)k(e,"Unexpected close tag");if(t<0)return k(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=T.TEXT);e.tagName=r;for(var s=e.tags.length;s-- >t;){var o=e.tag=e.tags.pop();e.tagName=e.tag.name,A(e,"onclosetag",e.tagName);var i={};for(var a in o.ns)i[a]=o.ns[a];var u=e.tags[e.tags.length-1]||e;e.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(t){var r=o.ns[t];A(e,"onclosenamespace",{prefix:t,uri:r})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=T.TEXT}function j(e){var t,r=e.entity,n=r.toLowerCase(),s="";return e.ENTITIES[r]?e.ENTITIES[r]:e.ENTITIES[n]?e.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),s=(t=parseInt(r,16)).toString(16)):(r=r.slice(1),s=(t=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(t)||s.toLowerCase()!==r?(k(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function B(e,t){"<"===t?(e.state=T.OPEN_WAKA,e.startTagPosition=e.position):m(t)||(k(e,"Non-whitespace before first tag."),e.textNode=t,e.state=T.TEXT)}function L(e,t){var r="";return t<e.length&&(r=e.charAt(t)),r}T=t.STATE,String.fromCodePoint||(_=String.fromCharCode,v=Math.floor,x=function(){var e,t,r=16384,n=[],s=-1,o=arguments.length;if(!o)return"";for(var i="";++s<o;){var a=Number(arguments[s]);if(!isFinite(a)||a<0||a>1114111||v(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(e=55296+((a-=65536)>>10),t=a%1024+56320,n.push(e,t)),(s+1===o||n.length>r)&&(i+=_.apply(null,n),n.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:x,configurable:!0,writable:!0}):String.fromCodePoint=x)}(t)}).call(t,r(6).Buffer)},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){for(var t,r=c(e),n=r[0],i=r[1],a=new o(function(e,t,r){return 3*(t+r)/4-r}(0,n,i)),u=0,l=i>0?n-4:n,h=0;h<l;h+=4)t=s[e.charCodeAt(h)]<<18|s[e.charCodeAt(h+1)]<<12|s[e.charCodeAt(h+2)]<<6|s[e.charCodeAt(h+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;return 2===i&&(t=s[e.charCodeAt(h)]<<2|s[e.charCodeAt(h+1)]>>4,a[u++]=255&t),1===i&&(t=s[e.charCodeAt(h)]<<10|s[e.charCodeAt(h+1)]<<4|s[e.charCodeAt(h+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t),a},t.fromByteArray=function(e){for(var t,r=e.length,s=r%3,o=[],i=16383,a=0,u=r-s;a<u;a+=i)o.push(l(e,a,a+i>u?u:a+i));return 1===s?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===s&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),o.join("")};for(var n=[],s=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=i.length;a<u;++a)n[a]=i[a],s[i.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var s,o,i=[],a=t;a<r;a+=3)s=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(n[(o=s)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return i.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,s){var o,i,a=8*s-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?s-1:0,p=r?-1:1,d=e[t+h];for(h+=p,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=p,l-=8);for(i=o&(1<<-l)-1,o>>=-l,l+=n;l>0;i=256*i+e[t+h],h+=p,l-=8);if(0===o)o=1-c;else{if(o===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,n),o-=c}return(d?-1:1)*i*Math.pow(2,o-n)},t.write=function(e,t,r,n,s,o){var i,a,u,c=8*o-s-1,l=(1<<c)-1,h=l>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,f=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=l):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=l?(a=0,i=l):i+h>=1?(a=(t*u-1)*Math.pow(2,s),i+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;e[r+d]=255&a,d+=f,a/=256,s-=8);for(i=i<<s|a,c+=s;c>0;e[r+d]=255&i,d+=f,i/=256,c-=8);e[r+d-f]|=128*m}},function(e,t){},function(e,t,r){"use strict";var n=r(16).Buffer,s=r(147);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,s=n.allocUnsafe(e>>>0),o=this.head,i=0;o;)t=s,r=i,o.data.copy(t,r),i+=o.data.length,o=o.next;return s},e}(),s&&s.inspect&&s.inspect.custom&&(e.exports.prototype[s.inspect.custom]=function(){var e=s.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,s,o,i,a,u=1,c={},l=!1,h=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){f(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(i="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(i)&&f(+t.data.slice(i.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),n=function(t){e.postMessage(i+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){f(e.data)},n=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):n=function(e){setTimeout(f,0,e)},p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var s={callback:e,args:t};return c[u]=s,n(u),u++},p.clearImmediate=d}function d(e){delete c[e]}function f(e){if(l)setTimeout(f,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{d(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,r(4),r(13))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(t,r(4))},function(e,t,r){"use strict";e.exports=o;var n=r(60),s=r(14);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}s.inherits=r(7),s.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(28)},function(e,t,r){e.exports=r(5)},function(e,t,r){e.exports=r(27).Transform},function(e,t,r){e.exports=r(27).PassThrough},function(e,t,r){var n=r(30),s=r(53);e.exports=function(e,t){var r,o,i;return r=function(e){var t=n.copyOptions(e);return n.ensureSpacesExists(t),t}(t),o=s(e,r),i="compact"in r&&r.compact?"_parent":"parent",("addParent"in r&&r.addParent?JSON.stringify(o,(function(e,t){return e===i?"_":t}),r.spaces):JSON.stringify(o,null,r.spaces)).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}},function(e,t,r){(function(t){var n=r(61);e.exports=function(e,r){e instanceof t&&(e=e.toString());var s=null;if("string"==typeof e)try{s=JSON.parse(e)}catch(e){throw new Error("The JSON structure is invalid")}else s=e;return n(s,r)}}).call(t,r(6).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND3=""},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e,t){super(e),t&&(this.root=t.root)}}t.InitializableXmlComponent=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={val:"w:val",color:"w:color",space:"w:space",sz:"w:sz"}}}t.BorderAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("PAGE")}}t.Page=i;class a extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("NUMPAGES")}}t.NumberOfPages=a;class u extends s.XmlComponent{constructor(){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("SECTIONPAGES")}}t.NumberOfPagesSection=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(17),s=r(70);class o extends n.Run{constructor(e){if("string"==typeof e)return super({}),void this.root.push(new s.Text(e));super(e)}}t.TextRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(17),s=r(163);class o extends n.Run{constructor(e){if("string"==typeof e)return super({}),void this.root.push(new s.Symbol(e));super(e),this.root.push(new s.Symbol(e.char,e.symbolfont))}}t.SymbolRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={char:"w:char",symbolfont:"w:font"}}}class o extends n.XmlComponent{constructor(e="",t="Wingdings"){super("w:sym"),this.root.push(new s({char:e,symbolfont:t}))}}t.Symbol=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(71),s=r(3);class o extends s.Run{constructor(e,t){super({});const r=new n.Drawing(e,t);this.root.push(r)}}t.PictureRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(166),o=r(209);class i extends n.XmlComponent{constructor(e,t={}){super("w:drawing"),t.floating?this.root.push(new s.Anchor(e,e.dimensions,t)):(this.inline=new o.Inline(e,e.dimensions),this.root.push(this.inline))}scale(e,t){this.inline.scale(e,t)}}t.Drawing=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(167)),n(r(80))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(72),o=r(75),i=r(35),a=r(76),u=r(77),c=r(78),l=r(79),h=r(80),p={allowOverlap:!0,behindDocument:!1,lockAnchor:!1,layoutInCell:!0,verticalPosition:{},horizontalPosition:{}};class d extends n.XmlComponent{constructor(e,t,r){super("wp:anchor");const n=Object.assign({margins:{top:0,bottom:0,left:0,right:0}},p,r.floating);if(this.root.push(new h.AnchorAttributes({distT:n.margins.top||0,distB:n.margins.bottom||0,distL:n.margins.left||0,distR:n.margins.right||0,simplePos:"0",allowOverlap:!0===n.allowOverlap?"1":"0",behindDoc:!0===n.behindDocument?"1":"0",locked:!0===n.lockAnchor?"1":"0",layoutInCell:!0===n.layoutInCell?"1":"0",relativeHeight:t.emus.y})),this.root.push(new s.SimplePos),this.root.push(new s.HorizontalPosition(n.horizontalPosition)),this.root.push(new s.VerticalPosition(n.verticalPosition)),this.root.push(new c.Extent(t.emus.x,t.emus.y)),this.root.push(new u.EffectExtent),void 0!==r.floating&&void 0!==r.floating.wrap)switch(r.floating.wrap.type){case i.TextWrappingType.SQUARE:this.root.push(new i.WrapSquare(r.floating.wrap,r.floating.margins));break;case i.TextWrappingType.TIGHT:this.root.push(new i.WrapTight(r.floating.margins));break;case i.TextWrappingType.TOP_AND_BOTTOM:this.root.push(new i.WrapTopAndBottom(r.floating.margins));break;case i.TextWrappingType.NONE:default:this.root.push(new i.WrapNone)}else this.root.push(new i.WrapNone);this.root.push(new a.DocProperties),this.root.push(new l.GraphicFrameProperties),this.root.push(new o.Graphic(e,t.emus.x,t.emus.y))}}t.Anchor=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"}}}class o extends n.XmlComponent{constructor(){super("wp:simplePos"),this.root.push(new s({x:0,y:0}))}}t.SimplePos=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(73),o=r(34),i=r(74);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"}}}class u extends n.XmlComponent{constructor(e){if(super("wp:positionH"),this.root.push(new a({relativeFrom:e.relative||o.HorizontalPositionRelativeFrom.PAGE})),e.align)this.root.push(new s.Align(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new i.PositionOffset(e.offset))}}}t.HorizontalPosition=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(73),o=r(34),i=r(74);class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"}}}class u extends n.XmlComponent{constructor(e){if(super("wp:positionV"),this.root.push(new a({relativeFrom:e.relative||o.VerticalPositionRelativeFrom.PAGE})),e.align)this.root.push(new s.Align(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new i.PositionOffset(e.offset))}}}t.VerticalPosition=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(172);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={a:"xmlns:a"}}}class i extends n.XmlComponent{constructor(e,t,r){super("a:graphic"),this.root.push(new o({a:"http://schemas.openxmlformats.org/drawingml/2006/main"})),this.data=new s.GraphicData(e,t,r),this.root.push(this.data)}setXY(e,t){this.data.setXY(e,t)}}t.Graphic=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(173))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(174),o=r(175);class i extends n.XmlComponent{constructor(e,t,r){super("a:graphicData"),this.root.push(new s.GraphicDataAttributes({uri:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.pic=new o.Pic(e,t,r),this.root.push(this.pic)}setXY(e,t){this.pic.setXY(e,t)}}t.GraphicData=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={uri:"uri"}}}t.GraphicDataAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(176))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(177),o=r(181),i=r(187),a=r(188);class u extends n.XmlComponent{constructor(e,t,r){super("pic:pic"),this.root.push(new i.PicAttributes({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.shapeProperties=new a.ShapeProperties(t,r),this.root.push(new o.NonVisualPicProperties),this.root.push(new s.BlipFill(e)),this.root.push(new a.ShapeProperties(t,r))}setXY(e,t){this.shapeProperties.setXY(e,t)}}t.Pic=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(178),o=r(179),i=r(180);class a extends n.XmlComponent{constructor(e){super("pic:blipFill"),this.root.push(new s.Blip(e)),this.root.push(new o.SourceRectangle),this.root.push(new i.Stretch)}}t.BlipFill=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={embed:"r:embed",cstate:"cstate"}}}class o extends n.XmlComponent{constructor(e){super("a:blip"),this.root.push(new s({embed:`rId{${e.fileName}}`,cstate:"none"}))}}t.Blip=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:srcRect")}}t.SourceRectangle=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:fillRect")}}class o extends n.XmlComponent{constructor(){super("a:stretch"),this.root.push(new s)}}t.Stretch=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(182),o=r(185);class i extends n.XmlComponent{constructor(){super("pic:nvPicPr"),this.root.push(new o.NonVisualProperties),this.root.push(new s.ChildNonVisualProperties)}}t.NonVisualPicProperties=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(183);class o extends n.XmlComponent{constructor(){super("pic:cNvPicPr"),this.root.push(new s.PicLocks)}}t.ChildNonVisualProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(184);class o extends n.XmlComponent{constructor(){super("a:picLocks"),this.root.push(new s.PicLocksAttributes({noChangeAspect:1,noChangeArrowheads:1}))}}t.PicLocks=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={noChangeAspect:"noChangeAspect",noChangeArrowheads:"noChangeArrowheads"}}}t.PicLocksAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(186);class o extends n.XmlComponent{constructor(){super("pic:cNvPr"),this.root.push(new s.NonVisualPropertiesAttributes({id:0,name:"",descr:""}))}}t.NonVisualProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"desc"}}}t.NonVisualPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:pic"}}}t.PicAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(189),o=r(195),i=r(198);class a extends n.XmlComponent{constructor(e,t){super("pic:spPr"),this.root.push(new i.ShapePropertiesAttributes({bwMode:"auto"})),this.form=new s.Form(e,t),this.root.push(this.form),this.root.push(new o.PresetGeometry)}setXY(e,t){this.form.setXY(e,t)}}t.ShapeProperties=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(190))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(191),o=r(193);class i extends n.XmlComponent{constructor(e,t){super("a:xfrm"),this.extents=new s.Extents(e,t),this.root.push(this.extents),this.root.push(new o.Offset)}setXY(e,t){this.extents.setXY(e,t)}}t.Form=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(192);class o extends n.XmlComponent{constructor(e,t){super("a:ext"),this.attributes=new s.ExtentsAttributes({cx:e,cy:t}),this.root.push(this.attributes)}setXY(e,t){this.attributes.set({cx:e,cy:t})}}t.Extents=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"}}}t.ExtentsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(194);class o extends n.XmlComponent{constructor(){super("a:off"),this.root.push(new s.OffsetAttributes({x:0,y:0}))}}t.Offset=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"}}}t.OffsetAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(196),o=r(197);class i extends n.XmlComponent{constructor(){super("a:prstGeom"),this.root.push(new o.PresetGeometryAttributes({prst:"rect"})),this.root.push(new s.AdjustmentValues)}}t.PresetGeometry=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("a:avLst")}}t.AdjustmentValues=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={prst:"prst"}}}t.PresetGeometryAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={bwMode:"bwMode"}}}t.ShapePropertiesAttributes=s},function(e,t,r){"use strict";var n,s;Object.defineProperty(t,"__esModule",{value:!0}),(s=t.TextWrappingType||(t.TextWrappingType={}))[s.NONE=0]="NONE",s[s.SQUARE=1]="SQUARE",s[s.TIGHT=2]="TIGHT",s[s.TOP_AND_BOTTOM=3]="TOP_AND_BOTTOM",(n=t.TextWrappingSide||(t.TextWrappingSide={})).BOTH_SIDES="bothSides",n.LEFT="left",n.RIGHT="right",n.LARGEST="largest"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("wp:wrapNone")}}t.WrapNone=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(35);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",wrapText:"wrapText"}}}class i extends n.XmlComponent{constructor(e,t={top:0,bottom:0,left:0,right:0}){super("wp:wrapSquare"),this.root.push(new o({wrapText:e.side||s.TextWrappingSide.BOTH_SIDES,distT:t.top,distB:t.bottom,distL:t.left,distR:t.right}))}}t.WrapSquare=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"}}}class o extends n.XmlComponent{constructor(e={top:0,bottom:0}){super("wp:wrapTight"),this.root.push(new s({distT:e.top,distB:e.bottom}))}}t.WrapTight=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"}}}class o extends n.XmlComponent{constructor(e={top:0,bottom:0}){super("wp:wrapTopAndBottom"),this.root.push(new s({distT:e.top,distB:e.bottom}))}}t.WrapTopAndBottom=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"descr"}}}t.DocPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={b:"b",l:"l",r:"r",t:"t"}}}t.EffectExtentAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"}}}t.ExtentAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(208);class o extends n.XmlComponent{constructor(){super("a:graphicFrameLocks"),this.root.push(new s.GraphicFrameLockAttributes({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/main",noChangeAspect:1}))}}t.GraphicFrameLocks=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:a",noChangeAspect:"noChangeAspect"}}}t.GraphicFrameLockAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(210))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(76),o=r(77),i=r(78),a=r(79),u=r(75),c=r(211);class l extends n.XmlComponent{constructor(e,t){super("wp:inline"),this.dimensions=t,this.root.push(new c.InlineAttributes({distT:0,distB:0,distL:0,distR:0})),this.extent=new i.Extent(t.emus.x,t.emus.y),this.graphic=new u.Graphic(e,t.emus.x,t.emus.y),this.root.push(this.extent),this.root.push(new o.EffectExtent),this.root.push(new s.DocProperties),this.root.push(new a.GraphicFrameProperties),this.root.push(this.graphic)}scale(e,t){const r=Math.round(this.dimensions.emus.x*e),n=Math.round(this.dimensions.emus.y*t);this.extent.setXY(r,n),this.graphic.setXY(r,n)}}t.Inline=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR"}}}t.InlineAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3),s=r(18),o=r(213);class i extends n.Run{constructor(e){super({}),this.root.push(new s.Begin(!0)),this.root.push(new o.SequentialIdentifierInstruction(e)),this.root.push(new s.Separate),this.root.push(new s.End)}}t.SequentialIdentifier=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:instrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(`SEQ ${e}`)}}t.SequentialIdentifierInstruction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:tab")}}t.Tab=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(36),o=r(21),i=r(3);class a extends n.XmlComponent{constructor(e){if(super("w:p"),"string"==typeof e)return this.properties=new o.ParagraphProperties({}),this.root.push(this.properties),void this.root.push(new i.TextRun(e));if(e instanceof i.PictureRun)return this.properties=new o.ParagraphProperties({}),this.root.push(this.properties),void this.root.push(e);if(this.properties=new o.ParagraphProperties(e),this.root.push(this.properties),e.text&&this.root.push(new i.TextRun(e.text)),e.children)for(const t of e.children)t instanceof s.Bookmark?(this.root.push(t.start),this.root.push(t.text),this.root.push(t.end)):this.root.push(t)}prepForXml(e){for(const t of this.root)if(t instanceof s.HyperlinkRef){const r=this.root.indexOf(t);this.root[r]=e.HyperlinkCache[t.id]}return super.prepForXml()}addRunToFront(e){return this.root.splice(1,0,e),this}}t.Paragraph=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(3),o=r(217);var i;(i=t.HyperlinkType||(t.HyperlinkType={})).INTERNAL="INTERNAL",i.EXTERNAL="EXTERNAL",t.HyperlinkRef=class{constructor(e){this.id=e}};class a extends n.XmlComponent{constructor(e,t,r){super("w:hyperlink"),this.linkId=t;const n={history:1,anchor:r||void 0,id:r?void 0:`rId${this.linkId}`},i=new o.HyperlinkAttributes(n);this.root.push(i),this.textRun=new s.TextRun({text:e,style:"Hyperlink"}),this.root.push(this.textRun)}get TextRun(){return this.textRun}}t.Hyperlink=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"r:id",history:"w:history",anchor:"w:anchor"}}}t.HyperlinkAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(85),o=r(3),i=r(227);t.Bookmark=class{constructor(e,t){const r=s.generate().toLowerCase();this.start=new a(e,r),this.text=new o.TextRun(t),this.end=new u(r)}};class a extends n.XmlComponent{constructor(e,t){super("w:bookmarkStart");const r=new i.BookmarkStartAttributes({name:e,id:t});this.root.push(r)}}t.BookmarkStart=a;class u extends n.XmlComponent{constructor(e){super("w:bookmarkEnd");const t=new i.BookmarkEndAttributes({id:e});this.root.push(t)}}t.BookmarkEnd=u},function(e,t,r){"use strict";var n=r(20),s=r(221),o=r(225),i=r(226)||0;function a(){return s(i)}e.exports=a,e.exports.generate=a,e.exports.seed=function(t){return n.seed(t),e.exports},e.exports.worker=function(t){return i=t,e.exports},e.exports.characters=function(e){return void 0!==e&&n.characters(e),n.shuffled()},e.exports.isValid=o},function(e,t,r){"use strict";var n=1;e.exports={nextValue:function(){return(n=(9301*n+49297)%233280)/233280},seed:function(e){n=e}}},function(e,t,r){"use strict";var n,s,o=r(222);r(20),e.exports=function(e){var t="",r=Math.floor(.001*(Date.now()-1567752802062));return r===s?n++:(n=0,s=r),t+=o(7),t+=o(e),n>0&&(t+=o(n)),t+o(r)}},function(e,t,r){"use strict";var n=r(20),s=r(223),o=r(224);e.exports=function(e){for(var t,r=0,i="";!t;)i+=o(s,n.get(),1),t=e<Math.pow(16,r+1),r++;return i}},function(e,t,r){"use strict";var n,s="object"==typeof window&&(window.crypto||window.msCrypto);n=s&&s.getRandomValues?function(e){return s.getRandomValues(new Uint8Array(e))}:function(e){for(var t=[],r=0;r<e;r++)t.push(Math.floor(256*Math.random()));return t},e.exports=n},function(e,t){e.exports=function(e,t,r){for(var n=(2<<Math.log(t.length-1)/Math.LN2)-1,s=Math.ceil(1.6*n*r/t.length),o="";;)for(var i=s,a=e(i);i--;)if((o+=t[a[i]&n]||"").length===+r)return o}},function(e,t,r){"use strict";var n=r(20);e.exports=function(e){return!(!e||"string"!=typeof e||e.length<6||new RegExp("[^"+n.get().replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")+"]").test(e))}},function(e,t,r){"use strict";e.exports=0},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id",name:"w:name"}}}t.BookmarkStartAttributes=s;class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id"}}}t.BookmarkEndAttributes=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:outlineLvl"),this.level=e,this.root.push(new n.Attributes({val:e}))}}t.OutlineLevel=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:bidi")}}t.Bidirectional=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(231)),n(r(232)),n(r(234)),n(r(2)),n(r(239)),n(r(248)),n(r(249)),n(r(252)),n(r(254))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:oMath");for(const t of e.children)this.root.push(t)}}t.Math=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(233);class o extends n.XmlComponent{constructor(e){super("m:r"),this.root.push(new s.MathText(e))}}t.MathRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("m:t"),this.root.push(e)}}t.MathText=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(235)),n(r(86)),n(r(87))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(86),o=r(87);class i extends n.XmlComponent{constructor(e){super("m:f"),this.root.push(new o.MathNumerator(e.numerator)),this.root.push(new s.MathDenominator(e.denominator))}}t.MathFraction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:subHide"),this.root.push(new s({hide:1}))}}t.MathSubScriptHide=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:supHide"),this.root.push(new s({hide:1}))}}t.MathSuperScriptHide=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(89),o=r(91),i=r(92),a=r(93);class u extends n.XmlComponent{constructor(e){super("m:nary"),this.root.push(new o.MathNArayProperties("∑",!!e.superScript,!!e.subScript)),e.subScript&&this.root.push(new i.MathSubScriptElement(e.subScript)),e.superScript&&this.root.push(new a.MathSuperScriptElement(e.superScript)),this.root.push(new s.MathBase(e.children))}}t.MathSum=u},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(240)),n(r(242)),n(r(244)),n(r(246))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(241)),n(r(94))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(94);class i extends n.XmlComponent{constructor(e){super("m:sSup"),this.root.push(new o.MathSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathSuperScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(243)),n(r(95))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(95);class i extends n.XmlComponent{constructor(e){super("m:sSub"),this.root.push(new o.MathSubScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript))}}t.MathSubScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(245)),n(r(96))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(96);class i extends n.XmlComponent{constructor(e){super("m:sSubSup"),this.root.push(new o.MathSubSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathSubSuperScript=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(247)),n(r(97))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(97);class i extends n.XmlComponent{constructor(e){super("m:sPre"),this.root.push(new o.MathPreSubSuperScriptProperties),this.root.push(new s.MathBase(e.children)),this.root.push(new s.MathSubScriptElement(e.subScript)),this.root.push(new s.MathSuperScriptElement(e.superScript))}}t.MathPreSubSuperScript=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND4=""},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(98)),n(r(250)),n(r(99))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(98),i=r(99);class a extends n.XmlComponent{constructor(e){super("m:rad"),this.root.push(new i.MathRadicalProperties(!!e.degree)),this.root.push(new o.MathDegree(e.degree)),this.root.push(new s.MathBase(e.children))}}t.MathRadical=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"}}}class o extends n.XmlComponent{constructor(){super("m:degHide"),this.root.push(new s({hide:1}))}}t.MathDegreeHide=o},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(253)),n(r(100)),n(r(101))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(100),i=r(101);class a extends n.XmlComponent{constructor(e){super("m:func"),this.root.push(new i.MathFunctionProperties),this.root.push(new o.MathFunctionName(e.name)),this.root.push(new s.MathBase(e.children))}}t.MathFunction=a},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(255)),n(r(258)),n(r(259)),n(r(260))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties),this.root.push(new s.MathBase(e.children))}}t.MathRoundBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={character:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:begChr"),this.root.push(new s({character:e}))}}t.MathBeginningCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={character:"m:val"}}}class o extends n.XmlComponent{constructor(e){super("m:endChr"),this.root.push(new s({character:e}))}}t.MathEndingCharacter=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"[",endingCharacter:"]"})),this.root.push(new s.MathBase(e.children))}}t.MathSquareBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"{",endingCharacter:"}"})),this.root.push(new s.MathBase(e.children))}}t.MathCurlyBrackets=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(2),o=r(22);class i extends n.XmlComponent{constructor(e){super("m:d"),this.root.push(new o.MathBracketProperties({beginningCharacter:"〈",endingCharacter:"〉"})),this.root.push(new s.MathBase(e.children))}}t.MathAngledBrackets=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(262)),n(r(10)),n(r(102)),n(r(38)),n(r(277))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(263),o=r(10),i=r(102);class a extends n.XmlComponent{constructor({rows:e,width:t,columnWidths:r=Array(Math.max(...e.map((e=>e.CellCount)))).fill(100),margins:{marginUnitType:n,top:a,bottom:u,right:c,left:l}={marginUnitType:o.WidthType.AUTO,top:0,bottom:0,right:0,left:0},float:h,layout:p,borders:d,alignment:f}){super("w:tbl"),this.properties=new i.TableProperties,this.root.push(this.properties),d?this.properties.setBorder(d):this.properties.setBorder({}),t?this.properties.setWidth(t.size,t.type):this.properties.setWidth(100),this.properties.CellMargin.addBottomMargin(u||0,n),this.properties.CellMargin.addTopMargin(a||0,n),this.properties.CellMargin.addLeftMargin(l||0,n),this.properties.CellMargin.addRightMargin(c||0,n),this.root.push(new s.TableGrid(r));for(const t of e)this.root.push(t);e.forEach(((t,r)=>{if(r===e.length-1)return;let n=0;t.cells.forEach((t=>{if(t.options.rowSpan&&t.options.rowSpan>1){const s=new o.TableCell({rowSpan:t.options.rowSpan-1,columnSpan:t.options.columnSpan,borders:t.options.borders,children:[],verticalMerge:o.VerticalMergeType.CONTINUE});e[r+1].addCellToColumnIndex(s,n)}n+=t.options.columnSpan||1}))})),h&&this.properties.setTableFloatProperties(h),p&&this.properties.setLayout(p),f&&this.properties.setAlignment(f)}}t.Table=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:tblGrid");for(const t of e)this.root.push(new i(t))}}t.TableGrid=s;class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={w:"w:w"}}}class i extends n.XmlComponent{constructor(e){super("w:gridCol"),void 0!==e&&this.root.push(new o({w:e}))}}t.GridCol=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(0),o=r(37),i=r(265);class a extends s.XmlComponent{constructor(e){super("w:tc"),this.options=e,this.properties=new i.TableCellProperties,this.root.push(this.properties);for(const t of e.children)this.root.push(t);e.verticalAlign&&this.properties.setVerticalAlign(e.verticalAlign),e.textDirection&&this.properties.setTextDirection(e.textDirection),e.verticalMerge?this.properties.addVerticalMerge(e.verticalMerge):e.rowSpan&&e.rowSpan>1&&this.properties.addVerticalMerge(o.VerticalMergeType.RESTART),e.margins&&this.properties.addMargins(e.margins),e.shading&&this.properties.setShading(e.shading),e.columnSpan&&this.properties.addGridSpan(e.columnSpan),e.width&&this.properties.setWidth(e.width.size,e.width.type),e.borders&&(e.borders.top&&this.properties.Borders.addTopBorder(e.borders.top.style,e.borders.top.size,e.borders.top.color),e.borders.bottom&&this.properties.Borders.addBottomBorder(e.borders.bottom.style,e.borders.bottom.size,e.borders.bottom.color),e.borders.left&&this.properties.Borders.addLeftBorder(e.borders.left.style,e.borders.left.size,e.borders.left.color),e.borders.right&&this.properties.Borders.addRightBorder(e.borders.right.style,e.borders.right.size,e.borders.right.color))}prepForXml(e){return this.root[this.root.length-1]instanceof n.Paragraph||this.root.push(new n.Paragraph({})),super.prepForXml(e)}}t.TableCell=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(38),o=r(267),i=r(37);class a extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tcPr"),this.cellBorder=new i.TableCellBorders,this.root.push(this.cellBorder)}get Borders(){return this.cellBorder}addGridSpan(e){return this.root.push(new i.GridSpan(e)),this}addVerticalMerge(e){return this.root.push(new i.VerticalMerge(e)),this}setVerticalAlign(e){return this.root.push(new i.VAlign(e)),this}setWidth(e,t=i.WidthType.AUTO){return this.root.push(new i.TableCellWidth(e,t)),this}setShading(e){return this.root.push(new s.TableShading(e)),this}addMargins(e){return this.root.push(new o.TableCellMargin(e)),this}setTextDirection(e){return this.root.push(new i.TDirection(e)),this}}t.TableCellProperties=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={fill:"w:fill",color:"w:color",val:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:shd"),this.root.push(new s(e))}}var i;t.TableShading=o,(i=t.ShadingType||(t.ShadingType={})).CLEAR="clear",i.DIAGONAL_CROSS="diagCross",i.DIAGONAL_STRIPE="diagStripe",i.HORIZONTAL_CROSS="horzCross",i.HORIZONTAL_STRIPE="horzStripe",i.NIL="nil",i.PERCENT_5="pct5",i.PERCENT_10="pct10",i.PERCENT_12="pct12",i.PERCENT_15="pct15",i.PERCENT_20="pct20",i.PERCENT_25="pct25",i.PERCENT_30="pct30",i.PERCENT_35="pct35",i.PERCENT_37="pct37",i.PERCENT_40="pct40",i.PERCENT_45="pct45",i.PERCENT_50="pct50",i.PERCENT_55="pct55",i.PERCENT_60="pct60",i.PERCENT_62="pct62",i.PERCENT_65="pct65",i.PERCENT_70="pct70",i.PERCENT_75="pct75",i.PERCENT_80="pct80",i.PERCENT_85="pct85",i.PERCENT_87="pct87",i.PERCENT_90="pct90",i.PERCENT_95="pct95",i.REVERSE_DIAGONAL_STRIPE="reverseDiagStripe",i.SOLID="solid",i.THIN_DIAGONAL_CROSS="thinDiagCross",i.THIN_DIAGONAL_STRIPE="thinDiagStripe",i.THIN_HORIZONTAL_CROSS="thinHorzCross",i.THIN_REVERSE_DIAGONAL_STRIPE="thinReverseDiagStripe",i.THIN_VERTICAL_STRIPE="thinVertStripe",i.VERTICAL_STRIPE="vertStripe"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(268);class o extends n.XmlComponent{constructor({top:e=0,left:t=0,right:r=0,bottom:n=0}){super("w:tcMar"),this.root.push(new s.TopCellMargin(e)),this.root.push(new s.BottomCellMargin(n)),this.root.push(new s.RightCellMargin(r)),this.root.push(new s.LeftCellMargin(t))}}t.TableCellMargin=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={width:"w:w",type:"w:type"}}}class o extends n.XmlComponent{constructor(e){super("w:top"),this.root.push(new s({width:e,type:"dxa"}))}}t.TopCellMargin=o;class i extends n.XmlComponent{constructor(e){super("w:bottom"),this.root.push(new s({width:e,type:"dxa"}))}}t.BottomCellMargin=i;class a extends n.XmlComponent{constructor(e){super("w:start"),this.root.push(new s({width:e,type:"dxa"}))}}t.LeftCellMargin=a;class u extends n.XmlComponent{constructor(e){super("w:end"),this.root.push(new s({width:e,type:"dxa"}))}}t.RightCellMargin=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(1),o=r(38),i=r(10),a=r(103),u=r(275),c=r(108),l=r(110),h=r(276);class p extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tblPr"),this.cellMargin=new u.TableCellMargin,this.root.push(this.cellMargin)}setWidth(e,t=i.WidthType.AUTO){return this.root.push(new h.PreferredTableWidth(t,e)),this}setLayout(e){this.root.push(new l.TableLayout(e))}setBorder(e){return this.root.push(new a.TableBorders(e)),this}get CellMargin(){return this.cellMargin}setTableFloatProperties(e){return this.root.push(new c.TableFloatProperties(e)),this}setShading(e){return this.root.push(new o.TableShading(e)),this}setAlignment(e){this.root.push(new s.Alignment(e))}}t.TableProperties=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(104);!function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(272));class o extends n.XmlComponent{constructor(e){if(super("w:styles"),e.initialStyles&&this.root.push(e.initialStyles),e.importedStyles)for(const t of e.importedStyles)this.root.push(t);if(e.paragraphStyles)for(const t of e.paragraphStyles)this.root.push(new s.StyleForParagraph(t));if(e.characterStyles)for(const t of e.characterStyles)this.root.push(new s.StyleForCharacter(t))}}t.Styles=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(19),s=r(42),o=r(41);class i extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{basedOn:"Normal",next:"Normal",quickFormat:!0}))}}t.HeadingStyle=i,t.TitleStyle=class extends i{constructor(e){super(Object.assign({},e,{id:"Title",name:"Title"}))}},t.Heading1Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading1",name:"Heading 1"}))}},t.Heading2Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading2",name:"Heading 2"}))}},t.Heading3Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading3",name:"Heading 3"}))}},t.Heading4Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading4",name:"Heading 4"}))}},t.Heading5Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading5",name:"Heading 5"}))}},t.Heading6Style=class extends i{constructor(e){super(Object.assign({},e,{id:"Heading6",name:"Heading 6"}))}};class a extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{id:"ListParagraph",name:"List Paragraph",basedOn:"Normal",quickFormat:!0}))}}t.ListParagraph=a;class u extends o.StyleForParagraph{constructor(e){super(Object.assign({},e,{id:"FootnoteText",name:"footnote text",link:"FootnoteTextChar",basedOn:"Normal",uiPriority:99,semiHidden:!0,unhideWhenUsed:!0,paragraph:{spacing:{after:0,line:240,lineRule:"auto"}},run:{size:20}}))}}t.FootnoteText=u;class c extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"FootnoteReference",name:"footnote reference",basedOn:"DefaultParagraphFont",semiHidden:!0,run:{superScript:!0}}))}}t.FootnoteReferenceStyle=c;class l extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"FootnoteTextChar",name:"Footnote Text Char",basedOn:"DefaultParagraphFont",link:"FootnoteText",semiHidden:!0,run:{size:20}}))}}t.FootnoteTextChar=l;class h extends s.StyleForCharacter{constructor(e){super(Object.assign({},e,{id:"Hyperlink",name:"Hyperlink",basedOn:"DefaultParagraphFont",run:{color:"0563C1",underline:{type:n.UnderlineType.SINGLE}}}))}}t.HyperlinkStyle=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(273))},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),(n=t.BorderStyle||(t.BorderStyle={})).SINGLE="single",n.DASH_DOT_STROKED="dashDotStroked",n.DASHED="dashed",n.DASH_SMALL_GAP="dashSmallGap",n.DOT_DASH="dotDash",n.DOT_DOT_DASH="dotDotDash",n.DOTTED="dotted",n.DOUBLE="double",n.DOUBLE_WAVE="doubleWave",n.INSET="inset",n.NIL="nil",n.NONE="none",n.OUTSET="outset",n.THICK="thick",n.THICK_THIN_LARGE_GAP="thickThinLargeGap",n.THICK_THIN_MEDIUM_GAP="thickThinMediumGap",n.THICK_THIN_SMALL_GAP="thickThinSmallGap",n.THIN_THICK_LARGE_GAP="thinThickLargeGap",n.THIN_THICK_MEDIUM_GAP="thinThickMediumGap",n.THIN_THICK_SMALL_GAP="thinThickSmallGap",n.THIN_THICK_THIN_LARGE_GAP="thinThickThinLargeGap",n.THIN_THICK_THIN_MEDIUM_GAP="thinThickThinMediumGap",n.THIN_THICK_THIN_SMALL_GAP="thinThickThinSmallGap",n.THREE_D_EMBOSS="threeDEmboss",n.THREE_D_ENGRAVE="threeDEngrave",n.TRIPLE="triple",n.WAVE="wave"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(106),o=r(107);class i extends n.XmlComponent{constructor(e){super("w:docDefaults"),this.runPropertiesDefaults=new o.RunPropertiesDefaults(e&&e.run),this.paragraphPropertiesDefaults=new s.ParagraphPropertiesDefaults(e&&e.paragraph),this.root.push(this.runPropertiesDefaults),this.root.push(this.paragraphPropertiesDefaults)}}t.DocumentDefaults=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:w",type:"w:type"}}}class i extends n.XmlComponent{setProperties(e,t=s.WidthType.DXA){this.root.push(new o({type:t,value:e}))}}class a extends n.IgnoreIfEmptyXmlComponent{constructor(){super("w:tblCellMar")}addTopMargin(e,t=s.WidthType.DXA){const r=new i("w:top");r.setProperties(e,t),this.root.push(r)}addLeftMargin(e,t=s.WidthType.DXA){const r=new i("w:left");r.setProperties(e,t),this.root.push(r)}addBottomMargin(e,t=s.WidthType.DXA){const r=new i("w:bottom");r.setProperties(e,t),this.root.push(r)}addRightMargin(e,t=s.WidthType.DXA){const r=new i("w:right");r.setProperties(e,t),this.root.push(r)}}t.TableCellMargin=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10);class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",w:"w:w"}}}class i extends n.XmlComponent{constructor(e,t){super("w:tblW");const r=e===s.WidthType.PERCENTAGE?`${t}%`:t;this.root.push(new o({type:e,w:r}))}}t.PreferredTableWidth=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(278)),n(r(111)),n(r(112))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(10),o=r(111);class i extends n.XmlComponent{constructor(e){super("w:tr"),this.options=e,this.properties=new o.TableRowProperties,this.root.push(this.properties);for(const t of e.children)this.root.push(t);e.cantSplit&&this.properties.setCantSplit(),e.tableHeader&&this.properties.setTableHeader(),e.height&&this.properties.setHeight(e.height.height,e.height.rule)}get CellCount(){return this.options.children.length}get Children(){return this.options.children}get cells(){return this.root.filter((e=>e instanceof s.TableCell))}addCellToIndex(e,t){this.root.splice(t+1,0,e)}addCellToColumnIndex(e,t){const r=this.columnIndexToRootIndex(t,!0);this.addCellToIndex(e,r-1)}rootIndexToColumnIndex(e){if(e<1||e>=this.root.length)throw new Error("cell 'rootIndex' should between 1 to "+(this.root.length-1));let t=0;for(let r=1;r<e;r++)t+=this.root[r].options.columnSpan||1;return t}columnIndexToRootIndex(e,t=!1){if(e<0)throw new Error("cell 'columnIndex' should not less than zero");let r=0,n=1;for(;r<=e;){if(n>=this.root.length){if(t)return this.root.length;throw new Error("cell 'columnIndex' should not great than "+(r-1))}const e=this.root[n];n+=1,r+=e&&e.options.columnSpan||1}return n-1}}t.TableRow=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(85),s=r(280),o=r(282),i=r(288),a=r(113),u=r(128),c=r(44),l=r(130),h=r(131),p=r(47),d=r(48),f=r(132),m=r(1),g=r(45),w=r(46),y=r(331),b=r(23),_=r(336),v=r(337);t.File=class{constructor(e={creator:"Un-named",revision:"1",lastModifiedBy:"Un-named"},t={},r=[]){if(this.currentRelationshipId=1,this.headers=[],this.footers=[],this.hyperlinkCache={},this.coreProperties=new i.CoreProperties(e),this.numbering=new f.Numbering(e.numbering?e.numbering:{config:[]}),this.docRelationships=new g.Relationships,this.fileRelationships=new g.Relationships,this.appProperties=new s.AppProperties,this.footNotes=new l.FootNotes,this.contentTypes=new o.ContentTypes,this.document=new a.Document({background:e.background||{}}),this.settings=new y.Settings,this.media=t.template&&t.template.media?t.template.media:new d.Media,t.template&&(this.currentRelationshipId=t.template.currentRelationshipId+1),t.template&&e.externalStyles)throw Error("can not use both template and external styles");if(t.template){const e=new _.ExternalStylesFactory;this.styles=e.newInstance(t.template.styles)}else if(e.externalStyles){const t=new _.ExternalStylesFactory;this.styles=t.newInstance(e.externalStyles)}else if(e.styles){const t=(new v.DefaultStylesFactory).newInstance();this.styles=new b.Styles(Object.assign({},t,e.styles))}else{const e=new v.DefaultStylesFactory;this.styles=new b.Styles(e.newInstance())}if(this.addDefaultRelationships(),t.template&&t.template.headers)for(const e of t.template.headers)this.addHeaderToDocument(e.header,e.type);if(t.template&&t.template.footers)for(const e of t.template.footers)this.addFooterToDocument(e.footer,e.type);for(const e of r){this.document.Body.addSection(e.properties?e.properties:{});for(const t of e.children)if(t instanceof m.HyperlinkRef){const e=this.hyperlinkCache[t.id];this.document.add(e)}else this.document.add(t)}if(e.footnotes)for(const t of e.footnotes)this.footNotes.createFootNote(t);if(e.hyperlinks){const t={};for(const r in e.hyperlinks){if(!e.hyperlinks[r])continue;const n=e.hyperlinks[r],s=n.type===m.HyperlinkType.EXTERNAL?this.createHyperlink(n.link,n.text):this.createInternalHyperLink(r,n.text);t[r]=s}this.hyperlinkCache=t}e.features&&e.features.trackRevisions&&this.settings.addTrackRevisions()}addSection({headers:e={default:new h.Header},footers:t={default:new h.Header},margins:r={},size:n={},properties:s,children:o}){this.document.Body.addSection(Object.assign({},s,{headers:{default:e.default?this.createHeader(e.default):this.createHeader(new h.Header),first:e.first?this.createHeader(e.first):void 0,even:e.even?this.createHeader(e.even):void 0},footers:{default:t.default?this.createFooter(t.default):this.createFooter(new h.Footer),first:t.first?this.createFooter(t.first):void 0,even:t.even?this.createFooter(t.even):void 0}},r,n));for(const e of o)if(e instanceof m.HyperlinkRef){const t=this.hyperlinkCache[e.id];this.document.add(t)}else this.document.add(e)}verifyUpdateFields(){this.document.getTablesOfContents().length&&this.settings.addUpdateFields()}createHyperlink(e,t=e){const r=new m.Hyperlink(t,n.generate().toLowerCase());return this.docRelationships.createRelationship(r.linkId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",e,w.TargetModeType.EXTERNAL),r}createInternalHyperLink(e,t=e){return new m.Hyperlink(t,n.generate().toLowerCase(),e)}createHeader(e){const t=new p.HeaderWrapper(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addHeaderToDocument(t),t}createFooter(e){const t=new c.FooterWrapper(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addFooterToDocument(t),t}addHeaderToDocument(e,t=u.HeaderReferenceType.DEFAULT){this.headers.push({header:e,type:t}),this.docRelationships.createRelationship(e.Header.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header",`header${this.headers.length}.xml`),this.contentTypes.addHeader(this.headers.length)}addFooterToDocument(e,t=u.FooterReferenceType.DEFAULT){this.footers.push({footer:e,type:t}),this.docRelationships.createRelationship(e.Footer.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer",`footer${this.footers.length}.xml`),this.contentTypes.addFooter(this.footers.length)}addDefaultRelationships(){this.fileRelationships.createRelationship(1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument","word/document.xml"),this.fileRelationships.createRelationship(2,"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties","docProps/core.xml"),this.fileRelationships.createRelationship(3,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties","docProps/app.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles","styles.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering","numbering.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes","footnotes.xml"),this.docRelationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings","settings.xml")}get Document(){return this.document}get Styles(){return this.styles}get CoreProperties(){return this.coreProperties}get Numbering(){return this.numbering}get Media(){return this.media}get DocumentRelationships(){return this.docRelationships}get FileRelationships(){return this.fileRelationships}get Headers(){return this.headers.map((e=>e.header))}get Footers(){return this.footers.map((e=>e.footer))}get ContentTypes(){return this.contentTypes}get AppProperties(){return this.appProperties}get FootNotes(){return this.footNotes}get Settings(){return this.settings}get HyperlinkCache(){return this.hyperlinkCache}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(281);class o extends n.XmlComponent{constructor(){super("Properties"),this.root.push(new s.AppPropertiesAttributes({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"}))}}t.AppProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns",vt:"xmlns:vt"}}}t.AppPropertiesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(283),o=r(284),i=r(286);class a extends n.XmlComponent{constructor(){super("Types"),this.root.push(new s.ContentTypeAttributes({xmlns:"http://schemas.openxmlformats.org/package/2006/content-types"})),this.root.push(new o.Default("image/png","png")),this.root.push(new o.Default("image/jpeg","jpeg")),this.root.push(new o.Default("image/jpeg","jpg")),this.root.push(new o.Default("image/bmp","bmp")),this.root.push(new o.Default("image/gif","gif")),this.root.push(new o.Default("application/vnd.openxmlformats-package.relationships+xml","rels")),this.root.push(new o.Default("application/xml","xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml","/word/document.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml","/word/styles.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-package.core-properties+xml","/docProps/core.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.extended-properties+xml","/docProps/app.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml","/word/numbering.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml","/word/footnotes.xml")),this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml","/word/settings.xml"))}addFooter(e){this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml",`/word/footer${e}.xml`))}addHeader(e){this.root.push(new i.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml",`/word/header${e}.xml`))}}t.ContentTypes=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"}}}t.ContentTypeAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(285);class o extends n.XmlComponent{constructor(e,t){super("Default"),this.root.push(new s.DefaultAttributes({contentType:e,extension:t}))}}t.Default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",extension:"Extension"}}}t.DefaultAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(287);class o extends n.XmlComponent{constructor(e,t){super("Override"),this.root.push(new s.OverrideAttributes({contentType:e,partName:t}))}}t.Override=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",partName:"PartName"}}}t.OverrideAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(289))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(11),o=r(290);class i extends n.XmlComponent{constructor(e){super("cp:coreProperties"),this.root.push(new s.DocumentAttributes({cp:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",xsi:"http://www.w3.org/2001/XMLSchema-instance"})),e.title&&this.root.push(new o.Title(e.title)),e.subject&&this.root.push(new o.Subject(e.subject)),e.creator&&this.root.push(new o.Creator(e.creator)),e.keywords&&this.root.push(new o.Keywords(e.keywords)),e.description&&this.root.push(new o.Description(e.description)),e.lastModifiedBy&&this.root.push(new o.LastModifiedBy(e.lastModifiedBy)),e.revision&&this.root.push(new o.Revision(e.revision)),this.root.push(new o.Created),this.root.push(new o.Modified)}}t.CoreProperties=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(11);class o extends n.XmlComponent{constructor(e){super("dc:title"),this.root.push(e)}}t.Title=o;class i extends n.XmlComponent{constructor(e){super("dc:subject"),this.root.push(e)}}t.Subject=i;class a extends n.XmlComponent{constructor(e){super("dc:creator"),this.root.push(e)}}t.Creator=a;class u extends n.XmlComponent{constructor(e){super("cp:keywords"),this.root.push(e)}}t.Keywords=u;class c extends n.XmlComponent{constructor(e){super("dc:description"),this.root.push(e)}}t.Description=c;class l extends n.XmlComponent{constructor(e){super("cp:lastModifiedBy"),this.root.push(e)}}t.LastModifiedBy=l;class h extends n.XmlComponent{constructor(e){super("cp:revision"),this.root.push(e)}}t.Revision=h;class p extends n.XmlComponent{getCurrentDate(){const e=new Date;return e.getFullYear()+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+("0"+e.getDate()).slice(-2)+"T"+("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"Z"}}t.DateComponent=p,t.Created=class extends p{constructor(){super("dcterms:created"),this.root.push(new s.DocumentAttributes({type:"dcterms:W3CDTF"})),this.root.push(this.getCurrentDate())}},t.Modified=class extends p{constructor(){super("dcterms:modified"),this.root.push(new s.DocumentAttributes({type:"dcterms:W3CDTF"})),this.root.push(this.getCurrentDate())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(114),o=r(11),i=r(129);class a extends n.XmlComponent{constructor(e){super("w:document"),this.root.push(new o.DocumentAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.body=new s.Body,this.root.push(new i.DocumentBackground(e.background)),this.root.push(this.body)}add(e){return this.body.push(e),this}get Body(){return this.body}getTablesOfContents(){return this.body.getTablesOfContents()}}t.Document=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(115);class i extends n.XmlComponent{constructor(){super("w:body"),this.sections=[]}addSection(e){const t=this.sections.pop();this.root.push(this.createSectionParagraph(t)),this.sections.push(new o.SectionProperties(e))}prepForXml(e){return 1===this.sections.length&&(this.root.splice(0,1),this.root.push(this.sections.pop())),super.prepForXml(e)}push(e){this.root.push(e)}getTablesOfContents(){return this.root.filter((e=>e instanceof s.TableOfContents))}createSectionParagraph(e){const t=new s.Paragraph({}),r=new s.ParagraphProperties({});return r.push(e),t.addChildElement(r),t}}t.Body=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(294);class o extends n.XmlComponent{constructor(e,t){super("w:cols"),this.root.push(new s.ColumnsAttributes({space:e,num:t}))}}t.Columns=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"w:space",num:"w:num"}}}t.ColumnsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(296);class o extends n.XmlComponent{constructor(e){super("w:docGrid"),this.root.push(new s.DocGridAttributes({linePitch:e}))}}t.DocumentGrid=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={linePitch:"w:linePitch"}}}t.DocGridAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.LineNumberRestartFormat||(t.LineNumberRestartFormat={})).CONTINUOUS="continuous",s.NEW_SECTION="newSection",s.NEW_PAGE="newPage";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={lineNumberCountBy:"w:countBy",lineNumberStart:"w:start",lineNumberRestart:"w:restart",lineNumberDistance:"w:distance"}}}t.LineNumberAttributes=o;class i extends n.XmlComponent{constructor(e,t,r,n){super("w:lnNumType"),this.root.push(new o({lineNumberCountBy:e,lineNumberStart:t,lineNumberRestart:r,lineNumberDistance:n}))}}t.LineNumberType=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s,o,i;(i=t.PageBorderDisplay||(t.PageBorderDisplay={})).ALL_PAGES="allPages",i.FIRST_PAGE="firstPage",i.NOT_FIRST_PAGE="notFirstPage",(o=t.PageBorderOffsetFrom||(t.PageBorderOffsetFrom={})).PAGE="page",o.TEXT="text",(s=t.PageBorderZOrder||(t.PageBorderZOrder={})).BACK="back",s.FRONT="front";class a extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={style:"w:val",size:"w:size",color:"w:color",space:"w:space"}}}class u extends n.XmlComponent{constructor(e,t){super(e),this.root.push(new a(t))}}class c extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={display:"w:display",offsetFrom:"w:offsetFrom",zOrder:"w:zOrder"}}}class l extends n.IgnoreIfEmptyXmlComponent{constructor(e){if(super("w:pgBorders"),!e)return;let t={};e.pageBorders&&(t={display:e.pageBorders.display,offsetFrom:e.pageBorders.offsetFrom,zOrder:e.pageBorders.zOrder}),this.root.push(new c(t)),e.pageBorderTop&&this.root.push(new u("w:top",e.pageBorderTop)),e.pageBorderRight&&this.root.push(new u("w:right",e.pageBorderRight)),e.pageBorderBottom&&this.root.push(new u("w:bottom",e.pageBorderBottom)),e.pageBorderLeft&&this.root.push(new u("w:left",e.pageBorderLeft))}}t.PageBorders=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(300);class o extends n.XmlComponent{constructor(e,t,r,n,o,i,a,u){super("w:pgMar"),this.root.push(new s.PageMarginAttributes({top:e,right:t,bottom:r,left:n,header:o,footer:i,gutter:a,mirror:u}))}}t.PageMargin=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",mirror:"w:mirrorMargins"}}}t.PageMarginAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);var s;(s=t.PageNumberFormat||(t.PageNumberFormat={})).CARDINAL_TEXT="cardinalText",s.DECIMAL="decimal",s.DECIMAL_ENCLOSED_CIRCLE="decimalEnclosedCircle",s.DECIMAL_ENCLOSED_FULL_STOP="decimalEnclosedFullstop",s.DECIMAL_ENCLOSED_PAREN="decimalEnclosedParen",s.DECIMAL_ZERO="decimalZero",s.LOWER_LETTER="lowerLetter",s.LOWER_ROMAN="lowerRoman",s.NONE="none",s.ORDINAL_TEXT="ordinalText",s.UPPER_LETTER="upperLetter",s.UPPER_ROMAN="upperRoman",s.DECIMAL_FULL_WIDTH="decimalFullWidth";class o extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={pageNumberStart:"w:start",pageNumberFormatType:"w:fmt"}}}t.PageNumberTypeAttributes=o;class i extends n.XmlComponent{constructor(e,t){super("w:pgNumType"),this.root.push(new o({pageNumberStart:e,pageNumberFormatType:t}))}}t.PageNumberType=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(303);class o extends n.XmlComponent{constructor(){super("w:titlePg"),this.root.push(new s.TitlePageAttributes({value:"1"}))}}t.TitlePage=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={value:"w:val"}}}t.TitlePageAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(127);var o;(o=t.SectionVerticalAlignValue||(t.SectionVerticalAlignValue={})).BOTH="both",o.BOTTOM="bottom",o.CENTER="center",o.TOP="top";class i extends n.XmlComponent{constructor(e){super("w:vAlign"),this.root.push(new s.SectionVerticalAlignAttributes({verticalAlign:e}))}}t.SectionVerticalAlign=i},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(125)),n(r(43))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={color:"w:color",themeColor:"w:themeColor",themeShade:"w:themeShade",themeTint:"w:themeTint"}}}t.DocumentBackgroundAttributes=s;class o extends n.XmlComponent{constructor(e){super("w:background"),this.root.push(new s({color:e.color?e.color:"FFFFFF",themeColor:e.themeColor,themeShade:e.themeShade,themeTint:e.themeTint}))}}t.DocumentBackground=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(308);class o extends n.InitializableXmlComponent{constructor(e,t){super("w:ftr",t),this.refId=e,t||this.root.push(new s.FooterAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}}t.Footer=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"}}}t.FooterAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(310),o=r(46);class i extends n.XmlComponent{constructor(){super("Relationships"),this.root.push(new s.RelationshipsAttributes({xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"}))}addRelationship(e){this.root.push(e)}createRelationship(e,t,r,n){const s=new o.Relationship(`rId${e}`,t,r,n);return this.addRelationship(s),s}get RelationshipCount(){return this.root.length-1}}t.Relationships=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"}}}t.RelationshipsAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"Id",type:"Type",target:"Target",targetMode:"TargetMode"}}}t.RelationshipAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(1),o=r(313),i=r(317),a=r(319),u=r(321);class c extends n.XmlComponent{constructor(){super("w:footnotes"),this.currentId=1,this.root.push(new u.FootnotesAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const e=new o.Footnote(-1,o.FootnoteType.SEPERATOR);e.add(new s.Paragraph({spacing:{after:0,line:240,lineRule:"auto"},children:[new a.SeperatorRun]})),this.root.push(e);const t=new o.Footnote(0,o.FootnoteType.CONTINUATION_SEPERATOR);t.add(new s.Paragraph({spacing:{after:0,line:240,lineRule:"auto"},children:[new i.ContinuationSeperatorRun]})),this.root.push(t)}createFootNote(e){const t=new o.Footnote(this.currentId);t.add(e),this.root.push(t),this.currentId++}}t.FootNotes=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(314),o=r(315);var i;(i=t.FootnoteType||(t.FootnoteType={})).SEPERATOR="separator",i.CONTINUATION_SEPERATOR="continuationSeparator";class a extends n.XmlComponent{constructor(e,t){super("w:footnote"),this.root.push(new s.FootnoteAttributes({type:t,id:e}))}add(e){e.addRunToFront(new o.FootnoteRefRun),this.root.push(e)}}t.Footnote=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"w:id"}}}t.FootnoteAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(316);class o extends n.Run{constructor(){super({style:"FootnoteReference"}),this.root.push(new s.FootnoteRef)}}t.FootnoteRefRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:footnoteRef")}}t.FootnoteRef=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(318);class o extends n.Run{constructor(){super({}),this.root.push(new s.ContinuationSeperator)}}t.ContinuationSeperatorRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:continuationSeparator")}}t.ContinuationSeperator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(320);class o extends n.Run{constructor(){super({}),this.root.push(new s.Seperator)}}t.SeperatorRun=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:separator")}}t.Seperator=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"}}}t.FootnotesAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(323))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(324))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3),s=r(69),o=r(0);class i extends o.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={id:"w:id"}}}t.FootNoteReferenceRunAttributes=i;class a extends o.XmlComponent{constructor(e){super("w:footnoteReference"),this.root.push(new i({id:e}))}}t.FootnoteReference=a;class u extends n.Run{constructor(e){super({}),this.properties.push(new s.Style("FootnoteReference")),this.root.push(new a(e))}}t.FootnoteReferenceRun=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(326);class o extends n.InitializableXmlComponent{constructor(e,t){super("w:hdr",t),this.refId=e,t||this.root.push(new s.HeaderAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}}t.Header=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",w16cid:"xmlns:w16cid",w16se:"xmlns:w16se"}}}t.HeaderAttributes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class s{static addImage(e,t,r,s,o){const i=e.Media.addMedia(t,r,s);return new n.PictureRun(i,o)}static generateId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}constructor(){this.map=new Map}getMedia(e){const t=this.map.get(e);if(void 0===t)throw new Error(`Cannot find image with the key ${e}`);return t}addMedia(e,t=100,r=100){const n=`${s.generateId()}.png`;return this.createMedia(n,{width:t,height:r},e)}createMedia(e,t,r,n){const s={stream:"string"==typeof r?this.convertDataURIToBinary(r):r,path:n,fileName:e,dimensions:{pixels:{x:Math.round(t.width),y:Math.round(t.height)},emus:{x:Math.round(9525*t.width),y:Math.round(9525*t.height)}}};return this.map.set(e,s),s}get Array(){const e=new Array;return this.map.forEach((t=>{e.push(t)})),e}convertDataURIToBinary(e){const t=";base64,",n=e.indexOf(t)+t.length;return"function"==typeof atob?new Uint8Array(atob(e.substring(n)).split("").map((e=>e.charCodeAt(0)))):new(r(6).Buffer)(e,"base64")}}t.Media=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND2=""},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(0),o=r(11),i=r(133),a=r(134);class u extends s.XmlComponent{constructor(e){super("w:numbering"),this.abstractNumbering=[],this.concreteNumbering=[],this.root.push(new o.DocumentAttributes({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.nextId=0;const t=this.createAbstractNumbering([{level:0,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:720,hanging:360}}}},{level:1,format:"bullet",text:"○",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:1440,hanging:360}}}},{level:2,format:"bullet",text:"■",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2160,hanging:360}}}},{level:3,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2880,hanging:360}}}},{level:4,format:"bullet",text:"○",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:3600,hanging:360}}}},{level:5,format:"bullet",text:"■",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:4320,hanging:360}}}},{level:6,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:5040,hanging:360}}}},{level:7,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:5760,hanging:360}}}},{level:8,format:"bullet",text:"●",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:6480,hanging:360}}}}]);this.createConcreteNumbering(t);for(const t of e.config){const e=this.createAbstractNumbering(t.levels);this.createConcreteNumbering(e,t.reference)}}prepForXml(){return this.abstractNumbering.forEach((e=>this.root.push(e))),this.concreteNumbering.forEach((e=>this.root.push(e))),super.prepForXml()}createConcreteNumbering(e,t){const r=new a.ConcreteNumbering(this.nextId++,e.id,t);return this.concreteNumbering.push(r),r}createAbstractNumbering(e){const t=new i.AbstractNumbering(this.nextId++,e);return this.abstractNumbering.push(t),t}get ConcreteNumbering(){return this.concreteNumbering}}t.Numbering=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(e){super("w:multiLevelType"),this.root.push(new n.Attributes({val:e}))}}t.MultiLevelType=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(332)),n(r(135))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(333),o=r(334),i=r(335),a=r(135);class u extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"}}}t.SettingsAttributes=u;class c extends n.XmlComponent{constructor(){super("w:settings"),this.root.push(new u({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.compatibility=new s.Compatibility,this.trackRevisions=new i.TrackRevisions,this.root.push(new o.DisplayBackgroundShape)}addUpdateFields(){this.root.find((e=>e instanceof a.UpdateFields))||this.addChildElement(new a.UpdateFields)}addCompatibility(){return this.root.find((e=>e instanceof s.Compatibility))||this.addChildElement(this.compatibility),this.compatibility}addTrackRevisions(){return this.root.find((e=>e instanceof i.TrackRevisions))||this.addChildElement(this.trackRevisions),this.trackRevisions}}t.Settings=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:doNotExpandShiftReturn")}}class o extends n.XmlComponent{constructor(){super("w:compat")}doNotExpandShiftReturn(){return this.root.push(new s),this}}t.Compatibility=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:displayBackgroundShape")}}t.DisplayBackgroundShape=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:trackRevisions")}}t.TrackRevisions=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(25),o=r(23);t.ExternalStylesFactory=class{newInstance(e){const t=s.xml2js(e,{compact:!1});let r;for(const e of t.elements||[])"w:styles"===e.name&&(r=e);if(void 0===r)throw new Error("can not find styles element");const i=r.elements||[];return new o.Styles({initialStyles:new n.ImportedRootElementAttributes(r.attributes),importedStyles:i.map((e=>n.convertToXmlComponent(e)))})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(11),s=r(105),o=r(104);t.DefaultStylesFactory=class{newInstance(){return{initialStyles:new n.DocumentAttributes({mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",Ignorable:"w14 w15"}),importedStyles:[new s.DocumentDefaults,new o.TitleStyle({run:{size:56}}),new o.Heading1Style({run:{color:"2E74B5",size:32}}),new o.Heading2Style({run:{color:"2E74B5",size:26}}),new o.Heading3Style({run:{color:"1F4D78",size:24}}),new o.Heading4Style({run:{color:"2E74B5",italics:!0}}),new o.Heading5Style({run:{color:"2E74B5"}}),new o.Heading6Style({run:{color:"1F4D78"}}),new o.ListParagraph({}),new o.HyperlinkStyle({}),new o.FootnoteReferenceStyle({}),new o.FootnoteText({}),new o.FootnoteTextChar({})]}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WORKAROUND=""},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(340)),n(r(345))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),s=r(3),o=r(18),i=r(0),a=r(341),u=r(342),c=r(343);class l extends i.XmlComponent{constructor(e="Table of Contents",t){super("w:sdt"),this.root.push(new c.StructuredDocumentTagProperties(e));const r=new u.StructuredDocumentTagContent,i=new n.Paragraph({children:[new s.Run({children:[new o.Begin(!0),new a.FieldInstruction(t),new o.Separate]})]});r.addChildElement(i);const l=new n.Paragraph({children:[new s.Run({children:[new o.End]})]});r.addChildElement(l),this.root.push(r)}}t.TableOfContents=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e={}){super("w:instrText"),this.properties=e,this.root.push(new o({space:n.SpaceType.PRESERVE}));let t="TOC";this.properties.captionLabel&&(t=`${t} \\a "${this.properties.captionLabel}"`),this.properties.entriesFromBookmark&&(t=`${t} \\b "${this.properties.entriesFromBookmark}"`),this.properties.captionLabelIncludingNumbers&&(t=`${t} \\c "${this.properties.captionLabelIncludingNumbers}"`),this.properties.sequenceAndPageNumbersSeparator&&(t=`${t} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`),this.properties.tcFieldIdentifier&&(t=`${t} \\f "${this.properties.tcFieldIdentifier}"`),this.properties.hyperlink&&(t=`${t} \\h`),this.properties.tcFieldLevelRange&&(t=`${t} \\l "${this.properties.tcFieldLevelRange}"`),this.properties.pageNumbersEntryLevelsRange&&(t=`${t} \\n "${this.properties.pageNumbersEntryLevelsRange}"`),this.properties.headingStyleRange&&(t=`${t} \\o "${this.properties.headingStyleRange}"`),this.properties.entryAndPageNumberSeparator&&(t=`${t} \\p "${this.properties.entryAndPageNumberSeparator}"`),this.properties.seqFieldIdentifierForPrefix&&(t=`${t} \\s "${this.properties.seqFieldIdentifierForPrefix}"`),this.properties.stylesWithLevels&&this.properties.stylesWithLevels.length&&(t=`${t} \\t "${this.properties.stylesWithLevels.map((e=>`${e.styleName},${e.level}`)).join(",")}"`),this.properties.useAppliedParagraphOutlineLevel&&(t=`${t} \\u`),this.properties.preserveTabInEntries&&(t=`${t} \\w`),this.properties.preserveNewLineInEntries&&(t=`${t} \\x`),this.properties.hideTabAndPageNumbersInWebView&&(t=`${t} \\z`),this.root.push(t)}}t.FieldInstruction=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlComponent{constructor(){super("w:sdtContent")}}t.StructuredDocumentTagContent=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(344);class o extends n.XmlComponent{constructor(e){super("w:sdtPr"),this.root.push(new s.Alias(e))}}t.StructuredDocumentTagProperties=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0);class s extends n.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={alias:"w:val"}}}class o extends n.XmlComponent{constructor(e){super("w:alias"),this.root.push(new s({alias:e}))}}t.Alias=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StyleLevel=class{constructor(e,t){this.styleName=e,this.level=t}}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(347)),n(r(348))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(136);class i extends n.XmlComponent{constructor(e){super("w:ins"),this.root.push(new o.ChangeAttributes({id:e.id,author:e.author,date:e.date})),this.addChildElement(new s.TextRun(e))}}t.InsertedTextRun=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),s=r(12),o=r(66),i=r(18),a=r(17),u=r(136),c=r(349),l=r(350);class h extends n.XmlComponent{constructor(e){super("w:del"),this.root.push(new u.ChangeAttributes({id:e.id,author:e.author,date:e.date})),this.deletedTextRunWrapper=new p(e),this.addChildElement(this.deletedTextRunWrapper)}break(){return this.deletedTextRunWrapper.break(),this}}t.DeletedTextRun=h;class p extends n.XmlComponent{constructor(e){if(super("w:r"),this.root.push(new s.RunProperties(e)),e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case a.PageNumber.CURRENT:this.root.push(new i.Begin),this.root.push(new c.DeletedPage),this.root.push(new i.Separate),this.root.push(new i.End);break;case a.PageNumber.TOTAL_PAGES:this.root.push(new i.Begin),this.root.push(new c.DeletedNumberOfPages),this.root.push(new i.Separate),this.root.push(new i.End);break;case a.PageNumber.TOTAL_PAGES_IN_SECTION:this.root.push(new i.Begin),this.root.push(new c.DeletedNumberOfPagesSection),this.root.push(new i.Separate),this.root.push(new i.End);break;default:this.root.push(new l.DeletedText(t))}else e.text&&this.root.push(new l.DeletedText(e.text))}break(){this.root.splice(1,0,new o.Break)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("PAGE")}}t.DeletedPage=i;class a extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("NUMPAGES")}}t.DeletedNumberOfPages=a;class u extends s.XmlComponent{constructor(){super("w:delInstrText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push("SECTIONPAGES")}}t.DeletedNumberOfPagesSection=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8),s=r(0);class o extends s.XmlAttributeComponent{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"}}}class i extends s.XmlComponent{constructor(e){super("w:delText"),this.root.push(new o({space:n.SpaceType.PRESERVE})),this.root.push(e)}}t.DeletedText=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(352))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){e.done?s(e.value):new r((function(t){t(e.value)})).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=r(353);class o{static toBuffer(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBase64String(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"base64",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBlob(e,t){return n(this,void 0,void 0,(function*(){const r=this.compiler.compile(e,t);return yield r.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}}o.compiler=new s.Compiler,t.Packer=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(137),s=r(354),o=r(356),i=r(357),a=r(358);t.Compiler=class{constructor(){this.formatter=new o.Formatter,this.imageReplacer=new i.ImageReplacer,this.numberingReplacer=new a.NumberingReplacer}compile(e,t){const r=new n,s=this.xmlifyFile(e,t);for(const e in s){if(!s[e])continue;const t=s[e];if(Array.isArray(t))for(const e of t)r.file(e.path,e.data);else r.file(t.path,t.data)}for(const t of e.Media.Array){const e=t.stream;r.file(`word/media/${t.fileName}`,e)}return r}xmlifyFile(e,t){e.verifyUpdateFields();const r=e.DocumentRelationships.RelationshipCount+1,n=s(this.formatter.format(e.Document,e),t),o=this.imageReplacer.getMediaData(n,e.Media);return{Relationships:{data:(()=>(o.forEach(((t,n)=>{e.DocumentRelationships.createRelationship(r+n,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`)})),s(this.formatter.format(e.DocumentRelationships,e),t)))(),path:"word/_rels/document.xml.rels"},Document:{data:(()=>{const t=this.imageReplacer.replace(n,o,r);return this.numberingReplacer.replace(t,e.Numbering.ConcreteNumbering)})(),path:"word/document.xml"},Styles:{data:s(this.formatter.format(e.Styles,e),t),path:"word/styles.xml"},Properties:{data:s(this.formatter.format(e.CoreProperties,e),{declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/core.xml"},Numbering:{data:s(this.formatter.format(e.Numbering,e),t),path:"word/numbering.xml"},FileRelationships:{data:s(this.formatter.format(e.FileRelationships,e),t),path:"_rels/.rels"},HeaderRelationships:e.Headers.map(((r,n)=>{const o=s(this.formatter.format(r.Header,e),t);return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:s(this.formatter.format(r.Relationships,e),t),path:`word/_rels/header${n+1}.xml.rels`}})),FooterRelationships:e.Footers.map(((r,n)=>{const o=s(this.formatter.format(r.Footer,e),t);return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:s(this.formatter.format(r.Relationships,e),t),path:`word/_rels/footer${n+1}.xml.rels`}})),Headers:e.Headers.map(((r,n)=>{const o=s(this.formatter.format(r.Header,e),t),i=this.imageReplacer.getMediaData(o,e.Media);return{data:this.imageReplacer.replace(o,i,0),path:`word/header${n+1}.xml`}})),Footers:e.Footers.map(((r,n)=>{const o=s(this.formatter.format(r.Footer,e),t),i=this.imageReplacer.getMediaData(o,e.Media);return{data:this.imageReplacer.replace(o,i,0),path:`word/footer${n+1}.xml`}})),ContentTypes:{data:s(this.formatter.format(e.ContentTypes,e),t),path:"[Content_Types].xml"},AppProperties:{data:s(this.formatter.format(e.AppProperties,e),t),path:"docProps/app.xml"},FootNotes:{data:s(this.formatter.format(e.FootNotes,e),t),path:"word/footnotes.xml"},Settings:{data:s(this.formatter.format(e.Settings,e),t),path:"word/settings.xml"}}}}},function(e,t,r){(function(t){var n=r(355),s=r(55).Stream;function o(e,t,r){r=r||0;var s,i,a=(s=t,new Array(r||0).join(s||"")),u=e;if("object"==typeof e&&(u=e[i=Object.keys(e)[0]])&&u._elem)return u._elem.name=i,u._elem.icount=r,u._elem.indent=t,u._elem.indents=a,u._elem.interrupt=u,u._elem;var c,l=[],h=[];function p(e){Object.keys(e).forEach((function(t){l.push(function(e,t){return e+'="'+n(t)+'"'}(t,e[t]))}))}switch(typeof u){case"object":if(null===u)break;u._attr&&p(u._attr),u._cdata&&h.push(("<![CDATA["+u._cdata).replace(/\]\]>/g,"]]]]><![CDATA[>")+"]]>"),u.forEach&&(c=!1,h.push(""),u.forEach((function(e){"object"==typeof e?"_attr"==Object.keys(e)[0]?p(e._attr):h.push(o(e,t,r+1)):(h.pop(),c=!0,h.push(n(e)))})),c||h.push(""));break;default:h.push(n(u))}return{name:i,interrupt:!1,attributes:l,content:h,icount:r,indents:a,indent:t}}function i(e,t,r){if("object"!=typeof t)return e(!1,t);var n=t.interrupt?1:t.content.length;function s(){for(;t.content.length;){var s=t.content.shift();if(void 0!==s){if(o(s))return;i(e,s)}}e(!1,(n>1?t.indents:"")+(t.name?"</"+t.name+">":"")+(t.indent&&!r?"\n":"")),r&&r()}function o(t){return!!t.interrupt&&(t.interrupt.append=e,t.interrupt.end=s,t.interrupt=!1,e(!0),!0)}if(e(!1,t.indents+(t.name?"<"+t.name:"")+(t.attributes.length?" "+t.attributes.join(" "):"")+(n?t.name?">":"":t.name?"/>":"")+(t.indent&&n>1?"\n":"")),!n)return e(!1,t.indent?"\n":"");o(t)||s()}e.exports=function(e,r){"object"!=typeof r&&(r={indent:r});var n,a,u=r.stream?new s:null,c="",l=!1,h=r.indent?!0===r.indent?"    ":r.indent:"",p=!0;function d(e){p?t.nextTick(e):e()}function f(e,t){if(void 0!==t&&(c+=t),e&&!l&&(u=u||new s,l=!0),e&&l){var r=c;d((function(){u.emit("data",r)})),c=""}}function m(e,t){i(f,o(e,h,h?1:0),t)}function g(){if(u){var e=c;d((function(){u.emit("data",e),u.emit("end"),u.readable=!1,u.emit("close")}))}}return d((function(){p=!1})),r.declaration&&(a={version:"1.0",encoding:(n=r.declaration).encoding||"UTF-8"},n.standalone&&(a.standalone=n.standalone),m({"?xml":{_attr:a}}),c=c.replace("/>","?>")),e&&e.forEach?e.forEach((function(t,r){var n;r+1===e.length&&(n=g),m(t,n)})):m(e,g),u?(u.readable=!0,u):c},e.exports.element=e.exports.Element=function(){var e=Array.prototype.slice.call(arguments),t={_elem:o(e),push:function(e){if(!this.append)throw new Error("not assigned to a parent!");var t=this,r=this._elem.indent;i(this.append,o(e,r,this._elem.icount+(r?1:0)),(function(){t.append(!0)}))},close:function(e){void 0!==e&&this.push(e),this.end&&this.end()}};return t}}).call(t,r(13))},function(e,t){var r={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};e.exports=function(e){return e&&e.replace?e.replace(/([&"<>'])/g,(function(e,t){return r[t]})):e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Formatter=class{format(e,t){const r=e.prepForXml(t);if(r)return r;throw Error("XMLComponent did not format correctly")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ImageReplacer=class{replace(e,t,r){let n=e;return t.forEach(((e,t)=>{n=n.replace(new RegExp(`{${e.fileName}}`,"g"),(r+t).toString())})),n}getMediaData(e,t){return t.Array.filter((t=>e.search(`{${t.fileName}}`)>0))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NumberingReplacer=class{replace(e,t){let r=e;for(const e of t)e.reference&&(r=r.replace(new RegExp(`{${e.reference}}`,"g"),e.id.toString()));return r}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(360))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){e.done?s(e.value):new r((function(t){t(e.value)})).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=r(137),o=r(25),i=r(44),a=r(47),u=r(48),c=r(46),l=r(0),h={"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header":"header","http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer":"footer","http://schemas.openxmlformats.org/officeDocument/2006/relationships/image":"image","http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink":"hyperlink"};var p;!function(e){e.HEADER="header",e.FOOTER="footer",e.IMAGE="image",e.HYPERLINK="hyperlink"}(p||(p={})),t.ImportDotx=class{extract(e){return n(this,void 0,void 0,(function*(){const t=yield s.loadAsync(e),r=yield t.files["word/document.xml"].async("text"),n=yield t.files["word/_rels/document.xml.rels"].async("text"),o=this.extractDocumentRefs(r),i=this.findReferenceFiles(n),a=new u.Media;return{headers:yield this.createHeaders(t,o,i,a,0),footers:yield this.createFooters(t,o,i,a,o.headers.length),currentRelationshipId:o.footers.length+o.headers.length,styles:yield t.files["word/styles.xml"].async("text"),titlePageIsDefined:this.checkIfTitlePageIsDefined(r),media:a}}))}createFooters(e,t,r,s,a){return n(this,void 0,void 0,(function*(){const u=t.footers.map(((t,u)=>n(this,void 0,void 0,(function*(){const n=r.find((e=>e.id===t.id));if(null===n||!n)throw new Error(`Can not find target file for id ${t.id}`);const c=yield e.files[`word/${n.target}`].async("text"),h=o.xml2js(c,{compact:!1,captureSpacesBetweenElements:!0});if(!h.elements)return;const p=h.elements.reduce(((e,t)=>"w:ftr"===t.name?t:e)),d=l.convertToXmlComponent(p),f=new i.FooterWrapper(s,a+u,d);return yield this.addRelationshipToWrapper(n,e,f,s),{type:t.type,footer:f}})))).filter((e=>!!e));return Promise.all(u)}))}createHeaders(e,t,r,s,i){return n(this,void 0,void 0,(function*(){const u=t.headers.map(((t,u)=>n(this,void 0,void 0,(function*(){const n=r.find((e=>e.id===t.id));if(null===n||!n)throw new Error(`Can not find target file for id ${t.id}`);const c=yield e.files[`word/${n.target}`].async("text"),h=o.xml2js(c,{compact:!1,captureSpacesBetweenElements:!0});if(!h.elements)return;const p=h.elements.reduce(((e,t)=>"w:hdr"===t.name?t:e)),d=l.convertToXmlComponent(p),f=new a.HeaderWrapper(s,i+u,d);return yield this.addRelationshipToWrapper(n,e,f,s),{type:t.type,header:f}})))).filter((e=>!!e));return Promise.all(u)}))}addRelationshipToWrapper(e,t,r,s){return n(this,void 0,void 0,(function*(){const n=t.files[`word/_rels/${e.target}.rels`];if(!n)return;const o=yield n.async("text"),i=this.findReferenceFiles(o).filter((e=>e.type===p.IMAGE)),a=this.findReferenceFiles(o).filter((e=>e.type===p.HYPERLINK));for(const e of i){const n=yield t.files[`word/${e.target}`].async("nodebuffer"),o=s.addMedia(n);r.Relationships.createRelationship(e.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${o.fileName}`)}for(const e of a)r.Relationships.createRelationship(e.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",e.target,c.TargetModeType.EXTERNAL)}))}findReferenceFiles(e){const t=o.xml2js(e,{compact:!0});return(Array.isArray(t.Relationships.Relationship)?t.Relationships.Relationship:[t.Relationships.Relationship]).map((e=>{if(void 0===e._attributes)throw Error("relationship element has no attributes");return{id:this.parseRefId(e._attributes.Id),type:h[e._attributes.Type],target:e._attributes.Target}})).filter((e=>null!==e.type))}extractDocumentRefs(e){const t=o.xml2js(e,{compact:!0})["w:document"]["w:body"]["w:sectPr"],r=t["w:headerReference"];let n;n=void 0===r?[]:Array.isArray(r)?r:[r];const s=n.map((e=>{if(void 0===e._attributes)throw Error("header referecne element has no attributes");return{type:e._attributes["w:type"],id:this.parseRefId(e._attributes["r:id"])}})),i=t["w:footerReference"];let a;return a=void 0===i?[]:Array.isArray(i)?i:[i],{headers:s,footers:a.map((e=>{if(void 0===e._attributes)throw Error("footer referecne element has no attributes");return{type:e._attributes["w:type"],id:this.parseRefId(e._attributes["r:id"])}}))}}checkIfTitlePageIsDefined(e){return void 0!==o.xml2js(e,{compact:!0})["w:document"]["w:body"]["w:sectPr"]["w:titlePg"]}parseRefId(e){const t=/^rId(\d+)$/.exec(e);if(null===t)throw new Error("Invalid ref id");return parseInt(t[1],10)}}}])},e.exports=t()},190:e=>{self,e.exports=(()=>{"use strict";var e={607:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parseQuillDelta=void 0;let r=!1;function n(e,t){e.insert.video||e.insert.image?function(e,t){t.paragraphs.push({embed:e.insert}),r=!1,s(t)}(e,t):e.insert.formula?function(e,t){var r;0===t.paragraphs.length&&s(t),null===(r=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===r||r.push({formula:e.insert.formula,attributes:e.attributes})}(e,t):"\n"===e.insert?function(e,t){e.attributes&&(t.paragraphs[t.paragraphs.length-1].attributes=e.attributes,"ordered"===e.attributes.list?r||(t.setup.numberedLists++,r=!0):r=!1),s(t)}(e,t):function(e,t){if(0===t.paragraphs.length&&s(t),e.insert.match(/\n/)){const n=e.insert.split(/(\n)/);for(const e of n)"\n"===e?(s(t),r=!1):o(e,t)}else o(e.insert,t,e.attributes)}(e,t)}function s(e){e.paragraphs.push({textRuns:[]})}function o(e,t,r){var n,s;r?(null===(n=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===n||n.push({text:e,attributes:r}),r.link&&t.setup.hyperlinks.push({text:e,link:r.link})):null===(s=t.paragraphs[t.paragraphs.length-1].textRuns)||void 0===s||s.push({text:e})}t.parseQuillDelta=function(e){r=!1;const t={paragraphs:[],setup:{numberedLists:0,hyperlinks:[]}};for(const r of e.ops)n(r,t);return t}}},t={};return function r(n){if(t[n])return t[n].exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}(607)})()},829:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultNumbering=t.customLevels=t.defaultStyles=void 0;const n=r(50);t.defaultStyles=[{id:"normal",name:"Normal",next:"normal",basedOn:"normal",quickFormat:!0,run:{size:24},paragraph:{spacing:{line:480,before:0,after:0}}},{id:"header_1",name:"Heading 1",next:"normal",quickFormat:!0,run:{font:"Calibri",size:30,bold:!0},paragraph:{spacing:{before:300,after:200}}},{id:"header_2",name:"Heading 2",basedOn:"normal",next:"normal",quickFormat:!0,run:{font:"Calibri",size:26,bold:!0},paragraph:{spacing:{before:200,after:100}}},{id:"list_paragraph",name:"List Paragraph",basedOn:"normal",quickFormat:!0,run:{size:24}},{id:"code_block",name:"Code Block",basedOn:"normal",quickFormat:!0,run:{size:24,font:"Courier New"},paragraph:{indent:{left:720,right:720}}},{id:"block_quote",name:"Block Quote",basedOn:"normal",quickFormat:!0,run:{italics:!0},paragraph:{indent:{left:540},border:{left:{size:12,space:28,color:"333333",value:"single"}}}}],t.customLevels=[{level:0,format:"decimal",text:"%1.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:720,hanging:360}}}},{level:1,format:"lowerLetter",text:"%2.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:1440,hanging:360}}}},{level:2,format:"lowerRoman",text:"%3.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2160,hanging:360}}}},{level:3,format:"decimal",text:"%4.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:2880,hanging:360}}}},{level:4,format:"lowerLetter",text:"%5.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:3600,hanging:360}}}},{level:3,format:"lowerRoman",text:"%5.",alignment:n.AlignmentType.LEFT,style:{paragraph:{indent:{left:4320,hanging:360}}}}],t.defaultNumbering={config:[{reference:"default-numbering",levels:t.customLevels}]}},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.generateWord=void 0;const a=r(190),u=o(r(50)),c=r(50),l=r(829);let h=0,p=-1;function d(e,t){var r,n,s,o;let i=0;const a=[];for(const l of e){if(null===(r=l.embed)||void 0===r?void 0:r.image){const e=c.Media.addImage(t,l.embed.image);a.push(new c.Paragraph(e))}else if(null===(n=l.embed)||void 0===n?void 0:n.video){const e=(u=l.embed.video,new c.TextRun({text:u}));a.push(new c.Paragraph({children:[e]}))}else l.textRuns&&(i>0&&"ordered"===(null===(s=l.attributes)||void 0===s?void 0:s.list)&&("ordered"===(null===(o=e[i-1].attributes)||void 0===o?void 0:o.list)?p=p:p++),a.push(f(l)));i++}var u;return a}function f(e){var t,r,n,s,o,i,a,l,h,d;const f=[];for(const t of e.textRuns)t.formula?f.push((g=t.formula,new c.TextRun({text:g}))):t.text&&f.push(m(t));var g;return new c.Paragraph({children:f,heading:1===(null===(t=e.attributes)||void 0===t?void 0:t.header)?u.HeadingLevel.HEADING_1:2===(null===(r=e.attributes)||void 0===r?void 0:r.header)?u.HeadingLevel.HEADING_2:void 0,bullet:"bullet"===(null===(n=e.attributes)||void 0===n?void 0:n.list)?{level:e.attributes.indent?e.attributes.indent:0}:void 0,numbering:"ordered"===(null===(s=e.attributes)||void 0===s?void 0:s.list)?{reference:`numbered_${p}`,level:e.attributes.indent?e.attributes.indent:0}:void 0,alignment:"left"===(null===(o=e.attributes)||void 0===o?void 0:o.align)?c.AlignmentType.LEFT:"center"===(null===(i=e.attributes)||void 0===i?void 0:i.align)?c.AlignmentType.CENTER:"right"===(null===(a=e.attributes)||void 0===a?void 0:a.align)?c.AlignmentType.RIGHT:"justify"===(null===(l=e.attributes)||void 0===l?void 0:l.align)?c.AlignmentType.JUSTIFIED:void 0,style:(null===(h=e.attributes)||void 0===h?void 0:h["code-block"])?"code_block":(null===(d=e.attributes)||void 0===d?void 0:d.blockquote)?"block_quote":void 0})}function m(e,t){var r,n,s,o,i,a,u,l,p,d,f,m,g;let w;return(null===(r=e.attributes)||void 0===r?void 0:r.link)?(w=new c.HyperlinkRef(`link${h}`),h++):w=new c.TextRun({text:e.text,bold:!!(null===(n=e.attributes)||void 0===n?void 0:n.bold),italics:!!(null===(s=e.attributes)||void 0===s?void 0:s.italic),subScript:"sub"===(null===(o=e.attributes)||void 0===o?void 0:o.script),superScript:"super"===(null===(i=e.attributes)||void 0===i?void 0:i.script),strike:!!(null===(a=e.attributes)||void 0===a?void 0:a.strike),underline:(null===(u=e.attributes)||void 0===u?void 0:u.underline)?{type:c.UnderlineType.SINGLE,color:void 0}:void 0,color:(null===(l=e.attributes)||void 0===l?void 0:l.color)?null===(p=e.attributes)||void 0===p?void 0:p.color.slice(1):void 0,size:"huge"===(null===(d=e.attributes)||void 0===d?void 0:d.size)?36:"large"===(null===(f=e.attributes)||void 0===f?void 0:f.size)?32:"small"===(null===(m=e.attributes)||void 0===m?void 0:m.size)?20:void 0,highlight:(null===(g=e.attributes)||void 0===g?void 0:g.background)?"yellow":void 0}),w}t.generateWord=function(e){return i(this,void 0,void 0,(function*(){let t;console.log("testing symlink"),h=0,p=-1;const r=[],n=[];if(e.ops){const t=a.parseQuillDelta(e);n.push(t)}else if(Array.isArray(e))for(const t of e)n.push(t);else{if(!e.paragraphs)throw new Error("Please provide a raw Quill Delta, a parsed Quill delta, or an Array of parsed Quill deltas. See QuillTodocx readme.");n.push(e)}t=function(e){let t,r;return e.setup.hyperlinks.length>0&&(t=function(e){let t={},r=0;for(const n of e){const e={link:n.link,text:n.text,type:c.HyperlinkType.EXTERNAL};t=Object.assign(Object.assign({},t),{[`link${r}`]:e}),r++}return t}(e.setup.hyperlinks)),e.setup.numberedLists>0&&(r=function(e){let t=[],r=0;for(;r<e;){const e={reference:`numbered_${r}`,levels:l.customLevels};t.push(e),r++}return{config:t}}(e.setup.numberedLists)),new u.Document({styles:{paragraphStyles:l.defaultStyles},numbering:r,hyperlinks:t})}(n[0]);for(const e of n)r.push(d(e.paragraphs,t));for(const e of r)t.addSection({children:e});return yield c.Packer.toBlob(t)}))}}},t={},function r(n){if(t[n])return t[n].exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(607);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,